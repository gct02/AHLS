-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_backprop_Pipeline_RELU_loop11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    activations2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    activations2_ce0 : OUT STD_LOGIC;
    activations2_we0 : OUT STD_LOGIC;
    activations2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    activations2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    activations2_ce1 : OUT STD_LOGIC;
    activations2_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dactivations2_ce0 : OUT STD_LOGIC;
    dactivations2_we0 : OUT STD_LOGIC;
    dactivations2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_986_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_ce : OUT STD_LOGIC;
    grp_fu_994_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_994_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_ce : OUT STD_LOGIC;
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC;
    grp_fu_998_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_998_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_998_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_998_p_ce : OUT STD_LOGIC;
    grp_fu_1002_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1002_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1002_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1002_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_backprop_Pipeline_RELU_loop11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln36_fu_116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_151_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal activations2_addr_reg_156 : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter14_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter15_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter16_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter17_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter19_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter20_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter21_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter22_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter23_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter24_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter25_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter26_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter27_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter28_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_addr_reg_156_pp0_iter29_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_load_reg_162 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations2_load_reg_162_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal activations2_load_reg_162_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal activations2_load_reg_162_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln39_2_fu_135_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i1_reg_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_179 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i1_reg_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i1_reg_189 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_16_fu_36 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln36_fu_110_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln39_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_fu_129_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_ddiv_64ns_64ns_64_14_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dexp_64ns_64ns_64_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component backprop_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter29_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_16_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_fu_104_p2 = ap_const_lv1_0))) then 
                    i_16_fu_36 <= add_ln36_fu_110_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_16_fu_36 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                activations2_addr_reg_156 <= zext_ln36_fu_116_p1(6 - 1 downto 0);
                activations2_addr_reg_156_pp0_iter1_reg <= activations2_addr_reg_156;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln36_reg_151(6 downto 0) <= zext_ln36_fu_116_p1(6 downto 0);
                    zext_ln36_reg_151_pp0_iter1_reg(6 downto 0) <= zext_ln36_reg_151(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                activations2_addr_reg_156_pp0_iter10_reg <= activations2_addr_reg_156_pp0_iter9_reg;
                activations2_addr_reg_156_pp0_iter11_reg <= activations2_addr_reg_156_pp0_iter10_reg;
                activations2_addr_reg_156_pp0_iter12_reg <= activations2_addr_reg_156_pp0_iter11_reg;
                activations2_addr_reg_156_pp0_iter13_reg <= activations2_addr_reg_156_pp0_iter12_reg;
                activations2_addr_reg_156_pp0_iter14_reg <= activations2_addr_reg_156_pp0_iter13_reg;
                activations2_addr_reg_156_pp0_iter15_reg <= activations2_addr_reg_156_pp0_iter14_reg;
                activations2_addr_reg_156_pp0_iter16_reg <= activations2_addr_reg_156_pp0_iter15_reg;
                activations2_addr_reg_156_pp0_iter17_reg <= activations2_addr_reg_156_pp0_iter16_reg;
                activations2_addr_reg_156_pp0_iter18_reg <= activations2_addr_reg_156_pp0_iter17_reg;
                activations2_addr_reg_156_pp0_iter19_reg <= activations2_addr_reg_156_pp0_iter18_reg;
                activations2_addr_reg_156_pp0_iter20_reg <= activations2_addr_reg_156_pp0_iter19_reg;
                activations2_addr_reg_156_pp0_iter21_reg <= activations2_addr_reg_156_pp0_iter20_reg;
                activations2_addr_reg_156_pp0_iter22_reg <= activations2_addr_reg_156_pp0_iter21_reg;
                activations2_addr_reg_156_pp0_iter23_reg <= activations2_addr_reg_156_pp0_iter22_reg;
                activations2_addr_reg_156_pp0_iter24_reg <= activations2_addr_reg_156_pp0_iter23_reg;
                activations2_addr_reg_156_pp0_iter25_reg <= activations2_addr_reg_156_pp0_iter24_reg;
                activations2_addr_reg_156_pp0_iter26_reg <= activations2_addr_reg_156_pp0_iter25_reg;
                activations2_addr_reg_156_pp0_iter27_reg <= activations2_addr_reg_156_pp0_iter26_reg;
                activations2_addr_reg_156_pp0_iter28_reg <= activations2_addr_reg_156_pp0_iter27_reg;
                activations2_addr_reg_156_pp0_iter29_reg <= activations2_addr_reg_156_pp0_iter28_reg;
                activations2_addr_reg_156_pp0_iter2_reg <= activations2_addr_reg_156_pp0_iter1_reg;
                activations2_addr_reg_156_pp0_iter3_reg <= activations2_addr_reg_156_pp0_iter2_reg;
                activations2_addr_reg_156_pp0_iter4_reg <= activations2_addr_reg_156_pp0_iter3_reg;
                activations2_addr_reg_156_pp0_iter5_reg <= activations2_addr_reg_156_pp0_iter4_reg;
                activations2_addr_reg_156_pp0_iter6_reg <= activations2_addr_reg_156_pp0_iter5_reg;
                activations2_addr_reg_156_pp0_iter7_reg <= activations2_addr_reg_156_pp0_iter6_reg;
                activations2_addr_reg_156_pp0_iter8_reg <= activations2_addr_reg_156_pp0_iter7_reg;
                activations2_addr_reg_156_pp0_iter9_reg <= activations2_addr_reg_156_pp0_iter8_reg;
                activations2_load_reg_162_pp0_iter2_reg <= activations2_load_reg_162;
                activations2_load_reg_162_pp0_iter3_reg <= activations2_load_reg_162_pp0_iter2_reg;
                activations2_load_reg_162_pp0_iter4_reg <= activations2_load_reg_162_pp0_iter3_reg;
                add_i1_reg_184 <= grp_fu_994_p_dout0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                div_i1_reg_189 <= grp_fu_998_p_dout0;
                sub_i1_reg_174 <= grp_fu_986_p_dout0;
                tmp_1_reg_179 <= grp_fu_1002_p_dout0;
                    zext_ln36_reg_151_pp0_iter2_reg(6 downto 0) <= zext_ln36_reg_151_pp0_iter1_reg(6 downto 0);
                    zext_ln36_reg_151_pp0_iter3_reg(6 downto 0) <= zext_ln36_reg_151_pp0_iter2_reg(6 downto 0);
                    zext_ln36_reg_151_pp0_iter4_reg(6 downto 0) <= zext_ln36_reg_151_pp0_iter3_reg(6 downto 0);
                    zext_ln36_reg_151_pp0_iter5_reg(6 downto 0) <= zext_ln36_reg_151_pp0_iter4_reg(6 downto 0);
                    zext_ln36_reg_151_pp0_iter6_reg(6 downto 0) <= zext_ln36_reg_151_pp0_iter5_reg(6 downto 0);
                    zext_ln36_reg_151_pp0_iter7_reg(6 downto 0) <= zext_ln36_reg_151_pp0_iter6_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                activations2_load_reg_162 <= activations2_q1;
            end if;
        end if;
    end process;
    zext_ln36_reg_151(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter2_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter3_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter4_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter5_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter6_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_151_pp0_iter7_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    activations2_address0 <= activations2_addr_reg_156_pp0_iter29_reg;
    activations2_address1 <= zext_ln36_fu_116_p1(6 - 1 downto 0);

    activations2_ce0_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            activations2_ce0 <= ap_const_logic_1;
        else 
            activations2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activations2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            activations2_ce1 <= ap_const_logic_1;
        else 
            activations2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    activations2_d0 <= div_i1_reg_189;

    activations2_we0_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            activations2_we0 <= ap_const_logic_1;
        else 
            activations2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln36_fu_110_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln36_fu_104_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_104_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter29_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter29_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_16_fu_36, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i <= i_16_fu_36;
        end if; 
    end process;

    bitcast_ln39_2_fu_135_p1 <= xor_ln39_fu_129_p2;
    bitcast_ln39_fu_126_p1 <= activations2_load_reg_162;
    dactivations2_address0 <= zext_ln36_reg_151_pp0_iter7_reg(6 - 1 downto 0);

    dactivations2_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dactivations2_ce0 <= ap_const_logic_1;
        else 
            dactivations2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dactivations2_d0 <= grp_fu_990_p_dout0;

    dactivations2_we0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dactivations2_we0 <= ap_const_logic_1;
        else 
            dactivations2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1002_p_ce <= ap_const_logic_1;
    grp_fu_1002_p_din0 <= ap_const_lv64_0;
    grp_fu_1002_p_din1 <= bitcast_ln39_2_fu_135_p1;
    grp_fu_986_p_ce <= ap_const_logic_1;
    grp_fu_986_p_din0 <= ap_const_lv64_3FF0000000000000;
    grp_fu_986_p_din1 <= activations2_q1;
    grp_fu_986_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_990_p_ce <= ap_const_logic_1;
    grp_fu_990_p_din0 <= activations2_load_reg_162_pp0_iter4_reg;
    grp_fu_990_p_din1 <= sub_i1_reg_174;
    grp_fu_994_p_ce <= ap_const_logic_1;
    grp_fu_994_p_din0 <= tmp_1_reg_179;
    grp_fu_994_p_din1 <= ap_const_lv64_3FF0000000000000;
    grp_fu_994_p_opcode <= ap_const_lv2_0;
    grp_fu_998_p_ce <= ap_const_logic_1;
    grp_fu_998_p_din0 <= ap_const_lv64_3FF0000000000000;
    grp_fu_998_p_din1 <= add_i1_reg_184;
    icmp_ln36_fu_104_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv7_40) else "0";
    xor_ln39_fu_129_p2 <= (bitcast_ln39_fu_126_p1 xor ap_const_lv64_8000000000000000);
    zext_ln36_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
