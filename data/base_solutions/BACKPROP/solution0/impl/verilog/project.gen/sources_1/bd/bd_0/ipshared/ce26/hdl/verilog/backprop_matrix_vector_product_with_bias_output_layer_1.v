// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_matrix_vector_product_with_bias_output_layer_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        biases3_address0,
        biases3_ce0,
        biases3_q0,
        weights3_address0,
        weights3_ce0,
        weights3_q0,
        p_read,
        p_read1,
        p_read2,
        input_activations_address0,
        input_activations_ce0,
        input_activations_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        grp_fu_990_p_din0,
        grp_fu_990_p_din1,
        grp_fu_990_p_opcode,
        grp_fu_990_p_dout0,
        grp_fu_990_p_ce,
        grp_fu_994_p_din0,
        grp_fu_994_p_din1,
        grp_fu_994_p_dout0,
        grp_fu_994_p_ce
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] biases3_address0;
output   biases3_ce0;
input  [63:0] biases3_q0;
output  [7:0] weights3_address0;
output   weights3_ce0;
input  [63:0] weights3_q0;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
output  [5:0] input_activations_address0;
output   input_activations_ce0;
input  [63:0] input_activations_q0;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] grp_fu_990_p_din0;
output  [63:0] grp_fu_990_p_din1;
output  [0:0] grp_fu_990_p_opcode;
input  [63:0] grp_fu_990_p_dout0;
output   grp_fu_990_p_ce;
output  [63:0] grp_fu_994_p_din0;
output  [63:0] grp_fu_994_p_din1;
input  [63:0] grp_fu_994_p_dout0;
output   grp_fu_994_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights3_ce0;
reg input_activations_ce0;
reg[63:0] ap_return_0;
reg[63:0] ap_return_1;
reg[63:0] ap_return_2;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] j_6_reg_302;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln96_fu_193_p2;
reg   [1:0] add_ln96_reg_309;
wire   [7:0] tmp_fu_199_p3;
reg   [7:0] tmp_reg_314;
wire   [6:0] add_ln100_fu_225_p2;
reg   [6:0] add_ln100_reg_337;
wire    ap_CS_fsm_state3;
wire   [63:0] bitcast_ln102_fu_269_p1;
reg   [63:0] mul8_reg_362;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    grp_add_bias_to_activations_1_fu_145_ap_start;
wire    grp_add_bias_to_activations_1_fu_145_ap_done;
wire    grp_add_bias_to_activations_1_fu_145_ap_idle;
wire    grp_add_bias_to_activations_1_fu_145_ap_ready;
wire   [1:0] grp_add_bias_to_activations_1_fu_145_biases3_address0;
wire    grp_add_bias_to_activations_1_fu_145_biases3_ce0;
wire   [63:0] grp_add_bias_to_activations_1_fu_145_ap_return_0;
wire   [63:0] grp_add_bias_to_activations_1_fu_145_ap_return_1;
wire   [63:0] grp_add_bias_to_activations_1_fu_145_ap_return_2;
wire   [63:0] grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0;
wire   [63:0] grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1;
wire   [0:0] grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode;
wire    grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce;
reg   [6:0] i_reg_122;
wire   [0:0] icmp_ln96_fu_187_p2;
reg   [63:0] add113_reg_133;
reg    grp_add_bias_to_activations_1_fu_145_ap_start_reg;
wire    ap_CS_fsm_state12;
wire   [63:0] zext_ln102_fu_245_p1;
wire   [0:0] icmp_ln100_fu_219_p2;
wire   [63:0] zext_ln100_fu_231_p1;
reg   [1:0] j_fu_62;
reg   [63:0] activations2_0_fu_66;
reg   [63:0] activations12_0_fu_70;
reg   [63:0] activations_0_fu_74;
reg   [63:0] grp_fu_154_p0;
reg   [63:0] grp_fu_154_p1;
wire    ap_CS_fsm_state8;
wire   [7:0] zext_ln100_1_fu_236_p1;
wire   [7:0] add_ln102_fu_240_p2;
reg   [1:0] grp_fu_154_opcode;
reg    grp_fu_154_ce;
reg   [63:0] ap_return_0_preg;
reg   [63:0] ap_return_1_preg;
reg   [63:0] ap_return_2_preg;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 grp_add_bias_to_activations_1_fu_145_ap_start_reg = 1'b0;
#0 j_fu_62 = 2'd0;
#0 activations2_0_fu_66 = 64'd0;
#0 activations12_0_fu_70 = 64'd0;
#0 activations_0_fu_74 = 64'd0;
#0 ap_return_0_preg = 64'd0;
#0 ap_return_1_preg = 64'd0;
#0 ap_return_2_preg = 64'd0;
end

backprop_add_bias_to_activations_1 grp_add_bias_to_activations_1_fu_145(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_add_bias_to_activations_1_fu_145_ap_start),
    .ap_done(grp_add_bias_to_activations_1_fu_145_ap_done),
    .ap_idle(grp_add_bias_to_activations_1_fu_145_ap_idle),
    .ap_ready(grp_add_bias_to_activations_1_fu_145_ap_ready),
    .biases3_address0(grp_add_bias_to_activations_1_fu_145_biases3_address0),
    .biases3_ce0(grp_add_bias_to_activations_1_fu_145_biases3_ce0),
    .biases3_q0(biases3_q0),
    .p_read(activations_0_fu_74),
    .p_read1(activations12_0_fu_70),
    .p_read2(activations2_0_fu_66),
    .ap_return_0(grp_add_bias_to_activations_1_fu_145_ap_return_0),
    .ap_return_1(grp_add_bias_to_activations_1_fu_145_ap_return_1),
    .ap_return_2(grp_add_bias_to_activations_1_fu_145_ap_return_2),
    .grp_fu_154_p_din0(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0),
    .grp_fu_154_p_din1(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1),
    .grp_fu_154_p_opcode(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode),
    .grp_fu_154_p_dout0(grp_fu_990_p_dout0),
    .grp_fu_154_p_ce(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
            ap_return_0_preg <= grp_add_bias_to_activations_1_fu_145_ap_return_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
            ap_return_1_preg <= grp_add_bias_to_activations_1_fu_145_ap_return_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
            ap_return_2_preg <= grp_add_bias_to_activations_1_fu_145_ap_return_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_add_bias_to_activations_1_fu_145_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln96_fu_187_p2 == 1'd1))) begin
            grp_add_bias_to_activations_1_fu_145_ap_start_reg <= 1'b1;
        end else if ((grp_add_bias_to_activations_1_fu_145_ap_ready == 1'b1)) begin
            grp_add_bias_to_activations_1_fu_145_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        activations12_0_fu_70 <= p_read1;
    end else if (((j_6_reg_302 == 2'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln100_fu_219_p2 == 1'd1))) begin
        activations12_0_fu_70 <= add113_reg_133;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        activations2_0_fu_66 <= p_read2;
    end else if ((~(j_6_reg_302 == 2'd1) & ~(j_6_reg_302 == 2'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln100_fu_219_p2 == 1'd1))) begin
        activations2_0_fu_66 <= add113_reg_133;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        activations_0_fu_74 <= p_read;
    end else if (((j_6_reg_302 == 2'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln100_fu_219_p2 == 1'd1))) begin
        activations_0_fu_74 <= add113_reg_133;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln96_fu_187_p2 == 1'd0))) begin
        add113_reg_133 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        add113_reg_133 <= grp_fu_990_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln96_fu_187_p2 == 1'd0))) begin
        i_reg_122 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_122 <= add_ln100_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_62 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln100_fu_219_p2 == 1'd1))) begin
        j_fu_62 <= add_ln96_reg_309;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln100_reg_337 <= add_ln100_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln96_reg_309 <= add_ln96_fu_193_p2;
        j_6_reg_302 <= j_fu_62;
        tmp_reg_314[7 : 6] <= tmp_fu_199_p3[7 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul8_reg_362 <= grp_fu_994_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((grp_add_bias_to_activations_1_fu_145_ap_done == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
        ap_return_0 = grp_add_bias_to_activations_1_fu_145_ap_return_0;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
        ap_return_1 = grp_add_bias_to_activations_1_fu_145_ap_return_1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
        ap_return_2 = grp_add_bias_to_activations_1_fu_145_ap_return_2;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_154_ce = grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce;
    end else begin
        grp_fu_154_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_154_opcode = grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_154_opcode = 2'd0;
    end else begin
        grp_fu_154_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_154_p0 = grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_154_p0 = add113_reg_133;
    end else begin
        grp_fu_154_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_154_p1 = grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_154_p1 = mul8_reg_362;
    end else begin
        grp_fu_154_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_activations_ce0 = 1'b1;
    end else begin
        input_activations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights3_ce0 = 1'b1;
    end else begin
        weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln96_fu_187_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln100_fu_219_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_add_bias_to_activations_1_fu_145_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_225_p2 = (i_reg_122 + 7'd1);

assign add_ln102_fu_240_p2 = (zext_ln100_1_fu_236_p1 + tmp_reg_314);

assign add_ln96_fu_193_p2 = (j_fu_62 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign biases3_address0 = grp_add_bias_to_activations_1_fu_145_biases3_address0;

assign biases3_ce0 = grp_add_bias_to_activations_1_fu_145_biases3_ce0;

assign bitcast_ln102_fu_269_p1 = weights3_q0;

assign grp_add_bias_to_activations_1_fu_145_ap_start = grp_add_bias_to_activations_1_fu_145_ap_start_reg;

assign grp_fu_990_p_ce = grp_fu_154_ce;

assign grp_fu_990_p_din0 = grp_fu_154_p0;

assign grp_fu_990_p_din1 = grp_fu_154_p1;

assign grp_fu_990_p_opcode = grp_fu_154_opcode;

assign grp_fu_994_p_ce = 1'b1;

assign grp_fu_994_p_din0 = bitcast_ln102_fu_269_p1;

assign grp_fu_994_p_din1 = input_activations_q0;

assign icmp_ln100_fu_219_p2 = ((i_reg_122 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_187_p2 = ((j_fu_62 == 2'd3) ? 1'b1 : 1'b0);

assign input_activations_address0 = zext_ln100_fu_231_p1;

assign tmp_fu_199_p3 = {{j_fu_62}, {6'd0}};

assign weights3_address0 = zext_ln102_fu_245_p1;

assign zext_ln100_1_fu_236_p1 = i_reg_122;

assign zext_ln100_fu_231_p1 = i_reg_122;

assign zext_ln102_fu_245_p1 = add_ln102_fu_240_p2;

always @ (posedge ap_clk) begin
    tmp_reg_314[5:0] <= 6'b000000;
end

endmodule //backprop_matrix_vector_product_with_bias_output_layer_1
