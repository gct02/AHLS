// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_get_delta_matrix_weights3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        delta_weights3_address0,
        delta_weights3_ce0,
        delta_weights3_we0,
        delta_weights3_d0,
        p_read,
        p_read1,
        p_read2,
        last_activations_address0,
        last_activations_ce0,
        last_activations_q0,
        grp_fu_994_p_din0,
        grp_fu_994_p_din1,
        grp_fu_994_p_dout0,
        grp_fu_994_p_ce
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] delta_weights3_address0;
output   delta_weights3_ce0;
output   delta_weights3_we0;
output  [63:0] delta_weights3_d0;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
output  [5:0] last_activations_address0;
output   last_activations_ce0;
input  [63:0] last_activations_q0;
output  [63:0] grp_fu_994_p_din0;
output  [63:0] grp_fu_994_p_din1;
input  [63:0] grp_fu_994_p_dout0;
output   grp_fu_994_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg delta_weights3_ce0;
reg delta_weights3_we0;
reg last_activations_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln125_fu_128_p2;
reg   [6:0] add_ln125_reg_226;
wire    ap_CS_fsm_state2;
reg   [63:0] last_activations_load_reg_236;
wire    ap_CS_fsm_state3;
wire   [7:0] empty_52_fu_153_p2;
reg   [7:0] empty_52_reg_241;
wire   [1:0] add_ln128_fu_165_p2;
reg   [1:0] add_ln128_reg_249;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_fu_175_p5;
wire   [7:0] add_ln130_fu_185_p2;
reg   [7:0] add_ln130_reg_259;
reg   [1:0] j_reg_98;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln125_fu_134_p1;
wire   [0:0] icmp_ln125_fu_122_p2;
wire   [63:0] zext_ln130_fu_194_p1;
reg   [6:0] i_fu_50;
wire   [0:0] icmp_ln128_fu_159_p2;
wire   [5:0] empty_fu_142_p1;
wire   [7:0] p_shl_fu_145_p3;
wire   [7:0] zext_ln125_1_fu_139_p1;
wire   [7:0] zext_ln128_fu_171_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 i_fu_50 = 7'd0;
end

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U79(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(j_reg_98),
    .dout(tmp_fu_175_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_50 <= 7'd0;
    end else if (((icmp_ln128_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_50 <= add_ln125_reg_226;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_98 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_98 <= add_ln128_reg_249;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln125_reg_226 <= add_ln125_fu_128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln128_reg_249 <= add_ln128_fu_165_p2;
        add_ln130_reg_259 <= add_ln130_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_52_reg_241 <= empty_52_fu_153_p2;
        last_activations_load_reg_236 <= last_activations_q0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln125_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln125_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        delta_weights3_ce0 = 1'b1;
    end else begin
        delta_weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        delta_weights3_we0 = 1'b1;
    end else begin
        delta_weights3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        last_activations_ce0 = 1'b1;
    end else begin
        last_activations_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln125_fu_122_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln128_fu_159_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln125_fu_128_p2 = (i_fu_50 + 7'd1);

assign add_ln128_fu_165_p2 = (j_reg_98 + 2'd1);

assign add_ln130_fu_185_p2 = (zext_ln128_fu_171_p1 + empty_52_reg_241);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign delta_weights3_address0 = zext_ln130_fu_194_p1;

assign delta_weights3_d0 = grp_fu_994_p_dout0;

assign empty_52_fu_153_p2 = (p_shl_fu_145_p3 - zext_ln125_1_fu_139_p1);

assign empty_fu_142_p1 = i_fu_50[5:0];

assign grp_fu_994_p_ce = 1'b1;

assign grp_fu_994_p_din0 = last_activations_load_reg_236;

assign grp_fu_994_p_din1 = tmp_fu_175_p5;

assign icmp_ln125_fu_122_p2 = ((i_fu_50 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_159_p2 = ((j_reg_98 == 2'd3) ? 1'b1 : 1'b0);

assign last_activations_address0 = zext_ln125_fu_134_p1;

assign p_shl_fu_145_p3 = {{empty_fu_142_p1}, {2'd0}};

assign zext_ln125_1_fu_139_p1 = i_fu_50;

assign zext_ln125_fu_134_p1 = i_fu_50;

assign zext_ln128_fu_171_p1 = j_reg_98;

assign zext_ln130_fu_194_p1 = add_ln130_reg_259;

endmodule //backprop_get_delta_matrix_weights3
