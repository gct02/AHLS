// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_take_difference_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        training_targets_address0,
        training_targets_ce0,
        training_targets_q0,
        p_read3,
        p_read14,
        p_read25,
        p_read6,
        p_read7,
        p_read8,
        idx,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        grp_fu_990_p_din0,
        grp_fu_990_p_din1,
        grp_fu_990_p_opcode,
        grp_fu_990_p_dout0,
        grp_fu_990_p_ce,
        grp_fu_994_p_din0,
        grp_fu_994_p_din1,
        grp_fu_994_p_dout0,
        grp_fu_994_p_ce
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
output  [8:0] training_targets_address0;
output   training_targets_ce0;
input  [63:0] training_targets_q0;
input  [63:0] p_read3;
input  [63:0] p_read14;
input  [63:0] p_read25;
input  [63:0] p_read6;
input  [63:0] p_read7;
input  [63:0] p_read8;
input  [8:0] idx;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] grp_fu_990_p_din0;
output  [63:0] grp_fu_990_p_din1;
output  [0:0] grp_fu_990_p_opcode;
input  [63:0] grp_fu_990_p_dout0;
output   grp_fu_990_p_ce;
output  [63:0] grp_fu_994_p_din0;
output  [63:0] grp_fu_994_p_din1;
input  [63:0] grp_fu_994_p_dout0;
output   grp_fu_994_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg training_targets_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] i_24_reg_448;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln114_fu_204_p2;
reg   [1:0] add_ln114_reg_455;
wire   [63:0] tmp_fu_214_p5;
reg   [63:0] tmp_reg_460;
wire   [63:0] tmp_1_fu_233_p5;
reg   [63:0] tmp_1_reg_470;
wire   [63:0] bitcast_ln116_fu_299_p1;
reg   [63:0] sub_reg_480;
wire    ap_CS_fsm_state6;
wire   [63:0] bitcast_ln116_2_fu_313_p1;
wire   [63:0] zext_ln116_fu_228_p1;
wire   [0:0] icmp_ln114_fu_198_p2;
reg   [1:0] i_fu_66;
wire    ap_CS_fsm_state10;
reg   [63:0] output_difference4_03_fu_70;
reg   [0:0] write_flag_0_fu_74;
reg   [0:0] write_flag6_0_fu_78;
reg   [63:0] output_difference3_04_fu_82;
reg   [63:0] output_difference_05_fu_86;
reg   [0:0] write_flag3_0_fu_90;
wire   [8:0] zext_ln114_fu_210_p1;
wire   [8:0] add_ln116_fu_223_p2;
wire   [63:0] select_ln118_fu_260_p3;
wire   [63:0] select_ln118_1_fu_267_p3;
wire   [63:0] select_ln118_2_fu_274_p3;
wire   [63:0] bitcast_ln116_1_fu_304_p1;
wire   [63:0] xor_ln116_fu_307_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 i_fu_66 = 2'd0;
#0 output_difference4_03_fu_70 = 64'd0;
#0 write_flag_0_fu_74 = 1'd0;
#0 write_flag6_0_fu_78 = 1'd0;
#0 output_difference3_04_fu_82 = 64'd0;
#0 output_difference_05_fu_86 = 64'd0;
#0 write_flag3_0_fu_90 = 1'd0;
end

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U65(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(i_fu_66),
    .dout(tmp_fu_214_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U66(
    .din0(p_read6),
    .din1(p_read7),
    .din2(p_read8),
    .din3(i_fu_66),
    .dout(tmp_1_fu_233_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_66 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_fu_66 <= add_ln114_reg_455;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag3_0_fu_90 <= 1'd0;
    end else if (((i_24_reg_448 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag3_0_fu_90 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag6_0_fu_78 <= 1'd0;
    end else if ((~(i_24_reg_448 == 2'd1) & ~(i_24_reg_448 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag6_0_fu_78 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag_0_fu_74 <= 1'd0;
    end else if (((i_24_reg_448 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        write_flag_0_fu_74 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln114_reg_455 <= add_ln114_fu_204_p2;
        i_24_reg_448 <= i_fu_66;
        tmp_1_reg_470 <= tmp_1_fu_233_p5;
        tmp_reg_460 <= tmp_fu_214_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((i_24_reg_448 == 2'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        output_difference3_04_fu_82 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_24_reg_448 == 2'd1) & ~(i_24_reg_448 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_difference4_03_fu_70 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_24_reg_448 == 2'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        output_difference_05_fu_86 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_reg_480 <= grp_fu_990_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln114_fu_198_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln114_fu_198_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        training_targets_ce0 = 1'b1;
    end else begin
        training_targets_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln114_fu_198_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_204_p2 = (i_fu_66 + 2'd1);

assign add_ln116_fu_223_p2 = (zext_ln114_fu_210_p1 + idx);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_return_0 = select_ln118_fu_260_p3;

assign ap_return_1 = select_ln118_1_fu_267_p3;

assign ap_return_2 = select_ln118_2_fu_274_p3;

assign bitcast_ln116_1_fu_304_p1 = sub_reg_480;

assign bitcast_ln116_2_fu_313_p1 = xor_ln116_fu_307_p2;

assign bitcast_ln116_fu_299_p1 = training_targets_q0;

assign grp_fu_990_p_ce = 1'b1;

assign grp_fu_990_p_din0 = tmp_reg_460;

assign grp_fu_990_p_din1 = bitcast_ln116_fu_299_p1;

assign grp_fu_990_p_opcode = 2'd1;

assign grp_fu_994_p_ce = 1'b1;

assign grp_fu_994_p_din0 = bitcast_ln116_2_fu_313_p1;

assign grp_fu_994_p_din1 = tmp_1_reg_470;

assign icmp_ln114_fu_198_p2 = ((i_fu_66 == 2'd3) ? 1'b1 : 1'b0);

assign select_ln118_1_fu_267_p3 = ((write_flag3_0_fu_90[0:0] == 1'b1) ? output_difference3_04_fu_82 : p_read14);

assign select_ln118_2_fu_274_p3 = ((write_flag6_0_fu_78[0:0] == 1'b1) ? output_difference4_03_fu_70 : p_read25);

assign select_ln118_fu_260_p3 = ((write_flag_0_fu_74[0:0] == 1'b1) ? output_difference_05_fu_86 : p_read3);

assign training_targets_address0 = zext_ln116_fu_228_p1;

assign xor_ln116_fu_307_p2 = (bitcast_ln116_1_fu_304_p1 ^ 64'd9223372036854775808);

assign zext_ln114_fu_210_p1 = i_fu_66;

assign zext_ln116_fu_228_p1 = add_ln116_fu_223_p2;

endmodule //backprop_take_difference_1
