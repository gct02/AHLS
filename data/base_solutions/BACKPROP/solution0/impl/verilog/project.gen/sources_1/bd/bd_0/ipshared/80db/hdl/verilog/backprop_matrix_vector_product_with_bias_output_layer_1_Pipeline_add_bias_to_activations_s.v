// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_matrix_vector_product_with_bias_output_layer_1_Pipeline_add_bias_to_activations_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        activations_0,
        activations12_0,
        activations2_0,
        biases3_address0,
        biases3_ce0,
        biases3_q0,
        activations_2_out,
        activations_2_out_ap_vld,
        activations12_2_out,
        activations12_2_out_ap_vld,
        activations2_2_out,
        activations2_2_out_ap_vld,
        grp_fu_171_p_din0,
        grp_fu_171_p_din1,
        grp_fu_171_p_opcode,
        grp_fu_171_p_dout0,
        grp_fu_171_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] activations_0;
input  [63:0] activations12_0;
input  [63:0] activations2_0;
output  [1:0] biases3_address0;
output   biases3_ce0;
input  [63:0] biases3_q0;
output  [63:0] activations_2_out;
output   activations_2_out_ap_vld;
output  [63:0] activations12_2_out;
output   activations12_2_out_ap_vld;
output  [63:0] activations2_2_out;
output   activations2_2_out_ap_vld;
output  [63:0] grp_fu_171_p_din0;
output  [63:0] grp_fu_171_p_din1;
output  [1:0] grp_fu_171_p_opcode;
input  [63:0] grp_fu_171_p_dout0;
output   grp_fu_171_p_ce;

reg ap_idle;
reg biases3_ce0;
reg activations_2_out_ap_vld;
reg activations12_2_out_ap_vld;
reg activations2_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln48_reg_256;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i_25_reg_251;
reg   [1:0] i_25_reg_251_pp0_iter1_reg;
wire   [0:0] icmp_ln48_fu_145_p2;
wire   [63:0] tmp_fu_176_p5;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] bitcast_ln50_fu_188_p1;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln48_fu_157_p1;
wire    ap_block_pp0_stage0;
reg   [1:0] i_fu_50;
wire   [1:0] add_ln48_fu_151_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_25;
reg   [63:0] activations2_2_fu_54;
reg   [63:0] ap_sig_allocacmp_activations2_2_load_1;
wire    ap_block_pp0_stage1;
reg   [63:0] activations12_2_fu_58;
reg   [63:0] ap_sig_allocacmp_activations12_2_load_1;
reg   [63:0] activations_2_fu_62;
reg   [63:0] ap_sig_allocacmp_activations_2_load_1;
wire    ap_block_pp0_stage1_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_50 = 2'd0;
#0 activations2_2_fu_54 = 64'd0;
#0 activations12_2_fu_58 = 64'd0;
#0 activations_2_fu_62 = 64'd0;
#0 ap_done_reg = 1'b0;
end

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U43(
    .din0(ap_sig_allocacmp_activations_2_load_1),
    .din1(ap_sig_allocacmp_activations12_2_load_1),
    .din2(ap_sig_allocacmp_activations2_2_load_1),
    .din3(i_25_reg_251),
    .dout(tmp_fu_176_p5)
);

backprop_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        activations12_2_fu_58 <= activations12_0;
    end else if (((i_25_reg_251_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        activations12_2_fu_58 <= grp_fu_171_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        activations2_2_fu_54 <= activations2_0;
    end else if ((~(i_25_reg_251_pp0_iter1_reg == 2'd1) & ~(i_25_reg_251_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        activations2_2_fu_54 <= grp_fu_171_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        activations_2_fu_62 <= activations_0;
    end else if (((i_25_reg_251_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        activations_2_fu_62 <= grp_fu_171_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln48_fu_145_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_50 <= add_ln48_fu_151_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_25_reg_251 <= ap_sig_allocacmp_i_25;
        i_25_reg_251_pp0_iter1_reg <= i_25_reg_251;
        icmp_ln48_reg_256 <= icmp_ln48_fu_145_p2;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_256 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        activations12_2_out_ap_vld = 1'b1;
    end else begin
        activations12_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_256 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        activations2_2_out_ap_vld = 1'b1;
    end else begin
        activations2_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_256 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        activations_2_out_ap_vld = 1'b1;
    end else begin
        activations_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln48_reg_256 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((i_25_reg_251_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_activations12_2_load_1 = grp_fu_171_p_dout0;
    end else begin
        ap_sig_allocacmp_activations12_2_load_1 = activations12_2_fu_58;
    end
end

always @ (*) begin
    if ((~(i_25_reg_251_pp0_iter1_reg == 2'd1) & ~(i_25_reg_251_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_activations2_2_load_1 = grp_fu_171_p_dout0;
    end else begin
        ap_sig_allocacmp_activations2_2_load_1 = activations2_2_fu_54;
    end
end

always @ (*) begin
    if (((i_25_reg_251_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_activations_2_load_1 = grp_fu_171_p_dout0;
    end else begin
        ap_sig_allocacmp_activations_2_load_1 = activations_2_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_25 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_25 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        biases3_ce0 = 1'b1;
    end else begin
        biases3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign activations12_2_out = activations12_2_fu_58;

assign activations2_2_out = activations2_2_fu_54;

assign activations_2_out = activations_2_fu_62;

assign add_ln48_fu_151_p2 = (ap_sig_allocacmp_i_25 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign biases3_address0 = zext_ln48_fu_157_p1;

assign bitcast_ln50_fu_188_p1 = biases3_q0;

assign grp_fu_171_p_ce = 1'b1;

assign grp_fu_171_p_din0 = tmp_fu_176_p5;

assign grp_fu_171_p_din1 = bitcast_ln50_fu_188_p1;

assign grp_fu_171_p_opcode = 2'd0;

assign icmp_ln48_fu_145_p2 = ((ap_sig_allocacmp_i_25 == 2'd3) ? 1'b1 : 1'b0);

assign zext_ln48_fu_157_p1 = ap_sig_allocacmp_i_25;

endmodule //backprop_matrix_vector_product_with_bias_output_layer_1_Pipeline_add_bias_to_activations_s
