// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_soft_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        grp_fu_990_p_din0,
        grp_fu_990_p_din1,
        grp_fu_990_p_opcode,
        grp_fu_990_p_dout0,
        grp_fu_990_p_ce,
        grp_fu_998_p_din0,
        grp_fu_998_p_din1,
        grp_fu_998_p_dout0,
        grp_fu_998_p_ce,
        grp_fu_1002_p_din0,
        grp_fu_1002_p_din1,
        grp_fu_1002_p_dout0,
        grp_fu_1002_p_ce
);

parameter    ap_ST_fsm_state1 = 41'd1;
parameter    ap_ST_fsm_state2 = 41'd2;
parameter    ap_ST_fsm_state3 = 41'd4;
parameter    ap_ST_fsm_state4 = 41'd8;
parameter    ap_ST_fsm_state5 = 41'd16;
parameter    ap_ST_fsm_state6 = 41'd32;
parameter    ap_ST_fsm_state7 = 41'd64;
parameter    ap_ST_fsm_state8 = 41'd128;
parameter    ap_ST_fsm_state9 = 41'd256;
parameter    ap_ST_fsm_state10 = 41'd512;
parameter    ap_ST_fsm_state11 = 41'd1024;
parameter    ap_ST_fsm_state12 = 41'd2048;
parameter    ap_ST_fsm_state13 = 41'd4096;
parameter    ap_ST_fsm_state14 = 41'd8192;
parameter    ap_ST_fsm_state15 = 41'd16384;
parameter    ap_ST_fsm_state16 = 41'd32768;
parameter    ap_ST_fsm_state17 = 41'd65536;
parameter    ap_ST_fsm_state18 = 41'd131072;
parameter    ap_ST_fsm_state19 = 41'd262144;
parameter    ap_ST_fsm_state20 = 41'd524288;
parameter    ap_ST_fsm_state21 = 41'd1048576;
parameter    ap_ST_fsm_state22 = 41'd2097152;
parameter    ap_ST_fsm_state23 = 41'd4194304;
parameter    ap_ST_fsm_state24 = 41'd8388608;
parameter    ap_ST_fsm_state25 = 41'd16777216;
parameter    ap_ST_fsm_state26 = 41'd33554432;
parameter    ap_ST_fsm_state27 = 41'd67108864;
parameter    ap_ST_fsm_state28 = 41'd134217728;
parameter    ap_ST_fsm_state29 = 41'd268435456;
parameter    ap_ST_fsm_state30 = 41'd536870912;
parameter    ap_ST_fsm_state31 = 41'd1073741824;
parameter    ap_ST_fsm_state32 = 41'd2147483648;
parameter    ap_ST_fsm_state33 = 41'd4294967296;
parameter    ap_ST_fsm_state34 = 41'd8589934592;
parameter    ap_ST_fsm_state35 = 41'd17179869184;
parameter    ap_ST_fsm_state36 = 41'd34359738368;
parameter    ap_ST_fsm_state37 = 41'd68719476736;
parameter    ap_ST_fsm_state38 = 41'd137438953472;
parameter    ap_ST_fsm_state39 = 41'd274877906944;
parameter    ap_ST_fsm_state40 = 41'd549755813888;
parameter    ap_ST_fsm_state41 = 41'd1099511627776;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
input  [63:0] p_read4;
input  [63:0] p_read5;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] grp_fu_990_p_din0;
output  [63:0] grp_fu_990_p_din1;
output  [0:0] grp_fu_990_p_opcode;
input  [63:0] grp_fu_990_p_dout0;
output   grp_fu_990_p_ce;
output  [63:0] grp_fu_998_p_din0;
output  [63:0] grp_fu_998_p_din1;
input  [63:0] grp_fu_998_p_dout0;
output   grp_fu_998_p_ce;
output  [63:0] grp_fu_1002_p_din0;
output  [63:0] grp_fu_1002_p_din1;
input  [63:0] grp_fu_1002_p_dout0;
output   grp_fu_1002_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [40:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_142;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state27;
wire   [63:0] tmp_2_fu_179_p5;
reg   [63:0] tmp_2_reg_411;
wire    ap_CS_fsm_state2;
wire   [63:0] bitcast_ln24_1_fu_222_p1;
wire    ap_CS_fsm_state3;
reg   [1:0] i_26_reg_467;
wire    ap_CS_fsm_state17;
wire   [1:0] add_ln27_fu_241_p2;
reg   [1:0] add_ln27_reg_474;
wire   [63:0] tmp_3_fu_247_p5;
reg   [63:0] tmp_3_reg_479;
wire   [63:0] bitcast_ln29_1_fu_322_p1;
wire    ap_CS_fsm_state18;
reg   [63:0] sum_fu_52;
wire    ap_CS_fsm_state16;
reg   [1:0] i_fu_56;
wire   [1:0] add_ln22_fu_173_p2;
wire   [0:0] icmp_ln22_fu_167_p2;
reg   [1:0] i_12_fu_60;
wire    ap_CS_fsm_state41;
reg   [63:0] net_outputs2_03_fu_64;
wire   [0:0] icmp_ln27_fu_235_p2;
reg   [0:0] write_flag_0_fu_68;
reg   [0:0] write_flag8_0_fu_72;
reg   [63:0] net_outputs16_04_fu_76;
reg   [63:0] net_outputs_05_fu_80;
reg   [0:0] write_flag4_0_fu_84;
reg   [63:0] grp_fu_132_p1;
wire   [63:0] bitcast_ln24_fu_213_p1;
wire   [63:0] xor_ln24_fu_216_p2;
wire   [63:0] select_ln31_fu_274_p3;
wire   [63:0] select_ln31_1_fu_281_p3;
wire   [63:0] select_ln31_2_fu_288_p3;
wire   [63:0] bitcast_ln29_fu_313_p1;
wire   [63:0] xor_ln29_fu_316_p2;
reg   [40:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 41'd1;
#0 sum_fu_52 = 64'd0;
#0 i_fu_56 = 2'd0;
#0 i_12_fu_60 = 2'd0;
#0 net_outputs2_03_fu_64 = 64'd0;
#0 write_flag_0_fu_68 = 1'd0;
#0 write_flag8_0_fu_72 = 1'd0;
#0 net_outputs16_04_fu_76 = 64'd0;
#0 net_outputs_05_fu_80 = 64'd0;
#0 write_flag4_0_fu_84 = 1'd0;
end

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U55(
    .din0(p_read3),
    .din1(p_read4),
    .din2(p_read5),
    .din3(i_fu_56),
    .dout(tmp_2_fu_179_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U56(
    .din0(p_read3),
    .din1(p_read4),
    .din2(p_read5),
    .din3(i_12_fu_60),
    .dout(tmp_3_fu_247_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_167_p2 == 1'd1))) begin
        i_12_fu_60 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        i_12_fu_60 <= add_ln27_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_56 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_167_p2 == 1'd0))) begin
        i_fu_56 <= add_ln22_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        sum_fu_52 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sum_fu_52 <= grp_fu_990_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_167_p2 == 1'd1))) begin
        write_flag4_0_fu_84 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state41) & (i_26_reg_467 == 2'd1))) begin
        write_flag4_0_fu_84 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_167_p2 == 1'd1))) begin
        write_flag8_0_fu_72 <= 1'd0;
    end else if ((~(i_26_reg_467 == 2'd1) & ~(i_26_reg_467 == 2'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        write_flag8_0_fu_72 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_167_p2 == 1'd1))) begin
        write_flag_0_fu_68 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state41) & (i_26_reg_467 == 2'd0))) begin
        write_flag_0_fu_68 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln27_reg_474 <= add_ln27_fu_241_p2;
        i_26_reg_467 <= i_12_fu_60;
        tmp_3_reg_479 <= tmp_3_fu_247_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (i_26_reg_467 == 2'd1))) begin
        net_outputs16_04_fu_76 <= grp_fu_998_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_26_reg_467 == 2'd1) & ~(i_26_reg_467 == 2'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        net_outputs2_03_fu_64 <= grp_fu_998_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) & (i_26_reg_467 == 2'd0))) begin
        net_outputs_05_fu_80 <= grp_fu_998_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_142 <= grp_fu_1002_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_2_reg_411 <= tmp_2_fu_179_p5;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state17) & (icmp_ln27_fu_235_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln27_fu_235_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_132_p1 = bitcast_ln29_1_fu_322_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_132_p1 = bitcast_ln24_1_fu_222_p1;
    end else begin
        grp_fu_132_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln22_fu_167_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln27_fu_235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_173_p2 = (i_fu_56 + 2'd1);

assign add_ln27_fu_241_p2 = (i_12_fu_60 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_return_0 = select_ln31_fu_274_p3;

assign ap_return_1 = select_ln31_1_fu_281_p3;

assign ap_return_2 = select_ln31_2_fu_288_p3;

assign bitcast_ln24_1_fu_222_p1 = xor_ln24_fu_216_p2;

assign bitcast_ln24_fu_213_p1 = tmp_2_reg_411;

assign bitcast_ln29_1_fu_322_p1 = xor_ln29_fu_316_p2;

assign bitcast_ln29_fu_313_p1 = tmp_3_reg_479;

assign grp_fu_1002_p_ce = 1'b1;

assign grp_fu_1002_p_din0 = 64'd0;

assign grp_fu_1002_p_din1 = grp_fu_132_p1;

assign grp_fu_990_p_ce = 1'b1;

assign grp_fu_990_p_din0 = sum_fu_52;

assign grp_fu_990_p_din1 = reg_142;

assign grp_fu_990_p_opcode = 2'd0;

assign grp_fu_998_p_ce = 1'b1;

assign grp_fu_998_p_din0 = reg_142;

assign grp_fu_998_p_din1 = sum_fu_52;

assign icmp_ln22_fu_167_p2 = ((i_fu_56 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_235_p2 = ((i_12_fu_60 == 2'd3) ? 1'b1 : 1'b0);

assign select_ln31_1_fu_281_p3 = ((write_flag4_0_fu_84[0:0] == 1'b1) ? net_outputs16_04_fu_76 : p_read1);

assign select_ln31_2_fu_288_p3 = ((write_flag8_0_fu_72[0:0] == 1'b1) ? net_outputs2_03_fu_64 : p_read2);

assign select_ln31_fu_274_p3 = ((write_flag_0_fu_68[0:0] == 1'b1) ? net_outputs_05_fu_80 : p_read);

assign xor_ln24_fu_216_p2 = (bitcast_ln24_fu_213_p1 ^ 64'd9223372036854775808);

assign xor_ln29_fu_316_p2 = (bitcast_ln29_fu_313_p1 ^ 64'd9223372036854775808);

endmodule //backprop_soft_max
