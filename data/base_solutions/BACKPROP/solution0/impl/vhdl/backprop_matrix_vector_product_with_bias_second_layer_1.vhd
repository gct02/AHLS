-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_matrix_vector_product_with_bias_second_layer_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    biases2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    biases2_ce0 : OUT STD_LOGIC;
    biases2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights2_ce0 : OUT STD_LOGIC;
    weights2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    activations_ce0 : OUT STD_LOGIC;
    activations_we0 : OUT STD_LOGIC;
    activations_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    activations_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    activations_ce1 : OUT STD_LOGIC;
    activations_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_activations_ce0 : OUT STD_LOGIC;
    input_activations_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_986_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_ce : OUT STD_LOGIC;
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_matrix_vector_product_with_bias_second_layer_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln78_fu_145_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln78_reg_217 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal activations_addr_reg_222 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_160_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_reg_227 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln82_fu_174_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_235 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal weights2_load_reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bitcast_ln84_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul8_reg_265 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_idle : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_ready : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce0 : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_we0 : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce1 : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_biases2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_biases2_ce0 : STD_LOGIC;
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_ce : STD_LOGIC;
    signal j_reg_88 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln78_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_reg_100 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln78_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln82_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln82_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_46 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_121_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal empty_fu_156_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln82_1_fu_180_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_fu_184_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_121_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_121_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        activations_ce0 : OUT STD_LOGIC;
        activations_we0 : OUT STD_LOGIC;
        activations_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        activations_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        activations_ce1 : OUT STD_LOGIC;
        activations_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        biases2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        biases2_ce0 : OUT STD_LOGIC;
        biases2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_121_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_121_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_121_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_121_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_121_p_ce : OUT STD_LOGIC );
    end component;


    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113 : component backprop_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start,
        ap_done => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done,
        ap_idle => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_idle,
        ap_ready => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_ready,
        activations_address0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address0,
        activations_ce0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce0,
        activations_we0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_we0,
        activations_d0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_d0,
        activations_address1 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address1,
        activations_ce1 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce1,
        activations_q1 => activations_q1,
        biases2_address0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_biases2_address0,
        biases2_ce0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_biases2_ce0,
        biases2_q0 => biases2_q0,
        grp_fu_121_p_din0 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din0,
        grp_fu_121_p_din1 => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din1,
        grp_fu_121_p_opcode => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_opcode,
        grp_fu_121_p_dout0 => grp_fu_986_p_dout0,
        grp_fu_121_p_ce => grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_139_p2 = ap_const_lv1_1))) then 
                    grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    add113_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_139_p2 = ap_const_lv1_0))) then 
                add113_reg_100 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                add113_reg_100 <= grp_fu_986_p_dout0;
            end if; 
        end if;
    end process;

    i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_46 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_168_p2 = ap_const_lv1_1))) then 
                i_fu_46 <= add_ln78_reg_217;
            end if; 
        end if;
    end process;

    j_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_139_p2 = ap_const_lv1_0))) then 
                j_reg_88 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_88 <= add_ln82_reg_235;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                activations_addr_reg_222 <= zext_ln78_fu_151_p1(6 - 1 downto 0);
                add_ln78_reg_217 <= add_ln78_fu_145_p2;
                    tmp_9_reg_227(11 downto 6) <= tmp_9_fu_160_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln82_reg_235 <= add_ln82_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul8_reg_265 <= grp_fu_990_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                weights2_load_reg_245 <= weights2_q0;
            end if;
        end if;
    end process;
    tmp_9_reg_227(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done, icmp_ln78_fu_139_p2, ap_CS_fsm_state13, icmp_ln82_fu_168_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln78_fu_139_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_168_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    activations_address0_assign_proc : process(activations_addr_reg_222, ap_CS_fsm_state3, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations_address0 <= activations_addr_reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            activations_address0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address0;
        else 
            activations_address0 <= "XXXXXX";
        end if; 
    end process;

    activations_address1 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_address1;

    activations_ce0_assign_proc : process(ap_CS_fsm_state3, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            activations_ce0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce0;
        else 
            activations_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activations_ce1_assign_proc : process(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            activations_ce1 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_ce1;
        else 
            activations_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    activations_d0_assign_proc : process(ap_CS_fsm_state3, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_d0, add113_reg_100, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations_d0 <= add113_reg_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            activations_d0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_d0;
        else 
            activations_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    activations_we0_assign_proc : process(ap_CS_fsm_state3, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_we0, ap_CS_fsm_state13, icmp_ln82_fu_168_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_168_p2 = ap_const_lv1_1))) then 
            activations_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            activations_we0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_activations_we0;
        else 
            activations_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln78_fu_145_p2 <= std_logic_vector(unsigned(i_fu_46) + unsigned(ap_const_lv7_1));
    add_ln82_fu_174_p2 <= std_logic_vector(unsigned(j_reg_88) + unsigned(ap_const_lv7_1));
    add_ln84_fu_184_p2 <= std_logic_vector(unsigned(zext_ln82_1_fu_180_p1) + unsigned(tmp_9_reg_227));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done)
    begin
        if ((grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    biases2_address0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_biases2_address0;
    biases2_ce0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_biases2_ce0;
    bitcast_ln84_fu_203_p1 <= weights2_load_reg_245;
    empty_fu_156_p1 <= i_fu_46(6 - 1 downto 0);

    grp_fu_121_ce_assign_proc : process(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_ce, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_121_ce <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_ce;
        else 
            grp_fu_121_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_121_opcode_assign_proc : process(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_opcode, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_121_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_opcode),2));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_121_opcode <= ap_const_lv2_0;
        else 
            grp_fu_121_opcode <= "XX";
        end if; 
    end process;


    grp_fu_121_p0_assign_proc : process(grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din0, add113_reg_100, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_121_p0 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_121_p0 <= add113_reg_100;
        else 
            grp_fu_121_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_121_p1_assign_proc : process(mul8_reg_265, grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din1, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_121_p1 <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_grp_fu_121_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_121_p1 <= mul8_reg_265;
        else 
            grp_fu_121_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_986_p_ce <= grp_fu_121_ce;
    grp_fu_986_p_din0 <= grp_fu_121_p0;
    grp_fu_986_p_din1 <= grp_fu_121_p1;
    grp_fu_986_p_opcode <= grp_fu_121_opcode(1 - 1 downto 0);
    grp_fu_990_p_ce <= ap_const_logic_1;
    grp_fu_990_p_din0 <= bitcast_ln84_fu_203_p1;
    grp_fu_990_p_din1 <= input_activations_q0;
    grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start <= grp_matrix_vector_product_with_bias_second_layer_1_Pipeline_add_bias_to_activations_s_fu_113_ap_start_reg;
    icmp_ln78_fu_139_p2 <= "1" when (i_fu_46 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_168_p2 <= "1" when (j_reg_88 = ap_const_lv7_40) else "0";
    input_activations_address0 <= zext_ln82_fu_198_p1(6 - 1 downto 0);

    input_activations_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_activations_ce0 <= ap_const_logic_1;
        else 
            input_activations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_9_fu_160_p3 <= (empty_fu_156_p1 & ap_const_lv6_0);
    weights2_address0 <= zext_ln84_fu_189_p1(12 - 1 downto 0);

    weights2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights2_ce0 <= ap_const_logic_1;
        else 
            weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln78_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_46),64));
    zext_ln82_1_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_88),12));
    zext_ln82_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_88),64));
    zext_ln84_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_184_p2),64));
end behav;
