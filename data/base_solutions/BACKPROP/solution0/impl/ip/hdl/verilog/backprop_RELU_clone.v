// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_RELU_clone (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read14,
        p_read25,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        grp_fu_990_p_din0,
        grp_fu_990_p_din1,
        grp_fu_990_p_opcode,
        grp_fu_990_p_dout0,
        grp_fu_990_p_ce,
        grp_fu_994_p_din0,
        grp_fu_994_p_din1,
        grp_fu_994_p_dout0,
        grp_fu_994_p_ce,
        grp_fu_998_p_din0,
        grp_fu_998_p_din1,
        grp_fu_998_p_dout0,
        grp_fu_998_p_ce,
        grp_fu_1002_p_din0,
        grp_fu_1002_p_din1,
        grp_fu_1002_p_dout0,
        grp_fu_1002_p_ce
);

parameter    ap_ST_fsm_state1 = 36'd1;
parameter    ap_ST_fsm_state2 = 36'd2;
parameter    ap_ST_fsm_state3 = 36'd4;
parameter    ap_ST_fsm_state4 = 36'd8;
parameter    ap_ST_fsm_state5 = 36'd16;
parameter    ap_ST_fsm_state6 = 36'd32;
parameter    ap_ST_fsm_state7 = 36'd64;
parameter    ap_ST_fsm_state8 = 36'd128;
parameter    ap_ST_fsm_state9 = 36'd256;
parameter    ap_ST_fsm_state10 = 36'd512;
parameter    ap_ST_fsm_state11 = 36'd1024;
parameter    ap_ST_fsm_state12 = 36'd2048;
parameter    ap_ST_fsm_state13 = 36'd4096;
parameter    ap_ST_fsm_state14 = 36'd8192;
parameter    ap_ST_fsm_state15 = 36'd16384;
parameter    ap_ST_fsm_state16 = 36'd32768;
parameter    ap_ST_fsm_state17 = 36'd65536;
parameter    ap_ST_fsm_state18 = 36'd131072;
parameter    ap_ST_fsm_state19 = 36'd262144;
parameter    ap_ST_fsm_state20 = 36'd524288;
parameter    ap_ST_fsm_state21 = 36'd1048576;
parameter    ap_ST_fsm_state22 = 36'd2097152;
parameter    ap_ST_fsm_state23 = 36'd4194304;
parameter    ap_ST_fsm_state24 = 36'd8388608;
parameter    ap_ST_fsm_state25 = 36'd16777216;
parameter    ap_ST_fsm_state26 = 36'd33554432;
parameter    ap_ST_fsm_state27 = 36'd67108864;
parameter    ap_ST_fsm_state28 = 36'd134217728;
parameter    ap_ST_fsm_state29 = 36'd268435456;
parameter    ap_ST_fsm_state30 = 36'd536870912;
parameter    ap_ST_fsm_state31 = 36'd1073741824;
parameter    ap_ST_fsm_state32 = 36'd2147483648;
parameter    ap_ST_fsm_state33 = 36'd4294967296;
parameter    ap_ST_fsm_state34 = 36'd8589934592;
parameter    ap_ST_fsm_state35 = 36'd17179869184;
parameter    ap_ST_fsm_state36 = 36'd34359738368;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
input  [63:0] p_read3;
input  [63:0] p_read14;
input  [63:0] p_read25;
output  [63:0] ap_return_0;
output  [63:0] ap_return_1;
output  [63:0] ap_return_2;
output  [63:0] ap_return_3;
output  [63:0] ap_return_4;
output  [63:0] ap_return_5;
output  [63:0] grp_fu_990_p_din0;
output  [63:0] grp_fu_990_p_din1;
output  [1:0] grp_fu_990_p_opcode;
input  [63:0] grp_fu_990_p_dout0;
output   grp_fu_990_p_ce;
output  [63:0] grp_fu_994_p_din0;
output  [63:0] grp_fu_994_p_din1;
input  [63:0] grp_fu_994_p_dout0;
output   grp_fu_994_p_ce;
output  [63:0] grp_fu_998_p_din0;
output  [63:0] grp_fu_998_p_din1;
input  [63:0] grp_fu_998_p_dout0;
output   grp_fu_998_p_ce;
output  [63:0] grp_fu_1002_p_din0;
output  [63:0] grp_fu_1002_p_din1;
input  [63:0] grp_fu_1002_p_dout0;
output   grp_fu_1002_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [35:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] reg_155;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state22;
reg   [1:0] i_36_reg_444;
wire    ap_CS_fsm_state2;
wire   [1:0] add_ln36_fu_205_p2;
reg   [1:0] add_ln36_reg_451;
wire   [63:0] tmp_4_fu_211_p5;
reg   [63:0] tmp_4_reg_456;
wire   [63:0] bitcast_ln39_1_fu_338_p1;
wire    ap_CS_fsm_state9;
reg   [63:0] tmp_reg_468;
wire    ap_CS_fsm_state18;
reg   [1:0] i_fu_50;
wire    ap_CS_fsm_state36;
reg   [63:0] dactivations4_03_fu_54;
wire   [0:0] icmp_ln36_fu_199_p2;
reg   [0:0] write_flag_0_fu_58;
reg   [0:0] write_flag6_0_fu_62;
reg   [63:0] dactivations3_04_fu_66;
reg   [63:0] dactivations_05_fu_70;
reg   [0:0] write_flag3_0_fu_74;
reg   [63:0] activations2_0_fu_78;
reg   [63:0] activations12_0_fu_82;
reg   [63:0] activations_0_fu_86;
reg   [63:0] grp_fu_126_p0;
reg   [63:0] grp_fu_126_p1;
wire    ap_CS_fsm_state19;
wire   [63:0] select_ln41_fu_242_p3;
wire   [63:0] select_ln41_1_fu_249_p3;
wire   [63:0] select_ln41_2_fu_256_p3;
wire   [63:0] bitcast_ln39_fu_329_p1;
wire   [63:0] xor_ln39_fu_332_p2;
reg   [1:0] grp_fu_126_opcode;
reg   [35:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 36'd1;
#0 i_fu_50 = 2'd0;
#0 dactivations4_03_fu_54 = 64'd0;
#0 write_flag_0_fu_58 = 1'd0;
#0 write_flag6_0_fu_62 = 1'd0;
#0 dactivations3_04_fu_66 = 64'd0;
#0 dactivations_05_fu_70 = 64'd0;
#0 write_flag3_0_fu_74 = 1'd0;
#0 activations2_0_fu_78 = 64'd0;
#0 activations12_0_fu_82 = 64'd0;
#0 activations_0_fu_86 = 64'd0;
end

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U45(
    .din0(activations_0_fu_86),
    .din1(activations12_0_fu_82),
    .din2(activations2_0_fu_78),
    .din3(i_fu_50),
    .dout(tmp_4_fu_211_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        activations12_0_fu_82 <= p_read1;
    end else if (((i_36_reg_444 == 2'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        activations12_0_fu_82 <= grp_fu_998_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        activations2_0_fu_78 <= p_read2;
    end else if ((~(i_36_reg_444 == 2'd1) & ~(i_36_reg_444 == 2'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        activations2_0_fu_78 <= grp_fu_998_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        activations_0_fu_86 <= p_read;
    end else if (((i_36_reg_444 == 2'd0) & (1'b1 == ap_CS_fsm_state36))) begin
        activations_0_fu_86 <= grp_fu_998_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_50 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        i_fu_50 <= add_ln36_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag3_0_fu_74 <= 1'd0;
    end else if (((i_36_reg_444 == 2'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        write_flag3_0_fu_74 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag6_0_fu_62 <= 1'd0;
    end else if ((~(i_36_reg_444 == 2'd1) & ~(i_36_reg_444 == 2'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        write_flag6_0_fu_62 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        write_flag_0_fu_58 <= 1'd0;
    end else if (((i_36_reg_444 == 2'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        write_flag_0_fu_58 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln36_reg_451 <= add_ln36_fu_205_p2;
        i_36_reg_444 <= i_fu_50;
        tmp_4_reg_456 <= tmp_4_fu_211_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((i_36_reg_444 == 2'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        dactivations3_04_fu_66 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_36_reg_444 == 2'd1) & ~(i_36_reg_444 == 2'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        dactivations4_03_fu_54 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((i_36_reg_444 == 2'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        dactivations_05_fu_70 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_155 <= grp_fu_990_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_reg_468 <= grp_fu_1002_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln36_fu_199_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln36_fu_199_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln36_fu_199_p2 == 1'd0))) begin
        grp_fu_126_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_126_opcode = 2'd0;
    end else begin
        grp_fu_126_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_126_p0 = tmp_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_126_p0 = 64'd4607182418800017408;
    end else begin
        grp_fu_126_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_126_p1 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_126_p1 = tmp_4_fu_211_p5;
    end else begin
        grp_fu_126_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln36_fu_199_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_fu_205_p2 = (i_fu_50 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return_0 = select_ln41_fu_242_p3;

assign ap_return_1 = select_ln41_1_fu_249_p3;

assign ap_return_2 = select_ln41_2_fu_256_p3;

assign ap_return_3 = activations_0_fu_86;

assign ap_return_4 = activations12_0_fu_82;

assign ap_return_5 = activations2_0_fu_78;

assign bitcast_ln39_1_fu_338_p1 = xor_ln39_fu_332_p2;

assign bitcast_ln39_fu_329_p1 = tmp_4_reg_456;

assign grp_fu_1002_p_ce = 1'b1;

assign grp_fu_1002_p_din0 = 64'd0;

assign grp_fu_1002_p_din1 = bitcast_ln39_1_fu_338_p1;

assign grp_fu_990_p_ce = 1'b1;

assign grp_fu_990_p_din0 = grp_fu_126_p0;

assign grp_fu_990_p_din1 = grp_fu_126_p1;

assign grp_fu_990_p_opcode = grp_fu_126_opcode;

assign grp_fu_994_p_ce = 1'b1;

assign grp_fu_994_p_din0 = tmp_4_reg_456;

assign grp_fu_994_p_din1 = reg_155;

assign grp_fu_998_p_ce = 1'b1;

assign grp_fu_998_p_din0 = 64'd4607182418800017408;

assign grp_fu_998_p_din1 = reg_155;

assign icmp_ln36_fu_199_p2 = ((i_fu_50 == 2'd3) ? 1'b1 : 1'b0);

assign select_ln41_1_fu_249_p3 = ((write_flag3_0_fu_74[0:0] == 1'b1) ? dactivations3_04_fu_66 : p_read14);

assign select_ln41_2_fu_256_p3 = ((write_flag6_0_fu_62[0:0] == 1'b1) ? dactivations4_03_fu_54 : p_read25);

assign select_ln41_fu_242_p3 = ((write_flag_0_fu_58[0:0] == 1'b1) ? dactivations_05_fu_70 : p_read3);

assign xor_ln39_fu_332_p2 = (bitcast_ln39_fu_329_p1 ^ 64'd9223372036854775808);

endmodule //backprop_RELU_clone
