// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_get_oracle_activations1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights2_address0,
        weights2_ce0,
        weights2_q0,
        output_differences_address0,
        output_differences_ce0,
        output_differences_q0,
        oracle_activations_address0,
        oracle_activations_ce0,
        oracle_activations_we0,
        oracle_activations_d0,
        dactivations_address0,
        dactivations_ce0,
        dactivations_q0,
        grp_fu_990_p_din0,
        grp_fu_990_p_din1,
        grp_fu_990_p_opcode,
        grp_fu_990_p_dout0,
        grp_fu_990_p_ce,
        grp_fu_994_p_din0,
        grp_fu_994_p_din1,
        grp_fu_994_p_dout0,
        grp_fu_994_p_ce
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] weights2_address0;
output   weights2_ce0;
input  [63:0] weights2_q0;
output  [5:0] output_differences_address0;
output   output_differences_ce0;
input  [63:0] output_differences_q0;
output  [5:0] oracle_activations_address0;
output   oracle_activations_ce0;
output   oracle_activations_we0;
output  [63:0] oracle_activations_d0;
output  [5:0] dactivations_address0;
output   dactivations_ce0;
input  [63:0] dactivations_q0;
output  [63:0] grp_fu_990_p_din0;
output  [63:0] grp_fu_990_p_din1;
output  [0:0] grp_fu_990_p_opcode;
input  [63:0] grp_fu_990_p_dout0;
output   grp_fu_990_p_ce;
output  [63:0] grp_fu_994_p_din0;
output  [63:0] grp_fu_994_p_din1;
input  [63:0] grp_fu_994_p_dout0;
output   grp_fu_994_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights2_ce0;
reg output_differences_ce0;
reg oracle_activations_ce0;
reg oracle_activations_we0;
reg dactivations_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln174_fu_152_p2;
reg   [6:0] add_ln174_reg_224;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln174_fu_158_p1;
reg   [63:0] zext_ln174_reg_229;
reg   [5:0] oracle_activations_addr_reg_234;
wire   [11:0] tmp_s_fu_167_p3;
reg   [11:0] tmp_s_reg_239;
wire   [6:0] add_ln178_fu_181_p2;
reg   [6:0] add_ln178_reg_247;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [63:0] weights2_load_reg_267;
wire    ap_CS_fsm_state5;
wire   [63:0] bitcast_ln180_fu_210_p1;
reg   [63:0] mul8_reg_282;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [6:0] j_reg_101;
wire   [0:0] icmp_ln174_fu_146_p2;
reg   [63:0] add113_reg_113;
wire   [63:0] zext_ln180_fu_196_p1;
wire   [0:0] icmp_ln178_fu_175_p2;
wire   [63:0] zext_ln178_fu_205_p1;
reg   [6:0] i_fu_46;
wire    ap_CS_fsm_state16;
reg   [63:0] grp_fu_130_p0;
reg   [63:0] grp_fu_130_p1;
wire   [5:0] empty_fu_163_p1;
wire   [11:0] zext_ln178_1_fu_187_p1;
wire   [11:0] add_ln180_fu_191_p2;
reg   [15:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 i_fu_46 = 7'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_146_p2 == 1'd0))) begin
        add113_reg_113 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        add113_reg_113 <= grp_fu_990_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_46 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln178_fu_175_p2 == 1'd1))) begin
        i_fu_46 <= add_ln174_reg_224;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_146_p2 == 1'd0))) begin
        j_reg_101 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_101 <= add_ln178_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln174_reg_224 <= add_ln174_fu_152_p2;
        oracle_activations_addr_reg_234 <= zext_ln174_fu_158_p1;
        tmp_s_reg_239[11 : 6] <= tmp_s_fu_167_p3[11 : 6];
        zext_ln174_reg_229[6 : 0] <= zext_ln174_fu_158_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln178_reg_247 <= add_ln178_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul8_reg_282 <= grp_fu_994_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights2_load_reg_267 <= weights2_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_146_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_146_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dactivations_ce0 = 1'b1;
    end else begin
        dactivations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_130_p0 = add113_reg_113;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_130_p0 = output_differences_q0;
    end else begin
        grp_fu_130_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_130_p1 = dactivations_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_130_p1 = bitcast_ln180_fu_210_p1;
    end else begin
        grp_fu_130_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        oracle_activations_ce0 = 1'b1;
    end else begin
        oracle_activations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        oracle_activations_we0 = 1'b1;
    end else begin
        oracle_activations_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_differences_ce0 = 1'b1;
    end else begin
        output_differences_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights2_ce0 = 1'b1;
    end else begin
        weights2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln174_fu_146_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln178_fu_175_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln174_fu_152_p2 = (i_fu_46 + 7'd1);

assign add_ln178_fu_181_p2 = (j_reg_101 + 7'd1);

assign add_ln180_fu_191_p2 = (zext_ln178_1_fu_187_p1 + tmp_s_reg_239);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln180_fu_210_p1 = weights2_load_reg_267;

assign dactivations_address0 = zext_ln174_reg_229;

assign empty_fu_163_p1 = i_fu_46[5:0];

assign grp_fu_990_p_ce = 1'b1;

assign grp_fu_990_p_din0 = add113_reg_113;

assign grp_fu_990_p_din1 = mul8_reg_282;

assign grp_fu_990_p_opcode = 2'd0;

assign grp_fu_994_p_ce = 1'b1;

assign grp_fu_994_p_din0 = grp_fu_130_p0;

assign grp_fu_994_p_din1 = grp_fu_130_p1;

assign icmp_ln174_fu_146_p2 = ((i_fu_46 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_175_p2 = ((j_reg_101 == 7'd64) ? 1'b1 : 1'b0);

assign oracle_activations_address0 = oracle_activations_addr_reg_234;

assign oracle_activations_d0 = grp_fu_994_p_dout0;

assign output_differences_address0 = zext_ln178_fu_205_p1;

assign tmp_s_fu_167_p3 = {{empty_fu_163_p1}, {6'd0}};

assign weights2_address0 = zext_ln180_fu_196_p1;

assign zext_ln174_fu_158_p1 = i_fu_46;

assign zext_ln178_1_fu_187_p1 = j_reg_101;

assign zext_ln178_fu_205_p1 = j_reg_101;

assign zext_ln180_fu_196_p1 = add_ln180_fu_191_p2;

always @ (posedge ap_clk) begin
    zext_ln174_reg_229[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_s_reg_239[5:0] <= 6'b000000;
end

endmodule //backprop_get_oracle_activations1_1
