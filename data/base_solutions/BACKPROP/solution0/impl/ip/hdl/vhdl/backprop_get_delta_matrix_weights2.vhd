-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_get_delta_matrix_weights2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    delta_weights2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    delta_weights2_ce0 : OUT STD_LOGIC;
    delta_weights2_we0 : OUT STD_LOGIC;
    delta_weights2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_difference_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_difference_ce0 : OUT STD_LOGIC;
    output_difference_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    last_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    last_activations_ce0 : OUT STD_LOGIC;
    last_activations_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_get_delta_matrix_weights2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln158_fu_109_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln158_reg_175 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_120_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_185 : STD_LOGIC_VECTOR (5 downto 0);
    signal last_activations_load_reg_190 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_124_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_reg_195 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln161_fu_137_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln161_reg_203 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln163_fu_152_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln163_reg_213 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_reg_79 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln158_fu_115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln158_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln161_fu_143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln161_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln163_fu_161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_36 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal zext_ln161_1_fu_148_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_36_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_36 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln161_fu_131_p2 = ap_const_lv1_1))) then 
                i_fu_36 <= add_ln158_reg_175;
            end if; 
        end if;
    end process;

    j_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_79 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_reg_79 <= add_ln161_reg_203;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln158_reg_175 <= add_ln158_fu_109_p2;
                empty_reg_185 <= empty_fu_120_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln161_reg_203 <= add_ln161_fu_137_p2;
                add_ln163_reg_213 <= add_ln163_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                last_activations_load_reg_190 <= last_activations_q0;
                    tmp_s_reg_195(11 downto 6) <= tmp_s_fu_124_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_reg_223 <= grp_fu_994_p_dout0;
            end if;
        end if;
    end process;
    tmp_s_reg_195(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln158_fu_103_p2, icmp_ln161_fu_131_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln158_fu_103_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln161_fu_131_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln158_fu_109_p2 <= std_logic_vector(unsigned(i_fu_36) + unsigned(ap_const_lv7_1));
    add_ln161_fu_137_p2 <= std_logic_vector(unsigned(j_reg_79) + unsigned(ap_const_lv7_1));
    add_ln163_fu_152_p2 <= std_logic_vector(unsigned(zext_ln161_1_fu_148_p1) + unsigned(tmp_s_reg_195));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln158_fu_103_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln158_fu_103_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln158_fu_103_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln158_fu_103_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    delta_weights2_address0 <= zext_ln163_fu_161_p1(12 - 1 downto 0);

    delta_weights2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delta_weights2_ce0 <= ap_const_logic_1;
        else 
            delta_weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delta_weights2_d0 <= mul_reg_223;

    delta_weights2_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delta_weights2_we0 <= ap_const_logic_1;
        else 
            delta_weights2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_120_p1 <= i_fu_36(6 - 1 downto 0);
    grp_fu_994_p_ce <= ap_const_logic_1;
    grp_fu_994_p_din0 <= last_activations_load_reg_190;
    grp_fu_994_p_din1 <= output_difference_q0;
    icmp_ln158_fu_103_p2 <= "1" when (i_fu_36 = ap_const_lv7_40) else "0";
    icmp_ln161_fu_131_p2 <= "1" when (j_reg_79 = ap_const_lv7_40) else "0";
    last_activations_address0 <= zext_ln158_fu_115_p1(6 - 1 downto 0);

    last_activations_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            last_activations_ce0 <= ap_const_logic_1;
        else 
            last_activations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_difference_address0 <= zext_ln161_fu_143_p1(6 - 1 downto 0);

    output_difference_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_difference_ce0 <= ap_const_logic_1;
        else 
            output_difference_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_124_p3 <= (empty_reg_185 & ap_const_lv6_0);
    zext_ln158_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_36),64));
    zext_ln161_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_79),12));
    zext_ln161_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_79),64));
    zext_ln163_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_reg_213),64));
end behav;
