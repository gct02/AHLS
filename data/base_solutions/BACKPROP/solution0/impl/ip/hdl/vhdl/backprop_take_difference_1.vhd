-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_take_difference_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    training_targets_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    training_targets_ce0 : OUT STD_LOGIC;
    training_targets_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read14 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read25 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read8 : IN STD_LOGIC_VECTOR (63 downto 0);
    idx : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC;
    grp_fu_994_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_take_difference_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_24_reg_448 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln114_fu_204_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln114_reg_455 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_214_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_233_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln116_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_reg_480 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal bitcast_ln116_2_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln114_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_66 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_difference4_03_fu_70 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal write_flag_0_fu_74 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal write_flag6_0_fu_78 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal output_difference3_04_fu_82 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal output_difference_05_fu_86 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal write_flag3_0_fu_90 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln114_fu_210_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln116_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln118_fu_260_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln118_1_fu_267_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln118_2_fu_274_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln116_1_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln116_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_mux_3_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mux_3_2_64_1_1_U65 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => p_read,
        din1 => p_read1,
        din2 => p_read2,
        din3 => i_fu_66,
        dout => tmp_fu_214_p5);

    mux_3_2_64_1_1_U66 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => p_read6,
        din1 => p_read7,
        din2 => p_read8,
        din3 => i_fu_66,
        dout => tmp_1_fu_233_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_66 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_fu_66 <= add_ln114_reg_455;
            end if; 
        end if;
    end process;

    write_flag3_0_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag3_0_fu_90 <= ap_const_lv1_0;
            elsif (((i_24_reg_448 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                write_flag3_0_fu_90 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag6_0_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag6_0_fu_78 <= ap_const_lv1_0;
            elsif ((not((i_24_reg_448 = ap_const_lv2_1)) and not((i_24_reg_448 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                write_flag6_0_fu_78 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    write_flag_0_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag_0_fu_74 <= ap_const_lv1_0;
            elsif (((i_24_reg_448 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                write_flag_0_fu_74 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln114_reg_455 <= add_ln114_fu_204_p2;
                i_24_reg_448 <= i_fu_66;
                tmp_1_reg_470 <= tmp_1_fu_233_p5;
                tmp_reg_460 <= tmp_fu_214_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_24_reg_448 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                output_difference3_04_fu_82 <= grp_fu_994_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_24_reg_448 = ap_const_lv2_1)) and not((i_24_reg_448 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                output_difference4_03_fu_70 <= grp_fu_994_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_24_reg_448 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                output_difference_05_fu_86 <= grp_fu_994_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sub_reg_480 <= grp_fu_990_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln114_fu_198_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln114_fu_198_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln114_fu_204_p2 <= std_logic_vector(unsigned(i_fu_66) + unsigned(ap_const_lv2_1));
    add_ln116_fu_223_p2 <= std_logic_vector(unsigned(zext_ln114_fu_210_p1) + unsigned(idx));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln114_fu_198_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln114_fu_198_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln114_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln114_fu_198_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln118_fu_260_p3;
    ap_return_1 <= select_ln118_1_fu_267_p3;
    ap_return_2 <= select_ln118_2_fu_274_p3;
    bitcast_ln116_1_fu_304_p1 <= sub_reg_480;
    bitcast_ln116_2_fu_313_p1 <= xor_ln116_fu_307_p2;
    bitcast_ln116_fu_299_p1 <= training_targets_q0;
    grp_fu_990_p_ce <= ap_const_logic_1;
    grp_fu_990_p_din0 <= tmp_reg_460;
    grp_fu_990_p_din1 <= bitcast_ln116_fu_299_p1;
    grp_fu_990_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_994_p_ce <= ap_const_logic_1;
    grp_fu_994_p_din0 <= bitcast_ln116_2_fu_313_p1;
    grp_fu_994_p_din1 <= tmp_1_reg_470;
    icmp_ln114_fu_198_p2 <= "1" when (i_fu_66 = ap_const_lv2_3) else "0";
    select_ln118_1_fu_267_p3 <= 
        output_difference3_04_fu_82 when (write_flag3_0_fu_90(0) = '1') else 
        p_read14;
    select_ln118_2_fu_274_p3 <= 
        output_difference4_03_fu_70 when (write_flag6_0_fu_78(0) = '1') else 
        p_read25;
    select_ln118_fu_260_p3 <= 
        output_difference_05_fu_86 when (write_flag_0_fu_74(0) = '1') else 
        p_read3;
    training_targets_address0 <= zext_ln116_fu_228_p1(9 - 1 downto 0);

    training_targets_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            training_targets_ce0 <= ap_const_logic_1;
        else 
            training_targets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln116_fu_307_p2 <= (bitcast_ln116_1_fu_304_p1 xor ap_const_lv64_8000000000000000);
    zext_ln114_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_66),9));
    zext_ln116_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_223_p2),64));
end behav;
