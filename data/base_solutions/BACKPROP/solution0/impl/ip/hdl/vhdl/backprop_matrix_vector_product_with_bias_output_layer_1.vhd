-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_matrix_vector_product_with_bias_output_layer_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    biases3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    biases3_ce0 : OUT STD_LOGIC;
    biases3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights3_ce0 : OUT STD_LOGIC;
    weights3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
    input_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_activations_ce0 : OUT STD_LOGIC;
    input_activations_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC;
    grp_fu_994_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_994_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_matrix_vector_product_with_bias_output_layer_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_6_reg_302 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln96_fu_193_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln96_reg_309 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_199_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln100_fu_225_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln100_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln102_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul8_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_add_bias_to_activations_1_fu_145_ap_start : STD_LOGIC;
    signal grp_add_bias_to_activations_1_fu_145_ap_done : STD_LOGIC;
    signal grp_add_bias_to_activations_1_fu_145_ap_idle : STD_LOGIC;
    signal grp_add_bias_to_activations_1_fu_145_ap_ready : STD_LOGIC;
    signal grp_add_bias_to_activations_1_fu_145_biases3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_biases3_ce0 : STD_LOGIC;
    signal grp_add_bias_to_activations_1_fu_145_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce : STD_LOGIC;
    signal i_reg_122 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln96_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_reg_133 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_add_bias_to_activations_1_fu_145_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln102_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln100_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln100_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_62 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal activations2_0_fu_66 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations12_0_fu_70 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations_0_fu_74 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln100_1_fu_236_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_fu_240_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_154_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_154_ce : STD_LOGIC;
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_add_bias_to_activations_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        biases3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        biases3_ce0 : OUT STD_LOGIC;
        biases3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_154_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_154_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_154_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_154_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_154_p_ce : OUT STD_LOGIC );
    end component;


    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_add_bias_to_activations_1_fu_145 : component backprop_add_bias_to_activations_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_bias_to_activations_1_fu_145_ap_start,
        ap_done => grp_add_bias_to_activations_1_fu_145_ap_done,
        ap_idle => grp_add_bias_to_activations_1_fu_145_ap_idle,
        ap_ready => grp_add_bias_to_activations_1_fu_145_ap_ready,
        biases3_address0 => grp_add_bias_to_activations_1_fu_145_biases3_address0,
        biases3_ce0 => grp_add_bias_to_activations_1_fu_145_biases3_ce0,
        biases3_q0 => biases3_q0,
        p_read => activations_0_fu_74,
        p_read1 => activations12_0_fu_70,
        p_read2 => activations2_0_fu_66,
        ap_return_0 => grp_add_bias_to_activations_1_fu_145_ap_return_0,
        ap_return_1 => grp_add_bias_to_activations_1_fu_145_ap_return_1,
        ap_return_2 => grp_add_bias_to_activations_1_fu_145_ap_return_2,
        grp_fu_154_p_din0 => grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0,
        grp_fu_154_p_din1 => grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1,
        grp_fu_154_p_opcode => grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode,
        grp_fu_154_p_dout0 => grp_fu_990_p_dout0,
        grp_fu_154_p_ce => grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
                    ap_return_0_preg <= grp_add_bias_to_activations_1_fu_145_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
                    ap_return_1_preg <= grp_add_bias_to_activations_1_fu_145_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
                    ap_return_2_preg <= grp_add_bias_to_activations_1_fu_145_ap_return_2;
                end if; 
            end if;
        end if;
    end process;


    grp_add_bias_to_activations_1_fu_145_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_add_bias_to_activations_1_fu_145_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln96_fu_187_p2 = ap_const_lv1_1))) then 
                    grp_add_bias_to_activations_1_fu_145_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_bias_to_activations_1_fu_145_ap_ready = ap_const_logic_1)) then 
                    grp_add_bias_to_activations_1_fu_145_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    activations12_0_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                activations12_0_fu_70 <= p_read1;
            elsif (((j_6_reg_302 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln100_fu_219_p2 = ap_const_lv1_1))) then 
                activations12_0_fu_70 <= add113_reg_133;
            end if; 
        end if;
    end process;

    activations2_0_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                activations2_0_fu_66 <= p_read2;
            elsif ((not((j_6_reg_302 = ap_const_lv2_1)) and not((j_6_reg_302 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln100_fu_219_p2 = ap_const_lv1_1))) then 
                activations2_0_fu_66 <= add113_reg_133;
            end if; 
        end if;
    end process;

    activations_0_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                activations_0_fu_74 <= p_read;
            elsif (((j_6_reg_302 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln100_fu_219_p2 = ap_const_lv1_1))) then 
                activations_0_fu_74 <= add113_reg_133;
            end if; 
        end if;
    end process;

    add113_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln96_fu_187_p2 = ap_const_lv1_0))) then 
                add113_reg_133 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                add113_reg_133 <= grp_fu_990_p_dout0;
            end if; 
        end if;
    end process;

    i_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln96_fu_187_p2 = ap_const_lv1_0))) then 
                i_reg_122 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_122 <= add_ln100_reg_337;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_62 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln100_fu_219_p2 = ap_const_lv1_1))) then 
                j_fu_62 <= add_ln96_reg_309;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln100_reg_337 <= add_ln100_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln96_reg_309 <= add_ln96_fu_193_p2;
                j_6_reg_302 <= j_fu_62;
                    tmp_reg_314(7 downto 6) <= tmp_fu_199_p3(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul8_reg_362 <= grp_fu_994_p_dout0;
            end if;
        end if;
    end process;
    tmp_reg_314(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, grp_add_bias_to_activations_1_fu_145_ap_done, icmp_ln96_fu_187_p2, ap_CS_fsm_state12, icmp_ln100_fu_219_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln96_fu_187_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln100_fu_219_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_fu_225_p2 <= std_logic_vector(unsigned(i_reg_122) + unsigned(ap_const_lv7_1));
    add_ln102_fu_240_p2 <= std_logic_vector(unsigned(zext_ln100_1_fu_236_p1) + unsigned(tmp_reg_314));
    add_ln96_fu_193_p2 <= std_logic_vector(unsigned(j_fu_62) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_add_bias_to_activations_1_fu_145_ap_done)
    begin
        if ((grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_add_bias_to_activations_1_fu_145_ap_done, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_add_bias_to_activations_1_fu_145_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(grp_add_bias_to_activations_1_fu_145_ap_done, grp_add_bias_to_activations_1_fu_145_ap_return_0, ap_CS_fsm_state12, ap_return_0_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
            ap_return_0 <= grp_add_bias_to_activations_1_fu_145_ap_return_0;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_add_bias_to_activations_1_fu_145_ap_done, grp_add_bias_to_activations_1_fu_145_ap_return_1, ap_CS_fsm_state12, ap_return_1_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
            ap_return_1 <= grp_add_bias_to_activations_1_fu_145_ap_return_1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(grp_add_bias_to_activations_1_fu_145_ap_done, grp_add_bias_to_activations_1_fu_145_ap_return_2, ap_CS_fsm_state12, ap_return_2_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_add_bias_to_activations_1_fu_145_ap_done = ap_const_logic_1))) then 
            ap_return_2 <= grp_add_bias_to_activations_1_fu_145_ap_return_2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;

    biases3_address0 <= grp_add_bias_to_activations_1_fu_145_biases3_address0;
    biases3_ce0 <= grp_add_bias_to_activations_1_fu_145_biases3_ce0;
    bitcast_ln102_fu_269_p1 <= weights3_q0;
    grp_add_bias_to_activations_1_fu_145_ap_start <= grp_add_bias_to_activations_1_fu_145_ap_start_reg;

    grp_fu_154_ce_assign_proc : process(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_154_ce <= grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_ce;
        else 
            grp_fu_154_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_154_opcode_assign_proc : process(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_154_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_opcode),2));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_154_opcode <= ap_const_lv2_0;
        else 
            grp_fu_154_opcode <= "XX";
        end if; 
    end process;


    grp_fu_154_p0_assign_proc : process(grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0, add113_reg_133, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_154_p0 <= grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_154_p0 <= add113_reg_133;
        else 
            grp_fu_154_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_154_p1_assign_proc : process(mul8_reg_362, grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_154_p1 <= grp_add_bias_to_activations_1_fu_145_grp_fu_154_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_154_p1 <= mul8_reg_362;
        else 
            grp_fu_154_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_990_p_ce <= grp_fu_154_ce;
    grp_fu_990_p_din0 <= grp_fu_154_p0;
    grp_fu_990_p_din1 <= grp_fu_154_p1;
    grp_fu_990_p_opcode <= grp_fu_154_opcode(1 - 1 downto 0);
    grp_fu_994_p_ce <= ap_const_logic_1;
    grp_fu_994_p_din0 <= bitcast_ln102_fu_269_p1;
    grp_fu_994_p_din1 <= input_activations_q0;
    icmp_ln100_fu_219_p2 <= "1" when (i_reg_122 = ap_const_lv7_40) else "0";
    icmp_ln96_fu_187_p2 <= "1" when (j_fu_62 = ap_const_lv2_3) else "0";
    input_activations_address0 <= zext_ln100_fu_231_p1(6 - 1 downto 0);

    input_activations_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_activations_ce0 <= ap_const_logic_1;
        else 
            input_activations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_199_p3 <= (j_fu_62 & ap_const_lv6_0);
    weights3_address0 <= zext_ln102_fu_245_p1(8 - 1 downto 0);

    weights3_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights3_ce0 <= ap_const_logic_1;
        else 
            weights3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln100_1_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_122),8));
    zext_ln100_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_122),64));
    zext_ln102_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_fu_240_p2),64));
end behav;
