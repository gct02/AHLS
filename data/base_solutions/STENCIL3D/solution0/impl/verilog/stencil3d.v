// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stencil3d_stencil3d,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.835000,HLS_SYN_LAT=8569,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=420,HLS_SYN_LUT=920,HLS_VERSION=2023_2}" *)

module stencil3d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_q0,
        C_address1,
        C_ce1,
        C_q1,
        orig_address0,
        orig_ce0,
        orig_q0,
        orig_address1,
        orig_ce1,
        orig_q1,
        sol_address0,
        sol_ce0,
        sol_we0,
        sol_d0,
        sol_address1,
        sol_ce1,
        sol_we1,
        sol_d1
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_state3 = 20'd4;
parameter    ap_ST_fsm_state4 = 20'd8;
parameter    ap_ST_fsm_state5 = 20'd16;
parameter    ap_ST_fsm_state6 = 20'd32;
parameter    ap_ST_fsm_state7 = 20'd64;
parameter    ap_ST_fsm_state8 = 20'd128;
parameter    ap_ST_fsm_state9 = 20'd256;
parameter    ap_ST_fsm_state10 = 20'd512;
parameter    ap_ST_fsm_state11 = 20'd1024;
parameter    ap_ST_fsm_state12 = 20'd2048;
parameter    ap_ST_fsm_state13 = 20'd4096;
parameter    ap_ST_fsm_state14 = 20'd8192;
parameter    ap_ST_fsm_state15 = 20'd16384;
parameter    ap_ST_fsm_state16 = 20'd32768;
parameter    ap_ST_fsm_state17 = 20'd65536;
parameter    ap_ST_fsm_state18 = 20'd131072;
parameter    ap_ST_fsm_state19 = 20'd262144;
parameter    ap_ST_fsm_state20 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] C_address0;
output   C_ce0;
input  [31:0] C_q0;
output  [0:0] C_address1;
output   C_ce1;
input  [31:0] C_q1;
output  [10:0] orig_address0;
output   orig_ce0;
input  [31:0] orig_q0;
output  [10:0] orig_address1;
output   orig_ce1;
input  [31:0] orig_q1;
output  [10:0] sol_address0;
output   sol_ce0;
output   sol_we0;
output  [31:0] sol_d0;
output  [10:0] sol_address1;
output   sol_ce1;
output   sol_we1;
output  [31:0] sol_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg C_ce0;
reg C_ce1;
reg[10:0] orig_address0;
reg orig_ce0;
reg[10:0] orig_address1;
reg orig_ce1;
reg[10:0] sol_address0;
reg sol_ce0;
reg sol_we0;
reg[10:0] sol_address1;
reg sol_ce1;
reg sol_we1;
reg[31:0] sol_d1;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_387;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire   [4:0] add_ln15_fu_406_p2;
reg   [4:0] add_ln15_reg_848;
wire    ap_CS_fsm_state2;
wire   [6:0] tmp_1_fu_416_p3;
reg   [6:0] tmp_1_reg_853;
wire   [7:0] zext_ln17_fu_424_p1;
reg   [7:0] zext_ln17_reg_858;
wire   [3:0] add_ln17_fu_439_p2;
reg   [3:0] add_ln17_reg_873;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln19_fu_454_p1;
reg   [63:0] zext_ln19_reg_878;
wire   [7:0] add_ln20_fu_467_p2;
reg   [7:0] add_ln20_reg_888;
wire   [63:0] zext_ln20_fu_479_p1;
reg   [63:0] zext_ln20_reg_893;
wire    ap_CS_fsm_state4;
wire   [10:0] empty_14_fu_501_p2;
reg   [10:0] empty_14_reg_909;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln25_fu_518_p2;
reg   [3:0] add_ln25_reg_924;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln27_fu_537_p1;
reg   [63:0] zext_ln27_reg_929;
wire   [63:0] zext_ln28_fu_547_p1;
reg   [63:0] zext_ln28_reg_939;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln35_fu_591_p1;
reg   [63:0] zext_ln35_reg_975;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln36_fu_602_p1;
reg   [63:0] zext_ln36_reg_985;
wire   [3:0] add_ln33_fu_607_p2;
reg   [3:0] add_ln33_reg_995;
reg  signed [31:0] C_load_reg_1000;
wire    ap_CS_fsm_state12;
reg  signed [31:0] C_load_1_reg_1005;
reg   [3:0] i_5_reg_1010;
wire    ap_CS_fsm_state13;
wire   [3:0] indvars_iv_next33_fu_632_p2;
reg   [3:0] indvars_iv_next33_reg_1022;
wire   [7:0] tmp_3_fu_638_p3;
reg   [7:0] tmp_3_reg_1027;
wire   [7:0] empty_15_fu_664_p2;
reg   [7:0] empty_15_reg_1036;
wire    ap_CS_fsm_state14;
wire   [7:0] empty_16_fu_673_p2;
reg   [7:0] empty_16_reg_1041;
wire   [3:0] indvars_iv_next19_fu_678_p2;
reg   [3:0] indvars_iv_next19_reg_1046;
wire   [3:0] tmp3_fu_684_p2;
reg   [3:0] tmp3_reg_1052;
wire   [63:0] zext_ln48_fu_709_p1;
reg   [63:0] zext_ln48_reg_1060;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_382_p2;
reg   [31:0] mul_ln57_reg_1080;
reg   [31:0] orig_load_8_reg_1085;
wire   [2:0] add_ln53_fu_764_p2;
reg   [2:0] add_ln53_reg_1100;
wire   [31:0] add_ln57_fu_804_p2;
reg   [31:0] add_ln57_reg_1115;
reg   [31:0] mul_ln57_1_reg_1120;
wire    ap_CS_fsm_state19;
reg   [3:0] k_reg_325;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln15_fu_400_p2;
reg   [3:0] k_1_reg_336;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln23_fu_487_p2;
reg   [3:0] j_1_reg_347;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln31_fu_565_p2;
reg   [3:0] j_2_reg_358;
wire   [0:0] icmp_ln46_fu_694_p2;
wire   [0:0] icmp_ln42_fu_626_p2;
reg   [2:0] k_2_reg_370;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln44_fu_646_p2;
wire   [0:0] icmp_ln17_fu_433_p2;
wire   [0:0] icmp_ln25_fu_512_p2;
wire   [0:0] icmp_ln33_fu_576_p2;
wire   [63:0] zext_ln49_fu_721_p1;
wire   [63:0] zext_ln50_fu_733_p1;
wire   [63:0] zext_ln51_fu_746_p1;
wire   [63:0] zext_ln52_fu_759_p1;
wire   [63:0] zext_ln53_fu_779_p1;
wire   [63:0] zext_ln54_fu_799_p1;
reg   [4:0] j_fu_102;
reg   [3:0] i_fu_106;
wire   [3:0] add_ln23_fu_552_p2;
reg   [3:0] i_1_fu_110;
wire   [3:0] add_ln31_fu_613_p2;
reg   [3:0] i_2_fu_114;
wire   [31:0] add_ln57_5_fu_833_p2;
reg  signed [31:0] grp_fu_382_p0;
reg  signed [31:0] grp_fu_382_p1;
wire  signed [31:0] add_ln57_4_fu_826_p2;
wire   [3:0] empty_fu_412_p1;
wire   [6:0] zext_ln17_1_fu_445_p1;
wire   [6:0] add_ln19_fu_449_p2;
wire   [7:0] or_ln_fu_459_p3;
wire  signed [10:0] sext_ln20_fu_476_p1;
wire   [10:0] tmp_2_fu_493_p3;
wire   [10:0] add_ln_fu_528_p4;
wire   [10:0] zext_ln25_fu_524_p1;
wire   [10:0] add_ln28_fu_542_p2;
wire   [10:0] shl_ln_fu_582_p4;
wire   [10:0] or_ln36_fu_596_p2;
wire  signed [4:0] tmp1_cast_cast_fu_652_p3;
wire   [7:0] tmp1_cast_cast_cast_fu_660_p1;
wire  signed [7:0] tmp2_cast_fu_669_p1;
wire   [10:0] add_ln2_fu_700_p4;
wire   [10:0] add_ln3_fu_714_p3;
wire   [10:0] add_ln4_fu_726_p3;
wire   [10:0] add_ln5_fu_738_p4;
wire   [10:0] add_ln6_fu_751_p4;
wire   [10:0] add_ln53_1_fu_770_p4;
wire   [2:0] add_ln54_fu_784_p2;
wire   [10:0] add_ln54_1_fu_790_p4;
wire   [31:0] add_ln57_2_fu_814_p2;
wire   [31:0] add_ln57_3_fu_820_p2;
wire   [31:0] add_ln57_1_fu_810_p2;
reg   [19:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 j_fu_102 = 5'd0;
#0 i_fu_106 = 4'd0;
#0 i_1_fu_110 = 4'd0;
#0 i_2_fu_114 = 4'd0;
end

stencil3d_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U1(
    .din0(grp_fu_382_p0),
    .din1(grp_fu_382_p1),
    .dout(grp_fu_382_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_1_fu_110 <= 4'd1;
    end else if (((icmp_ln33_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_1_fu_110 <= add_ln31_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_565_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i_2_fu_114 <= 4'd1;
    end else if (((icmp_ln44_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i_2_fu_114 <= indvars_iv_next33_reg_1022;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_106 <= 4'd1;
    end else if (((icmp_ln25_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_fu_106 <= add_ln23_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        j_1_reg_347 <= 4'd1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_1_reg_347 <= add_ln33_reg_995;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_626_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        j_2_reg_358 <= 4'd1;
    end else if (((icmp_ln46_fu_694_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
        j_2_reg_358 <= indvars_iv_next19_reg_1046;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_102 <= 5'd0;
    end else if (((icmp_ln17_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_fu_102 <= add_ln15_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_487_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k_1_reg_336 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_1_reg_336 <= add_ln25_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_646_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        k_2_reg_370 <= 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        k_2_reg_370 <= add_ln53_reg_1100;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_reg_325 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_325 <= add_ln17_reg_873;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        reg_387 <= orig_q1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        reg_387 <= orig_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_load_1_reg_1005 <= C_q0;
        C_load_reg_1000 <= C_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln15_reg_848 <= add_ln15_fu_406_p2;
        tmp_1_reg_853[6 : 3] <= tmp_1_fu_416_p3[6 : 3];
        zext_ln17_reg_858[6 : 3] <= zext_ln17_fu_424_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln17_reg_873 <= add_ln17_fu_439_p2;
        add_ln20_reg_888 <= add_ln20_fu_467_p2;
        zext_ln19_reg_878[6 : 0] <= zext_ln19_fu_454_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln25_reg_924 <= add_ln25_fu_518_p2;
        zext_ln27_reg_929[3 : 0] <= zext_ln27_fu_537_p1[3 : 0];
zext_ln27_reg_929[10 : 7] <= zext_ln27_fu_537_p1[10 : 7];
        zext_ln28_reg_939[10 : 0] <= zext_ln28_fu_547_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln33_reg_995 <= add_ln33_fu_607_p2;
        zext_ln35_reg_975[10 : 3] <= zext_ln35_fu_591_p1[10 : 3];
        zext_ln36_reg_985[10 : 3] <= zext_ln36_fu_602_p1[10 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln53_reg_1100 <= add_ln53_fu_764_p2;
        add_ln57_reg_1115 <= add_ln57_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        empty_14_reg_909[10 : 7] <= empty_14_fu_501_p2[10 : 7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        empty_15_reg_1036 <= empty_15_fu_664_p2;
        empty_16_reg_1041 <= empty_16_fu_673_p2;
        indvars_iv_next19_reg_1046 <= indvars_iv_next19_fu_678_p2;
        tmp3_reg_1052 <= tmp3_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_5_reg_1010 <= i_2_fu_114;
        indvars_iv_next33_reg_1022 <= indvars_iv_next33_fu_632_p2;
        tmp_3_reg_1027[7 : 4] <= tmp_3_fu_638_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        mul_ln57_1_reg_1120 <= grp_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mul_ln57_reg_1080 <= grp_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        orig_load_8_reg_1085 <= orig_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln20_reg_893[10 : 0] <= zext_ln20_fu_479_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        zext_ln48_reg_1060[10 : 0] <= zext_ln48_fu_709_p1[10 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        C_ce1 = 1'b1;
    end else begin
        C_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln42_fu_626_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_626_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_382_p0 = C_load_1_reg_1005;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_382_p0 = orig_q1;
    end else begin
        grp_fu_382_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_382_p1 = add_ln57_4_fu_826_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_382_p1 = C_load_reg_1000;
    end else begin
        grp_fu_382_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        orig_address0 = zext_ln53_fu_779_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        orig_address0 = zext_ln51_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        orig_address0 = zext_ln49_fu_721_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        orig_address0 = zext_ln35_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        orig_address0 = zext_ln28_fu_547_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        orig_address0 = zext_ln20_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        orig_address0 = zext_ln19_fu_454_p1;
    end else begin
        orig_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        orig_address1 = zext_ln54_fu_799_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        orig_address1 = zext_ln52_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        orig_address1 = zext_ln50_fu_733_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        orig_address1 = zext_ln48_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        orig_address1 = zext_ln36_fu_602_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        orig_address1 = zext_ln27_fu_537_p1;
    end else begin
        orig_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        orig_ce0 = 1'b1;
    end else begin
        orig_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        orig_ce1 = 1'b1;
    end else begin
        orig_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sol_address0 = zext_ln35_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sol_address0 = zext_ln28_reg_939;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        sol_address0 = zext_ln20_reg_893;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sol_address0 = zext_ln19_reg_878;
    end else begin
        sol_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sol_address1 = zext_ln48_reg_1060;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        sol_address1 = zext_ln36_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sol_address1 = zext_ln27_reg_929;
    end else begin
        sol_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        sol_ce0 = 1'b1;
    end else begin
        sol_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        sol_ce1 = 1'b1;
    end else begin
        sol_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        sol_d1 = add_ln57_5_fu_833_p2;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        sol_d1 = orig_q1;
    end else begin
        sol_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        sol_we0 = 1'b1;
    end else begin
        sol_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        sol_we1 = 1'b1;
    end else begin
        sol_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln15_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln17_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln23_fu_487_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln25_fu_512_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln31_fu_565_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln33_fu_576_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln42_fu_626_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln44_fu_646_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((icmp_ln46_fu_694_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address0 = 64'd1;

assign C_address1 = 64'd0;

assign add_ln15_fu_406_p2 = (j_fu_102 + 5'd1);

assign add_ln17_fu_439_p2 = (k_reg_325 + 4'd1);

assign add_ln19_fu_449_p2 = (zext_ln17_1_fu_445_p1 + tmp_1_reg_853);

assign add_ln20_fu_467_p2 = (or_ln_fu_459_p3 + zext_ln17_reg_858);

assign add_ln23_fu_552_p2 = (i_fu_106 + 4'd1);

assign add_ln25_fu_518_p2 = (k_1_reg_336 + 4'd1);

assign add_ln28_fu_542_p2 = (zext_ln25_fu_524_p1 + empty_14_reg_909);

assign add_ln2_fu_700_p4 = {{{i_5_reg_1010}, {j_2_reg_358}}, {k_2_reg_370}};

assign add_ln31_fu_613_p2 = (i_1_fu_110 + 4'd1);

assign add_ln33_fu_607_p2 = (j_1_reg_347 + 4'd1);

assign add_ln3_fu_714_p3 = {{empty_15_reg_1036}, {k_2_reg_370}};

assign add_ln4_fu_726_p3 = {{empty_16_reg_1041}, {k_2_reg_370}};

assign add_ln53_1_fu_770_p4 = {{{i_5_reg_1010}, {j_2_reg_358}}, {add_ln53_fu_764_p2}};

assign add_ln53_fu_764_p2 = (k_2_reg_370 + 3'd1);

assign add_ln54_1_fu_790_p4 = {{{i_5_reg_1010}, {j_2_reg_358}}, {add_ln54_fu_784_p2}};

assign add_ln54_fu_784_p2 = ($signed(k_2_reg_370) + $signed(3'd7));

assign add_ln57_1_fu_810_p2 = (add_ln57_reg_1115 + orig_load_8_reg_1085);

assign add_ln57_2_fu_814_p2 = (orig_q0 + orig_q1);

assign add_ln57_3_fu_820_p2 = (add_ln57_2_fu_814_p2 + reg_387);

assign add_ln57_4_fu_826_p2 = (add_ln57_3_fu_820_p2 + add_ln57_1_fu_810_p2);

assign add_ln57_5_fu_833_p2 = (mul_ln57_1_reg_1120 + mul_ln57_reg_1080);

assign add_ln57_fu_804_p2 = (reg_387 + orig_q0);

assign add_ln5_fu_738_p4 = {{{i_5_reg_1010}, {indvars_iv_next19_reg_1046}}, {k_2_reg_370}};

assign add_ln6_fu_751_p4 = {{{i_5_reg_1010}, {tmp3_reg_1052}}, {k_2_reg_370}};

assign add_ln_fu_528_p4 = {{{i_fu_106}, {3'd0}}, {k_1_reg_336}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_14_fu_501_p2 = (tmp_2_fu_493_p3 | 11'd120);

assign empty_15_fu_664_p2 = (tmp1_cast_cast_cast_fu_660_p1 + tmp_3_reg_1027);

assign empty_16_fu_673_p2 = ($signed(tmp2_cast_fu_669_p1) + $signed(tmp_3_reg_1027));

assign empty_fu_412_p1 = j_fu_102[3:0];

assign icmp_ln15_fu_400_p2 = ((j_fu_102 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_433_p2 = ((k_reg_325 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_487_p2 = ((i_fu_106 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_512_p2 = ((k_1_reg_336 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_565_p2 = ((i_1_fu_110 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_576_p2 = ((j_1_reg_347 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_626_p2 = ((i_2_fu_114 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_646_p2 = ((j_2_reg_358 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_694_p2 = ((k_2_reg_370 == 3'd7) ? 1'b1 : 1'b0);

assign indvars_iv_next19_fu_678_p2 = (j_2_reg_358 + 4'd1);

assign indvars_iv_next33_fu_632_p2 = (i_2_fu_114 + 4'd1);

assign or_ln36_fu_596_p2 = (shl_ln_fu_582_p4 | 11'd7);

assign or_ln_fu_459_p3 = {{4'd8}, {k_reg_325}};

assign sext_ln20_fu_476_p1 = $signed(add_ln20_reg_888);

assign shl_ln_fu_582_p4 = {{{i_1_fu_110}, {j_1_reg_347}}, {3'd0}};

assign sol_d0 = orig_q0;

assign tmp1_cast_cast_cast_fu_660_p1 = $unsigned(tmp1_cast_cast_fu_652_p3);

assign tmp1_cast_cast_fu_652_p3 = {{1'd1}, {j_2_reg_358}};

assign tmp2_cast_fu_669_p1 = tmp1_cast_cast_fu_652_p3;

assign tmp3_fu_684_p2 = ($signed(j_2_reg_358) + $signed(4'd15));

assign tmp_1_fu_416_p3 = {{empty_fu_412_p1}, {3'd0}};

assign tmp_2_fu_493_p3 = {{i_fu_106}, {7'd0}};

assign tmp_3_fu_638_p3 = {{i_2_fu_114}, {4'd0}};

assign zext_ln17_1_fu_445_p1 = k_reg_325;

assign zext_ln17_fu_424_p1 = tmp_1_fu_416_p3;

assign zext_ln19_fu_454_p1 = add_ln19_fu_449_p2;

assign zext_ln20_fu_479_p1 = $unsigned(sext_ln20_fu_476_p1);

assign zext_ln25_fu_524_p1 = k_1_reg_336;

assign zext_ln27_fu_537_p1 = add_ln_fu_528_p4;

assign zext_ln28_fu_547_p1 = add_ln28_fu_542_p2;

assign zext_ln35_fu_591_p1 = shl_ln_fu_582_p4;

assign zext_ln36_fu_602_p1 = or_ln36_fu_596_p2;

assign zext_ln48_fu_709_p1 = add_ln2_fu_700_p4;

assign zext_ln49_fu_721_p1 = add_ln3_fu_714_p3;

assign zext_ln50_fu_733_p1 = add_ln4_fu_726_p3;

assign zext_ln51_fu_746_p1 = add_ln5_fu_738_p4;

assign zext_ln52_fu_759_p1 = add_ln6_fu_751_p4;

assign zext_ln53_fu_779_p1 = add_ln53_1_fu_770_p4;

assign zext_ln54_fu_799_p1 = add_ln54_1_fu_790_p4;

always @ (posedge ap_clk) begin
    tmp_1_reg_853[2:0] <= 3'b000;
    zext_ln17_reg_858[2:0] <= 3'b000;
    zext_ln17_reg_858[7] <= 1'b0;
    zext_ln19_reg_878[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln20_reg_893[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    empty_14_reg_909[6:0] <= 7'b1111000;
    zext_ln27_reg_929[6:4] <= 3'b000;
    zext_ln27_reg_929[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_939[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln35_reg_975[2:0] <= 3'b000;
    zext_ln35_reg_975[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_985[2:0] <= 3'b111;
    zext_ln36_reg_985[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    tmp_3_reg_1027[3:0] <= 4'b0000;
    zext_ln48_reg_1060[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //stencil3d
