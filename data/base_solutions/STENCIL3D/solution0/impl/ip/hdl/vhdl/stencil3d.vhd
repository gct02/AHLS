-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stencil3d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    C_ce1 : OUT STD_LOGIC;
    C_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    orig_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    orig_ce0 : OUT STD_LOGIC;
    orig_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    orig_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    orig_ce1 : OUT STD_LOGIC;
    orig_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sol_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sol_ce0 : OUT STD_LOGIC;
    sol_we0 : OUT STD_LOGIC;
    sol_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sol_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    sol_ce1 : OUT STD_LOGIC;
    sol_we1 : OUT STD_LOGIC;
    sol_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of stencil3d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stencil3d_stencil3d,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.835000,HLS_SYN_LAT=8569,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=420,HLS_SYN_LUT=920,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_78 : STD_LOGIC_VECTOR (10 downto 0) := "00001111000";
    constant ap_const_lv11_7 : STD_LOGIC_VECTOR (10 downto 0) := "00000000111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln15_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_reg_846 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_414_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_851 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln17_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln17_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln17_reg_871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln19_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_reg_876 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln20_fu_465_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_reg_886 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln20_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal empty_14_fu_499_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_14_reg_907 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln25_fu_516_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln25_reg_922 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln27_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_reg_927 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_937 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln35_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_reg_973 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln36_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_983 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln33_fu_605_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln33_reg_993 : STD_LOGIC_VECTOR (3 downto 0);
    signal C_load_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal C_load_1_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_1008 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal indvars_iv_next33_fu_630_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next33_reg_1020 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_636_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1025 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_15_fu_662_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_15_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal empty_16_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_16_reg_1039 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next19_fu_676_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next19_reg_1044 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_fu_682_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp3_reg_1050 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_1058 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln57_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal orig_load_8_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln53_fu_762_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_reg_1098 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln57_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln57_1_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal k_reg_323 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln15_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln23_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln31_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_reg_356 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln46_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_reg_368 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln44_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_797_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_100 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_fu_104 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln23_fu_550_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_108 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln31_fu_611_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_fu_112 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln57_5_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_4_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln17_1_fu_443_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_fu_447_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln_fu_457_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln20_fu_474_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_fu_491_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln_fu_526_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln25_fu_522_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_fu_540_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_580_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln36_fu_594_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_cast_cast_fu_650_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_cast_cast_cast_fu_658_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_cast_fu_667_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln2_fu_698_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln3_fu_712_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln4_fu_724_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln5_fu_736_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln6_fu_749_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_1_fu_768_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln54_fu_782_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln54_1_fu_788_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln57_2_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_3_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_1_fu_808_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component stencil3d_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U1 : component stencil3d_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_380_p0,
        din1 => grp_fu_380_p1,
        dout => grp_fu_380_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_fu_108 <= ap_const_lv4_1;
            elsif (((icmp_ln33_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_1_fu_108 <= add_ln31_fu_611_p2;
            end if; 
        end if;
    end process;

    i_2_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_fu_112 <= ap_const_lv4_1;
            elsif (((icmp_ln44_fu_644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_2_fu_112 <= indvars_iv_next33_reg_1020;
            end if; 
        end if;
    end process;

    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_104 <= ap_const_lv4_1;
            elsif (((icmp_ln25_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_fu_104 <= add_ln23_fu_550_p2;
            end if; 
        end if;
    end process;

    j_1_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_1_reg_345 <= ap_const_lv4_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_1_reg_345 <= add_ln33_reg_993;
            end if; 
        end if;
    end process;

    j_2_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln42_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j_2_reg_356 <= ap_const_lv4_1;
            elsif (((icmp_ln46_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                j_2_reg_356 <= indvars_iv_next19_reg_1044;
            end if; 
        end if;
    end process;

    j_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_100 <= ap_const_lv5_0;
            elsif (((icmp_ln17_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_fu_100 <= add_ln15_reg_846;
            end if; 
        end if;
    end process;

    k_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_485_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_1_reg_334 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_1_reg_334 <= add_ln25_reg_922;
            end if; 
        end if;
    end process;

    k_2_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln44_fu_644_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                k_2_reg_368 <= ap_const_lv3_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                k_2_reg_368 <= add_ln53_reg_1098;
            end if; 
        end if;
    end process;

    k_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_323 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_323 <= add_ln17_reg_871;
            end if; 
        end if;
    end process;

    reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_385 <= orig_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                reg_385 <= orig_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                C_load_1_reg_1003 <= C_q0;
                C_load_reg_998 <= C_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln15_reg_846 <= add_ln15_fu_404_p2;
                    tmp_1_reg_851(6 downto 3) <= tmp_1_fu_414_p3(6 downto 3);
                    zext_ln17_reg_856(6 downto 3) <= zext_ln17_fu_422_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln17_reg_871 <= add_ln17_fu_437_p2;
                add_ln20_reg_886 <= add_ln20_fu_465_p2;
                    zext_ln19_reg_876(6 downto 0) <= zext_ln19_fu_452_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln25_reg_922 <= add_ln25_fu_516_p2;
                    zext_ln27_reg_927(3 downto 0) <= zext_ln27_fu_535_p1(3 downto 0);    zext_ln27_reg_927(10 downto 7) <= zext_ln27_fu_535_p1(10 downto 7);
                    zext_ln28_reg_937(10 downto 0) <= zext_ln28_fu_545_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln33_reg_993 <= add_ln33_fu_605_p2;
                    zext_ln35_reg_973(10 downto 3) <= zext_ln35_fu_589_p1(10 downto 3);
                    zext_ln36_reg_983(10 downto 3) <= zext_ln36_fu_600_p1(10 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln53_reg_1098 <= add_ln53_fu_762_p2;
                add_ln57_reg_1113 <= add_ln57_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    empty_14_reg_907(10 downto 7) <= empty_14_fu_499_p2(10 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                empty_15_reg_1034 <= empty_15_fu_662_p2;
                empty_16_reg_1039 <= empty_16_fu_671_p2;
                indvars_iv_next19_reg_1044 <= indvars_iv_next19_fu_676_p2;
                tmp3_reg_1050 <= tmp3_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_5_reg_1008 <= i_2_fu_112;
                indvars_iv_next33_reg_1020 <= indvars_iv_next33_fu_630_p2;
                    tmp_3_reg_1025(7 downto 4) <= tmp_3_fu_636_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mul_ln57_1_reg_1118 <= grp_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_ln57_reg_1078 <= grp_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                orig_load_8_reg_1083 <= orig_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    zext_ln20_reg_891(10 downto 0) <= zext_ln20_fu_477_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                    zext_ln48_reg_1058(10 downto 0) <= zext_ln48_fu_707_p1(10 downto 0);
            end if;
        end if;
    end process;
    tmp_1_reg_851(2 downto 0) <= "000";
    zext_ln17_reg_856(2 downto 0) <= "000";
    zext_ln17_reg_856(7) <= '0';
    zext_ln19_reg_876(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln20_reg_891(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    empty_14_reg_907(6 downto 0) <= "1111000";
    zext_ln27_reg_927(6 downto 4) <= "000";
    zext_ln27_reg_927(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln28_reg_937(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln35_reg_973(2 downto 0) <= "000";
    zext_ln35_reg_973(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_983(2 downto 0) <= "111";
    zext_ln36_reg_983(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    tmp_3_reg_1025(3 downto 0) <= "0000";
    zext_ln48_reg_1058(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, icmp_ln15_fu_398_p2, icmp_ln23_fu_485_p2, icmp_ln31_fu_563_p2, icmp_ln46_fu_692_p2, icmp_ln42_fu_624_p2, icmp_ln44_fu_644_p2, icmp_ln17_fu_431_p2, icmp_ln25_fu_510_p2, icmp_ln33_fu_574_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln15_fu_398_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln17_fu_431_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln23_fu_485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln25_fu_510_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln31_fu_563_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln33_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln42_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln44_fu_644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln46_fu_692_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_address0 <= ap_const_lv64_1(1 - 1 downto 0);
    C_address1 <= ap_const_lv64_0(1 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            C_ce1 <= ap_const_logic_1;
        else 
            C_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_404_p2 <= std_logic_vector(unsigned(j_fu_100) + unsigned(ap_const_lv5_1));
    add_ln17_fu_437_p2 <= std_logic_vector(unsigned(k_reg_323) + unsigned(ap_const_lv4_1));
    add_ln19_fu_447_p2 <= std_logic_vector(unsigned(zext_ln17_1_fu_443_p1) + unsigned(tmp_1_reg_851));
    add_ln20_fu_465_p2 <= std_logic_vector(unsigned(or_ln_fu_457_p3) + unsigned(zext_ln17_reg_856));
    add_ln23_fu_550_p2 <= std_logic_vector(unsigned(i_fu_104) + unsigned(ap_const_lv4_1));
    add_ln25_fu_516_p2 <= std_logic_vector(unsigned(k_1_reg_334) + unsigned(ap_const_lv4_1));
    add_ln28_fu_540_p2 <= std_logic_vector(unsigned(zext_ln25_fu_522_p1) + unsigned(empty_14_reg_907));
    add_ln2_fu_698_p4 <= ((i_5_reg_1008 & j_2_reg_356) & k_2_reg_368);
    add_ln31_fu_611_p2 <= std_logic_vector(unsigned(i_1_fu_108) + unsigned(ap_const_lv4_1));
    add_ln33_fu_605_p2 <= std_logic_vector(unsigned(j_1_reg_345) + unsigned(ap_const_lv4_1));
    add_ln3_fu_712_p3 <= (empty_15_reg_1034 & k_2_reg_368);
    add_ln4_fu_724_p3 <= (empty_16_reg_1039 & k_2_reg_368);
    add_ln53_1_fu_768_p4 <= ((i_5_reg_1008 & j_2_reg_356) & add_ln53_fu_762_p2);
    add_ln53_fu_762_p2 <= std_logic_vector(unsigned(k_2_reg_368) + unsigned(ap_const_lv3_1));
    add_ln54_1_fu_788_p4 <= ((i_5_reg_1008 & j_2_reg_356) & add_ln54_fu_782_p2);
    add_ln54_fu_782_p2 <= std_logic_vector(unsigned(k_2_reg_368) + unsigned(ap_const_lv3_7));
    add_ln57_1_fu_808_p2 <= std_logic_vector(unsigned(add_ln57_reg_1113) + unsigned(orig_load_8_reg_1083));
    add_ln57_2_fu_812_p2 <= std_logic_vector(unsigned(orig_q0) + unsigned(orig_q1));
    add_ln57_3_fu_818_p2 <= std_logic_vector(unsigned(add_ln57_2_fu_812_p2) + unsigned(reg_385));
    add_ln57_4_fu_824_p2 <= std_logic_vector(unsigned(add_ln57_3_fu_818_p2) + unsigned(add_ln57_1_fu_808_p2));
    add_ln57_5_fu_831_p2 <= std_logic_vector(unsigned(mul_ln57_1_reg_1118) + unsigned(mul_ln57_reg_1078));
    add_ln57_fu_802_p2 <= std_logic_vector(unsigned(reg_385) + unsigned(orig_q0));
    add_ln5_fu_736_p4 <= ((i_5_reg_1008 & indvars_iv_next19_reg_1044) & k_2_reg_368);
    add_ln6_fu_749_p4 <= ((i_5_reg_1008 & tmp3_reg_1050) & k_2_reg_368);
    add_ln_fu_526_p4 <= ((i_fu_104 & ap_const_lv3_0) & k_1_reg_334);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state13, icmp_ln42_fu_624_p2)
    begin
        if (((icmp_ln42_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, icmp_ln42_fu_624_p2)
    begin
        if (((icmp_ln42_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_14_fu_499_p2 <= (tmp_2_fu_491_p3 or ap_const_lv11_78);
    empty_15_fu_662_p2 <= std_logic_vector(unsigned(tmp1_cast_cast_cast_fu_658_p1) + unsigned(tmp_3_reg_1025));
    empty_16_fu_671_p2 <= std_logic_vector(signed(tmp2_cast_fu_667_p1) + signed(tmp_3_reg_1025));
    empty_fu_410_p1 <= j_fu_100(4 - 1 downto 0);

    grp_fu_380_p0_assign_proc : process(orig_q1, C_load_1_reg_1003, ap_CS_fsm_state16, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_380_p0 <= C_load_1_reg_1003;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_380_p0 <= orig_q1;
        else 
            grp_fu_380_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_380_p1_assign_proc : process(C_load_reg_998, ap_CS_fsm_state16, ap_CS_fsm_state19, add_ln57_4_fu_824_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_380_p1 <= add_ln57_4_fu_824_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_380_p1 <= C_load_reg_998;
        else 
            grp_fu_380_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln15_fu_398_p2 <= "1" when (j_fu_100 = ap_const_lv5_10) else "0";
    icmp_ln17_fu_431_p2 <= "1" when (k_reg_323 = ap_const_lv4_8) else "0";
    icmp_ln23_fu_485_p2 <= "1" when (i_fu_104 = ap_const_lv4_F) else "0";
    icmp_ln25_fu_510_p2 <= "1" when (k_1_reg_334 = ap_const_lv4_8) else "0";
    icmp_ln31_fu_563_p2 <= "1" when (i_1_fu_108 = ap_const_lv4_F) else "0";
    icmp_ln33_fu_574_p2 <= "1" when (j_1_reg_345 = ap_const_lv4_F) else "0";
    icmp_ln42_fu_624_p2 <= "1" when (i_2_fu_112 = ap_const_lv4_F) else "0";
    icmp_ln44_fu_644_p2 <= "1" when (j_2_reg_356 = ap_const_lv4_F) else "0";
    icmp_ln46_fu_692_p2 <= "1" when (k_2_reg_368 = ap_const_lv3_7) else "0";
    indvars_iv_next19_fu_676_p2 <= std_logic_vector(unsigned(j_2_reg_356) + unsigned(ap_const_lv4_1));
    indvars_iv_next33_fu_630_p2 <= std_logic_vector(unsigned(i_2_fu_112) + unsigned(ap_const_lv4_1));
    or_ln36_fu_594_p2 <= (shl_ln_fu_580_p4 or ap_const_lv11_7);
    or_ln_fu_457_p3 <= (ap_const_lv4_8 & k_reg_323);

    orig_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state3, zext_ln19_fu_452_p1, zext_ln20_fu_477_p1, ap_CS_fsm_state4, ap_CS_fsm_state7, zext_ln28_fu_545_p1, zext_ln35_fu_589_p1, ap_CS_fsm_state10, ap_CS_fsm_state16, zext_ln49_fu_719_p1, zext_ln51_fu_744_p1, zext_ln53_fu_777_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            orig_address0 <= zext_ln53_fu_777_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            orig_address0 <= zext_ln51_fu_744_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            orig_address0 <= zext_ln49_fu_719_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            orig_address0 <= zext_ln35_fu_589_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            orig_address0 <= zext_ln28_fu_545_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            orig_address0 <= zext_ln20_fu_477_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            orig_address0 <= zext_ln19_fu_452_p1(11 - 1 downto 0);
        else 
            orig_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    orig_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state7, zext_ln27_fu_535_p1, ap_CS_fsm_state10, zext_ln36_fu_600_p1, zext_ln48_fu_707_p1, ap_CS_fsm_state15, ap_CS_fsm_state16, zext_ln50_fu_731_p1, zext_ln52_fu_757_p1, zext_ln54_fu_797_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            orig_address1 <= zext_ln54_fu_797_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            orig_address1 <= zext_ln52_fu_757_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            orig_address1 <= zext_ln50_fu_731_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            orig_address1 <= zext_ln48_fu_707_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            orig_address1 <= zext_ln36_fu_600_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            orig_address1 <= zext_ln27_fu_535_p1(11 - 1 downto 0);
        else 
            orig_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    orig_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            orig_ce0 <= ap_const_logic_1;
        else 
            orig_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    orig_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            orig_ce1 <= ap_const_logic_1;
        else 
            orig_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln20_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln20_reg_886),11));

    shl_ln_fu_580_p4 <= ((i_1_fu_108 & j_1_reg_345) & ap_const_lv3_0);

    sol_address0_assign_proc : process(zext_ln19_reg_876, zext_ln20_reg_891, ap_CS_fsm_state4, zext_ln28_reg_937, zext_ln35_reg_973, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sol_address0 <= zext_ln35_reg_973(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sol_address0 <= zext_ln28_reg_937(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sol_address0 <= zext_ln20_reg_891(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sol_address0 <= zext_ln19_reg_876(11 - 1 downto 0);
        else 
            sol_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sol_address1_assign_proc : process(zext_ln27_reg_927, zext_ln36_reg_983, zext_ln48_reg_1058, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sol_address1 <= zext_ln48_reg_1058(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sol_address1 <= zext_ln36_reg_983(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sol_address1 <= zext_ln27_reg_927(11 - 1 downto 0);
        else 
            sol_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    sol_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sol_ce0 <= ap_const_logic_1;
        else 
            sol_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sol_ce1 <= ap_const_logic_1;
        else 
            sol_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sol_d0 <= orig_q0;

    sol_d1_assign_proc : process(orig_q1, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state20, add_ln57_5_fu_831_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            sol_d1 <= add_ln57_5_fu_831_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sol_d1 <= orig_q1;
        else 
            sol_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sol_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            sol_we0 <= ap_const_logic_1;
        else 
            sol_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sol_we1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sol_we1 <= ap_const_logic_1;
        else 
            sol_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_cast_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_cast_cast_fu_650_p3),8));
    tmp1_cast_cast_fu_650_p3 <= (ap_const_lv1_1 & j_2_reg_356);
        tmp2_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_cast_cast_fu_650_p3),8));

    tmp3_fu_682_p2 <= std_logic_vector(unsigned(j_2_reg_356) + unsigned(ap_const_lv4_F));
    tmp_1_fu_414_p3 <= (empty_fu_410_p1 & ap_const_lv3_0);
    tmp_2_fu_491_p3 <= (i_fu_104 & ap_const_lv7_0);
    tmp_3_fu_636_p3 <= (i_2_fu_112 & ap_const_lv4_0);
    zext_ln17_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_323),7));
    zext_ln17_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_414_p3),8));
    zext_ln19_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_447_p2),64));
    zext_ln20_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln20_fu_474_p1),64));
    zext_ln25_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_334),11));
    zext_ln27_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_526_p4),64));
    zext_ln28_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_540_p2),64));
    zext_ln35_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_580_p4),64));
    zext_ln36_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_594_p2),64));
    zext_ln48_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln2_fu_698_p4),64));
    zext_ln49_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln3_fu_712_p3),64));
    zext_ln50_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln4_fu_724_p3),64));
    zext_ln51_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln5_fu_736_p4),64));
    zext_ln52_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln6_fu_749_p4),64));
    zext_ln53_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_1_fu_768_p4),64));
    zext_ln54_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_1_fu_788_p4),64));
end behav;
