// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_local_memcpy (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s2_address0,
        s2_ce0,
        s2_q0,
        s2_address1,
        s2_ce1,
        s2_q1,
        s2_offset,
        n,
        idx1,
        sha_info_data_address0,
        sha_info_data_ce0,
        sha_info_data_we0,
        sha_info_data_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] s2_address0;
output   s2_ce0;
input  [7:0] s2_q0;
output  [13:0] s2_address1;
output   s2_ce1;
input  [7:0] s2_q1;
input  [0:0] s2_offset;
input  [31:0] n;
input  [13:0] idx1;
output  [3:0] sha_info_data_address0;
output   sha_info_data_ce0;
output   sha_info_data_we0;
output  [31:0] sha_info_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] s2_address0;
reg s2_ce0;
reg[13:0] s2_address1;
reg s2_ce1;
reg sha_info_data_ce0;
reg sha_info_data_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] tmp_9_fu_144_p3;
reg   [13:0] tmp_9_reg_354;
wire   [30:0] m_fu_200_p3;
reg   [30:0] m_reg_362;
reg   [4:0] idx9_load_reg_367;
wire    ap_CS_fsm_state2;
wire   [13:0] add_ln73_fu_243_p2;
reg   [13:0] add_ln73_reg_375;
reg   [7:0] p2_load_reg_391;
wire    ap_CS_fsm_state3;
reg   [7:0] p2_1_load_reg_401;
wire   [63:0] zext_ln73_fu_253_p1;
wire   [0:0] icmp_ln79_fu_225_p2;
wire   [63:0] zext_ln82_fu_269_p1;
wire   [63:0] zext_ln83_fu_300_p1;
wire   [63:0] zext_ln84_fu_315_p1;
wire   [63:0] zext_ln79_fu_320_p1;
wire    ap_CS_fsm_state4;
reg   [4:0] idx9_fu_64;
wire   [4:0] add_ln79_1_fu_230_p2;
reg   [31:0] idx_fu_68;
wire   [31:0] add_ln79_fu_274_p2;
wire   [31:0] sub_ln76_fu_160_p2;
wire   [29:0] tmp_s_fu_166_p4;
wire   [30:0] zext_ln76_fu_176_p1;
wire   [29:0] tmp_1_fu_186_p4;
wire   [0:0] tmp_3_fu_152_p3;
wire   [30:0] sub_ln76_1_fu_180_p2;
wire   [30:0] zext_ln76_1_fu_196_p1;
wire   [30:0] zext_ln79_1_fu_221_p1;
wire   [13:0] trunc_ln79_fu_239_p1;
wire   [13:0] add_ln73_1_fu_248_p2;
wire   [13:0] add_ln82_fu_258_p2;
wire   [13:0] add_ln82_1_fu_264_p2;
wire   [13:0] add_ln83_fu_290_p2;
wire   [13:0] add_ln83_1_fu_295_p2;
wire   [13:0] add_ln84_fu_305_p2;
wire   [13:0] add_ln84_1_fu_310_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 idx9_fu_64 = 5'd0;
#0 idx_fu_68 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx9_fu_64 <= 5'd0;
    end else if (((icmp_ln79_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        idx9_fu_64 <= add_ln79_1_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_fu_68 <= 32'd0;
    end else if (((icmp_ln79_fu_225_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_68 <= add_ln79_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln73_reg_375 <= add_ln73_fu_243_p2;
        idx9_load_reg_367 <= idx9_fu_64;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        m_reg_362 <= m_fu_200_p3;
        tmp_9_reg_354[13] <= tmp_9_fu_144_p3[13];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p2_1_load_reg_401 <= s2_q0;
        p2_load_reg_391 <= s2_q1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s2_address0 = zext_ln84_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s2_address0 = zext_ln82_fu_269_p1;
    end else begin
        s2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s2_address1 = zext_ln83_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s2_address1 = zext_ln73_fu_253_p1;
    end else begin
        s2_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        s2_ce0 = 1'b1;
    end else begin
        s2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        s2_ce1 = 1'b1;
    end else begin
        s2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sha_info_data_ce0 = 1'b1;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sha_info_data_we0 = 1'b1;
    end else begin
        sha_info_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln79_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln73_1_fu_248_p2 = (tmp_9_reg_354 + add_ln73_fu_243_p2);

assign add_ln73_fu_243_p2 = (trunc_ln79_fu_239_p1 + idx1);

assign add_ln79_1_fu_230_p2 = (idx9_fu_64 + 5'd1);

assign add_ln79_fu_274_p2 = (idx_fu_68 + 32'd4);

assign add_ln82_1_fu_264_p2 = (tmp_9_reg_354 + add_ln82_fu_258_p2);

assign add_ln82_fu_258_p2 = (add_ln73_fu_243_p2 + 14'd1);

assign add_ln83_1_fu_295_p2 = (tmp_9_reg_354 + add_ln83_fu_290_p2);

assign add_ln83_fu_290_p2 = (add_ln73_reg_375 + 14'd2);

assign add_ln84_1_fu_310_p2 = (tmp_9_reg_354 + add_ln84_fu_305_p2);

assign add_ln84_fu_305_p2 = (add_ln73_reg_375 + 14'd3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign icmp_ln79_fu_225_p2 = (($signed(zext_ln79_1_fu_221_p1) < $signed(m_reg_362)) ? 1'b1 : 1'b0);

assign m_fu_200_p3 = ((tmp_3_fu_152_p3[0:0] == 1'b1) ? sub_ln76_1_fu_180_p2 : zext_ln76_1_fu_196_p1);

assign sha_info_data_address0 = zext_ln79_fu_320_p1;

assign sha_info_data_d0 = {{{{s2_q0}, {s2_q1}}, {p2_1_load_reg_401}}, {p2_load_reg_391}};

assign sub_ln76_1_fu_180_p2 = (31'd0 - zext_ln76_fu_176_p1);

assign sub_ln76_fu_160_p2 = (32'd0 - n);

assign tmp_1_fu_186_p4 = {{n[31:2]}};

assign tmp_3_fu_152_p3 = n[32'd31];

assign tmp_9_fu_144_p3 = {{s2_offset}, {13'd0}};

assign tmp_s_fu_166_p4 = {{sub_ln76_fu_160_p2[31:2]}};

assign trunc_ln79_fu_239_p1 = idx_fu_68[13:0];

assign zext_ln73_fu_253_p1 = add_ln73_1_fu_248_p2;

assign zext_ln76_1_fu_196_p1 = tmp_1_fu_186_p4;

assign zext_ln76_fu_176_p1 = tmp_s_fu_166_p4;

assign zext_ln79_1_fu_221_p1 = idx9_fu_64;

assign zext_ln79_fu_320_p1 = idx9_load_reg_367;

assign zext_ln82_fu_269_p1 = add_ln82_1_fu_264_p2;

assign zext_ln83_fu_300_p1 = add_ln83_1_fu_295_p2;

assign zext_ln84_fu_315_p1 = add_ln84_1_fu_310_p2;

always @ (posedge ap_clk) begin
    tmp_9_reg_354[12:0] <= 13'b0000000000000;
end

endmodule //sha_stream_local_memcpy
