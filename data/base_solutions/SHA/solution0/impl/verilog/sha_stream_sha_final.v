// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_sha_final (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha_info_count_lo,
        sha_info_count_hi,
        sha_info_data_address0,
        sha_info_data_ce0,
        sha_info_data_we0,
        sha_info_data_d0,
        sha_info_data_q0,
        sha_info_data_address1,
        sha_info_data_ce1,
        sha_info_data_we1,
        sha_info_data_d1,
        sha_info_digest_address0,
        sha_info_digest_ce0,
        sha_info_digest_we0,
        sha_info_digest_d0,
        sha_info_digest_q0,
        sha_info_digest_address1,
        sha_info_digest_ce1,
        sha_info_digest_we1,
        sha_info_digest_d1,
        sha_info_digest_q1
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sha_info_count_lo;
input  [31:0] sha_info_count_hi;
output  [3:0] sha_info_data_address0;
output   sha_info_data_ce0;
output   sha_info_data_we0;
output  [31:0] sha_info_data_d0;
input  [31:0] sha_info_data_q0;
output  [3:0] sha_info_data_address1;
output   sha_info_data_ce1;
output   sha_info_data_we1;
output  [31:0] sha_info_data_d1;
output  [2:0] sha_info_digest_address0;
output   sha_info_digest_ce0;
output   sha_info_digest_we0;
output  [31:0] sha_info_digest_d0;
input  [31:0] sha_info_digest_q0;
output  [2:0] sha_info_digest_address1;
output   sha_info_digest_ce1;
output   sha_info_digest_we1;
output  [31:0] sha_info_digest_d1;
input  [31:0] sha_info_digest_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] sha_info_data_address0;
reg sha_info_data_ce0;
reg sha_info_data_we0;
reg[31:0] sha_info_data_d0;
reg sha_info_data_ce1;
reg sha_info_data_we1;
reg sha_info_digest_ce0;
reg sha_info_digest_we0;
reg sha_info_digest_ce1;
reg sha_info_digest_we1;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] count_fu_86_p4;
reg   [5:0] count_reg_145;
wire   [3:0] trunc_ln174_fu_114_p1;
reg   [3:0] trunc_ln174_reg_154;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln181_fu_119_p2;
reg   [0:0] icmp_ln181_reg_159;
wire   [6:0] sub_ln186_fu_125_p2;
reg   [6:0] sub_ln186_reg_163;
wire   [6:0] zext_ln182_fu_137_p1;
reg   [6:0] zext_ln182_reg_168;
wire    grp_local_memset_fu_64_ap_start;
wire    grp_local_memset_fu_64_ap_done;
wire    grp_local_memset_fu_64_ap_idle;
wire    grp_local_memset_fu_64_ap_ready;
reg   [6:0] grp_local_memset_fu_64_n;
reg   [3:0] grp_local_memset_fu_64_e;
wire   [3:0] grp_local_memset_fu_64_sha_info_data_address0;
wire    grp_local_memset_fu_64_sha_info_data_ce0;
wire    grp_local_memset_fu_64_sha_info_data_we0;
wire   [31:0] grp_local_memset_fu_64_sha_info_data_d0;
wire    grp_sha_transform_fu_74_ap_start;
wire    grp_sha_transform_fu_74_ap_done;
wire    grp_sha_transform_fu_74_ap_idle;
wire    grp_sha_transform_fu_74_ap_ready;
wire   [3:0] grp_sha_transform_fu_74_sha_info_data_address0;
wire    grp_sha_transform_fu_74_sha_info_data_ce0;
wire   [2:0] grp_sha_transform_fu_74_sha_info_digest_address0;
wire    grp_sha_transform_fu_74_sha_info_digest_ce0;
wire    grp_sha_transform_fu_74_sha_info_digest_we0;
wire   [31:0] grp_sha_transform_fu_74_sha_info_digest_d0;
wire   [2:0] grp_sha_transform_fu_74_sha_info_digest_address1;
wire    grp_sha_transform_fu_74_sha_info_digest_ce1;
wire    grp_sha_transform_fu_74_sha_info_digest_we1;
wire   [31:0] grp_sha_transform_fu_74_sha_info_digest_d1;
reg    grp_local_memset_fu_64_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
reg    grp_sha_transform_fu_74_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln179_fu_96_p1;
wire    ap_CS_fsm_state9;
wire   [6:0] zext_ln174_fu_105_p1;
wire   [6:0] count_1_fu_108_p2;
wire   [5:0] xor_ln182_fu_132_p2;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
reg    ap_block_state8_on_subcall_done;
reg    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_local_memset_fu_64_ap_start_reg = 1'b0;
#0 grp_sha_transform_fu_74_ap_start_reg = 1'b0;
end

sha_stream_local_memset grp_local_memset_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_local_memset_fu_64_ap_start),
    .ap_done(grp_local_memset_fu_64_ap_done),
    .ap_idle(grp_local_memset_fu_64_ap_idle),
    .ap_ready(grp_local_memset_fu_64_ap_ready),
    .n(grp_local_memset_fu_64_n),
    .e(grp_local_memset_fu_64_e),
    .sha_info_data_address0(grp_local_memset_fu_64_sha_info_data_address0),
    .sha_info_data_ce0(grp_local_memset_fu_64_sha_info_data_ce0),
    .sha_info_data_we0(grp_local_memset_fu_64_sha_info_data_we0),
    .sha_info_data_d0(grp_local_memset_fu_64_sha_info_data_d0)
);

sha_stream_sha_transform grp_sha_transform_fu_74(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha_transform_fu_74_ap_start),
    .ap_done(grp_sha_transform_fu_74_ap_done),
    .ap_idle(grp_sha_transform_fu_74_ap_idle),
    .ap_ready(grp_sha_transform_fu_74_ap_ready),
    .sha_info_data_address0(grp_sha_transform_fu_74_sha_info_data_address0),
    .sha_info_data_ce0(grp_sha_transform_fu_74_sha_info_data_ce0),
    .sha_info_data_q0(sha_info_data_q0),
    .sha_info_digest_address0(grp_sha_transform_fu_74_sha_info_digest_address0),
    .sha_info_digest_ce0(grp_sha_transform_fu_74_sha_info_digest_ce0),
    .sha_info_digest_we0(grp_sha_transform_fu_74_sha_info_digest_we0),
    .sha_info_digest_d0(grp_sha_transform_fu_74_sha_info_digest_d0),
    .sha_info_digest_q0(sha_info_digest_q0),
    .sha_info_digest_address1(grp_sha_transform_fu_74_sha_info_digest_address1),
    .sha_info_digest_ce1(grp_sha_transform_fu_74_sha_info_digest_ce1),
    .sha_info_digest_we1(grp_sha_transform_fu_74_sha_info_digest_we1),
    .sha_info_digest_d1(grp_sha_transform_fu_74_sha_info_digest_d1),
    .sha_info_digest_q1(sha_info_digest_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_local_memset_fu_64_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln181_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln181_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
            grp_local_memset_fu_64_ap_start_reg <= 1'b1;
        end else if ((grp_local_memset_fu_64_ap_ready == 1'b1)) begin
            grp_local_memset_fu_64_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha_transform_fu_74_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
            grp_sha_transform_fu_74_ap_start_reg <= 1'b1;
        end else if ((grp_sha_transform_fu_74_ap_ready == 1'b1)) begin
            grp_sha_transform_fu_74_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        count_reg_145 <= {{sha_info_count_lo[8:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln181_reg_159 <= icmp_ln181_fu_119_p2;
        sub_ln186_reg_163 <= sub_ln186_fu_125_p2;
        trunc_ln174_reg_154 <= trunc_ln174_fu_114_p1;
        zext_ln182_reg_168[5 : 0] <= zext_ln182_fu_137_p1[5 : 0];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_sha_transform_fu_74_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_local_memset_fu_64_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_local_memset_fu_64_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_sha_transform_fu_74_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state8_on_subcall_done)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((grp_sha_transform_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha_transform_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln181_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        grp_local_memset_fu_64_e = 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_local_memset_fu_64_e = trunc_ln174_reg_154;
    end else begin
        grp_local_memset_fu_64_e = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln181_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        grp_local_memset_fu_64_n = 7'd56;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_local_memset_fu_64_n = zext_ln182_reg_168;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_local_memset_fu_64_n = sub_ln186_reg_163;
    end else begin
        grp_local_memset_fu_64_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha_info_data_address0 = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_data_address0 = zext_ln179_fu_96_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        sha_info_data_address0 = grp_sha_transform_fu_74_sha_info_data_address0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln181_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        sha_info_data_address0 = grp_local_memset_fu_64_sha_info_data_address0;
    end else begin
        sha_info_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        sha_info_data_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        sha_info_data_ce0 = grp_sha_transform_fu_74_sha_info_data_ce0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln181_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        sha_info_data_ce0 = grp_local_memset_fu_64_sha_info_data_ce0;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha_info_data_ce1 = 1'b1;
    end else begin
        sha_info_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha_info_data_d0 = sha_info_count_lo;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_data_d0 = 32'd128;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln181_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        sha_info_data_d0 = grp_local_memset_fu_64_sha_info_data_d0;
    end else begin
        sha_info_data_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        sha_info_data_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln181_reg_159 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        sha_info_data_we0 = grp_local_memset_fu_64_sha_info_data_we0;
    end else begin
        sha_info_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sha_info_data_we1 = 1'b1;
    end else begin
        sha_info_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        sha_info_digest_ce0 = grp_sha_transform_fu_74_sha_info_digest_ce0;
    end else begin
        sha_info_digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        sha_info_digest_ce1 = grp_sha_transform_fu_74_sha_info_digest_ce1;
    end else begin
        sha_info_digest_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        sha_info_digest_we0 = grp_sha_transform_fu_74_sha_info_digest_we0;
    end else begin
        sha_info_digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        sha_info_digest_we1 = grp_sha_transform_fu_74_sha_info_digest_we1;
    end else begin
        sha_info_digest_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln181_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_local_memset_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_local_memset_fu_64_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_sha_transform_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_on_subcall_done) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_sha_transform_fu_74_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state8_on_subcall_done = ((grp_local_memset_fu_64_ap_done == 1'b0) & (icmp_ln181_reg_159 == 1'd1));
end

assign count_1_fu_108_p2 = (zext_ln174_fu_105_p1 + 7'd1);

assign count_fu_86_p4 = {{sha_info_count_lo[8:3]}};

assign grp_local_memset_fu_64_ap_start = grp_local_memset_fu_64_ap_start_reg;

assign grp_sha_transform_fu_74_ap_start = grp_sha_transform_fu_74_ap_start_reg;

assign icmp_ln181_fu_119_p2 = ((count_1_fu_108_p2 > 7'd56) ? 1'b1 : 1'b0);

assign sha_info_data_address1 = 4'd14;

assign sha_info_data_d1 = sha_info_count_hi;

assign sha_info_digest_address0 = grp_sha_transform_fu_74_sha_info_digest_address0;

assign sha_info_digest_address1 = grp_sha_transform_fu_74_sha_info_digest_address1;

assign sha_info_digest_d0 = grp_sha_transform_fu_74_sha_info_digest_d0;

assign sha_info_digest_d1 = grp_sha_transform_fu_74_sha_info_digest_d1;

assign sub_ln186_fu_125_p2 = (7'd55 - zext_ln174_fu_105_p1);

assign trunc_ln174_fu_114_p1 = count_1_fu_108_p2[3:0];

assign xor_ln182_fu_132_p2 = (count_reg_145 ^ 6'd63);

assign zext_ln174_fu_105_p1 = count_reg_145;

assign zext_ln179_fu_96_p1 = count_fu_86_p4;

assign zext_ln182_fu_137_p1 = xor_ln182_fu_132_p2;

always @ (posedge ap_clk) begin
    zext_ln182_reg_168[6] <= 1'b0;
end

endmodule //sha_stream_sha_final
