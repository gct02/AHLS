// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_sha_init (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha_info_count_lo,
        sha_info_count_lo_ap_vld,
        sha_info_count_hi,
        sha_info_count_hi_ap_vld,
        sha_info_digest_address0,
        sha_info_digest_ce0,
        sha_info_digest_we0,
        sha_info_digest_d0,
        sha_info_digest_address1,
        sha_info_digest_ce1,
        sha_info_digest_we1,
        sha_info_digest_d1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] sha_info_count_lo;
output   sha_info_count_lo_ap_vld;
output  [31:0] sha_info_count_hi;
output   sha_info_count_hi_ap_vld;
output  [2:0] sha_info_digest_address0;
output   sha_info_digest_ce0;
output   sha_info_digest_we0;
output  [31:0] sha_info_digest_d0;
output  [2:0] sha_info_digest_address1;
output   sha_info_digest_ce1;
output   sha_info_digest_we1;
output  [31:0] sha_info_digest_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sha_info_count_lo_ap_vld;
reg sha_info_count_hi_ap_vld;
reg[2:0] sha_info_digest_address0;
reg sha_info_digest_ce0;
reg sha_info_digest_we0;
reg[31:0] sha_info_digest_d0;
reg[2:0] sha_info_digest_address1;
reg sha_info_digest_ce1;
reg sha_info_digest_we1;
reg[31:0] sha_info_digest_d1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_count_hi_ap_vld = 1'b1;
    end else begin
        sha_info_count_hi_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_count_lo_ap_vld = 1'b1;
    end else begin
        sha_info_count_lo_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_address0 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_address0 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_digest_address0 = 3'd0;
    end else begin
        sha_info_digest_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_address1 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_address1 = 3'd1;
    end else begin
        sha_info_digest_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        sha_info_digest_ce0 = 1'b1;
    end else begin
        sha_info_digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        sha_info_digest_ce1 = 1'b1;
    end else begin
        sha_info_digest_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_d0 = 32'd271733878;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_d0 = 32'd2562383102;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_digest_d0 = 32'd1732584193;
    end else begin
        sha_info_digest_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_d1 = 32'd3285377520;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_d1 = 32'd4023233417;
    end else begin
        sha_info_digest_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        sha_info_digest_we0 = 1'b1;
    end else begin
        sha_info_digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        sha_info_digest_we1 = 1'b1;
    end else begin
        sha_info_digest_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign sha_info_count_hi = 32'd0;

assign sha_info_count_lo = 32'd0;

endmodule //sha_stream_sha_init
