// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_sha_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_q1,
        buffer_offset,
        count,
        sha_info_count_lo_i,
        sha_info_count_lo_o,
        sha_info_count_lo_o_ap_vld,
        sha_info_count_hi_i,
        sha_info_count_hi_o,
        sha_info_count_hi_o_ap_vld,
        sha_info_data_address0,
        sha_info_data_ce0,
        sha_info_data_we0,
        sha_info_data_d0,
        sha_info_data_q0,
        sha_info_digest_address0,
        sha_info_digest_ce0,
        sha_info_digest_we0,
        sha_info_digest_d0,
        sha_info_digest_q0,
        sha_info_digest_address1,
        sha_info_digest_ce1,
        sha_info_digest_we1,
        sha_info_digest_d1,
        sha_info_digest_q1
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] buffer_r_address0;
output   buffer_r_ce0;
input  [7:0] buffer_r_q0;
output  [13:0] buffer_r_address1;
output   buffer_r_ce1;
input  [7:0] buffer_r_q1;
input  [0:0] buffer_offset;
input  [31:0] count;
input  [31:0] sha_info_count_lo_i;
output  [31:0] sha_info_count_lo_o;
output   sha_info_count_lo_o_ap_vld;
input  [31:0] sha_info_count_hi_i;
output  [31:0] sha_info_count_hi_o;
output   sha_info_count_hi_o_ap_vld;
output  [3:0] sha_info_data_address0;
output   sha_info_data_ce0;
output   sha_info_data_we0;
output  [31:0] sha_info_data_d0;
input  [31:0] sha_info_data_q0;
output  [2:0] sha_info_digest_address0;
output   sha_info_digest_ce0;
output   sha_info_digest_we0;
output  [31:0] sha_info_digest_d0;
input  [31:0] sha_info_digest_q0;
output  [2:0] sha_info_digest_address1;
output   sha_info_digest_ce1;
output   sha_info_digest_we1;
output  [31:0] sha_info_digest_d1;
input  [31:0] sha_info_digest_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_r_ce0;
reg buffer_r_ce1;
reg[31:0] sha_info_count_lo_o;
reg sha_info_count_lo_o_ap_vld;
reg[31:0] sha_info_count_hi_o;
reg sha_info_count_hi_o_ap_vld;
reg[3:0] sha_info_data_address0;
reg sha_info_data_ce0;
reg sha_info_data_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln162_fu_180_p2;
reg   [0:0] icmp_ln162_reg_316;
wire   [13:0] trunc_ln162_fu_224_p1;
reg   [13:0] trunc_ln162_reg_325;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln169_fu_275_p3;
reg   [31:0] select_ln169_reg_330;
wire   [13:0] select_ln169_1_fu_282_p3;
reg   [13:0] select_ln169_1_reg_335;
wire    grp_local_memcpy_fu_84_ap_start;
wire    grp_local_memcpy_fu_84_ap_done;
wire    grp_local_memcpy_fu_84_ap_idle;
wire    grp_local_memcpy_fu_84_ap_ready;
wire   [13:0] grp_local_memcpy_fu_84_s2_address0;
wire    grp_local_memcpy_fu_84_s2_ce0;
wire   [13:0] grp_local_memcpy_fu_84_s2_address1;
wire    grp_local_memcpy_fu_84_s2_ce1;
reg   [31:0] grp_local_memcpy_fu_84_n;
reg   [13:0] grp_local_memcpy_fu_84_idx1;
wire   [3:0] grp_local_memcpy_fu_84_sha_info_data_address0;
wire    grp_local_memcpy_fu_84_sha_info_data_ce0;
wire    grp_local_memcpy_fu_84_sha_info_data_we0;
wire   [31:0] grp_local_memcpy_fu_84_sha_info_data_d0;
wire    grp_sha_transform_fu_96_ap_start;
wire    grp_sha_transform_fu_96_ap_done;
wire    grp_sha_transform_fu_96_ap_idle;
wire    grp_sha_transform_fu_96_ap_ready;
wire   [3:0] grp_sha_transform_fu_96_sha_info_data_address0;
wire    grp_sha_transform_fu_96_sha_info_data_ce0;
wire   [2:0] grp_sha_transform_fu_96_sha_info_digest_address0;
wire    grp_sha_transform_fu_96_sha_info_digest_ce0;
wire    grp_sha_transform_fu_96_sha_info_digest_we0;
wire   [31:0] grp_sha_transform_fu_96_sha_info_digest_d0;
wire   [2:0] grp_sha_transform_fu_96_sha_info_digest_address1;
wire    grp_sha_transform_fu_96_sha_info_digest_ce1;
wire    grp_sha_transform_fu_96_sha_info_digest_we1;
wire   [31:0] grp_sha_transform_fu_96_sha_info_digest_d1;
reg    grp_local_memcpy_fu_84_ap_start_reg;
wire   [0:0] icmp_ln162_1_fu_215_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state6;
reg    grp_sha_transform_fu_96_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln155_fu_114_p2;
wire   [31:0] add_ln159_fu_164_p2;
reg   [31:0] idx_fu_64;
wire   [31:0] add_ln162_fu_235_p2;
reg   [31:0] count_addr_02_fu_68;
wire   [31:0] add_ln167_fu_229_p2;
wire   [31:0] shl_ln155_fu_108_p2;
wire   [0:0] icmp_ln155_fu_120_p2;
wire   [31:0] add_ln156_fu_130_p2;
wire   [2:0] lshr_ln_fu_150_p4;
wire   [31:0] select_ln155_fu_136_p3;
wire   [31:0] zext_ln159_fu_160_p1;
wire   [25:0] tmp_fu_170_p4;
wire   [25:0] tmp_2_fu_205_p4;
wire   [7:0] tmp_1_fu_254_p4;
wire   [5:0] trunc_ln162_1_fu_251_p1;
wire   [31:0] zext_ln169_fu_271_p1;
wire   [13:0] and_ln_fu_263_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_local_memcpy_fu_84_ap_start_reg = 1'b0;
#0 grp_sha_transform_fu_96_ap_start_reg = 1'b0;
#0 idx_fu_64 = 32'd0;
#0 count_addr_02_fu_68 = 32'd0;
end

sha_stream_local_memcpy grp_local_memcpy_fu_84(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_local_memcpy_fu_84_ap_start),
    .ap_done(grp_local_memcpy_fu_84_ap_done),
    .ap_idle(grp_local_memcpy_fu_84_ap_idle),
    .ap_ready(grp_local_memcpy_fu_84_ap_ready),
    .s2_address0(grp_local_memcpy_fu_84_s2_address0),
    .s2_ce0(grp_local_memcpy_fu_84_s2_ce0),
    .s2_q0(buffer_r_q0),
    .s2_address1(grp_local_memcpy_fu_84_s2_address1),
    .s2_ce1(grp_local_memcpy_fu_84_s2_ce1),
    .s2_q1(buffer_r_q1),
    .s2_offset(buffer_offset),
    .n(grp_local_memcpy_fu_84_n),
    .idx1(grp_local_memcpy_fu_84_idx1),
    .sha_info_data_address0(grp_local_memcpy_fu_84_sha_info_data_address0),
    .sha_info_data_ce0(grp_local_memcpy_fu_84_sha_info_data_ce0),
    .sha_info_data_we0(grp_local_memcpy_fu_84_sha_info_data_we0),
    .sha_info_data_d0(grp_local_memcpy_fu_84_sha_info_data_d0)
);

sha_stream_sha_transform grp_sha_transform_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha_transform_fu_96_ap_start),
    .ap_done(grp_sha_transform_fu_96_ap_done),
    .ap_idle(grp_sha_transform_fu_96_ap_idle),
    .ap_ready(grp_sha_transform_fu_96_ap_ready),
    .sha_info_data_address0(grp_sha_transform_fu_96_sha_info_data_address0),
    .sha_info_data_ce0(grp_sha_transform_fu_96_sha_info_data_ce0),
    .sha_info_data_q0(sha_info_data_q0),
    .sha_info_digest_address0(grp_sha_transform_fu_96_sha_info_digest_address0),
    .sha_info_digest_ce0(grp_sha_transform_fu_96_sha_info_digest_ce0),
    .sha_info_digest_we0(grp_sha_transform_fu_96_sha_info_digest_we0),
    .sha_info_digest_d0(grp_sha_transform_fu_96_sha_info_digest_d0),
    .sha_info_digest_q0(sha_info_digest_q0),
    .sha_info_digest_address1(grp_sha_transform_fu_96_sha_info_digest_address1),
    .sha_info_digest_ce1(grp_sha_transform_fu_96_sha_info_digest_ce1),
    .sha_info_digest_we1(grp_sha_transform_fu_96_sha_info_digest_we1),
    .sha_info_digest_d1(grp_sha_transform_fu_96_sha_info_digest_d1),
    .sha_info_digest_q1(sha_info_digest_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_local_memcpy_fu_84_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_1_fu_215_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_1_fu_215_p2 == 1'd1)))) begin
            grp_local_memcpy_fu_84_ap_start_reg <= 1'b1;
        end else if ((grp_local_memcpy_fu_84_ap_ready == 1'b1)) begin
            grp_local_memcpy_fu_84_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha_transform_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_sha_transform_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_sha_transform_fu_96_ap_ready == 1'b1)) begin
            grp_sha_transform_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        count_addr_02_fu_68 <= count;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_1_fu_215_p2 == 1'd1))) begin
        count_addr_02_fu_68 <= add_ln167_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_fu_64 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_1_fu_215_p2 == 1'd1))) begin
        idx_fu_64 <= add_ln162_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln162_reg_316 <= icmp_ln162_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln169_1_reg_335[13 : 6] <= select_ln169_1_fu_282_p3[13 : 6];
        select_ln169_reg_330 <= select_ln169_fu_275_p3;
        trunc_ln162_reg_325 <= trunc_ln162_fu_224_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_local_memcpy_fu_84_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_sha_transform_fu_96_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_local_memcpy_fu_84_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_local_memcpy_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_local_memcpy_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        buffer_r_ce0 = grp_local_memcpy_fu_84_s2_ce0;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        buffer_r_ce1 = grp_local_memcpy_fu_84_s2_ce1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_local_memcpy_fu_84_idx1 = select_ln169_1_reg_335;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_local_memcpy_fu_84_idx1 = trunc_ln162_reg_325;
    end else begin
        grp_local_memcpy_fu_84_idx1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_local_memcpy_fu_84_n = select_ln169_reg_330;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_local_memcpy_fu_84_n = 32'd64;
    end else begin
        grp_local_memcpy_fu_84_n = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_count_hi_o = add_ln159_fu_164_p2;
    end else begin
        sha_info_count_hi_o = sha_info_count_hi_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha_info_count_hi_o_ap_vld = 1'b1;
    end else begin
        sha_info_count_hi_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_count_lo_o = add_ln155_fu_114_p2;
    end else begin
        sha_info_count_lo_o = sha_info_count_lo_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sha_info_count_lo_o_ap_vld = 1'b1;
    end else begin
        sha_info_count_lo_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sha_info_data_address0 = grp_sha_transform_fu_96_sha_info_data_address0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        sha_info_data_address0 = grp_local_memcpy_fu_84_sha_info_data_address0;
    end else begin
        sha_info_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sha_info_data_ce0 = grp_sha_transform_fu_96_sha_info_data_ce0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        sha_info_data_ce0 = grp_local_memcpy_fu_84_sha_info_data_ce0;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        sha_info_data_we0 = grp_local_memcpy_fu_84_sha_info_data_we0;
    end else begin
        sha_info_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln162_1_fu_215_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_local_memcpy_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_sha_transform_fu_96_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((grp_local_memcpy_fu_84_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln155_fu_114_p2 = (sha_info_count_lo_i + shl_ln155_fu_108_p2);

assign add_ln156_fu_130_p2 = (sha_info_count_hi_i + 32'd1);

assign add_ln159_fu_164_p2 = (select_ln155_fu_136_p3 + zext_ln159_fu_160_p1);

assign add_ln162_fu_235_p2 = (idx_fu_64 + 32'd64);

assign add_ln167_fu_229_p2 = ($signed(count_addr_02_fu_68) + $signed(32'd4294967232));

assign and_ln_fu_263_p3 = {{tmp_1_fu_254_p4}, {6'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign buffer_r_address0 = grp_local_memcpy_fu_84_s2_address0;

assign buffer_r_address1 = grp_local_memcpy_fu_84_s2_address1;

assign grp_local_memcpy_fu_84_ap_start = grp_local_memcpy_fu_84_ap_start_reg;

assign grp_sha_transform_fu_96_ap_start = grp_sha_transform_fu_96_ap_start_reg;

assign icmp_ln155_fu_120_p2 = ((add_ln155_fu_114_p2 < sha_info_count_lo_i) ? 1'b1 : 1'b0);

assign icmp_ln162_1_fu_215_p2 = (($signed(tmp_2_fu_205_p4) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign icmp_ln162_fu_180_p2 = (($signed(tmp_fu_170_p4) > $signed(26'd0)) ? 1'b1 : 1'b0);

assign lshr_ln_fu_150_p4 = {{count[31:29]}};

assign select_ln155_fu_136_p3 = ((icmp_ln155_fu_120_p2[0:0] == 1'b1) ? add_ln156_fu_130_p2 : sha_info_count_hi_i);

assign select_ln169_1_fu_282_p3 = ((icmp_ln162_reg_316[0:0] == 1'b1) ? and_ln_fu_263_p3 : 14'd0);

assign select_ln169_fu_275_p3 = ((icmp_ln162_reg_316[0:0] == 1'b1) ? zext_ln169_fu_271_p1 : count);

assign sha_info_data_d0 = grp_local_memcpy_fu_84_sha_info_data_d0;

assign sha_info_digest_address0 = grp_sha_transform_fu_96_sha_info_digest_address0;

assign sha_info_digest_address1 = grp_sha_transform_fu_96_sha_info_digest_address1;

assign sha_info_digest_ce0 = grp_sha_transform_fu_96_sha_info_digest_ce0;

assign sha_info_digest_ce1 = grp_sha_transform_fu_96_sha_info_digest_ce1;

assign sha_info_digest_d0 = grp_sha_transform_fu_96_sha_info_digest_d0;

assign sha_info_digest_d1 = grp_sha_transform_fu_96_sha_info_digest_d1;

assign sha_info_digest_we0 = grp_sha_transform_fu_96_sha_info_digest_we0;

assign sha_info_digest_we1 = grp_sha_transform_fu_96_sha_info_digest_we1;

assign shl_ln155_fu_108_p2 = count << 32'd3;

assign tmp_1_fu_254_p4 = {{count[13:6]}};

assign tmp_2_fu_205_p4 = {{count_addr_02_fu_68[31:6]}};

assign tmp_fu_170_p4 = {{count[31:6]}};

assign trunc_ln162_1_fu_251_p1 = count[5:0];

assign trunc_ln162_fu_224_p1 = idx_fu_64[13:0];

assign zext_ln159_fu_160_p1 = lshr_ln_fu_150_p4;

assign zext_ln169_fu_271_p1 = trunc_ln162_1_fu_251_p1;

always @ (posedge ap_clk) begin
    select_ln169_1_reg_335[5:0] <= 6'b000000;
end

endmodule //sha_stream_sha_update
