-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream_sha_update is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    buffer_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    count : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_count_lo_i : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_count_lo_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_count_lo_o_ap_vld : OUT STD_LOGIC;
    sha_info_count_hi_i : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_count_hi_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_count_hi_o_ap_vld : OUT STD_LOGIC;
    sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce0 : OUT STD_LOGIC;
    sha_info_data_we0 : OUT STD_LOGIC;
    sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce0 : OUT STD_LOGIC;
    sha_info_digest_we0 : OUT STD_LOGIC;
    sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce1 : OUT STD_LOGIC;
    sha_info_digest_we1 : OUT STD_LOGIC;
    sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_stream_sha_update is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv32_FFFFFFC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln162_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln162_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln162_fu_228_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln162_reg_329 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln169_fu_279_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln169_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln169_1_fu_286_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln169_1_reg_339 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_local_memcpy_fu_88_ap_start : STD_LOGIC;
    signal grp_local_memcpy_fu_88_ap_done : STD_LOGIC;
    signal grp_local_memcpy_fu_88_ap_idle : STD_LOGIC;
    signal grp_local_memcpy_fu_88_ap_ready : STD_LOGIC;
    signal grp_local_memcpy_fu_88_s2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_local_memcpy_fu_88_s2_ce0 : STD_LOGIC;
    signal grp_local_memcpy_fu_88_s2_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_local_memcpy_fu_88_s2_ce1 : STD_LOGIC;
    signal grp_local_memcpy_fu_88_n : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_local_memcpy_fu_88_idx1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_local_memcpy_fu_88_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_local_memcpy_fu_88_sha_info_data_ce0 : STD_LOGIC;
    signal grp_local_memcpy_fu_88_sha_info_data_we0 : STD_LOGIC;
    signal grp_local_memcpy_fu_88_sha_info_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_transform_fu_100_ap_start : STD_LOGIC;
    signal grp_sha_transform_fu_100_ap_done : STD_LOGIC;
    signal grp_sha_transform_fu_100_ap_idle : STD_LOGIC;
    signal grp_sha_transform_fu_100_ap_ready : STD_LOGIC;
    signal grp_sha_transform_fu_100_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha_transform_fu_100_sha_info_data_ce0 : STD_LOGIC;
    signal grp_sha_transform_fu_100_sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_transform_fu_100_sha_info_digest_ce0 : STD_LOGIC;
    signal grp_sha_transform_fu_100_sha_info_digest_we0 : STD_LOGIC;
    signal grp_sha_transform_fu_100_sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_transform_fu_100_sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_transform_fu_100_sha_info_digest_ce1 : STD_LOGIC;
    signal grp_sha_transform_fu_100_sha_info_digest_we1 : STD_LOGIC;
    signal grp_sha_transform_fu_100_sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_local_memcpy_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln162_1_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_sha_transform_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln155_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln159_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln162_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_addr_02_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln167_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln155_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln155_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln156_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_154_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln155_fu_140_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln159_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_174_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_2_fu_209_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_1_fu_258_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln162_1_fu_255_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln169_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln_fu_267_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha_stream_local_memcpy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        s2_ce0 : OUT STD_LOGIC;
        s2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        s2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        s2_ce1 : OUT STD_LOGIC;
        s2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        s2_offset : IN STD_LOGIC_VECTOR (0 downto 0);
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        idx1 : IN STD_LOGIC_VECTOR (13 downto 0);
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_we0 : OUT STD_LOGIC;
        sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce0 : OUT STD_LOGIC;
        sha_info_digest_we0 : OUT STD_LOGIC;
        sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce1 : OUT STD_LOGIC;
        sha_info_digest_we1 : OUT STD_LOGIC;
        sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_local_memcpy_fu_88 : component sha_stream_local_memcpy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_local_memcpy_fu_88_ap_start,
        ap_done => grp_local_memcpy_fu_88_ap_done,
        ap_idle => grp_local_memcpy_fu_88_ap_idle,
        ap_ready => grp_local_memcpy_fu_88_ap_ready,
        s2_address0 => grp_local_memcpy_fu_88_s2_address0,
        s2_ce0 => grp_local_memcpy_fu_88_s2_ce0,
        s2_q0 => buffer_r_q0,
        s2_address1 => grp_local_memcpy_fu_88_s2_address1,
        s2_ce1 => grp_local_memcpy_fu_88_s2_ce1,
        s2_q1 => buffer_r_q1,
        s2_offset => buffer_offset,
        n => grp_local_memcpy_fu_88_n,
        idx1 => grp_local_memcpy_fu_88_idx1,
        sha_info_data_address0 => grp_local_memcpy_fu_88_sha_info_data_address0,
        sha_info_data_ce0 => grp_local_memcpy_fu_88_sha_info_data_ce0,
        sha_info_data_we0 => grp_local_memcpy_fu_88_sha_info_data_we0,
        sha_info_data_d0 => grp_local_memcpy_fu_88_sha_info_data_d0);

    grp_sha_transform_fu_100 : component sha_stream_sha_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_transform_fu_100_ap_start,
        ap_done => grp_sha_transform_fu_100_ap_done,
        ap_idle => grp_sha_transform_fu_100_ap_idle,
        ap_ready => grp_sha_transform_fu_100_ap_ready,
        sha_info_data_address0 => grp_sha_transform_fu_100_sha_info_data_address0,
        sha_info_data_ce0 => grp_sha_transform_fu_100_sha_info_data_ce0,
        sha_info_data_q0 => sha_info_data_q0,
        sha_info_digest_address0 => grp_sha_transform_fu_100_sha_info_digest_address0,
        sha_info_digest_ce0 => grp_sha_transform_fu_100_sha_info_digest_ce0,
        sha_info_digest_we0 => grp_sha_transform_fu_100_sha_info_digest_we0,
        sha_info_digest_d0 => grp_sha_transform_fu_100_sha_info_digest_d0,
        sha_info_digest_q0 => sha_info_digest_q0,
        sha_info_digest_address1 => grp_sha_transform_fu_100_sha_info_digest_address1,
        sha_info_digest_ce1 => grp_sha_transform_fu_100_sha_info_digest_ce1,
        sha_info_digest_we1 => grp_sha_transform_fu_100_sha_info_digest_we1,
        sha_info_digest_d1 => grp_sha_transform_fu_100_sha_info_digest_d1,
        sha_info_digest_q1 => sha_info_digest_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_local_memcpy_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_local_memcpy_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_1_fu_219_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_1_fu_219_p2 = ap_const_lv1_1)))) then 
                    grp_local_memcpy_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_local_memcpy_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_local_memcpy_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha_transform_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_transform_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sha_transform_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_transform_fu_100_ap_ready = ap_const_logic_1)) then 
                    grp_sha_transform_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_addr_02_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                count_addr_02_fu_72 <= count;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_1_fu_219_p2 = ap_const_lv1_1))) then 
                count_addr_02_fu_72 <= add_ln167_fu_233_p2;
            end if; 
        end if;
    end process;

    idx_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_fu_68 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_1_fu_219_p2 = ap_const_lv1_1))) then 
                idx_fu_68 <= add_ln162_fu_239_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln162_reg_320 <= icmp_ln162_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    select_ln169_1_reg_339(13 downto 6) <= select_ln169_1_fu_286_p3(13 downto 6);
                select_ln169_reg_334 <= select_ln169_fu_279_p3;
                trunc_ln162_reg_329 <= trunc_ln162_fu_228_p1;
            end if;
        end if;
    end process;
    select_ln169_1_reg_339(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_local_memcpy_fu_88_ap_done, grp_sha_transform_fu_100_ap_done, icmp_ln162_1_fu_219_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln162_1_fu_219_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_local_memcpy_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_sha_transform_fu_100_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_local_memcpy_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln155_fu_118_p2 <= std_logic_vector(unsigned(sha_info_count_lo_i) + unsigned(shl_ln155_fu_112_p2));
    add_ln156_fu_134_p2 <= std_logic_vector(unsigned(sha_info_count_hi_i) + unsigned(ap_const_lv32_1));
    add_ln159_fu_168_p2 <= std_logic_vector(unsigned(select_ln155_fu_140_p3) + unsigned(zext_ln159_fu_164_p1));
    add_ln162_fu_239_p2 <= std_logic_vector(unsigned(idx_fu_68) + unsigned(ap_const_lv32_40));
    add_ln167_fu_233_p2 <= std_logic_vector(unsigned(count_addr_02_fu_72) + unsigned(ap_const_lv32_FFFFFFC0));
    and_ln_fu_267_p3 <= (tmp_1_fu_258_p4 & ap_const_lv6_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_local_memcpy_fu_88_ap_done)
    begin
        if ((grp_local_memcpy_fu_88_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_sha_transform_fu_100_ap_done)
    begin
        if ((grp_sha_transform_fu_100_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(grp_local_memcpy_fu_88_ap_done)
    begin
        if ((grp_local_memcpy_fu_88_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_local_memcpy_fu_88_ap_done, ap_CS_fsm_state6)
    begin
        if ((((grp_local_memcpy_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_local_memcpy_fu_88_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_local_memcpy_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= grp_local_memcpy_fu_88_s2_address0;
    buffer_r_address1 <= grp_local_memcpy_fu_88_s2_address1;

    buffer_r_ce0_assign_proc : process(grp_local_memcpy_fu_88_s2_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_r_ce0 <= grp_local_memcpy_fu_88_s2_ce0;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_ce1_assign_proc : process(grp_local_memcpy_fu_88_s2_ce1, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            buffer_r_ce1 <= grp_local_memcpy_fu_88_s2_ce1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_local_memcpy_fu_88_ap_start <= grp_local_memcpy_fu_88_ap_start_reg;

    grp_local_memcpy_fu_88_idx1_assign_proc : process(trunc_ln162_reg_329, select_ln169_1_reg_339, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_local_memcpy_fu_88_idx1 <= select_ln169_1_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_local_memcpy_fu_88_idx1 <= trunc_ln162_reg_329;
        else 
            grp_local_memcpy_fu_88_idx1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_local_memcpy_fu_88_n_assign_proc : process(select_ln169_reg_334, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_local_memcpy_fu_88_n <= select_ln169_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_local_memcpy_fu_88_n <= ap_const_lv32_40;
        else 
            grp_local_memcpy_fu_88_n <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sha_transform_fu_100_ap_start <= grp_sha_transform_fu_100_ap_start_reg;
    icmp_ln155_fu_124_p2 <= "1" when (unsigned(add_ln155_fu_118_p2) < unsigned(sha_info_count_lo_i)) else "0";
    icmp_ln162_1_fu_219_p2 <= "1" when (signed(tmp_2_fu_209_p4) > signed(ap_const_lv26_0)) else "0";
    icmp_ln162_fu_184_p2 <= "1" when (signed(tmp_fu_174_p4) > signed(ap_const_lv26_0)) else "0";
    lshr_ln_fu_154_p4 <= count(31 downto 29);
    select_ln155_fu_140_p3 <= 
        add_ln156_fu_134_p2 when (icmp_ln155_fu_124_p2(0) = '1') else 
        sha_info_count_hi_i;
    select_ln169_1_fu_286_p3 <= 
        and_ln_fu_267_p3 when (icmp_ln162_reg_320(0) = '1') else 
        ap_const_lv14_0;
    select_ln169_fu_279_p3 <= 
        zext_ln169_fu_275_p1 when (icmp_ln162_reg_320(0) = '1') else 
        count;

    sha_info_count_hi_o_assign_proc : process(ap_CS_fsm_state1, sha_info_count_hi_i, add_ln159_fu_168_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha_info_count_hi_o <= add_ln159_fu_168_p2;
        else 
            sha_info_count_hi_o <= sha_info_count_hi_i;
        end if; 
    end process;


    sha_info_count_hi_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            sha_info_count_hi_o_ap_vld <= ap_const_logic_1;
        else 
            sha_info_count_hi_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_count_lo_o_assign_proc : process(ap_CS_fsm_state1, sha_info_count_lo_i, add_ln155_fu_118_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha_info_count_lo_o <= add_ln155_fu_118_p2;
        else 
            sha_info_count_lo_o <= sha_info_count_lo_i;
        end if; 
    end process;


    sha_info_count_lo_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            sha_info_count_lo_o_ap_vld <= ap_const_logic_1;
        else 
            sha_info_count_lo_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_address0_assign_proc : process(grp_local_memcpy_fu_88_sha_info_data_address0, grp_sha_transform_fu_100_sha_info_data_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha_info_data_address0 <= grp_sha_transform_fu_100_sha_info_data_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha_info_data_address0 <= grp_local_memcpy_fu_88_sha_info_data_address0;
        else 
            sha_info_data_address0 <= "XXXX";
        end if; 
    end process;


    sha_info_data_ce0_assign_proc : process(grp_local_memcpy_fu_88_sha_info_data_ce0, grp_sha_transform_fu_100_sha_info_data_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha_info_data_ce0 <= grp_sha_transform_fu_100_sha_info_data_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha_info_data_ce0 <= grp_local_memcpy_fu_88_sha_info_data_ce0;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_data_d0 <= grp_local_memcpy_fu_88_sha_info_data_d0;

    sha_info_data_we0_assign_proc : process(grp_local_memcpy_fu_88_sha_info_data_we0, ap_CS_fsm_state3, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sha_info_data_we0 <= grp_local_memcpy_fu_88_sha_info_data_we0;
        else 
            sha_info_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_digest_address0 <= grp_sha_transform_fu_100_sha_info_digest_address0;
    sha_info_digest_address1 <= grp_sha_transform_fu_100_sha_info_digest_address1;
    sha_info_digest_ce0 <= grp_sha_transform_fu_100_sha_info_digest_ce0;
    sha_info_digest_ce1 <= grp_sha_transform_fu_100_sha_info_digest_ce1;
    sha_info_digest_d0 <= grp_sha_transform_fu_100_sha_info_digest_d0;
    sha_info_digest_d1 <= grp_sha_transform_fu_100_sha_info_digest_d1;
    sha_info_digest_we0 <= grp_sha_transform_fu_100_sha_info_digest_we0;
    sha_info_digest_we1 <= grp_sha_transform_fu_100_sha_info_digest_we1;
    shl_ln155_fu_112_p2 <= std_logic_vector(shift_left(unsigned(count),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_1_fu_258_p4 <= count(13 downto 6);
    tmp_2_fu_209_p4 <= count_addr_02_fu_72(31 downto 6);
    tmp_fu_174_p4 <= count(31 downto 6);
    trunc_ln162_1_fu_255_p1 <= count(6 - 1 downto 0);
    trunc_ln162_fu_228_p1 <= idx_fu_68(14 - 1 downto 0);
    zext_ln159_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_154_p4),32));
    zext_ln169_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln162_1_fu_255_p1),32));
end behav;
