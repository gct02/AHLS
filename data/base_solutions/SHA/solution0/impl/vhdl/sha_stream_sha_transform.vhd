-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream_sha_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce0 : OUT STD_LOGIC;
    sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce0 : OUT STD_LOGIC;
    sha_info_digest_we0 : OUT STD_LOGIC;
    sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce1 : OUT STD_LOGIC;
    sha_info_digest_we1 : OUT STD_LOGIC;
    sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_stream_sha_transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_7D : STD_LOGIC_VECTOR (6 downto 0) := "1111101";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_72 : STD_LOGIC_VECTOR (6 downto 0) := "1110010";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5A827999 : STD_LOGIC_VECTOR (31 downto 0) := "01011010100000100111100110011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_6ED9EBA1 : STD_LOGIC_VECTOR (31 downto 0) := "01101110110110011110101110100001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_8F1BBCDC : STD_LOGIC_VECTOR (31 downto 0) := "10001111000110111011110011011100";
    constant ap_const_lv32_CA62C1D6 : STD_LOGIC_VECTOR (31 downto 0) := "11001010011000101100000111010110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln98_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_reg_1152 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_7_reg_1169 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal W_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_load_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_load_1_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal B_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal C_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal E_reg_1259 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln119_2_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_2_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_9_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln123_2_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln123_2_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_10_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln127_2_fu_861_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_2_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_11_fu_973_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln131_2_fu_1019_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln131_2_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln137_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln137_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln138_fu_1095_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln138_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal W_ce0 : STD_LOGIC;
    signal W_we0 : STD_LOGIC;
    signal W_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal W_ce1 : STD_LOGIC;
    signal W_we1 : STD_LOGIC;
    signal W_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_10_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_11_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln117_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_4_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_12_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln121_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_6_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln98_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln106_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln104_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln106_1_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_2_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_3_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln94_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_fu_678_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_2_fu_826_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln125_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln129_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln129_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_98 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln98_fu_376_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_fu_106 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln104_fu_428_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_fu_110 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln117_fu_518_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal C_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal C_2_fu_579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_1_fu_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal E_1_fu_122 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_3_fu_126 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln121_fu_729_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_3_fu_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal C_4_fu_721_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_2_fu_134 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal E_2_fu_138 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_4_fu_142 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln125_fu_889_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal C_7_fu_146 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal C_6_fu_881_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_5_fu_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal E_5_fu_154 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal E_7_fu_158 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal B_5_fu_162 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_5_fu_166 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln129_fu_1047_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal E_9_fu_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal D_8_fu_174 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal C_8_fu_1039_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_fu_178 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal temp_fu_1126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln135_fu_1078_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln139_fu_1136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln106_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln106_1_fu_417_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln106_2_fu_444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln106_3_fu_454_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln106_1_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln106_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln119_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln119_1_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln119_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln119_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_1_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln119_1_fu_565_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln119_1_fu_569_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln119_fu_627_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln_fu_631_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln119_1_fu_641_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln123_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln123_1_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln123_1_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln123_1_fu_707_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln123_1_fu_711_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln123_fu_775_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln1_fu_779_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln_fu_789_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln123_fu_797_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln127_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln127_fu_837_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln127_1_fu_843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln127_1_fu_849_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_1_fu_855_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln127_1_fu_867_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln127_1_fu_871_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln127_fu_945_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln2_fu_949_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln127_2_fu_959_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln127_fu_967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln131_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln131_1_fu_1007_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln131_1_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln131_1_fu_1025_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln131_1_fu_1029_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln131_fu_1100_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln3_fu_1103_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln1_fu_1112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln131_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha_stream_sha_transform_W_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_U : component sha_stream_sha_transform_W_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_address0,
        ce0 => W_ce0,
        we0 => W_we0,
        d0 => sha_info_data_q0,
        q0 => W_q0,
        address1 => W_address1,
        ce1 => W_ce1,
        we1 => W_we1,
        d1 => W_d1,
        q1 => W_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    B_10_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                B_10_reg_290 <= A_reg_1237;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                B_10_reg_290 <= A_9_fu_655_p2;
            end if; 
        end if;
    end process;

    B_11_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then 
                B_11_reg_311 <= B_10_reg_290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                B_11_reg_311 <= A_10_fu_803_p2;
            end if; 
        end if;
    end process;

    B_12_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then 
                B_12_reg_334 <= B_11_reg_311;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                B_12_reg_334 <= A_11_fu_973_p2;
            end if; 
        end if;
    end process;

    B_2_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                B_2_reg_300 <= B_reg_1243;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                B_2_reg_300 <= B_10_reg_290;
            end if; 
        end if;
    end process;

    B_4_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then 
                B_4_reg_322 <= B_2_reg_300;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                B_4_reg_322 <= B_11_reg_311;
            end if; 
        end if;
    end process;

    B_5_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                B_5_fu_162 <= B_6_reg_345;
            elsif (((icmp_ln129_fu_990_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                B_5_fu_162 <= B_7_fu_178;
            end if; 
        end if;
    end process;

    B_6_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then 
                B_6_reg_345 <= B_4_reg_322;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                B_6_reg_345 <= B_12_reg_334;
            end if; 
        end if;
    end process;

    B_7_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                B_7_fu_178 <= B_12_reg_334;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                B_7_fu_178 <= temp_fu_1126_p2;
            end if; 
        end if;
    end process;

    C_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                C_1_fu_114 <= sha_info_digest_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_0))) then 
                C_1_fu_114 <= C_2_fu_579_p3;
            end if; 
        end if;
    end process;

    C_3_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then 
                C_3_fu_130 <= C_1_fu_114;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_0))) then 
                C_3_fu_130 <= C_4_fu_721_p3;
            end if; 
        end if;
    end process;

    C_7_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then 
                C_7_fu_146 <= C_3_fu_130;
            elsif (((icmp_ln125_fu_820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                C_7_fu_146 <= C_6_fu_881_p3;
            end if; 
        end if;
    end process;

    D_1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                D_1_fu_118 <= sha_info_digest_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_0))) then 
                D_1_fu_118 <= C_1_fu_114;
            end if; 
        end if;
    end process;

    D_2_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then 
                D_2_fu_134 <= D_1_fu_118;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_0))) then 
                D_2_fu_134 <= C_3_fu_130;
            end if; 
        end if;
    end process;

    D_5_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then 
                D_5_fu_150 <= D_2_fu_134;
            elsif (((icmp_ln125_fu_820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                D_5_fu_150 <= C_7_fu_146;
            end if; 
        end if;
    end process;

    D_8_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                D_8_fu_174 <= C_7_fu_146;
            elsif (((icmp_ln129_fu_990_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                D_8_fu_174 <= C_8_fu_1039_p3;
            end if; 
        end if;
    end process;

    E_1_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                E_1_fu_122 <= sha_info_digest_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_0))) then 
                E_1_fu_122 <= D_1_fu_118;
            end if; 
        end if;
    end process;

    E_2_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then 
                E_2_fu_138 <= E_1_fu_122;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_0))) then 
                E_2_fu_138 <= D_2_fu_134;
            end if; 
        end if;
    end process;

    E_5_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then 
                E_5_fu_154 <= E_2_fu_138;
            elsif (((icmp_ln125_fu_820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                E_5_fu_154 <= D_5_fu_150;
            end if; 
        end if;
    end process;

    E_7_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                E_7_fu_158 <= E_5_fu_154;
            elsif (((icmp_ln129_fu_990_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                E_7_fu_158 <= E_9_fu_170;
            end if; 
        end if;
    end process;

    E_9_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                E_9_fu_170 <= D_5_fu_150;
            elsif (((icmp_ln129_fu_990_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                E_9_fu_170 <= D_8_fu_174;
            end if; 
        end if;
    end process;

    i_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_fu_106 <= ap_const_lv7_10;
            elsif (((icmp_ln104_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_fu_106 <= add_ln104_fu_428_p2;
            end if; 
        end if;
    end process;

    i_2_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_2_fu_110 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_0))) then 
                i_2_fu_110 <= add_ln117_fu_518_p2;
            end if; 
        end if;
    end process;

    i_3_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then 
                i_3_fu_126 <= ap_const_lv6_14;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_0))) then 
                i_3_fu_126 <= add_ln121_fu_729_p2;
            end if; 
        end if;
    end process;

    i_4_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then 
                i_4_fu_142 <= ap_const_lv6_28;
            elsif (((icmp_ln125_fu_820_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_4_fu_142 <= add_ln125_fu_889_p2;
            end if; 
        end if;
    end process;

    i_5_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_5_fu_166 <= ap_const_lv7_3C;
            elsif (((icmp_ln129_fu_990_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_5_fu_166 <= add_ln129_fu_1047_p2;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_98 <= ap_const_lv5_0;
            elsif (((icmp_ln98_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_98 <= add_ln98_fu_376_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_reg_1237 <= sha_info_digest_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                B_reg_1243 <= sha_info_digest_q1;
                C_reg_1249 <= sha_info_digest_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                D_reg_1254 <= sha_info_digest_q0;
                E_reg_1259 <= sha_info_digest_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                W_load_1_reg_1222 <= W_q0;
                W_load_reg_1217 <= W_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln119_2_reg_1272 <= add_ln119_2_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln123_2_reg_1318 <= add_ln123_2_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln127_2_reg_1364 <= add_ln127_2_fu_861_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln131_2_reg_1427 <= add_ln131_2_fu_1019_p2;
                add_ln137_reg_1432 <= add_ln137_fu_1090_p2;
                add_ln138_reg_1437 <= add_ln138_fu_1095_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_7_reg_1169 <= i_1_fu_106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    zext_ln98_reg_1152(4 downto 0) <= zext_ln98_fu_382_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln98_reg_1152(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state16, icmp_ln117_fu_512_p2, icmp_ln121_fu_672_p2, icmp_ln98_fu_370_p2, icmp_ln104_fu_400_p2, icmp_ln125_fu_820_p2, icmp_ln129_fu_990_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln98_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln104_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln117_fu_512_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln121_fu_672_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln125_fu_820_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln129_fu_990_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_10_fu_803_p2 <= std_logic_vector(unsigned(add_ln123_2_reg_1318) + unsigned(add_ln123_fu_797_p2));
    A_11_fu_973_p2 <= std_logic_vector(unsigned(add_ln127_2_reg_1364) + unsigned(add_ln127_fu_967_p2));
    A_9_fu_655_p2 <= std_logic_vector(unsigned(add_ln119_2_reg_1272) + unsigned(add_ln119_fu_649_p2));
    C_2_fu_579_p3 <= (trunc_ln119_1_fu_565_p1 & lshr_ln119_1_fu_569_p4);
    C_4_fu_721_p3 <= (trunc_ln123_1_fu_707_p1 & lshr_ln123_1_fu_711_p4);
    C_6_fu_881_p3 <= (trunc_ln127_1_fu_867_p1 & lshr_ln127_1_fu_871_p4);
    C_8_fu_1039_p3 <= (trunc_ln131_1_fu_1025_p1 & lshr_ln131_1_fu_1029_p4);

    W_address0_assign_proc : process(zext_ln98_reg_1152, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state3, zext_ln106_1_fu_423_p1, zext_ln106_2_fu_449_p1, zext_ln94_fu_524_p1, zext_ln94_2_fu_826_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            W_address0 <= zext_ln94_2_fu_826_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            W_address0 <= zext_ln94_fu_524_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W_address0 <= zext_ln106_2_fu_449_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W_address0 <= zext_ln106_1_fu_423_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_address0 <= zext_ln98_reg_1152(7 - 1 downto 0);
        else 
            W_address0 <= "XXXXXXX";
        end if; 
    end process;


    W_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, zext_ln106_fu_412_p1, zext_ln106_3_fu_459_p1, zext_ln104_fu_464_p1, ap_CS_fsm_state6, zext_ln94_1_fu_678_p1, zext_ln129_fu_996_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            W_address1 <= zext_ln129_fu_996_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            W_address1 <= zext_ln94_1_fu_678_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W_address1 <= zext_ln104_fu_464_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W_address1 <= zext_ln106_3_fu_459_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W_address1 <= zext_ln106_fu_412_p1(7 - 1 downto 0);
        else 
            W_address1 <= "XXXXXXX";
        end if; 
    end process;


    W_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            W_ce0 <= ap_const_logic_1;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            W_ce1 <= ap_const_logic_1;
        else 
            W_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    W_d1 <= (xor_ln106_fu_468_p2 xor xor_ln106_1_fu_472_p2);

    W_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_we0 <= ap_const_logic_1;
        else 
            W_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W_we1 <= ap_const_logic_1;
        else 
            W_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln104_fu_428_p2 <= std_logic_vector(unsigned(i_1_fu_106) + unsigned(ap_const_lv7_1));
    add_ln106_1_fu_417_p2 <= std_logic_vector(unsigned(i_1_fu_106) + unsigned(ap_const_lv7_78));
    add_ln106_2_fu_444_p2 <= std_logic_vector(unsigned(i_7_reg_1169) + unsigned(ap_const_lv7_72));
    add_ln106_3_fu_454_p2 <= std_logic_vector(unsigned(i_7_reg_1169) + unsigned(ap_const_lv7_70));
    add_ln106_fu_406_p2 <= std_logic_vector(unsigned(i_1_fu_106) + unsigned(ap_const_lv7_7D));
    add_ln117_fu_518_p2 <= std_logic_vector(unsigned(i_2_fu_110) + unsigned(ap_const_lv5_1));
    add_ln119_1_fu_553_p2 <= std_logic_vector(unsigned(or_ln119_fu_547_p2) + unsigned(ap_const_lv32_5A827999));
    add_ln119_2_fu_559_p2 <= std_logic_vector(unsigned(add_ln119_1_fu_553_p2) + unsigned(E_1_fu_122));
    add_ln119_fu_649_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(or_ln119_1_fu_641_p3));
    add_ln121_fu_729_p2 <= std_logic_vector(unsigned(i_3_fu_126) + unsigned(ap_const_lv6_1));
    add_ln123_1_fu_695_p2 <= std_logic_vector(unsigned(xor_ln123_1_fu_689_p2) + unsigned(ap_const_lv32_6ED9EBA1));
    add_ln123_2_fu_701_p2 <= std_logic_vector(unsigned(add_ln123_1_fu_695_p2) + unsigned(E_2_fu_138));
    add_ln123_fu_797_p2 <= std_logic_vector(unsigned(W_q1) + unsigned(or_ln_fu_789_p3));
    add_ln125_fu_889_p2 <= std_logic_vector(unsigned(i_4_fu_142) + unsigned(ap_const_lv6_1));
    add_ln127_1_fu_855_p2 <= std_logic_vector(unsigned(E_5_fu_154) + unsigned(or_ln127_1_fu_849_p2));
    add_ln127_2_fu_861_p2 <= std_logic_vector(unsigned(add_ln127_1_fu_855_p2) + unsigned(ap_const_lv32_8F1BBCDC));
    add_ln127_fu_967_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(or_ln127_2_fu_959_p3));
    add_ln129_fu_1047_p2 <= std_logic_vector(unsigned(i_5_fu_166) + unsigned(ap_const_lv7_1));
    add_ln131_1_fu_1013_p2 <= std_logic_vector(unsigned(xor_ln131_1_fu_1007_p2) + unsigned(ap_const_lv32_CA62C1D6));
    add_ln131_2_fu_1019_p2 <= std_logic_vector(unsigned(add_ln131_1_fu_1013_p2) + unsigned(E_7_fu_158));
    add_ln131_fu_1120_p2 <= std_logic_vector(unsigned(W_q1) + unsigned(or_ln1_fu_1112_p3));
    add_ln135_fu_1078_p2 <= std_logic_vector(unsigned(A_reg_1237) + unsigned(B_7_fu_178));
    add_ln136_fu_1084_p2 <= std_logic_vector(unsigned(B_reg_1243) + unsigned(B_5_fu_162));
    add_ln137_fu_1090_p2 <= std_logic_vector(unsigned(C_reg_1249) + unsigned(D_8_fu_174));
    add_ln138_fu_1095_p2 <= std_logic_vector(unsigned(D_reg_1254) + unsigned(E_9_fu_170));
    add_ln139_fu_1136_p2 <= std_logic_vector(unsigned(E_reg_1259) + unsigned(E_7_fu_158));
    add_ln98_fu_376_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv5_1));
    and_ln119_1_fu_541_p2 <= (xor_ln119_fu_529_p2 and D_1_fu_118);
    and_ln119_fu_535_p2 <= (C_1_fu_114 and B_2_reg_300);
    and_ln127_1_fu_843_p2 <= (D_5_fu_150 and C_7_fu_146);
    and_ln127_fu_837_p2 <= (or_ln127_fu_831_p2 and B_6_reg_345);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln104_fu_400_p2 <= "1" when (i_1_fu_106 = ap_const_lv7_50) else "0";
    icmp_ln117_fu_512_p2 <= "1" when (i_2_fu_110 = ap_const_lv5_14) else "0";
    icmp_ln121_fu_672_p2 <= "1" when (i_3_fu_126 = ap_const_lv6_28) else "0";
    icmp_ln125_fu_820_p2 <= "1" when (i_4_fu_142 = ap_const_lv6_3C) else "0";
    icmp_ln129_fu_990_p2 <= "1" when (i_5_fu_166 = ap_const_lv7_50) else "0";
    icmp_ln98_fu_370_p2 <= "1" when (i_fu_98 = ap_const_lv5_10) else "0";
    lshr_ln119_1_fu_569_p4 <= B_2_reg_300(31 downto 2);
    lshr_ln123_1_fu_711_p4 <= B_4_reg_322(31 downto 2);
    lshr_ln127_1_fu_871_p4 <= B_6_reg_345(31 downto 2);
    lshr_ln131_1_fu_1029_p4 <= B_5_fu_162(31 downto 2);
    lshr_ln1_fu_779_p4 <= B_11_reg_311(31 downto 27);
    lshr_ln2_fu_949_p4 <= B_12_reg_334(31 downto 27);
    lshr_ln3_fu_1103_p4 <= B_7_fu_178(31 downto 27);
    lshr_ln_fu_631_p4 <= B_10_reg_290(31 downto 27);
    or_ln119_1_fu_641_p3 <= (trunc_ln119_fu_627_p1 & lshr_ln_fu_631_p4);
    or_ln119_fu_547_p2 <= (and_ln119_fu_535_p2 or and_ln119_1_fu_541_p2);
    or_ln127_1_fu_849_p2 <= (and_ln127_fu_837_p2 or and_ln127_1_fu_843_p2);
    or_ln127_2_fu_959_p3 <= (trunc_ln127_fu_945_p1 & lshr_ln2_fu_949_p4);
    or_ln127_fu_831_p2 <= (D_5_fu_150 or C_7_fu_146);
    or_ln1_fu_1112_p3 <= (trunc_ln131_fu_1100_p1 & lshr_ln3_fu_1103_p4);
    or_ln_fu_789_p3 <= (trunc_ln123_fu_775_p1 & lshr_ln1_fu_779_p4);
    sha_info_data_address0 <= zext_ln98_fu_382_p1(4 - 1 downto 0);

    sha_info_data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_data_ce0 <= ap_const_logic_1;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_address0 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            sha_info_digest_address0 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            sha_info_digest_address0 <= ap_const_lv3_0;
        else 
            sha_info_digest_address0 <= "XXX";
        end if; 
    end process;


    sha_info_digest_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sha_info_digest_address1 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sha_info_digest_address1 <= ap_const_lv3_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            sha_info_digest_address1 <= ap_const_lv3_1;
        else 
            sha_info_digest_address1 <= "XXX";
        end if; 
    end process;


    sha_info_digest_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sha_info_digest_ce0 <= ap_const_logic_1;
        else 
            sha_info_digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            sha_info_digest_ce1 <= ap_const_logic_1;
        else 
            sha_info_digest_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_d0_assign_proc : process(ap_CS_fsm_state16, add_ln137_reg_1432, add_ln135_fu_1078_p2, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sha_info_digest_d0 <= add_ln137_reg_1432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sha_info_digest_d0 <= add_ln135_fu_1078_p2;
        else 
            sha_info_digest_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_d1_assign_proc : process(ap_CS_fsm_state16, add_ln138_reg_1437, ap_CS_fsm_state19, add_ln136_fu_1084_p2, ap_CS_fsm_state18, add_ln139_fu_1136_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sha_info_digest_d1 <= add_ln139_fu_1136_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sha_info_digest_d1 <= add_ln138_reg_1437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sha_info_digest_d1 <= add_ln136_fu_1084_p2;
        else 
            sha_info_digest_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_we0_assign_proc : process(ap_CS_fsm_state16, icmp_ln129_fu_990_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln129_fu_990_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sha_info_digest_we0 <= ap_const_logic_1;
        else 
            sha_info_digest_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_we1_assign_proc : process(ap_CS_fsm_state16, icmp_ln129_fu_990_p2, ap_CS_fsm_state19, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((icmp_ln129_fu_990_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sha_info_digest_we1 <= ap_const_logic_1;
        else 
            sha_info_digest_we1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_fu_1126_p2 <= std_logic_vector(unsigned(add_ln131_2_reg_1427) + unsigned(add_ln131_fu_1120_p2));
    trunc_ln119_1_fu_565_p1 <= B_2_reg_300(2 - 1 downto 0);
    trunc_ln119_fu_627_p1 <= B_10_reg_290(27 - 1 downto 0);
    trunc_ln123_1_fu_707_p1 <= B_4_reg_322(2 - 1 downto 0);
    trunc_ln123_fu_775_p1 <= B_11_reg_311(27 - 1 downto 0);
    trunc_ln127_1_fu_867_p1 <= B_6_reg_345(2 - 1 downto 0);
    trunc_ln127_fu_945_p1 <= B_12_reg_334(27 - 1 downto 0);
    trunc_ln131_1_fu_1025_p1 <= B_5_fu_162(2 - 1 downto 0);
    trunc_ln131_fu_1100_p1 <= B_7_fu_178(27 - 1 downto 0);
    xor_ln106_1_fu_472_p2 <= (W_q1 xor W_q0);
    xor_ln106_fu_468_p2 <= (W_load_reg_1217 xor W_load_1_reg_1222);
    xor_ln119_fu_529_p2 <= (ap_const_lv32_FFFFFFFF xor B_2_reg_300);
    xor_ln123_1_fu_689_p2 <= (xor_ln123_fu_683_p2 xor C_3_fu_130);
    xor_ln123_fu_683_p2 <= (D_2_fu_134 xor B_4_reg_322);
    xor_ln131_1_fu_1007_p2 <= (xor_ln131_fu_1001_p2 xor D_8_fu_174);
    xor_ln131_fu_1001_p2 <= (E_9_fu_170 xor B_5_fu_162);
    zext_ln104_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_1169),64));
    zext_ln106_1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_1_fu_417_p2),64));
    zext_ln106_2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_2_fu_444_p2),64));
    zext_ln106_3_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_3_fu_454_p2),64));
    zext_ln106_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_fu_406_p2),64));
    zext_ln129_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_fu_166),64));
    zext_ln94_1_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_fu_126),64));
    zext_ln94_2_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_142),64));
    zext_ln94_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_110),64));
    zext_ln98_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_98),64));
end behav;
