// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_gsm_div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num,
        denum,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] num;
input  [15:0] denum;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [63:0] sext_ln126_fu_83_p1;
reg  signed [63:0] sext_ln126_reg_213;
wire  signed [62:0] sext_ln121_fu_87_p1;
reg  signed [62:0] sext_ln121_reg_218;
wire   [0:0] icmp_ln134_fu_91_p2;
reg   [0:0] icmp_ln134_reg_223;
reg   [15:0] ap_phi_mux_retval_0_phi_fu_72_p4;
reg   [15:0] retval_0_reg_68;
wire   [15:0] div_6_fu_165_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln138_fu_192_p2;
reg   [14:0] div_fu_44;
wire   [14:0] trunc_ln144_fu_174_p1;
reg   [62:0] L_num_fu_48;
wire   [62:0] L_num_6_fu_178_p3;
wire  signed [62:0] sext_ln120_fu_79_p1;
reg   [3:0] k_fu_52;
wire   [3:0] k_3_fu_186_p2;
wire  signed [15:0] sext_ln120_fu_79_p0;
wire  signed [15:0] sext_ln126_fu_83_p0;
wire  signed [15:0] sext_ln121_fu_87_p0;
wire  signed [15:0] icmp_ln134_fu_91_p0;
wire   [63:0] L_num_1_fu_129_p3;
wire   [0:0] icmp_ln144_fu_143_p2;
wire   [62:0] shl_ln120_fu_137_p2;
wire   [15:0] div_1_fu_121_p3;
wire   [0:0] xor_ln144_fu_148_p2;
wire   [15:0] div_5_fu_159_p2;
wire   [62:0] L_num_5_fu_154_p2;
reg   [15:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 div_fu_44 = 15'd0;
#0 L_num_fu_48 = 63'd0;
#0 k_fu_52 = 4'd0;
#0 ap_return_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln138_fu_192_p2 == 1'd1) | (icmp_ln134_reg_223 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_retval_0_phi_fu_72_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln134_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        L_num_fu_48 <= sext_ln120_fu_79_p1;
    end else if (((icmp_ln134_reg_223 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        L_num_fu_48 <= L_num_6_fu_178_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln134_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        div_fu_44 <= 15'd0;
    end else if (((icmp_ln134_reg_223 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        div_fu_44 <= trunc_ln144_fu_174_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln134_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        k_fu_52 <= 4'd14;
    end else if (((icmp_ln134_reg_223 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_fu_52 <= k_3_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln138_fu_192_p2 == 1'd1) & (icmp_ln134_reg_223 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        retval_0_reg_68 <= div_6_fu_165_p3;
    end else if (((ap_start == 1'b1) & (icmp_ln134_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_0_reg_68 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln134_reg_223 <= icmp_ln134_fu_91_p2;
        sext_ln121_reg_218 <= sext_ln121_fu_87_p1;
        sext_ln126_reg_213 <= sext_ln126_fu_83_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & ((icmp_ln138_fu_192_p2 == 1'd1) | (icmp_ln134_reg_223 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln138_fu_192_p2 == 1'd1) & (icmp_ln134_reg_223 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_retval_0_phi_fu_72_p4 = div_6_fu_165_p3;
    end else begin
        ap_phi_mux_retval_0_phi_fu_72_p4 = retval_0_reg_68;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln138_fu_192_p2 == 1'd1) | (icmp_ln134_reg_223 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln138_fu_192_p2 == 1'd1) | (icmp_ln134_reg_223 == 1'd1)))) begin
        ap_return = ap_phi_mux_retval_0_phi_fu_72_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln138_fu_192_p2 == 1'd1) | (icmp_ln134_reg_223 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L_num_1_fu_129_p3 = {{L_num_fu_48}, {1'd0}};

assign L_num_5_fu_154_p2 = ($signed(shl_ln120_fu_137_p2) - $signed(sext_ln121_reg_218));

assign L_num_6_fu_178_p3 = ((xor_ln144_fu_148_p2[0:0] == 1'b1) ? L_num_5_fu_154_p2 : shl_ln120_fu_137_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign div_1_fu_121_p3 = {{div_fu_44}, {1'd0}};

assign div_5_fu_159_p2 = (div_1_fu_121_p3 | 16'd1);

assign div_6_fu_165_p3 = ((xor_ln144_fu_148_p2[0:0] == 1'b1) ? div_5_fu_159_p2 : div_1_fu_121_p3);

assign icmp_ln134_fu_91_p0 = num;

assign icmp_ln134_fu_91_p2 = ((icmp_ln134_fu_91_p0 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln138_fu_192_p2 = ((k_fu_52 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln144_fu_143_p2 = (($signed(L_num_1_fu_129_p3) < $signed(sext_ln126_reg_213)) ? 1'b1 : 1'b0);

assign k_3_fu_186_p2 = ($signed(k_fu_52) + $signed(4'd15));

assign sext_ln120_fu_79_p0 = num;

assign sext_ln120_fu_79_p1 = sext_ln120_fu_79_p0;

assign sext_ln121_fu_87_p0 = denum;

assign sext_ln121_fu_87_p1 = sext_ln121_fu_87_p0;

assign sext_ln126_fu_83_p0 = denum;

assign sext_ln126_fu_83_p1 = sext_ln126_fu_83_p0;

assign shl_ln120_fu_137_p2 = L_num_fu_48 << 63'd1;

assign trunc_ln144_fu_174_p1 = div_6_fu_165_p3[14:0];

assign xor_ln144_fu_148_p2 = (icmp_ln144_fu_143_p2 ^ 1'd1);

endmodule //Gsm_LPC_Analysis_gsm_div
