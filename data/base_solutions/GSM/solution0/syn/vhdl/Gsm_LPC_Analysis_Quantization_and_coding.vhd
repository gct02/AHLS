-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_Quantization_and_coding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LARc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    LARc_ce0 : OUT STD_LOGIC;
    LARc_we0 : OUT STD_LOGIC;
    LARc_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    LARc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    LARc_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    LARc_ce1 : OUT STD_LOGIC;
    LARc_we1 : OUT STD_LOGIC;
    LARc_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    LARc_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_gsm_add_fu_310_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_gsm_add_fu_310_p_din2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_gsm_add_fu_310_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_gsm_add_fu_310_p_ready : IN STD_LOGIC;
    tmp_6_gsm_add_fu_315_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_6_gsm_add_fu_315_p_din2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tmp_6_gsm_add_fu_315_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    tmp_6_gsm_add_fu_315_p_ready : IN STD_LOGIC );
end;


architecture behav of Gsm_LPC_Analysis_Quantization_and_coding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_5000 : STD_LOGIC_VECTOR (14 downto 0) := "101000000000000";
    constant ap_const_lv15_368C : STD_LOGIC_VECTOR (14 downto 0) := "011011010001100";
    constant ap_const_lv15_2156 : STD_LOGIC_VECTOR (14 downto 0) := "010000101010110";
    constant ap_const_lv15_3C00 : STD_LOGIC_VECTOR (14 downto 0) := "011110000000000";
    constant ap_const_lv15_234C : STD_LOGIC_VECTOR (14 downto 0) := "010001101001100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_800 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_const_lv16_5E : STD_LOGIC_VECTOR (15 downto 0) := "0000000001011110";
    constant ap_const_lv16_FEAB : STD_LOGIC_VECTOR (15 downto 0) := "1111111010101011";
    constant ap_const_lv16_100 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_const_lv16_F600 : STD_LOGIC_VECTOR (15 downto 0) := "1111011000000000";
    constant ap_const_lv16_F900 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100000000";
    constant ap_const_lv16_FB88 : STD_LOGIC_VECTOR (15 downto 0) := "1111101110001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_7C : STD_LOGIC_VECTOR (6 downto 0) := "1111100";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_gsm_mult_fu_195_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_271 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_gsm_mult_fu_203_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_276 : STD_LOGIC_VECTOR (15 downto 0);
    signal LARc_addr_reg_713 : STD_LOGIC_VECTOR (2 downto 0);
    signal LARc_addr_3_reg_718 : STD_LOGIC_VECTOR (2 downto 0);
    signal LARc_addr_4_reg_723 : STD_LOGIC_VECTOR (2 downto 0);
    signal LARc_addr_5_reg_728 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln289_1_fu_323_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln289_1_reg_733 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln290_1_fu_373_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln290_1_reg_738 : STD_LOGIC_VECTOR (6 downto 0);
    signal LARc_addr_6_reg_743 : STD_LOGIC_VECTOR (2 downto 0);
    signal LARc_addr_7_reg_748 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln291_1_fu_423_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln291_1_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln292_1_fu_473_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln292_1_reg_758 : STD_LOGIC_VECTOR (6 downto 0);
    signal LARc_addr_8_reg_763 : STD_LOGIC_VECTOR (2 downto 0);
    signal LARc_addr_9_reg_768 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln294_1_fu_531_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln294_1_reg_773 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln295_1_fu_581_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln295_1_reg_778 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln296_1_fu_639_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln296_1_reg_783 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln297_1_fu_689_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln297_1_reg_788 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_gsm_mult_fu_195_ap_ready : STD_LOGIC;
    signal grp_gsm_mult_fu_195_a : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_gsm_mult_fu_203_ap_ready : STD_LOGIC;
    signal grp_gsm_mult_fu_203_a : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_gsm_add_fu_215_b : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gsm_add_fu_230_ap_ready : STD_LOGIC;
    signal grp_gsm_add_fu_230_b : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gsm_add_fu_230_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gsm_add_fu_237_ap_ready : STD_LOGIC;
    signal grp_gsm_add_fu_237_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln289_fu_481_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln290_fu_485_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln291_fu_589_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln292_fu_593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln294_fu_697_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln295_fu_701_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln296_fu_705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln297_fu_709_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_281_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_251_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln289_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln289_1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln289_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln289_fu_309_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln289_fu_303_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_331_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_261_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln290_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln290_1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln290_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln290_fu_359_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln290_fu_353_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_381_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln291_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln291_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln291_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln291_fu_409_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln291_fu_403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_431_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln292_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln292_1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln292_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln292_fu_459_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln292_fu_453_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_489_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln294_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln294_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln294_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln294_fu_517_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln294_fu_511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_539_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln295_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln295_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln295_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln295_fu_567_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln295_fu_561_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_597_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln296_fu_607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln296_1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln296_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln296_fu_625_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln296_fu_619_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_647_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln297_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_1_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln297_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln297_fu_675_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln297_fu_669_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Gsm_LPC_Analysis_gsm_mult IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (14 downto 0);
        b : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Gsm_LPC_Analysis_gsm_add IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (15 downto 0);
        b : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_gsm_mult_fu_195 : component Gsm_LPC_Analysis_gsm_mult
    port map (
        ap_ready => grp_gsm_mult_fu_195_ap_ready,
        a => grp_gsm_mult_fu_195_a,
        b => LARc_q1,
        ap_return => grp_gsm_mult_fu_195_ap_return);

    grp_gsm_mult_fu_203 : component Gsm_LPC_Analysis_gsm_mult
    port map (
        ap_ready => grp_gsm_mult_fu_203_ap_ready,
        a => grp_gsm_mult_fu_203_a,
        b => LARc_q0,
        ap_return => grp_gsm_mult_fu_203_ap_return);

    grp_gsm_add_fu_230 : component Gsm_LPC_Analysis_gsm_add
    port map (
        ap_ready => grp_gsm_add_fu_230_ap_ready,
        a => reg_276,
        b => grp_gsm_add_fu_230_b,
        ap_return => grp_gsm_add_fu_230_ap_return);

    grp_gsm_add_fu_237 : component Gsm_LPC_Analysis_gsm_add
    port map (
        ap_ready => grp_gsm_add_fu_237_ap_ready,
        a => grp_gsm_add_fu_230_ap_return,
        b => ap_const_lv16_100,
        ap_return => grp_gsm_add_fu_237_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_271 <= grp_gsm_mult_fu_195_ap_return;
                reg_276 <= grp_gsm_mult_fu_203_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                select_ln289_1_reg_733 <= select_ln289_1_fu_323_p3;
                select_ln290_1_reg_738 <= select_ln290_1_fu_373_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                select_ln291_1_reg_753 <= select_ln291_1_fu_423_p3;
                select_ln292_1_reg_758 <= select_ln292_1_fu_473_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln294_1_reg_773 <= select_ln294_1_fu_531_p3;
                select_ln295_1_reg_778 <= select_ln295_1_fu_581_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                select_ln296_1_reg_783 <= select_ln296_1_fu_639_p3;
                select_ln297_1_reg_788 <= select_ln297_1_fu_689_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    LARc_addr_3_reg_718 <= ap_const_lv64_1(3 - 1 downto 0);
    LARc_addr_4_reg_723 <= ap_const_lv64_2(3 - 1 downto 0);
    LARc_addr_5_reg_728 <= ap_const_lv64_3(3 - 1 downto 0);
    LARc_addr_6_reg_743 <= ap_const_lv64_4(3 - 1 downto 0);
    LARc_addr_7_reg_748 <= ap_const_lv64_5(3 - 1 downto 0);
    LARc_addr_8_reg_763 <= ap_const_lv64_6(3 - 1 downto 0);
    LARc_addr_9_reg_768 <= ap_const_lv64_7(3 - 1 downto 0);
    LARc_addr_reg_713 <= ap_const_lv64_0(3 - 1 downto 0);

    LARc_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, LARc_addr_3_reg_718, LARc_addr_5_reg_728, LARc_addr_7_reg_748, LARc_addr_9_reg_768, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_address0 <= LARc_addr_9_reg_768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            LARc_address0 <= LARc_addr_7_reg_748;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_address0 <= LARc_addr_5_reg_728;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LARc_address0 <= LARc_addr_3_reg_718;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LARc_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LARc_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            LARc_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            LARc_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            LARc_address0 <= "XXX";
        end if; 
    end process;


    LARc_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, LARc_addr_reg_713, LARc_addr_4_reg_723, LARc_addr_6_reg_743, LARc_addr_8_reg_763, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_address1 <= LARc_addr_8_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            LARc_address1 <= LARc_addr_6_reg_743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_address1 <= LARc_addr_4_reg_723;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LARc_address1 <= LARc_addr_reg_713;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LARc_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LARc_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            LARc_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            LARc_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            LARc_address1 <= "XXX";
        end if; 
    end process;


    LARc_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            LARc_ce0 <= ap_const_logic_1;
        else 
            LARc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LARc_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            LARc_ce1 <= ap_const_logic_1;
        else 
            LARc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LARc_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln290_fu_485_p1, zext_ln292_fu_593_p1, ap_CS_fsm_state7, zext_ln295_fu_701_p1, ap_CS_fsm_state8, zext_ln297_fu_709_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_d0 <= zext_ln297_fu_709_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            LARc_d0 <= zext_ln295_fu_701_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_d0 <= zext_ln292_fu_593_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LARc_d0 <= zext_ln290_fu_485_p1;
        else 
            LARc_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    LARc_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln289_fu_481_p1, zext_ln291_fu_589_p1, ap_CS_fsm_state7, zext_ln294_fu_697_p1, ap_CS_fsm_state8, zext_ln296_fu_705_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_d1 <= zext_ln296_fu_705_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            LARc_d1 <= zext_ln294_fu_697_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_d1 <= zext_ln291_fu_589_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            LARc_d1 <= zext_ln289_fu_481_p1;
        else 
            LARc_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    LARc_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            LARc_we0 <= ap_const_logic_1;
        else 
            LARc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LARc_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            LARc_we1 <= ap_const_logic_1;
        else 
            LARc_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln289_fu_303_p2 <= std_logic_vector(unsigned(grp_fu_251_p4) + unsigned(ap_const_lv7_20));
    add_ln290_fu_353_p2 <= std_logic_vector(unsigned(grp_fu_261_p4) + unsigned(ap_const_lv7_20));
    add_ln291_fu_403_p2 <= std_logic_vector(unsigned(grp_fu_251_p4) + unsigned(ap_const_lv7_10));
    add_ln292_fu_453_p2 <= std_logic_vector(unsigned(grp_fu_261_p4) + unsigned(ap_const_lv7_10));
    add_ln294_fu_511_p2 <= std_logic_vector(unsigned(grp_fu_251_p4) + unsigned(ap_const_lv7_8));
    add_ln295_fu_561_p2 <= std_logic_vector(unsigned(grp_fu_261_p4) + unsigned(ap_const_lv7_8));
    add_ln296_fu_619_p2 <= std_logic_vector(unsigned(grp_fu_251_p4) + unsigned(ap_const_lv7_4));
    add_ln297_fu_669_p2 <= std_logic_vector(unsigned(grp_fu_261_p4) + unsigned(ap_const_lv7_4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_251_p4 <= tmp_6_gsm_add_fu_315_p_dout0(15 downto 9);
    grp_fu_261_p4 <= grp_gsm_add_fu_237_ap_return(15 downto 9);

    grp_gsm_add_fu_215_b_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_gsm_add_fu_215_b <= ap_const_lv16_FEAB;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_gsm_add_fu_215_b <= ap_const_lv16_5E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_gsm_add_fu_215_b <= ap_const_lv16_800;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_gsm_add_fu_215_b <= ap_const_lv16_0;
        else 
            grp_gsm_add_fu_215_b <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gsm_add_fu_230_b_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_gsm_add_fu_230_b <= ap_const_lv16_FB88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_gsm_add_fu_230_b <= ap_const_lv16_F900;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_gsm_add_fu_230_b <= ap_const_lv16_F600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_gsm_add_fu_230_b <= ap_const_lv16_0;
        else 
            grp_gsm_add_fu_230_b <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_gsm_add_fu_310_p_din1 <= reg_271;
    grp_gsm_add_fu_310_p_din2 <= grp_gsm_add_fu_215_b;

    grp_gsm_mult_fu_195_a_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_gsm_mult_fu_195_a <= ap_const_lv15_2156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_gsm_mult_fu_195_a <= ap_const_lv15_368C;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_gsm_mult_fu_195_a <= ap_const_lv15_5000;
        else 
            grp_gsm_mult_fu_195_a <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_gsm_mult_fu_203_a_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_gsm_mult_fu_203_a <= ap_const_lv15_234C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_gsm_mult_fu_203_a <= ap_const_lv15_3C00;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_gsm_mult_fu_203_a <= ap_const_lv15_5000;
        else 
            grp_gsm_mult_fu_203_a <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln289_1_fu_297_p2 <= "1" when (signed(grp_fu_251_p4) < signed(ap_const_lv7_60)) else "0";
    icmp_ln289_fu_291_p2 <= "1" when (tmp_fu_281_p4 = ap_const_lv2_1) else "0";
    icmp_ln290_1_fu_347_p2 <= "1" when (signed(grp_fu_261_p4) < signed(ap_const_lv7_60)) else "0";
    icmp_ln290_fu_341_p2 <= "1" when (tmp_4_fu_331_p4 = ap_const_lv2_1) else "0";
    icmp_ln291_1_fu_397_p2 <= "1" when (signed(grp_fu_251_p4) < signed(ap_const_lv7_70)) else "0";
    icmp_ln291_fu_391_p2 <= "1" when (signed(tmp_5_fu_381_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln292_1_fu_447_p2 <= "1" when (signed(grp_fu_261_p4) < signed(ap_const_lv7_70)) else "0";
    icmp_ln292_fu_441_p2 <= "1" when (signed(tmp_6_fu_431_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln294_1_fu_505_p2 <= "1" when (signed(grp_fu_251_p4) < signed(ap_const_lv7_78)) else "0";
    icmp_ln294_fu_499_p2 <= "1" when (signed(tmp_7_fu_489_p4) > signed(ap_const_lv4_0)) else "0";
    icmp_ln295_1_fu_555_p2 <= "1" when (signed(grp_fu_261_p4) < signed(ap_const_lv7_78)) else "0";
    icmp_ln295_fu_549_p2 <= "1" when (signed(tmp_8_fu_539_p4) > signed(ap_const_lv4_0)) else "0";
    icmp_ln296_1_fu_613_p2 <= "1" when (signed(grp_fu_251_p4) < signed(ap_const_lv7_7C)) else "0";
    icmp_ln296_fu_607_p2 <= "1" when (signed(tmp_9_fu_597_p4) > signed(ap_const_lv5_0)) else "0";
    icmp_ln297_1_fu_663_p2 <= "1" when (signed(grp_fu_261_p4) < signed(ap_const_lv7_7C)) else "0";
    icmp_ln297_fu_657_p2 <= "1" when (signed(tmp_10_fu_647_p4) > signed(ap_const_lv5_0)) else "0";
    or_ln289_fu_317_p2 <= (icmp_ln289_fu_291_p2 or icmp_ln289_1_fu_297_p2);
    or_ln290_fu_367_p2 <= (icmp_ln290_fu_341_p2 or icmp_ln290_1_fu_347_p2);
    or_ln291_fu_417_p2 <= (icmp_ln291_fu_391_p2 or icmp_ln291_1_fu_397_p2);
    or_ln292_fu_467_p2 <= (icmp_ln292_fu_441_p2 or icmp_ln292_1_fu_447_p2);
    or_ln294_fu_525_p2 <= (icmp_ln294_fu_499_p2 or icmp_ln294_1_fu_505_p2);
    or_ln295_fu_575_p2 <= (icmp_ln295_fu_549_p2 or icmp_ln295_1_fu_555_p2);
    or_ln296_fu_633_p2 <= (icmp_ln296_fu_607_p2 or icmp_ln296_1_fu_613_p2);
    or_ln297_fu_683_p2 <= (icmp_ln297_fu_657_p2 or icmp_ln297_1_fu_663_p2);
    select_ln289_1_fu_323_p3 <= 
        select_ln289_fu_309_p3 when (or_ln289_fu_317_p2(0) = '1') else 
        add_ln289_fu_303_p2;
    select_ln289_fu_309_p3 <= 
        ap_const_lv7_3F when (icmp_ln289_fu_291_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln290_1_fu_373_p3 <= 
        select_ln290_fu_359_p3 when (or_ln290_fu_367_p2(0) = '1') else 
        add_ln290_fu_353_p2;
    select_ln290_fu_359_p3 <= 
        ap_const_lv7_3F when (icmp_ln290_fu_341_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln291_1_fu_423_p3 <= 
        select_ln291_fu_409_p3 when (or_ln291_fu_417_p2(0) = '1') else 
        add_ln291_fu_403_p2;
    select_ln291_fu_409_p3 <= 
        ap_const_lv7_1F when (icmp_ln291_fu_391_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln292_1_fu_473_p3 <= 
        select_ln292_fu_459_p3 when (or_ln292_fu_467_p2(0) = '1') else 
        add_ln292_fu_453_p2;
    select_ln292_fu_459_p3 <= 
        ap_const_lv7_1F when (icmp_ln292_fu_441_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln294_1_fu_531_p3 <= 
        select_ln294_fu_517_p3 when (or_ln294_fu_525_p2(0) = '1') else 
        add_ln294_fu_511_p2;
    select_ln294_fu_517_p3 <= 
        ap_const_lv7_F when (icmp_ln294_fu_499_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln295_1_fu_581_p3 <= 
        select_ln295_fu_567_p3 when (or_ln295_fu_575_p2(0) = '1') else 
        add_ln295_fu_561_p2;
    select_ln295_fu_567_p3 <= 
        ap_const_lv7_F when (icmp_ln295_fu_549_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln296_1_fu_639_p3 <= 
        select_ln296_fu_625_p3 when (or_ln296_fu_633_p2(0) = '1') else 
        add_ln296_fu_619_p2;
    select_ln296_fu_625_p3 <= 
        ap_const_lv7_7 when (icmp_ln296_fu_607_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln297_1_fu_689_p3 <= 
        select_ln297_fu_675_p3 when (or_ln297_fu_683_p2(0) = '1') else 
        add_ln297_fu_669_p2;
    select_ln297_fu_675_p3 <= 
        ap_const_lv7_7 when (icmp_ln297_fu_657_p2(0) = '1') else 
        ap_const_lv7_0;
    tmp_10_fu_647_p4 <= grp_gsm_add_fu_237_ap_return(15 downto 11);
    tmp_4_fu_331_p4 <= grp_gsm_add_fu_237_ap_return(15 downto 14);
    tmp_5_fu_381_p4 <= tmp_6_gsm_add_fu_315_p_dout0(15 downto 13);
    tmp_6_fu_431_p4 <= grp_gsm_add_fu_237_ap_return(15 downto 13);
    tmp_6_gsm_add_fu_315_p_din1 <= grp_gsm_add_fu_310_p_dout0;
    tmp_6_gsm_add_fu_315_p_din2 <= ap_const_lv16_100;
    tmp_7_fu_489_p4 <= tmp_6_gsm_add_fu_315_p_dout0(15 downto 12);
    tmp_8_fu_539_p4 <= grp_gsm_add_fu_237_ap_return(15 downto 12);
    tmp_9_fu_597_p4 <= tmp_6_gsm_add_fu_315_p_dout0(15 downto 11);
    tmp_fu_281_p4 <= tmp_6_gsm_add_fu_315_p_dout0(15 downto 14);
    zext_ln289_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln289_1_reg_733),16));
    zext_ln290_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln290_1_reg_738),16));
    zext_ln291_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln291_1_reg_753),16));
    zext_ln292_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln292_1_reg_758),16));
    zext_ln294_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln294_1_reg_773),16));
    zext_ln295_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln295_1_reg_778),16));
    zext_ln296_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln296_1_reg_783),16));
    zext_ln297_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln297_1_reg_788),16));
end behav;
