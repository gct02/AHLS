-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_gsm_add is
port (
    ap_ready : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (15 downto 0);
    b : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Gsm_LPC_Analysis_gsm_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv17_18000 : STD_LOGIC_VECTOR (16 downto 0) := "11000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal sext_ln39_fu_40_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln39_1_fu_44_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln39_fu_48_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln39_fu_48_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln39_1_fu_44_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln39_fu_40_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sum_fu_54_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_66_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln40_fu_60_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_1_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_90_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_fu_82_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln39_fu_48_p2 : STD_LOGIC_VECTOR (15 downto 0);


begin



    add_ln39_fu_48_p0 <= b;
    add_ln39_fu_48_p1 <= a;
    add_ln39_fu_48_p2 <= std_logic_vector(signed(add_ln39_fu_48_p0) + signed(add_ln39_fu_48_p1));
    ap_ready <= ap_const_logic_1;
    ap_return <= 
        select_ln40_fu_82_p3 when (or_ln40_fu_90_p2(0) = '1') else 
        add_ln39_fu_48_p2;
    icmp_ln40_1_fu_76_p2 <= "1" when (tmp_fu_66_p4 = ap_const_lv2_1) else "0";
    icmp_ln40_fu_60_p2 <= "1" when (signed(sum_fu_54_p2) < signed(ap_const_lv17_18000)) else "0";
    or_ln40_fu_90_p2 <= (icmp_ln40_fu_60_p2 or icmp_ln40_1_fu_76_p2);
    select_ln40_fu_82_p3 <= 
        ap_const_lv16_8000 when (icmp_ln40_fu_60_p2(0) = '1') else 
        ap_const_lv16_7FFF;
    sext_ln39_1_fu_44_p0 <= b;
        sext_ln39_1_fu_44_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln39_1_fu_44_p0),17));

    sext_ln39_fu_40_p0 <= a;
        sext_ln39_fu_40_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln39_fu_40_p0),17));

    sum_fu_54_p2 <= std_logic_vector(signed(sext_ln39_1_fu_44_p1) + signed(sext_ln39_fu_40_p1));
    tmp_fu_66_p4 <= sum_fu_54_p2(16 downto 15);
end behav;
