// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_Quantization_and_coding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        LARc_address0,
        LARc_ce0,
        LARc_we0,
        LARc_d0,
        LARc_q0,
        LARc_address1,
        LARc_ce1,
        LARc_we1,
        LARc_d1,
        LARc_q1,
        grp_gsm_add_fu_310_p_din1,
        grp_gsm_add_fu_310_p_din2,
        grp_gsm_add_fu_310_p_dout0,
        grp_gsm_add_fu_310_p_ready,
        tmp_6_gsm_add_fu_315_p_din1,
        tmp_6_gsm_add_fu_315_p_din2,
        tmp_6_gsm_add_fu_315_p_dout0,
        tmp_6_gsm_add_fu_315_p_ready
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] LARc_address0;
output   LARc_ce0;
output   LARc_we0;
output  [15:0] LARc_d0;
input  [15:0] LARc_q0;
output  [2:0] LARc_address1;
output   LARc_ce1;
output   LARc_we1;
output  [15:0] LARc_d1;
input  [15:0] LARc_q1;
output  [15:0] grp_gsm_add_fu_310_p_din1;
output  [15:0] grp_gsm_add_fu_310_p_din2;
input  [15:0] grp_gsm_add_fu_310_p_dout0;
input   grp_gsm_add_fu_310_p_ready;
output  [15:0] tmp_6_gsm_add_fu_315_p_din1;
output  [15:0] tmp_6_gsm_add_fu_315_p_din2;
input  [15:0] tmp_6_gsm_add_fu_315_p_dout0;
input   tmp_6_gsm_add_fu_315_p_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] LARc_address0;
reg LARc_ce0;
reg LARc_we0;
reg[15:0] LARc_d0;
reg[2:0] LARc_address1;
reg LARc_ce1;
reg LARc_we1;
reg[15:0] LARc_d1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] grp_gsm_mult_fu_195_ap_return;
reg   [15:0] reg_271;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [15:0] grp_gsm_mult_fu_203_ap_return;
reg   [15:0] reg_276;
wire   [2:0] LARc_addr_reg_713;
wire   [2:0] LARc_addr_3_reg_718;
wire   [2:0] LARc_addr_4_reg_723;
wire   [2:0] LARc_addr_5_reg_728;
wire   [6:0] select_ln289_1_fu_323_p3;
reg   [6:0] select_ln289_1_reg_733;
wire   [6:0] select_ln290_1_fu_373_p3;
reg   [6:0] select_ln290_1_reg_738;
wire   [2:0] LARc_addr_6_reg_743;
wire   [2:0] LARc_addr_7_reg_748;
wire   [6:0] select_ln291_1_fu_423_p3;
reg   [6:0] select_ln291_1_reg_753;
wire   [6:0] select_ln292_1_fu_473_p3;
reg   [6:0] select_ln292_1_reg_758;
wire   [2:0] LARc_addr_8_reg_763;
wire   [2:0] LARc_addr_9_reg_768;
wire   [6:0] select_ln294_1_fu_531_p3;
reg   [6:0] select_ln294_1_reg_773;
wire   [6:0] select_ln295_1_fu_581_p3;
reg   [6:0] select_ln295_1_reg_778;
wire   [6:0] select_ln296_1_fu_639_p3;
reg   [6:0] select_ln296_1_reg_783;
wire    ap_CS_fsm_state6;
wire   [6:0] select_ln297_1_fu_689_p3;
reg   [6:0] select_ln297_1_reg_788;
wire    grp_gsm_mult_fu_195_ap_ready;
reg   [14:0] grp_gsm_mult_fu_195_a;
wire    grp_gsm_mult_fu_203_ap_ready;
reg   [14:0] grp_gsm_mult_fu_203_a;
reg   [15:0] grp_gsm_add_fu_215_b;
wire    grp_gsm_add_fu_230_ap_ready;
reg   [15:0] grp_gsm_add_fu_230_b;
wire   [15:0] grp_gsm_add_fu_230_ap_return;
wire    grp_gsm_add_fu_237_ap_ready;
wire   [15:0] grp_gsm_add_fu_237_ap_return;
wire   [15:0] zext_ln289_fu_481_p1;
wire   [15:0] zext_ln290_fu_485_p1;
wire   [15:0] zext_ln291_fu_589_p1;
wire   [15:0] zext_ln292_fu_593_p1;
wire    ap_CS_fsm_state7;
wire   [15:0] zext_ln294_fu_697_p1;
wire   [15:0] zext_ln295_fu_701_p1;
wire    ap_CS_fsm_state8;
wire   [15:0] zext_ln296_fu_705_p1;
wire   [15:0] zext_ln297_fu_709_p1;
wire   [1:0] tmp_fu_281_p4;
wire   [6:0] grp_fu_251_p4;
wire   [0:0] icmp_ln289_fu_291_p2;
wire   [0:0] icmp_ln289_1_fu_297_p2;
wire   [0:0] or_ln289_fu_317_p2;
wire   [6:0] select_ln289_fu_309_p3;
wire   [6:0] add_ln289_fu_303_p2;
wire   [1:0] tmp_4_fu_331_p4;
wire   [6:0] grp_fu_261_p4;
wire   [0:0] icmp_ln290_fu_341_p2;
wire   [0:0] icmp_ln290_1_fu_347_p2;
wire   [0:0] or_ln290_fu_367_p2;
wire   [6:0] select_ln290_fu_359_p3;
wire   [6:0] add_ln290_fu_353_p2;
wire   [2:0] tmp_5_fu_381_p4;
wire   [0:0] icmp_ln291_fu_391_p2;
wire   [0:0] icmp_ln291_1_fu_397_p2;
wire   [0:0] or_ln291_fu_417_p2;
wire   [6:0] select_ln291_fu_409_p3;
wire   [6:0] add_ln291_fu_403_p2;
wire   [2:0] tmp_6_fu_431_p4;
wire   [0:0] icmp_ln292_fu_441_p2;
wire   [0:0] icmp_ln292_1_fu_447_p2;
wire   [0:0] or_ln292_fu_467_p2;
wire   [6:0] select_ln292_fu_459_p3;
wire   [6:0] add_ln292_fu_453_p2;
wire   [3:0] tmp_7_fu_489_p4;
wire   [0:0] icmp_ln294_fu_499_p2;
wire   [0:0] icmp_ln294_1_fu_505_p2;
wire   [0:0] or_ln294_fu_525_p2;
wire   [6:0] select_ln294_fu_517_p3;
wire   [6:0] add_ln294_fu_511_p2;
wire   [3:0] tmp_8_fu_539_p4;
wire   [0:0] icmp_ln295_fu_549_p2;
wire   [0:0] icmp_ln295_1_fu_555_p2;
wire   [0:0] or_ln295_fu_575_p2;
wire   [6:0] select_ln295_fu_567_p3;
wire   [6:0] add_ln295_fu_561_p2;
wire   [4:0] tmp_9_fu_597_p4;
wire   [0:0] icmp_ln296_fu_607_p2;
wire   [0:0] icmp_ln296_1_fu_613_p2;
wire   [0:0] or_ln296_fu_633_p2;
wire   [6:0] select_ln296_fu_625_p3;
wire   [6:0] add_ln296_fu_619_p2;
wire   [4:0] tmp_10_fu_647_p4;
wire   [0:0] icmp_ln297_fu_657_p2;
wire   [0:0] icmp_ln297_1_fu_663_p2;
wire   [0:0] or_ln297_fu_683_p2;
wire   [6:0] select_ln297_fu_675_p3;
wire   [6:0] add_ln297_fu_669_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

Gsm_LPC_Analysis_gsm_mult grp_gsm_mult_fu_195(
    .ap_ready(grp_gsm_mult_fu_195_ap_ready),
    .a(grp_gsm_mult_fu_195_a),
    .b(LARc_q1),
    .ap_return(grp_gsm_mult_fu_195_ap_return)
);

Gsm_LPC_Analysis_gsm_mult grp_gsm_mult_fu_203(
    .ap_ready(grp_gsm_mult_fu_203_ap_ready),
    .a(grp_gsm_mult_fu_203_a),
    .b(LARc_q0),
    .ap_return(grp_gsm_mult_fu_203_ap_return)
);

Gsm_LPC_Analysis_gsm_add grp_gsm_add_fu_230(
    .ap_ready(grp_gsm_add_fu_230_ap_ready),
    .a(reg_276),
    .b(grp_gsm_add_fu_230_b),
    .ap_return(grp_gsm_add_fu_230_ap_return)
);

Gsm_LPC_Analysis_gsm_add grp_gsm_add_fu_237(
    .ap_ready(grp_gsm_add_fu_237_ap_ready),
    .a(grp_gsm_add_fu_230_ap_return),
    .b(16'd256),
    .ap_return(grp_gsm_add_fu_237_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_271 <= grp_gsm_mult_fu_195_ap_return;
        reg_276 <= grp_gsm_mult_fu_203_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        select_ln289_1_reg_733 <= select_ln289_1_fu_323_p3;
        select_ln290_1_reg_738 <= select_ln290_1_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln291_1_reg_753 <= select_ln291_1_fu_423_p3;
        select_ln292_1_reg_758 <= select_ln292_1_fu_473_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln294_1_reg_773 <= select_ln294_1_fu_531_p3;
        select_ln295_1_reg_778 <= select_ln295_1_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln296_1_reg_783 <= select_ln296_1_fu_639_p3;
        select_ln297_1_reg_788 <= select_ln297_1_fu_689_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LARc_address0 = LARc_addr_9_reg_768;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LARc_address0 = LARc_addr_7_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LARc_address0 = LARc_addr_5_reg_728;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LARc_address0 = LARc_addr_3_reg_718;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LARc_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LARc_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        LARc_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        LARc_address0 = 64'd1;
    end else begin
        LARc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LARc_address1 = LARc_addr_8_reg_763;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LARc_address1 = LARc_addr_6_reg_743;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LARc_address1 = LARc_addr_4_reg_723;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LARc_address1 = LARc_addr_reg_713;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        LARc_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        LARc_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        LARc_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        LARc_address1 = 64'd0;
    end else begin
        LARc_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        LARc_ce0 = 1'b1;
    end else begin
        LARc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        LARc_ce1 = 1'b1;
    end else begin
        LARc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LARc_d0 = zext_ln297_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LARc_d0 = zext_ln295_fu_701_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LARc_d0 = zext_ln292_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LARc_d0 = zext_ln290_fu_485_p1;
    end else begin
        LARc_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        LARc_d1 = zext_ln296_fu_705_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        LARc_d1 = zext_ln294_fu_697_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        LARc_d1 = zext_ln291_fu_589_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        LARc_d1 = zext_ln289_fu_481_p1;
    end else begin
        LARc_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        LARc_we0 = 1'b1;
    end else begin
        LARc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        LARc_we1 = 1'b1;
    end else begin
        LARc_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_gsm_add_fu_215_b = 16'd65195;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_add_fu_215_b = 16'd94;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_add_fu_215_b = 16'd2048;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_gsm_add_fu_215_b = 16'd0;
    end else begin
        grp_gsm_add_fu_215_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_gsm_add_fu_230_b = 16'd64392;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_add_fu_230_b = 16'd63744;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_add_fu_230_b = 16'd62976;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_gsm_add_fu_230_b = 16'd0;
    end else begin
        grp_gsm_add_fu_230_b = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_mult_fu_195_a = 15'd8534;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_mult_fu_195_a = 15'd13964;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_gsm_mult_fu_195_a = 15'd20480;
    end else begin
        grp_gsm_mult_fu_195_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_gsm_mult_fu_203_a = 15'd9036;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_gsm_mult_fu_203_a = 15'd15360;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_gsm_mult_fu_203_a = 15'd20480;
    end else begin
        grp_gsm_mult_fu_203_a = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LARc_addr_3_reg_718 = 64'd1;

assign LARc_addr_4_reg_723 = 64'd2;

assign LARc_addr_5_reg_728 = 64'd3;

assign LARc_addr_6_reg_743 = 64'd4;

assign LARc_addr_7_reg_748 = 64'd5;

assign LARc_addr_8_reg_763 = 64'd6;

assign LARc_addr_9_reg_768 = 64'd7;

assign LARc_addr_reg_713 = 64'd0;

assign add_ln289_fu_303_p2 = (grp_fu_251_p4 + 7'd32);

assign add_ln290_fu_353_p2 = (grp_fu_261_p4 + 7'd32);

assign add_ln291_fu_403_p2 = (grp_fu_251_p4 + 7'd16);

assign add_ln292_fu_453_p2 = (grp_fu_261_p4 + 7'd16);

assign add_ln294_fu_511_p2 = (grp_fu_251_p4 + 7'd8);

assign add_ln295_fu_561_p2 = (grp_fu_261_p4 + 7'd8);

assign add_ln296_fu_619_p2 = (grp_fu_251_p4 + 7'd4);

assign add_ln297_fu_669_p2 = (grp_fu_261_p4 + 7'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign grp_fu_251_p4 = {{tmp_6_gsm_add_fu_315_p_dout0[15:9]}};

assign grp_fu_261_p4 = {{grp_gsm_add_fu_237_ap_return[15:9]}};

assign grp_gsm_add_fu_310_p_din1 = reg_271;

assign grp_gsm_add_fu_310_p_din2 = grp_gsm_add_fu_215_b;

assign icmp_ln289_1_fu_297_p2 = (($signed(grp_fu_251_p4) < $signed(7'd96)) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_291_p2 = ((tmp_fu_281_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln290_1_fu_347_p2 = (($signed(grp_fu_261_p4) < $signed(7'd96)) ? 1'b1 : 1'b0);

assign icmp_ln290_fu_341_p2 = ((tmp_4_fu_331_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln291_1_fu_397_p2 = (($signed(grp_fu_251_p4) < $signed(7'd112)) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_391_p2 = (($signed(tmp_5_fu_381_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln292_1_fu_447_p2 = (($signed(grp_fu_261_p4) < $signed(7'd112)) ? 1'b1 : 1'b0);

assign icmp_ln292_fu_441_p2 = (($signed(tmp_6_fu_431_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln294_1_fu_505_p2 = (($signed(grp_fu_251_p4) < $signed(7'd120)) ? 1'b1 : 1'b0);

assign icmp_ln294_fu_499_p2 = (($signed(tmp_7_fu_489_p4) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign icmp_ln295_1_fu_555_p2 = (($signed(grp_fu_261_p4) < $signed(7'd120)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_549_p2 = (($signed(tmp_8_fu_539_p4) > $signed(4'd0)) ? 1'b1 : 1'b0);

assign icmp_ln296_1_fu_613_p2 = (($signed(grp_fu_251_p4) < $signed(7'd124)) ? 1'b1 : 1'b0);

assign icmp_ln296_fu_607_p2 = (($signed(tmp_9_fu_597_p4) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign icmp_ln297_1_fu_663_p2 = (($signed(grp_fu_261_p4) < $signed(7'd124)) ? 1'b1 : 1'b0);

assign icmp_ln297_fu_657_p2 = (($signed(tmp_10_fu_647_p4) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign or_ln289_fu_317_p2 = (icmp_ln289_fu_291_p2 | icmp_ln289_1_fu_297_p2);

assign or_ln290_fu_367_p2 = (icmp_ln290_fu_341_p2 | icmp_ln290_1_fu_347_p2);

assign or_ln291_fu_417_p2 = (icmp_ln291_fu_391_p2 | icmp_ln291_1_fu_397_p2);

assign or_ln292_fu_467_p2 = (icmp_ln292_fu_441_p2 | icmp_ln292_1_fu_447_p2);

assign or_ln294_fu_525_p2 = (icmp_ln294_fu_499_p2 | icmp_ln294_1_fu_505_p2);

assign or_ln295_fu_575_p2 = (icmp_ln295_fu_549_p2 | icmp_ln295_1_fu_555_p2);

assign or_ln296_fu_633_p2 = (icmp_ln296_fu_607_p2 | icmp_ln296_1_fu_613_p2);

assign or_ln297_fu_683_p2 = (icmp_ln297_fu_657_p2 | icmp_ln297_1_fu_663_p2);

assign select_ln289_1_fu_323_p3 = ((or_ln289_fu_317_p2[0:0] == 1'b1) ? select_ln289_fu_309_p3 : add_ln289_fu_303_p2);

assign select_ln289_fu_309_p3 = ((icmp_ln289_fu_291_p2[0:0] == 1'b1) ? 7'd63 : 7'd0);

assign select_ln290_1_fu_373_p3 = ((or_ln290_fu_367_p2[0:0] == 1'b1) ? select_ln290_fu_359_p3 : add_ln290_fu_353_p2);

assign select_ln290_fu_359_p3 = ((icmp_ln290_fu_341_p2[0:0] == 1'b1) ? 7'd63 : 7'd0);

assign select_ln291_1_fu_423_p3 = ((or_ln291_fu_417_p2[0:0] == 1'b1) ? select_ln291_fu_409_p3 : add_ln291_fu_403_p2);

assign select_ln291_fu_409_p3 = ((icmp_ln291_fu_391_p2[0:0] == 1'b1) ? 7'd31 : 7'd0);

assign select_ln292_1_fu_473_p3 = ((or_ln292_fu_467_p2[0:0] == 1'b1) ? select_ln292_fu_459_p3 : add_ln292_fu_453_p2);

assign select_ln292_fu_459_p3 = ((icmp_ln292_fu_441_p2[0:0] == 1'b1) ? 7'd31 : 7'd0);

assign select_ln294_1_fu_531_p3 = ((or_ln294_fu_525_p2[0:0] == 1'b1) ? select_ln294_fu_517_p3 : add_ln294_fu_511_p2);

assign select_ln294_fu_517_p3 = ((icmp_ln294_fu_499_p2[0:0] == 1'b1) ? 7'd15 : 7'd0);

assign select_ln295_1_fu_581_p3 = ((or_ln295_fu_575_p2[0:0] == 1'b1) ? select_ln295_fu_567_p3 : add_ln295_fu_561_p2);

assign select_ln295_fu_567_p3 = ((icmp_ln295_fu_549_p2[0:0] == 1'b1) ? 7'd15 : 7'd0);

assign select_ln296_1_fu_639_p3 = ((or_ln296_fu_633_p2[0:0] == 1'b1) ? select_ln296_fu_625_p3 : add_ln296_fu_619_p2);

assign select_ln296_fu_625_p3 = ((icmp_ln296_fu_607_p2[0:0] == 1'b1) ? 7'd7 : 7'd0);

assign select_ln297_1_fu_689_p3 = ((or_ln297_fu_683_p2[0:0] == 1'b1) ? select_ln297_fu_675_p3 : add_ln297_fu_669_p2);

assign select_ln297_fu_675_p3 = ((icmp_ln297_fu_657_p2[0:0] == 1'b1) ? 7'd7 : 7'd0);

assign tmp_10_fu_647_p4 = {{grp_gsm_add_fu_237_ap_return[15:11]}};

assign tmp_4_fu_331_p4 = {{grp_gsm_add_fu_237_ap_return[15:14]}};

assign tmp_5_fu_381_p4 = {{tmp_6_gsm_add_fu_315_p_dout0[15:13]}};

assign tmp_6_fu_431_p4 = {{grp_gsm_add_fu_237_ap_return[15:13]}};

assign tmp_6_gsm_add_fu_315_p_din1 = grp_gsm_add_fu_310_p_dout0;

assign tmp_6_gsm_add_fu_315_p_din2 = 16'd256;

assign tmp_7_fu_489_p4 = {{tmp_6_gsm_add_fu_315_p_dout0[15:12]}};

assign tmp_8_fu_539_p4 = {{grp_gsm_add_fu_237_ap_return[15:12]}};

assign tmp_9_fu_597_p4 = {{tmp_6_gsm_add_fu_315_p_dout0[15:11]}};

assign tmp_fu_281_p4 = {{tmp_6_gsm_add_fu_315_p_dout0[15:14]}};

assign zext_ln289_fu_481_p1 = select_ln289_1_reg_733;

assign zext_ln290_fu_485_p1 = select_ln290_1_reg_738;

assign zext_ln291_fu_589_p1 = select_ln291_1_reg_753;

assign zext_ln292_fu_593_p1 = select_ln292_1_reg_758;

assign zext_ln294_fu_697_p1 = select_ln294_1_reg_773;

assign zext_ln295_fu_701_p1 = select_ln295_1_reg_778;

assign zext_ln296_fu_705_p1 = select_ln296_1_reg_783;

assign zext_ln297_fu_709_p1 = select_ln297_1_reg_788;

endmodule //Gsm_LPC_Analysis_Quantization_and_coding
