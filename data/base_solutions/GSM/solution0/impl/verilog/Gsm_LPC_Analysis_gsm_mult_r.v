// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_gsm_mult_r (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a,
        b,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a;
input  [15:0] b;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln55_fu_38_p2;
reg   [0:0] icmp_ln55_reg_88;
wire   [0:0] icmp_ln55_1_fu_44_p2;
reg   [0:0] icmp_ln55_1_reg_93;
wire  signed [15:0] icmp_ln55_fu_38_p0;
wire  signed [15:0] icmp_ln55_1_fu_44_p0;
wire    ap_CS_fsm_state4;
wire  signed [30:0] trunc_ln_fu_62_p1;
wire   [30:0] grp_fu_79_p3;
wire   [0:0] and_ln55_fu_58_p2;
wire   [15:0] trunc_ln_fu_62_p4;
wire   [14:0] grp_fu_79_p2;
wire    ap_CS_fsm_state3;
wire   [15:0] select_ln55_fu_71_p3;
reg   [15:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 16'd0;
end

Gsm_LPC_Analysis_mac_muladd_16s_16s_15ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_15ns_31_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b),
    .din1(a),
    .din2(grp_fu_79_p2),
    .ce(1'b1),
    .dout(grp_fu_79_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_return_preg <= select_ln55_fu_71_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln55_1_reg_93 <= icmp_ln55_1_fu_44_p2;
        icmp_ln55_reg_88 <= icmp_ln55_fu_38_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_return = select_ln55_fu_71_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln55_fu_58_p2 = (icmp_ln55_reg_88 & icmp_ln55_1_reg_93);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign grp_fu_79_p2 = 31'd16384;

assign icmp_ln55_1_fu_44_p0 = a;

assign icmp_ln55_1_fu_44_p2 = ((icmp_ln55_1_fu_44_p0 == 16'd32768) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_38_p0 = b;

assign icmp_ln55_fu_38_p2 = ((icmp_ln55_fu_38_p0 == 16'd32768) ? 1'b1 : 1'b0);

assign select_ln55_fu_71_p3 = ((and_ln55_fu_58_p2[0:0] == 1'b1) ? 16'd32767 : trunc_ln_fu_62_p4);

assign trunc_ln_fu_62_p1 = grp_fu_79_p3;

assign trunc_ln_fu_62_p4 = {{trunc_ln_fu_62_p1[30:15]}};

endmodule //Gsm_LPC_Analysis_gsm_mult_r
