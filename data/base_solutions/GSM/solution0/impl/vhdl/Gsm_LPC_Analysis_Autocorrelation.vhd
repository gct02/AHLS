-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_Autocorrelation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_we0 : OUT STD_LOGIC;
    indata_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    indata_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce1 : OUT STD_LOGIC;
    indata_we1 : OUT STD_LOGIC;
    indata_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    indata_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    L_ACF_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_ACF_ce0 : OUT STD_LOGIC;
    L_ACF_we0 : OUT STD_LOGIC;
    L_ACF_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    L_ACF_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    L_ACF_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_ACF_ce1 : OUT STD_LOGIC;
    L_ACF_we1 : OUT STD_LOGIC;
    L_ACF_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    L_ACF_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bitoff_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bitoff_ce0 : OUT STD_LOGIC;
    bitoff_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    bitoff_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bitoff_ce1 : OUT STD_LOGIC;
    bitoff_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
    bitoff_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bitoff_ce2 : OUT STD_LOGIC;
    bitoff_q2 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of Gsm_LPC_Analysis_Autocorrelation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C0000001 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv31_4000 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_589 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_594 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_599 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_604 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln57_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_2061 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_2066 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_2086 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_8_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_8_reg_2092 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_reg_2097 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal scalauto_2_fu_976_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal scalauto_2_reg_2108 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln62_fu_983_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_2113 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_2117 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln65_fu_1025_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln65_reg_2128 : STD_LOGIC_VECTOR (30 downto 0);
    signal indata_addr_1_reg_2136 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sl_4_reg_2258 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sl_5_reg_2265 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln84_fu_1115_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln84_reg_2282 : STD_LOGIC_VECTOR (16 downto 0);
    signal L_ACF_addr_3_reg_2292 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln89_fu_1119_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln89_reg_2297 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln89_1_fu_1123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln89_1_reg_2303 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_addr_4_reg_2313 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln93_fu_1127_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln93_reg_2318 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln93_1_fu_1131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln93_1_reg_2325 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln98_fu_1135_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln98_reg_2332 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln98_1_fu_1138_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln98_1_reg_2338 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln119_1_fu_1148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln119_1_reg_2348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln86_2_fu_1160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln86_2_reg_2365 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_load_1_reg_2374 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_ACF_load_2_reg_2379 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln98_2_fu_1164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln98_2_reg_2390 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln104_2_fu_1170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln104_2_reg_2403 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_load_3_reg_2413 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal L_ACF_load_4_reg_2418 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln111_1_fu_1177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln111_1_reg_2429 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln91_fu_1248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln91_reg_2470 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln102_fu_1261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln102_reg_2480 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln107_fu_1266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln107_reg_2485 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_1_fu_1291_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_1_reg_2500 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1937_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1945_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln126_fu_1318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln126_reg_2525 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_addr_10_reg_2536 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_load_reg_2541 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln139_fu_1496_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln139_reg_2555 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln132_fu_1554_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_reg_2582 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal L_ACF_addr_11_reg_2625 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln152_fu_1851_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln152_reg_2638 : STD_LOGIC_VECTOR (15 downto 0);
    signal indata_addr_19_reg_2646 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln49_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln49_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln115_fu_744_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_2_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_1_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln65_fu_1037_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln79_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_1081_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln131_fu_1508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln129_fu_1490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln39_fu_1539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_fu_1549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_fu_1619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_fu_1629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_fu_1692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_fu_1702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_fu_1759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_1717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_fu_1832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_1824_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln152_1_fu_1882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln152_fu_1870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_fu_162 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal smax_1_fu_879_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_166 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln49_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_2_fu_170 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln65_fu_1043_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_3_fu_174 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln79_fu_1094_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_fu_178 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_fu_182 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_11_fu_1513_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_81_fu_186 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln132_fu_1568_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_fu_1364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal empty_82_fu_190 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln133_fu_1588_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln120_fu_1378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_83_fu_194 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln134_1_fu_1608_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln121_fu_1392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal empty_84_fu_198 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln135_1_fu_1662_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln122_fu_1406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_85_fu_202 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln136_1_fu_1681_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln123_fu_1420_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal empty_86_fu_206 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln137_1_fu_1734_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_fu_1312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_87_fu_210 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln138_1_fu_1753_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln125_fu_1429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal empty_88_fu_214 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln139_1_fu_1786_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln126_fu_1438_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal empty_89_fu_218 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln140_fu_1805_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal k_4_fu_222 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln144_fu_1837_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx77_fu_226 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln152_fu_1876_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal shl_ln146_fu_1860_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_s_fu_650_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_664_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_fu_688_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln105_fu_672_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_4_fu_692_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln105_4_fu_680_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln105_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_712_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_728_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln70_fu_706_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_753_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_779_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln115_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_7_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_6_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_845_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln67_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_837_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_857_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_865_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln112_fu_892_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_5_fu_908_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln112_6_fu_918_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln113_fu_914_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_4_fu_902_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_fu_896_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_fu_928_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_4_fu_935_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_5_fu_946_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln107_3_fu_942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_4_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln107_fu_953_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln107_fu_924_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln107_6_fu_962_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal scalauto_fu_970_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln62_fu_989_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_995_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_1011_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub24_cast_fu_1015_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal b_assign_fu_1019_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1_fu_1068_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1898_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln111_fu_1144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln119_1_fu_1148_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_fu_1152_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_2_fu_1160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln111_fu_1181_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln111_fu_1181_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln111_fu_1181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_fu_1191_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln115_fu_1191_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln115_fu_1191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln116_fu_1200_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln116_fu_1200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln116_fu_1200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln120_fu_1209_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln120_fu_1209_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln120_fu_1209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln121_fu_1218_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln121_fu_1218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln121_fu_1218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln84_fu_1230_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln84_1_fu_1226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln84_fu_1230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln84_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln86_fu_1240_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln86_fu_1240_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln86_fu_1240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln91_fu_1248_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_fu_1248_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln93_fu_1253_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln93_fu_1253_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln93_fu_1253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln102_fu_1261_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln102_fu_1261_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln107_fu_1266_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln107_fu_1266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_fu_1270_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_fu_1270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_fu_1270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1928_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln117_fu_1282_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln117_fu_1282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln117_fu_1282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln84_2_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1906_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1917_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln109_1_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1953_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln124_1_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_1_fu_1303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln126_fu_1318_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln126_fu_1318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2004_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1962_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln119_3_fu_1340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1969_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1978_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln119_5_fu_1351_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln119_4_fu_1348_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln119_7_fu_1354_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln119_6_fu_1360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_3_fu_1343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp22_cast_fu_1337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1996_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln120_2_fu_1375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln120_1_fu_1370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln91_1_fu_1328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2011_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln121_2_fu_1389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln121_1_fu_1384_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln108_fu_1334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2021_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln122_1_fu_1403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln122_1_fu_1398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_1_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1987_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln123_1_fu_1417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln123_1_fu_1412_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_2031_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln125_1_fu_1426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln126_fu_1435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln131_fu_1502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_fu_1534_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln134_fu_1544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln132_fu_1554_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_1558_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_1558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_1558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_1_fu_1564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln133_fu_1578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln133_fu_1578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln133_1_fu_1584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln134_fu_1598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln134_fu_1598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln134_1_fu_1604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln135_fu_1614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_fu_1624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln135_fu_1653_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln135_fu_1653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln135_1_fu_1658_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln136_fu_1672_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln136_fu_1672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln136_1_fu_1677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_fu_1687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln138_fu_1697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_1725_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln137_fu_1725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln137_1_fu_1730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln138_fu_1744_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln138_fu_1744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln138_1_fu_1749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln139_fu_1777_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln139_fu_1777_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln139_1_fu_1782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln140_fu_1796_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln140_fu_1796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln140_1_fu_1801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_90_fu_1848_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1898_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1898_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_1906_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln111_fu_1144_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1917_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1928_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1937_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1937_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1945_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1953_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1962_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1969_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1969_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1978_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1978_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1987_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1987_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1996_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1996_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2004_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2004_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2011_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_fu_1152_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2011_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2021_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2021_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2031_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2031_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Gsm_LPC_Analysis_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Gsm_LPC_Analysis_mac_muladd_16s_15ns_15ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_32s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_am_addmul_16s_16s_16s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_mac_muladd_16s_16s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;



begin
    mul_16s_16s_32_1_1_U1 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln111_fu_1181_p0,
        din1 => mul_ln111_fu_1181_p1,
        dout => mul_ln111_fu_1181_p2);

    mul_16s_16s_32_1_1_U2 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_fu_1191_p0,
        din1 => mul_ln115_fu_1191_p1,
        dout => mul_ln115_fu_1191_p2);

    mul_16s_16s_32_1_1_U3 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln116_fu_1200_p0,
        din1 => mul_ln116_fu_1200_p1,
        dout => mul_ln116_fu_1200_p2);

    mul_16s_16s_32_1_1_U4 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln120_fu_1209_p0,
        din1 => mul_ln120_fu_1209_p1,
        dout => mul_ln120_fu_1209_p2);

    mul_16s_16s_32_1_1_U5 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln121_fu_1218_p0,
        din1 => mul_ln121_fu_1218_p1,
        dout => mul_ln121_fu_1218_p2);

    mul_16s_16s_32_1_1_U6 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln84_fu_1230_p0,
        din1 => mul_ln84_fu_1230_p1,
        dout => mul_ln84_fu_1230_p2);

    mul_16s_16s_32_1_1_U7 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln86_fu_1240_p0,
        din1 => mul_ln86_fu_1240_p1,
        dout => mul_ln86_fu_1240_p2);

    mul_16s_16s_32_1_1_U8 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln91_fu_1248_p0,
        din1 => mul_ln91_fu_1248_p1,
        dout => mul_ln91_fu_1248_p2);

    mul_16s_16s_32_1_1_U9 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln93_fu_1253_p0,
        din1 => mul_ln93_fu_1253_p1,
        dout => mul_ln93_fu_1253_p2);

    mul_16s_16s_32_1_1_U10 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln102_fu_1261_p0,
        din1 => mul_ln102_fu_1261_p1,
        dout => mul_ln102_fu_1261_p2);

    mul_16s_16s_32_1_1_U11 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln107_fu_1266_p0,
        din1 => mul_ln107_fu_1266_p1,
        dout => mul_ln107_fu_1266_p2);

    mul_16s_16s_32_1_1_U12 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln109_fu_1270_p0,
        din1 => mul_ln109_fu_1270_p1,
        dout => mul_ln109_fu_1270_p2);

    mul_16s_16s_32_1_1_U13 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln117_fu_1282_p0,
        din1 => mul_ln117_fu_1282_p1,
        dout => mul_ln117_fu_1282_p2);

    mul_16s_16s_32_1_1_U14 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln126_fu_1318_p0,
        din1 => mul_ln126_fu_1318_p1,
        dout => mul_ln126_fu_1318_p2);

    mul_16s_16s_32_1_1_U15 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln132_fu_1558_p0,
        din1 => mul_ln132_fu_1558_p1,
        dout => mul_ln132_fu_1558_p2);

    mul_16s_16s_32_1_1_U16 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln133_fu_1578_p1,
        dout => mul_ln133_fu_1578_p2);

    mul_16s_16s_32_1_1_U17 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln134_fu_1598_p1,
        dout => mul_ln134_fu_1598_p2);

    mul_16s_16s_32_1_1_U18 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln135_fu_1653_p1,
        dout => mul_ln135_fu_1653_p2);

    mul_16s_16s_32_1_1_U19 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln136_fu_1672_p1,
        dout => mul_ln136_fu_1672_p2);

    mul_16s_16s_32_1_1_U20 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln137_fu_1725_p1,
        dout => mul_ln137_fu_1725_p2);

    mul_16s_16s_32_1_1_U21 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln138_fu_1744_p1,
        dout => mul_ln138_fu_1744_p2);

    mul_16s_16s_32_1_1_U22 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln139_fu_1777_p1,
        dout => mul_ln139_fu_1777_p2);

    mul_16s_16s_32_1_1_U23 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln140_fu_1796_p1,
        dout => mul_ln140_fu_1796_p2);

    mac_muladd_16s_15ns_15ns_31_4_1_U24 : component Gsm_LPC_Analysis_mac_muladd_16s_15ns_15ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indata_q0,
        din1 => grp_fu_1898_p1,
        din2 => grp_fu_1898_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1898_p3);

    ama_addmuladd_16s_16s_16s_32s_33_4_1_U25 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1906_p0,
        din1 => sl_4_reg_2258,
        din2 => sl_5_reg_2265,
        din3 => mul_ln120_fu_1209_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1906_p4);

    ama_addmuladd_16s_16s_16s_32s_33_4_1_U26 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1917_p0,
        din1 => reg_594,
        din2 => sl_4_reg_2258,
        din3 => mul_ln121_fu_1218_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1917_p4);

    am_addmul_16s_16s_16s_33_4_1_U27 : component Gsm_LPC_Analysis_am_addmul_16s_16s_16s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1928_p0,
        din1 => reg_589,
        din2 => reg_599,
        ce => ap_const_logic_1,
        dout => grp_fu_1928_p3);

    mac_muladd_16s_16s_32s_33_4_1_U28 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1937_p0,
        din1 => grp_fu_1937_p1,
        din2 => mul_ln111_fu_1181_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1937_p3);

    mac_muladd_16s_16s_32s_33_4_1_U29 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1945_p0,
        din1 => reg_599,
        din2 => mul_ln115_fu_1191_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1945_p3);

    mac_muladd_16s_16s_32s_33_4_1_U30 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1953_p0,
        din1 => reg_594,
        din2 => mul_ln116_fu_1200_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1953_p3);

    mac_muladd_16s_16s_32s_33_4_1_U31 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1962_p0,
        din1 => grp_fu_1962_p1,
        din2 => mul_ln86_fu_1240_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1962_p3);

    mac_muladd_16s_16s_32s_33_4_1_U32 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1969_p0,
        din1 => grp_fu_1969_p1,
        din2 => mul_ln93_fu_1253_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1969_p3);

    mac_muladd_16s_16s_33s_33_4_1_U33 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1978_p0,
        din1 => grp_fu_1978_p1,
        din2 => grp_fu_1937_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1978_p3);

    mac_muladd_16s_16s_33s_33_4_1_U34 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1987_p0,
        din1 => grp_fu_1987_p1,
        din2 => grp_fu_1945_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1987_p3);

    ama_addmuladd_16s_16s_16s_33s_34_4_1_U35 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 33,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1996_p0,
        din1 => grp_fu_1996_p1,
        din2 => grp_fu_1996_p2,
        din3 => grp_fu_1906_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1996_p4);

    am_addmul_16s_16s_16s_33_4_1_U36 : component Gsm_LPC_Analysis_am_addmul_16s_16s_16s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2004_p0,
        din1 => grp_fu_2004_p1,
        din2 => indata_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_2004_p3);

    ama_addmuladd_16s_16s_16s_33s_34_4_1_U37 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 33,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sl_5_reg_2265,
        din1 => grp_fu_2011_p1,
        din2 => grp_fu_2011_p2,
        din3 => grp_fu_1917_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_2011_p4);

    ama_addmuladd_16s_16s_16s_33s_34_4_1_U38 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 33,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_599,
        din1 => grp_fu_2021_p1,
        din2 => grp_fu_2021_p2,
        din3 => grp_fu_1928_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2021_p4);

    mac_muladd_16s_16s_32s_33_4_1_U39 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2031_p0,
        din1 => grp_fu_2031_p1,
        din2 => mul_ln117_fu_1282_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2031_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_81_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_81_fu_186 <= add_ln119_fu_1364_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                empty_81_fu_186 <= add_ln132_fu_1568_p2;
            end if; 
        end if;
    end process;

    empty_82_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_82_fu_190 <= add_ln120_fu_1378_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                empty_82_fu_190 <= add_ln133_fu_1588_p2;
            end if; 
        end if;
    end process;

    empty_83_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_83_fu_194 <= add_ln121_fu_1392_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                empty_83_fu_194 <= add_ln134_1_fu_1608_p2;
            end if; 
        end if;
    end process;

    empty_84_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_84_fu_198 <= add_ln122_fu_1406_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                empty_84_fu_198 <= add_ln135_1_fu_1662_p2;
            end if; 
        end if;
    end process;

    empty_85_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_85_fu_202 <= add_ln123_fu_1420_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                empty_85_fu_202 <= add_ln136_1_fu_1681_p2;
            end if; 
        end if;
    end process;

    empty_86_fu_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                empty_86_fu_206 <= add_ln124_fu_1312_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                empty_86_fu_206 <= add_ln137_1_fu_1734_p2;
            end if; 
        end if;
    end process;

    empty_87_fu_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_87_fu_210 <= add_ln125_fu_1429_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                empty_87_fu_210 <= add_ln138_1_fu_1753_p2;
            end if; 
        end if;
    end process;

    empty_88_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_88_fu_214 <= add_ln126_fu_1438_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                empty_88_fu_214 <= add_ln139_1_fu_1786_p2;
            end if; 
        end if;
    end process;

    empty_89_fu_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_89_fu_218 <= L_ACF_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                empty_89_fu_218 <= add_ln140_fu_1805_p2;
            end if; 
        end if;
    end process;

    i_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_33_fu_1081_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_fu_182 <= ap_const_lv8_8;
            elsif (((icmp_ln129_fu_1490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_fu_182 <= i_11_fu_1513_p2;
            end if; 
        end if;
    end process;

    idx77_fu_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln62_reg_2113 = ap_const_lv1_1)) then
                if (((tmp_34_fu_1824_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    idx77_fu_226 <= ap_const_lv8_0;
                elsif (((icmp_ln152_fu_1870_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    idx77_fu_226 <= add_ln152_fu_1876_p2;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_33_fu_1081_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                idx_fu_178 <= ap_const_lv8_0;
            elsif (((icmp_ln129_fu_1490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                idx_fu_178 <= add_ln139_fu_1496_p2;
            end if; 
        end if;
    end process;

    k_2_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_1_fu_1005_p2 = ap_const_lv1_1))) then 
                k_2_fu_170 <= ap_const_lv8_0;
            elsif (((icmp_ln65_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2117 = ap_const_lv1_1))) then 
                k_2_fu_170 <= add_ln65_fu_1043_p2;
            end if; 
        end if;
    end process;

    k_3_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln65_fu_1037_p2 = ap_const_lv1_1) or (icmp_ln62_1_reg_2117 = ap_const_lv1_0)))) then 
                k_3_fu_174 <= ap_const_lv5_8;
            elsif (((tmp_33_fu_1081_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_3_fu_174 <= add_ln79_fu_1094_p2;
            end if; 
        end if;
    end process;

    k_4_fu_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                k_4_fu_222 <= ap_const_lv5_8;
            elsif (((tmp_34_fu_1824_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                k_4_fu_222 <= add_ln144_fu_1837_p2;
            end if; 
        end if;
    end process;

    k_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_166 <= ap_const_lv8_0;
            elsif (((icmp_ln49_fu_622_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_fu_166 <= add_ln49_fu_628_p2;
            end if; 
        end if;
    end process;

    reg_589_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_589 <= indata_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_589 <= indata_q0;
            end if; 
        end if;
    end process;

    reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_594 <= indata_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_594 <= indata_q1;
            end if; 
        end if;
    end process;

    reg_599_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_599 <= indata_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_599 <= indata_q0;
            end if; 
        end if;
    end process;

    reg_604_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                reg_604 <= L_ACF_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_604 <= L_ACF_q0;
            end if; 
        end if;
    end process;

    smax_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                smax_fu_162 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                smax_fu_162 <= smax_1_fu_879_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                L_ACF_addr_11_reg_2625 <= zext_ln144_fu_1832_p1(4 - 1 downto 0);
                    zext_ln152_reg_2638(2 downto 0) <= zext_ln152_fu_1851_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                L_ACF_load_1_reg_2374 <= L_ACF_q1;
                L_ACF_load_2_reg_2379 <= L_ACF_q0;
                sext_ln104_2_reg_2403 <= sext_ln104_2_fu_1170_p1;
                sext_ln86_2_reg_2365 <= sext_ln86_2_fu_1160_p1;
                sext_ln98_2_reg_2390 <= sext_ln98_2_fu_1164_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                L_ACF_load_3_reg_2413 <= L_ACF_q0;
                L_ACF_load_4_reg_2418 <= L_ACF_q1;
                sext_ln111_1_reg_2429 <= sext_ln111_1_fu_1177_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln119_1_reg_2500 <= add_ln119_1_fu_1291_p2;
                mul_ln102_reg_2480 <= mul_ln102_fu_1261_p2;
                mul_ln107_reg_2485 <= mul_ln107_fu_1266_p2;
                mul_ln126_reg_2525 <= mul_ln126_fu_1318_p2;
                mul_ln91_reg_2470 <= mul_ln91_fu_1248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln139_reg_2555 <= add_ln139_fu_1496_p2;
                idx_load_reg_2541 <= idx_fu_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln107_8_reg_2092 <= and_ln107_8_fu_825_p2;
                and_ln107_reg_2086 <= and_ln107_fu_795_p2;
                icmp_ln107_reg_2066 <= icmp_ln107_fu_658_p2;
                icmp_ln57_reg_2061 <= icmp_ln57_fu_644_p2;
                or_ln107_reg_2097 <= or_ln107_fu_831_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln62_1_reg_2117 <= icmp_ln62_1_fu_1005_p2;
                icmp_ln62_reg_2113 <= icmp_ln62_fu_983_p2;
                scalauto_2_reg_2108 <= scalauto_2_fu_976_p3;
                    zext_ln65_reg_2128(14 downto 0) <= zext_ln65_fu_1025_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                indata_addr_19_reg_2646 <= zext_ln152_1_fu_1882_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                indata_addr_1_reg_2136 <= zext_ln65_1_fu_1049_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                sext_ln119_1_reg_2348 <= sext_ln119_1_fu_1148_p1;
                sext_ln84_reg_2282 <= sext_ln84_fu_1115_p1;
                sext_ln89_1_reg_2303 <= sext_ln89_1_fu_1123_p1;
                sext_ln89_reg_2297 <= sext_ln89_fu_1119_p1;
                sext_ln93_1_reg_2325 <= sext_ln93_1_fu_1131_p1;
                sext_ln93_reg_2318 <= sext_ln93_fu_1127_p1;
                sext_ln98_1_reg_2338 <= sext_ln98_1_fu_1138_p1;
                sext_ln98_reg_2332 <= sext_ln98_fu_1135_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                sext_ln132_reg_2582 <= sext_ln132_fu_1554_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sl_4_reg_2258 <= indata_q0;
                sl_5_reg_2265 <= indata_q1;
            end if;
        end if;
    end process;
    zext_ln65_reg_2128(30 downto 15) <= "0000000000000000";
    zext_ln152_reg_2638(15 downto 3) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln62_reg_2113, icmp_ln62_1_reg_2117, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state31, icmp_ln49_fu_622_p2, icmp_ln65_fu_1037_p2, tmp_33_fu_1081_p3, icmp_ln129_fu_1490_p2, tmp_34_fu_1824_p3, icmp_ln152_fu_1870_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln49_fu_622_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln65_fu_1037_p2 = ap_const_lv1_1) or (icmp_ln62_1_reg_2117 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((tmp_33_fu_1081_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln129_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((tmp_34_fu_1824_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln152_fu_1870_p2 = ap_const_lv1_1) or (icmp_ln62_reg_2113 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    L_ACF_addr_10_reg_2536 <= ap_const_lv64_8(4 - 1 downto 0);
    L_ACF_addr_3_reg_2292 <= ap_const_lv64_1(4 - 1 downto 0);
    L_ACF_addr_4_reg_2313 <= ap_const_lv64_2(4 - 1 downto 0);

    L_ACF_address0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state13, L_ACF_addr_4_reg_2313, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, L_ACF_addr_11_reg_2625, zext_ln79_fu_1089_p1, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            L_ACF_address0 <= L_ACF_addr_11_reg_2625;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            L_ACF_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            L_ACF_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            L_ACF_address0 <= L_ACF_addr_4_reg_2313;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            L_ACF_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L_ACF_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            L_ACF_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            L_ACF_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            L_ACF_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            L_ACF_address0 <= zext_ln79_fu_1089_p1(4 - 1 downto 0);
        else 
            L_ACF_address0 <= "XXXX";
        end if; 
    end process;


    L_ACF_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, L_ACF_addr_3_reg_2292, ap_CS_fsm_state15, ap_CS_fsm_state16, L_ACF_addr_10_reg_2536, ap_CS_fsm_state19, ap_CS_fsm_state29, zext_ln144_fu_1832_p1, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            L_ACF_address1 <= zext_ln144_fu_1832_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            L_ACF_address1 <= L_ACF_addr_10_reg_2536;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            L_ACF_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            L_ACF_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            L_ACF_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            L_ACF_address1 <= L_ACF_addr_3_reg_2292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            L_ACF_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L_ACF_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            L_ACF_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            L_ACF_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            L_ACF_address1 <= "XXXX";
        end if; 
    end process;


    L_ACF_ce0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            L_ACF_ce0 <= ap_const_logic_1;
        else 
            L_ACF_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            L_ACF_ce1 <= ap_const_logic_1;
        else 
            L_ACF_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state19, empty_81_fu_186, empty_83_fu_194, ap_CS_fsm_state25, empty_85_fu_202, ap_CS_fsm_state26, empty_87_fu_210, ap_CS_fsm_state27, ap_CS_fsm_state30, shl_ln146_fu_1860_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            L_ACF_d0 <= shl_ln146_fu_1860_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            L_ACF_d0 <= empty_87_fu_210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            L_ACF_d0 <= empty_85_fu_202;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            L_ACF_d0 <= empty_83_fu_194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            L_ACF_d0 <= empty_81_fu_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            L_ACF_d0 <= ap_const_lv64_0;
        else 
            L_ACF_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_ACF_d1_assign_proc : process(ap_CS_fsm_state19, empty_82_fu_190, ap_CS_fsm_state25, empty_84_fu_198, ap_CS_fsm_state26, empty_86_fu_206, ap_CS_fsm_state27, empty_88_fu_214, empty_89_fu_218, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            L_ACF_d1 <= empty_89_fu_218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            L_ACF_d1 <= empty_88_fu_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            L_ACF_d1 <= empty_86_fu_206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            L_ACF_d1 <= empty_84_fu_198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            L_ACF_d1 <= empty_82_fu_190;
        else 
            L_ACF_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_ACF_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state19, tmp_33_fu_1081_p3, icmp_ln129_fu_1490_p2, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln129_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)) or ((tmp_33_fu_1081_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            L_ACF_we0 <= ap_const_logic_1;
        else 
            L_ACF_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_we1_assign_proc : process(ap_CS_fsm_state19, icmp_ln129_fu_1490_p2, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln129_fu_1490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            L_ACF_we1 <= ap_const_logic_1;
        else 
            L_ACF_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a_assign_s_fu_650_p3 <= (smax_fu_162 & ap_const_lv16_0);
    add_ln112_4_fu_902_p2 <= std_logic_vector(unsigned(zext_ln112_fu_892_p1) + unsigned(ap_const_lv5_F));
    add_ln112_5_fu_908_p2 <= std_logic_vector(unsigned(bitoff_q1) + unsigned(ap_const_lv4_7));
    add_ln112_6_fu_918_p2 <= std_logic_vector(unsigned(bitoff_q0) + unsigned(ap_const_lv4_F));
    add_ln112_fu_896_p2 <= std_logic_vector(unsigned(zext_ln112_fu_892_p1) + unsigned(ap_const_lv5_17));
    add_ln119_1_fu_1291_p2 <= std_logic_vector(unsigned(reg_604) + unsigned(sext_ln84_2_fu_1236_p1));
    add_ln119_3_fu_1343_p2 <= std_logic_vector(signed(sext_ln119_3_fu_1340_p1) + signed(add_ln119_1_reg_2500));
    add_ln119_7_fu_1354_p2 <= std_logic_vector(signed(sext_ln119_5_fu_1351_p1) + signed(sext_ln119_4_fu_1348_p1));
    add_ln119_fu_1364_p2 <= std_logic_vector(signed(sext_ln119_6_fu_1360_p1) + signed(add_ln119_3_fu_1343_p2));
    add_ln120_1_fu_1370_p2 <= std_logic_vector(unsigned(L_ACF_load_1_reg_2374) + unsigned(tmp22_cast_fu_1337_p1));
    add_ln120_fu_1378_p2 <= std_logic_vector(signed(sext_ln120_2_fu_1375_p1) + signed(add_ln120_1_fu_1370_p2));
    add_ln121_1_fu_1384_p2 <= std_logic_vector(unsigned(L_ACF_load_2_reg_2379) + unsigned(sext_ln91_1_fu_1328_p1));
    add_ln121_fu_1392_p2 <= std_logic_vector(signed(sext_ln121_2_fu_1389_p1) + signed(add_ln121_1_fu_1384_p2));
    add_ln122_1_fu_1398_p2 <= std_logic_vector(unsigned(L_ACF_load_3_reg_2413) + unsigned(sext_ln108_fu_1334_p1));
    add_ln122_fu_1406_p2 <= std_logic_vector(signed(sext_ln122_1_fu_1403_p1) + signed(add_ln122_1_fu_1398_p2));
    add_ln123_1_fu_1412_p2 <= std_logic_vector(unsigned(L_ACF_load_4_reg_2418) + unsigned(sext_ln102_1_fu_1331_p1));
    add_ln123_fu_1420_p2 <= std_logic_vector(signed(sext_ln123_1_fu_1417_p1) + signed(add_ln123_1_fu_1412_p2));
    add_ln124_1_fu_1303_p2 <= std_logic_vector(unsigned(L_ACF_q0) + unsigned(sext_ln109_1_fu_1275_p1));
    add_ln124_fu_1312_p2 <= std_logic_vector(signed(sext_ln124_1_fu_1309_p1) + signed(add_ln124_1_fu_1303_p2));
    add_ln125_fu_1429_p2 <= std_logic_vector(signed(sext_ln125_1_fu_1426_p1) + signed(reg_604));
    add_ln126_fu_1438_p2 <= std_logic_vector(unsigned(L_ACF_q0) + unsigned(sext_ln126_fu_1435_p1));
    add_ln131_fu_1502_p2 <= std_logic_vector(unsigned(idx_fu_178) + unsigned(ap_const_lv8_8));
    add_ln132_fu_1568_p2 <= std_logic_vector(signed(sext_ln132_1_fu_1564_p1) + signed(empty_81_fu_186));
    add_ln133_fu_1588_p2 <= std_logic_vector(signed(sext_ln133_1_fu_1584_p1) + signed(empty_82_fu_190));
    add_ln134_1_fu_1608_p2 <= std_logic_vector(signed(sext_ln134_1_fu_1604_p1) + signed(empty_83_fu_194));
    add_ln134_fu_1544_p2 <= std_logic_vector(unsigned(idx_load_reg_2541) + unsigned(ap_const_lv8_6));
    add_ln135_1_fu_1662_p2 <= std_logic_vector(signed(sext_ln135_1_fu_1658_p1) + signed(empty_84_fu_198));
    add_ln135_fu_1614_p2 <= std_logic_vector(unsigned(idx_load_reg_2541) + unsigned(ap_const_lv8_5));
    add_ln136_1_fu_1681_p2 <= std_logic_vector(signed(sext_ln136_1_fu_1677_p1) + signed(empty_85_fu_202));
    add_ln136_fu_1624_p2 <= std_logic_vector(unsigned(idx_load_reg_2541) + unsigned(ap_const_lv8_4));
    add_ln137_1_fu_1734_p2 <= std_logic_vector(signed(sext_ln137_1_fu_1730_p1) + signed(empty_86_fu_206));
    add_ln137_fu_1687_p2 <= std_logic_vector(unsigned(idx_load_reg_2541) + unsigned(ap_const_lv8_3));
    add_ln138_1_fu_1753_p2 <= std_logic_vector(signed(sext_ln138_1_fu_1749_p1) + signed(empty_87_fu_210));
    add_ln138_fu_1697_p2 <= std_logic_vector(unsigned(idx_load_reg_2541) + unsigned(ap_const_lv8_2));
    add_ln139_1_fu_1786_p2 <= std_logic_vector(signed(sext_ln139_1_fu_1782_p1) + signed(empty_88_fu_214));
    add_ln139_fu_1496_p2 <= std_logic_vector(unsigned(idx_fu_178) + unsigned(ap_const_lv8_1));
    add_ln140_fu_1805_p2 <= std_logic_vector(signed(sext_ln140_1_fu_1801_p1) + signed(empty_89_fu_218));
    add_ln144_fu_1837_p2 <= std_logic_vector(unsigned(k_4_fu_222) + unsigned(ap_const_lv5_1F));
    add_ln152_fu_1876_p2 <= std_logic_vector(unsigned(idx77_fu_226) + unsigned(ap_const_lv8_1));
    add_ln43_fu_1534_p2 <= std_logic_vector(unsigned(idx_load_reg_2541) + unsigned(ap_const_lv8_7));
    add_ln49_fu_628_p2 <= std_logic_vector(unsigned(k_fu_166) + unsigned(ap_const_lv8_1));
    add_ln62_fu_989_p2 <= std_logic_vector(unsigned(scalauto_2_fu_976_p3) + unsigned(ap_const_lv6_3F));
    add_ln65_fu_1043_p2 <= std_logic_vector(unsigned(k_2_fu_170) + unsigned(ap_const_lv8_1));
    add_ln79_fu_1094_p2 <= std_logic_vector(unsigned(k_3_fu_174) + unsigned(ap_const_lv5_1F));
    and_ln107_5_fu_801_p2 <= (xor_ln107_fu_773_p2 and tmp_27_fu_664_p3);
    and_ln107_6_fu_807_p2 <= (icmp_ln112_fu_722_p2 and and_ln107_5_fu_801_p2);
    and_ln107_7_fu_819_p2 <= (xor_ln112_fu_813_p2 and xor_ln107_fu_773_p2);
    and_ln107_8_fu_825_p2 <= (icmp_ln113_fu_738_p2 and and_ln107_7_fu_819_p2);
    and_ln107_fu_795_p2 <= (xor_ln107_fu_773_p2 and icmp_ln115_fu_789_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln62_reg_2113, ap_CS_fsm_state31, icmp_ln152_fu_1870_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln152_fu_1870_p2 = ap_const_lv1_1) or (icmp_ln62_reg_2113 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln62_reg_2113, ap_CS_fsm_state31, icmp_ln152_fu_1870_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and ((icmp_ln152_fu_1870_p2 = ap_const_lv1_1) or (icmp_ln62_reg_2113 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_fu_1019_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv15_4000),to_integer(unsigned('0' & sub24_cast_fu_1015_p1(15-1 downto 0)))));
    bitoff_address0 <= zext_ln113_2_fu_768_p1(8 - 1 downto 0);
    bitoff_address1 <= zext_ln114_fu_763_p1(8 - 1 downto 0);
    bitoff_address2 <= select_ln115_fu_744_p3(8 - 1 downto 0);

    bitoff_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce0 <= ap_const_logic_1;
        else 
            bitoff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce1 <= ap_const_logic_1;
        else 
            bitoff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce2 <= ap_const_logic_1;
        else 
            bitoff_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    empty_90_fu_1848_p1 <= scalauto_2_reg_2108(3 - 1 downto 0);
    empty_fu_1011_p1 <= add_ln62_fu_989_p2(2 - 1 downto 0);
    grp_fu_1898_p1 <= zext_ln65_reg_2128(15 - 1 downto 0);
    grp_fu_1898_p2 <= ap_const_lv31_4000(15 - 1 downto 0);
    grp_fu_1906_p0 <= sext_ln111_fu_1144_p1(16 - 1 downto 0);
    grp_fu_1917_p0 <= sext_ln111_fu_1144_p1(16 - 1 downto 0);
    grp_fu_1928_p0 <= sext_ln111_fu_1144_p1(16 - 1 downto 0);
    grp_fu_1937_p0 <= sext_ln119_1_fu_1148_p1(16 - 1 downto 0);
    grp_fu_1937_p1 <= sext_ln119_1_fu_1148_p1(16 - 1 downto 0);
    grp_fu_1945_p0 <= sext_ln119_1_fu_1148_p1(16 - 1 downto 0);
    grp_fu_1953_p0 <= sext_ln119_1_fu_1148_p1(16 - 1 downto 0);
    grp_fu_1962_p0 <= sext_ln89_1_reg_2303(16 - 1 downto 0);
    grp_fu_1962_p1 <= sext_ln89_1_reg_2303(16 - 1 downto 0);
    grp_fu_1969_p0 <= sext_ln98_2_fu_1164_p1(16 - 1 downto 0);
    grp_fu_1969_p1 <= sext_ln98_2_fu_1164_p1(16 - 1 downto 0);
    grp_fu_1978_p0 <= sext_ln104_2_fu_1170_p1(16 - 1 downto 0);
    grp_fu_1978_p1 <= sext_ln104_2_fu_1170_p1(16 - 1 downto 0);
    grp_fu_1987_p0 <= sext_ln104_2_fu_1170_p1(16 - 1 downto 0);
    grp_fu_1987_p1 <= sext_ln86_2_fu_1160_p1(16 - 1 downto 0);
    grp_fu_1996_p0 <= sext_ln98_1_reg_2338(16 - 1 downto 0);
    grp_fu_1996_p1 <= sext_ln89_reg_2297(16 - 1 downto 0);
    grp_fu_1996_p2 <= sext_ln93_reg_2318(16 - 1 downto 0);
    grp_fu_2004_p0 <= sext_ln89_reg_2297(16 - 1 downto 0);
    grp_fu_2004_p1 <= sext_ln84_reg_2282(16 - 1 downto 0);
    grp_fu_2011_p1 <= sext_ln86_fu_1152_p1(16 - 1 downto 0);
    grp_fu_2011_p2 <= sext_ln93_reg_2318(16 - 1 downto 0);
    grp_fu_2021_p1 <= sext_ln86_fu_1152_p1(16 - 1 downto 0);
    grp_fu_2021_p2 <= sext_ln98_reg_2332(16 - 1 downto 0);
    grp_fu_2031_p0 <= sext_ln119_1_reg_2348(16 - 1 downto 0);
    grp_fu_2031_p1 <= sext_ln86_2_fu_1160_p1(16 - 1 downto 0);
    i_11_fu_1513_p2 <= std_logic_vector(unsigned(i_fu_182) + unsigned(ap_const_lv8_1));
    icmp_ln107_fu_658_p2 <= "1" when (signed(a_assign_s_fu_650_p3) < signed(ap_const_lv32_C0000001)) else "0";
    icmp_ln112_fu_722_p2 <= "1" when (tmp_28_fu_712_p4 = ap_const_lv16_0) else "0";
    icmp_ln113_fu_738_p2 <= "1" when (tmp_29_fu_728_p4 = ap_const_lv8_0) else "0";
    icmp_ln115_fu_789_p2 <= "1" when (tmp_30_fu_779_p4 = ap_const_lv24_0) else "0";
    icmp_ln129_fu_1490_p2 <= "1" when (i_fu_182 = ap_const_lv8_A0) else "0";
    icmp_ln152_fu_1870_p2 <= "1" when (idx77_fu_226 = ap_const_lv8_A0) else "0";
    icmp_ln49_fu_622_p2 <= "1" when (k_fu_166 = ap_const_lv8_A0) else "0";
    icmp_ln52_fu_873_p2 <= "1" when (signed(temp_fu_865_p3) > signed(smax_fu_162)) else "0";
    icmp_ln57_fu_644_p2 <= "1" when (smax_fu_162 = ap_const_lv16_0) else "0";
    icmp_ln62_1_fu_1005_p2 <= "1" when (tmp_31_fu_995_p4 = ap_const_lv4_0) else "0";
    icmp_ln62_fu_983_p2 <= "1" when (signed(scalauto_2_fu_976_p3) > signed(ap_const_lv6_0)) else "0";
    icmp_ln65_fu_1037_p2 <= "1" when (k_2_fu_170 = ap_const_lv8_A0) else "0";
    icmp_ln67_fu_845_p2 <= "1" when (indata_q0 = ap_const_lv16_8000) else "0";

    indata_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, ap_CS_fsm_state2, icmp_ln62_1_reg_2117, indata_addr_1_reg_2136, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, zext_ln49_fu_634_p1, zext_ln65_1_fu_1049_p1, icmp_ln65_fu_1037_p2, zext_ln39_fu_1539_p1, zext_ln135_fu_1619_p1, zext_ln137_fu_1692_p1, zext_ln139_fu_1759_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            indata_address0 <= zext_ln139_fu_1759_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            indata_address0 <= zext_ln137_fu_1692_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            indata_address0 <= zext_ln135_fu_1619_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            indata_address0 <= zext_ln39_fu_1539_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            indata_address0 <= ap_const_lv64_6(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            indata_address0 <= ap_const_lv64_4(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            indata_address0 <= ap_const_lv64_3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            indata_address0 <= indata_addr_1_reg_2136;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln65_fu_1037_p2 = ap_const_lv1_1) or (icmp_ln62_1_reg_2117 = ap_const_lv1_0)))) then 
            indata_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif (((icmp_ln65_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2117 = ap_const_lv1_1))) then 
            indata_address0 <= zext_ln65_1_fu_1049_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            indata_address0 <= zext_ln49_fu_634_p1(8 - 1 downto 0);
        else 
            indata_address0 <= "XXXXXXXX";
        end if; 
    end process;


    indata_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, indata_addr_19_reg_2646, ap_CS_fsm_state31, zext_ln131_fu_1508_p1, zext_ln134_fu_1549_p1, zext_ln136_fu_1629_p1, zext_ln138_fu_1702_p1, zext_ln129_fu_1717_p1, zext_ln152_1_fu_1882_p1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            indata_address1 <= indata_addr_19_reg_2646;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            indata_address1 <= zext_ln152_1_fu_1882_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            indata_address1 <= zext_ln129_fu_1717_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            indata_address1 <= zext_ln138_fu_1702_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            indata_address1 <= zext_ln136_fu_1629_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            indata_address1 <= zext_ln134_fu_1549_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            indata_address1 <= zext_ln131_fu_1508_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            indata_address1 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            indata_address1 <= ap_const_lv64_7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            indata_address1 <= ap_const_lv64_5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            indata_address1 <= ap_const_lv64_2(8 - 1 downto 0);
        else 
            indata_address1 <= "XXXXXXXX";
        end if; 
    end process;


    indata_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, ap_CS_fsm_state2, icmp_ln62_1_reg_2117, ap_CS_fsm_state5, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, icmp_ln65_fu_1037_p2, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln65_fu_1037_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2117 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and ((icmp_ln65_fu_1037_p2 = ap_const_lv1_1) or (icmp_ln62_1_reg_2117 = ap_const_lv1_0))))) then 
            indata_ce0 <= ap_const_logic_1;
        else 
            indata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state19, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            indata_ce1 <= ap_const_logic_1;
        else 
            indata_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    indata_d0 <= trunc_ln1_fu_1068_p1(30 downto 15);
    indata_d1 <= std_logic_vector(shift_left(unsigned(indata_q1),to_integer(unsigned('0' & zext_ln152_reg_2638(16-1 downto 0)))));

    indata_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            indata_we0 <= ap_const_logic_1;
        else 
            indata_we0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_we1_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            indata_we1 <= ap_const_logic_1;
        else 
            indata_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln102_fu_1261_p0 <= sext_ln98_2_reg_2390(16 - 1 downto 0);
    mul_ln102_fu_1261_p1 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln107_fu_1266_p0 <= sext_ln104_2_reg_2403(16 - 1 downto 0);
    mul_ln107_fu_1266_p1 <= sext_ln89_1_reg_2303(16 - 1 downto 0);
    mul_ln109_fu_1270_p0 <= sext_ln104_2_reg_2403(16 - 1 downto 0);
    mul_ln109_fu_1270_p1 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln111_fu_1181_p0 <= sext_ln111_1_fu_1177_p1(16 - 1 downto 0);
    mul_ln111_fu_1181_p1 <= sext_ln111_1_fu_1177_p1(16 - 1 downto 0);
    mul_ln115_fu_1191_p0 <= sext_ln111_1_fu_1177_p1(16 - 1 downto 0);
    mul_ln115_fu_1191_p1 <= sext_ln89_1_reg_2303(16 - 1 downto 0);
    mul_ln116_fu_1200_p0 <= sext_ln111_1_fu_1177_p1(16 - 1 downto 0);
    mul_ln116_fu_1200_p1 <= sext_ln86_2_reg_2365(16 - 1 downto 0);
    mul_ln117_fu_1282_p0 <= sext_ln111_1_reg_2429(16 - 1 downto 0);
    mul_ln117_fu_1282_p1 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln120_fu_1209_p0 <= sext_ln119_1_reg_2348(16 - 1 downto 0);
    mul_ln120_fu_1209_p1 <= sext_ln111_1_fu_1177_p1(16 - 1 downto 0);
    mul_ln121_fu_1218_p0 <= sext_ln119_1_reg_2348(16 - 1 downto 0);
    mul_ln121_fu_1218_p1 <= sext_ln104_2_reg_2403(16 - 1 downto 0);
    mul_ln126_fu_1318_p0 <= sext_ln119_1_reg_2348(16 - 1 downto 0);
    mul_ln126_fu_1318_p1 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln132_fu_1558_p0 <= sext_ln132_fu_1554_p1(16 - 1 downto 0);
    mul_ln132_fu_1558_p1 <= sext_ln132_fu_1554_p1(16 - 1 downto 0);
    mul_ln133_fu_1578_p1 <= sext_ln132_fu_1554_p1(16 - 1 downto 0);
    mul_ln134_fu_1598_p1 <= sext_ln132_fu_1554_p1(16 - 1 downto 0);
    mul_ln135_fu_1653_p1 <= sext_ln132_reg_2582(16 - 1 downto 0);
    mul_ln136_fu_1672_p1 <= sext_ln132_reg_2582(16 - 1 downto 0);
    mul_ln137_fu_1725_p1 <= sext_ln132_reg_2582(16 - 1 downto 0);
    mul_ln138_fu_1744_p1 <= sext_ln132_reg_2582(16 - 1 downto 0);
    mul_ln139_fu_1777_p1 <= sext_ln132_reg_2582(16 - 1 downto 0);
    mul_ln140_fu_1796_p1 <= sext_ln132_reg_2582(16 - 1 downto 0);
    mul_ln84_fu_1230_p0 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln84_fu_1230_p1 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln86_fu_1240_p0 <= sext_ln86_2_reg_2365(16 - 1 downto 0);
    mul_ln86_fu_1240_p1 <= sext_ln86_2_reg_2365(16 - 1 downto 0);
    mul_ln91_fu_1248_p0 <= sext_ln89_1_reg_2303(16 - 1 downto 0);
    mul_ln91_fu_1248_p1 <= sext_ln84_1_fu_1226_p1(16 - 1 downto 0);
    mul_ln93_fu_1253_p0 <= sext_ln93_1_reg_2325(16 - 1 downto 0);
    mul_ln93_fu_1253_p1 <= sext_ln93_1_reg_2325(16 - 1 downto 0);
    or_ln107_3_fu_942_p2 <= (icmp_ln107_reg_2066 or and_ln107_reg_2086);
    or_ln107_4_fu_957_p2 <= (or_ln107_reg_2097 or or_ln107_3_fu_942_p2);
    or_ln107_fu_831_p2 <= (and_ln107_8_fu_825_p2 or and_ln107_6_fu_807_p2);
    scalauto_2_fu_976_p3 <= 
        ap_const_lv6_0 when (icmp_ln57_reg_2061(0) = '1') else 
        scalauto_fu_970_p2;
    scalauto_fu_970_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) - unsigned(select_ln107_6_fu_962_p3));
    select_ln105_4_fu_680_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_27_fu_664_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln105_fu_672_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_27_fu_664_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln107_4_fu_935_p3 <= 
        add_ln112_fu_896_p2 when (and_ln107_reg_2086(0) = '1') else 
        ap_const_lv5_0;
    select_ln107_5_fu_946_p3 <= 
        select_ln107_fu_928_p3 when (or_ln107_reg_2097(0) = '1') else 
        select_ln107_4_fu_935_p3;
    select_ln107_6_fu_962_p3 <= 
        zext_ln107_fu_953_p1 when (or_ln107_4_fu_957_p2(0) = '1') else 
        sext_ln107_fu_924_p1;
    select_ln107_fu_928_p3 <= 
        zext_ln113_fu_914_p1 when (and_ln107_8_reg_2092(0) = '1') else 
        add_ln112_4_fu_902_p2;
    select_ln115_fu_744_p3 <= 
        ap_const_lv64_FF when (tmp_27_fu_664_p3(0) = '1') else 
        ap_const_lv64_0;
    select_ln67_fu_857_p3 <= 
        ap_const_lv16_7FFF when (icmp_ln67_fu_845_p2(0) = '1') else 
        sub_ln67_fu_851_p2;
        sext_ln102_1_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln102_reg_2480),64));

        sext_ln104_2_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_5_reg_2265),32));

        sext_ln107_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln112_6_fu_918_p2),6));

        sext_ln108_fu_1334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln107_reg_2485),64));

        sext_ln109_1_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln109_fu_1270_p2),64));

        sext_ln111_1_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_594),32));

    sext_ln111_fu_1144_p0 <= indata_q0;
        sext_ln111_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln111_fu_1144_p0),17));

    sext_ln119_1_fu_1148_p0 <= indata_q1;
        sext_ln119_1_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln119_1_fu_1148_p0),32));

        sext_ln119_3_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1962_p3),64));

        sext_ln119_4_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1969_p3),34));

        sext_ln119_5_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1978_p3),34));

        sext_ln119_6_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln119_7_fu_1354_p2),64));

        sext_ln120_2_fu_1375_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1996_p4),64));

        sext_ln121_2_fu_1389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2011_p4),64));

        sext_ln122_1_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2021_p4),64));

        sext_ln123_1_fu_1417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1987_p3),64));

        sext_ln124_1_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1953_p3),64));

        sext_ln125_1_fu_1426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2031_p3),64));

        sext_ln126_fu_1435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln126_reg_2525),64));

        sext_ln132_1_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln132_fu_1558_p2),64));

    sext_ln132_fu_1554_p0 <= reg_589;
        sext_ln132_fu_1554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln132_fu_1554_p0),32));

        sext_ln133_1_fu_1584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln133_fu_1578_p2),64));

        sext_ln134_1_fu_1604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln134_fu_1598_p2),64));

        sext_ln135_1_fu_1658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln135_fu_1653_p2),64));

        sext_ln136_1_fu_1677_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln136_fu_1672_p2),64));

        sext_ln137_1_fu_1730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln137_fu_1725_p2),64));

        sext_ln138_1_fu_1749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln138_fu_1744_p2),64));

        sext_ln139_1_fu_1782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln139_fu_1777_p2),64));

        sext_ln140_1_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln140_fu_1796_p2),64));

        sext_ln84_1_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_589),32));

        sext_ln84_2_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln84_fu_1230_p2),64));

        sext_ln84_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_589),17));

    sext_ln86_2_fu_1160_p0 <= indata_q1;
        sext_ln86_2_fu_1160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln86_2_fu_1160_p0),32));

    sext_ln86_fu_1152_p0 <= indata_q1;
        sext_ln86_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln86_fu_1152_p0),17));

        sext_ln89_1_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_594),32));

        sext_ln89_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_594),17));

        sext_ln91_1_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln91_reg_2470),64));

        sext_ln93_1_fu_1131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_599),32));

        sext_ln93_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_599),33));

        sext_ln98_1_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_4_reg_2258),17));

        sext_ln98_2_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_4_reg_2258),32));

        sext_ln98_fu_1135_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_4_reg_2258),33));

    shl_ln146_fu_1860_p2 <= std_logic_vector(shift_left(unsigned(L_ACF_q1),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    smax_1_fu_879_p3 <= 
        temp_fu_865_p3 when (icmp_ln52_fu_873_p2(0) = '1') else 
        smax_fu_162;
    sub24_cast_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_1011_p1),15));
    sub_ln67_fu_851_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(indata_q0));
    temp_fu_865_p3 <= 
        select_ln67_fu_857_p3 when (tmp_32_fu_837_p3(0) = '1') else 
        indata_q0;
        tmp22_cast_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_2004_p3),64));

    tmp_27_fu_664_p3 <= smax_fu_162(15 downto 15);
    tmp_28_fu_712_p4 <= xor_ln105_fu_700_p2(31 downto 16);
    tmp_29_fu_728_p4 <= xor_ln105_fu_700_p2(31 downto 24);
    tmp_30_fu_779_p4 <= xor_ln105_fu_700_p2(31 downto 8);
    tmp_31_fu_995_p4 <= add_ln62_fu_989_p2(5 downto 2);
    tmp_32_fu_837_p3 <= indata_q0(15 downto 15);
    tmp_33_fu_1081_p3 <= k_3_fu_174(4 downto 4);
    tmp_34_fu_1824_p3 <= k_4_fu_222(4 downto 4);
    trunc_ln105_4_fu_692_p3 <= (trunc_ln105_fu_688_p1 & ap_const_lv16_0);
    trunc_ln105_fu_688_p1 <= smax_fu_162(8 - 1 downto 0);
    trunc_ln1_fu_1068_p1 <= grp_fu_1898_p3;
    trunc_ln_fu_753_p4 <= xor_ln70_fu_706_p2(23 downto 16);
    xor_ln105_fu_700_p2 <= (select_ln105_fu_672_p3 xor a_assign_s_fu_650_p3);
    xor_ln107_fu_773_p2 <= (icmp_ln107_fu_658_p2 xor ap_const_lv1_1);
    xor_ln112_fu_813_p2 <= (icmp_ln112_fu_722_p2 xor ap_const_lv1_1);
    xor_ln70_fu_706_p2 <= (trunc_ln105_4_fu_692_p3 xor select_ln105_4_fu_680_p3);
    zext_ln107_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_5_fu_946_p3),6));
    zext_ln112_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitoff_q2),5));
    zext_ln113_2_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_728_p4),64));
    zext_ln113_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_5_fu_908_p2),5));
    zext_ln114_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_753_p4),64));
    zext_ln129_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_load_reg_2541),64));
    zext_ln131_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_fu_1502_p2),64));
    zext_ln134_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_1544_p2),64));
    zext_ln135_fu_1619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_fu_1614_p2),64));
    zext_ln136_fu_1629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_1624_p2),64));
    zext_ln137_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_fu_1687_p2),64));
    zext_ln138_fu_1702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_fu_1697_p2),64));
    zext_ln139_fu_1759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_reg_2555),64));
    zext_ln144_fu_1832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_4_fu_222),64));
    zext_ln152_1_fu_1882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx77_fu_226),64));
    zext_ln152_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_90_fu_1848_p1),16));
    zext_ln39_fu_1539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_1534_p2),64));
    zext_ln49_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_166),64));
    zext_ln65_1_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_2_fu_170),64));
    zext_ln65_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_assign_fu_1019_p2),31));
    zext_ln79_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_fu_174),64));
end behav;
