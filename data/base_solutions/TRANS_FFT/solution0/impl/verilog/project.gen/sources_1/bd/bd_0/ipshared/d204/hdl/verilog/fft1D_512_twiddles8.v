// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft1D_512_twiddles8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_x_address0,
        a_x_ce0,
        a_x_we0,
        a_x_d0,
        a_x_q0,
        a_y_address0,
        a_y_ce0,
        a_y_we0,
        a_y_d0,
        a_y_q0,
        i,
        n
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_x_address0;
output   a_x_ce0;
output   a_x_we0;
output  [63:0] a_x_d0;
input  [63:0] a_x_q0;
output  [2:0] a_y_address0;
output   a_y_ce0;
output   a_y_we0;
output  [63:0] a_y_d0;
input  [63:0] a_y_q0;
input  [5:0] i;
input  [9:0] n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_x_ce0;
reg a_x_we0;
reg a_y_ce0;
reg a_y_we0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] twiddles8_reversed8_address0;
reg    twiddles8_reversed8_ce0;
wire   [31:0] twiddles8_reversed8_q0;
wire   [63:0] grp_fu_157_p2;
reg   [63:0] reg_189;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state33;
wire   [31:0] n_cast_fu_197_p1;
wire   [63:0] grp_fu_182_p1;
reg   [63:0] conv1_reg_256;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_185_p1;
reg   [63:0] conv2_reg_261;
wire    ap_CS_fsm_state3;
reg   [2:0] a_x_addr_reg_274;
reg   [2:0] a_y_addr_reg_279;
wire    ap_CS_fsm_state4;
reg   [63:0] conv_reg_289;
wire    ap_CS_fsm_state5;
wire   [63:0] grp_fu_178_p2;
reg   [63:0] div_reg_294;
wire    ap_CS_fsm_state23;
wire   [63:0] grp_sin_or_cos_double_s_fu_109_ap_return;
reg   [63:0] phi_x_reg_299;
wire    ap_CS_fsm_state29;
wire   [63:0] grp_sin_or_cos_double_s_fu_128_ap_return;
reg   [63:0] phi_y_reg_305;
wire    ap_CS_fsm_state30;
wire   [63:0] grp_fu_163_p2;
reg   [63:0] mul1_reg_323;
wire   [63:0] grp_fu_168_p2;
reg   [63:0] mul2_reg_328;
wire   [63:0] grp_fu_173_p2;
reg   [63:0] mul3_reg_333;
wire    grp_sin_or_cos_double_s_fu_109_ap_start;
wire    grp_sin_or_cos_double_s_fu_109_ap_done;
wire    grp_sin_or_cos_double_s_fu_109_ap_idle;
wire    grp_sin_or_cos_double_s_fu_109_ap_ready;
wire    grp_sin_or_cos_double_s_fu_128_ap_start;
wire    grp_sin_or_cos_double_s_fu_128_ap_done;
wire    grp_sin_or_cos_double_s_fu_128_ap_idle;
wire    grp_sin_or_cos_double_s_fu_128_ap_ready;
reg    grp_sin_or_cos_double_s_fu_109_ap_start_reg;
wire    ap_CS_fsm_state28;
reg    grp_sin_or_cos_double_s_fu_128_ap_start_reg;
wire   [63:0] zext_ln28_fu_221_p1;
wire   [0:0] icmp_ln28_fu_215_p2;
reg   [3:0] j_fu_56;
wire   [3:0] add_ln28_fu_228_p2;
reg    ap_block_state29_on_subcall_done;
wire    ap_CS_fsm_state37;
wire   [63:0] grp_fu_147_p2;
wire   [63:0] grp_fu_152_p2;
wire    ap_CS_fsm_state34;
reg   [63:0] grp_fu_157_p0;
reg   [63:0] grp_fu_157_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state10;
reg   [31:0] grp_fu_182_p0;
wire   [31:0] grp_fu_185_p0;
reg   [36:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
#0 grp_sin_or_cos_double_s_fu_109_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_double_s_fu_128_ap_start_reg = 1'b0;
#0 j_fu_56 = 4'd0;
end

fft1D_512_twiddles8_twiddles8_reversed8_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
twiddles8_reversed8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(twiddles8_reversed8_address0),
    .ce0(twiddles8_reversed8_ce0),
    .q0(twiddles8_reversed8_q0)
);

fft1D_512_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_109(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_109_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_109_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_109_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_109_ap_ready),
    .t_in(reg_189),
    .do_cos(1'd1),
    .ap_return(grp_sin_or_cos_double_s_fu_109_ap_return)
);

fft1D_512_sin_or_cos_double_s grp_sin_or_cos_double_s_fu_128(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sin_or_cos_double_s_fu_128_ap_start),
    .ap_done(grp_sin_or_cos_double_s_fu_128_ap_done),
    .ap_idle(grp_sin_or_cos_double_s_fu_128_ap_idle),
    .ap_ready(grp_sin_or_cos_double_s_fu_128_ap_ready),
    .t_in(reg_189),
    .do_cos(1'd0),
    .ap_return(grp_sin_or_cos_double_s_fu_128_ap_return)
);

fft1D_512_dsub_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsub_64ns_64ns_64_4_full_dsp_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_189),
    .din1(mul1_reg_323),
    .ce(1'b1),
    .dout(grp_fu_147_p2)
);

fft1D_512_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_4_full_dsp_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul2_reg_328),
    .din1(mul3_reg_333),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p0),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_y_q0),
    .din1(phi_y_reg_305),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_x_q0),
    .din1(phi_y_reg_305),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_y_q0),
    .din1(phi_x_reg_299),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

fft1D_512_ddiv_64ns_64ns_64_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_14_no_dsp_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_189),
    .din1(conv1_reg_256),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

fft1D_512_sitodp_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_2_no_dsp_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_182_p0),
    .ce(1'b1),
    .dout(grp_fu_182_p1)
);

fft1D_512_sitodp_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_2_no_dsp_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_185_p0),
    .ce(1'b1),
    .dout(grp_fu_185_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_109_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            grp_sin_or_cos_double_s_fu_109_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_109_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_109_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sin_or_cos_double_s_fu_128_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            grp_sin_or_cos_double_s_fu_128_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_double_s_fu_128_ap_ready == 1'b1)) begin
            grp_sin_or_cos_double_s_fu_128_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_56 <= 4'd1;
    end else if (((icmp_ln28_fu_215_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_fu_56 <= add_ln28_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        a_x_addr_reg_274 <= zext_ln28_fu_221_p1;
        a_y_addr_reg_279 <= zext_ln28_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv1_reg_256 <= grp_fu_182_p1;
        conv2_reg_261 <= grp_fu_185_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_reg_289 <= grp_fu_182_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        div_reg_294 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        mul1_reg_323 <= grp_fu_163_p2;
        mul2_reg_328 <= grp_fu_168_p2;
        mul3_reg_333 <= grp_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        phi_x_reg_299 <= grp_sin_or_cos_double_s_fu_109_ap_return;
        phi_y_reg_305 <= grp_sin_or_cos_double_s_fu_128_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_189 <= grp_fu_157_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((1'b0 == ap_block_state29_on_subcall_done) & (1'b1 == ap_CS_fsm_state29)))) begin
        a_x_ce0 = 1'b1;
    end else begin
        a_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        a_x_we0 = 1'b1;
    end else begin
        a_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((1'b0 == ap_block_state29_on_subcall_done) & (1'b1 == ap_CS_fsm_state29)))) begin
        a_y_ce0 = 1'b1;
    end else begin
        a_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        a_y_we0 = 1'b1;
    end else begin
        a_y_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state29_on_subcall_done)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln28_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_157_p0 = a_x_q0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_157_p0 = div_reg_294;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_157_p0 = conv_reg_289;
    end else begin
        grp_fu_157_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_157_p1 = phi_x_reg_299;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_157_p1 = conv2_reg_261;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_157_p1 = 64'd13842132293033989956;
    end else begin
        grp_fu_157_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_182_p0 = twiddles8_reversed8_q0;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_182_p0 = n_cast_fu_197_p1;
    end else begin
        grp_fu_182_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        twiddles8_reversed8_ce0 = 1'b1;
    end else begin
        twiddles8_reversed8_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln28_fu_215_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((1'b0 == ap_block_state29_on_subcall_done) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_x_address0 = a_x_addr_reg_274;

assign a_x_d0 = grp_fu_147_p2;

assign a_y_address0 = a_y_addr_reg_279;

assign a_y_d0 = grp_fu_152_p2;

assign add_ln28_fu_228_p2 = (j_fu_56 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state29_on_subcall_done = ((grp_sin_or_cos_double_s_fu_128_ap_done == 1'b0) | (grp_sin_or_cos_double_s_fu_109_ap_done == 1'b0));
end

assign grp_fu_185_p0 = i;

assign grp_sin_or_cos_double_s_fu_109_ap_start = grp_sin_or_cos_double_s_fu_109_ap_start_reg;

assign grp_sin_or_cos_double_s_fu_128_ap_start = grp_sin_or_cos_double_s_fu_128_ap_start_reg;

assign icmp_ln28_fu_215_p2 = ((j_fu_56 == 4'd8) ? 1'b1 : 1'b0);

assign n_cast_fu_197_p1 = n;

assign twiddles8_reversed8_address0 = zext_ln28_fu_221_p1;

assign zext_ln28_fu_221_p1 = j_fu_56;

endmodule //fft1D_512_twiddles8
