-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft1D_512_loady8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_y_ce0 : OUT STD_LOGIC;
    a_y_we0 : OUT STD_LOGIC;
    a_y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_y_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_y_ce1 : OUT STD_LOGIC;
    a_y_we1 : OUT STD_LOGIC;
    a_y_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    offset : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of fft1D_512_loady8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv10_10 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_const_lv10_18 : STD_LOGIC_VECTOR (9 downto 0) := "0000011000";
    constant ap_const_lv10_20 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_const_lv10_28 : STD_LOGIC_VECTOR (9 downto 0) := "0000101000";
    constant ap_const_lv10_30 : STD_LOGIC_VECTOR (9 downto 0) := "0000110000";
    constant ap_const_lv10_38 : STD_LOGIC_VECTOR (9 downto 0) := "0000111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln104_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln105_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln108_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln110_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_fu_279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln105_fu_213_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln106_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln107_fu_234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln109_fu_254_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln110_fu_264_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln111_fu_274_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_y_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_y_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_y_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_y_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_y_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            a_y_address0 <= "XXX";
        end if; 
    end process;


    a_y_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_y_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_y_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            a_y_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_y_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            a_y_address1 <= "XXX";
        end if; 
    end process;


    a_y_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_y_ce0 <= ap_const_logic_1;
        else 
            a_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_y_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_y_ce1 <= ap_const_logic_1;
        else 
            a_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_y_d0 <= x_q0;
    a_y_d1 <= x_q1;

    a_y_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_y_we0 <= ap_const_logic_1;
        else 
            a_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_y_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_y_we1 <= ap_const_logic_1;
        else 
            a_y_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_fu_213_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_8));
    add_ln106_fu_224_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_10));
    add_ln107_fu_234_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_18));
    add_ln108_fu_244_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_20));
    add_ln109_fu_254_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_28));
    add_ln110_fu_264_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_30));
    add_ln111_fu_274_p2 <= std_logic_vector(unsigned(offset) + unsigned(ap_const_lv10_38));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    x_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln105_fu_219_p1, zext_ln107_fu_239_p1, zext_ln109_fu_259_p1, zext_ln111_fu_279_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address0 <= zext_ln111_fu_279_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address0 <= zext_ln109_fu_259_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address0 <= zext_ln107_fu_239_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address0 <= zext_ln105_fu_219_p1(10 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln104_fu_208_p1, zext_ln106_fu_229_p1, zext_ln108_fu_249_p1, zext_ln110_fu_269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address1 <= zext_ln110_fu_269_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address1 <= zext_ln108_fu_249_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address1 <= zext_ln106_fu_229_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address1 <= zext_ln104_fu_208_p1(10 - 1 downto 0);
        else 
            x_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln104_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset),64));
    zext_ln105_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln105_fu_213_p2),64));
    zext_ln106_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_fu_224_p2),64));
    zext_ln107_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_fu_234_p2),64));
    zext_ln108_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_fu_244_p2),64));
    zext_ln109_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_fu_254_p2),64));
    zext_ln110_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln110_fu_264_p2),64));
    zext_ln111_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln111_fu_274_p2),64));
end behav;
