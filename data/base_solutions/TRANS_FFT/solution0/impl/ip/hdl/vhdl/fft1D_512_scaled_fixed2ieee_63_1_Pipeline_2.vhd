-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft1D_512_scaled_fixed2ieee_63_1_Pipeline_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_bits_2_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_bits_1_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    out_bits_0_1_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    in_val : IN STD_LOGIC_VECTOR (62 downto 0);
    out_bits_2_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_bits_2_2_out_ap_vld : OUT STD_LOGIC;
    out_bits_1_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_bits_1_2_out_ap_vld : OUT STD_LOGIC;
    out_bits_0_21_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_bits_0_21_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fft1D_512_scaled_fixed2ieee_63_1_Pipeline_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln401_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_fu_58 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i_3_fu_148_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_load_fu_139_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_bits_0_21_fu_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal out_bits_1_fu_272_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_1_2_fu_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal out_bits_2_2_fu_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shl_ln_fu_154_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln404_fu_162_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln403_fu_168_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln403_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln403_1_fu_190_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln403_3_fu_202_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_180_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln403_2_fu_196_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln403_fu_208_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln403_2_fu_224_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln403_4_fu_232_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln403_1_fu_216_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln403_fu_238_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal lshr_ln403_fu_246_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln403_1_fu_242_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal lshr_ln403_1_fu_256_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln403_fu_252_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln403_1_fu_262_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln403_fu_266_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_78 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft1D_512_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fft1D_512_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln401_fu_142_p2 = ap_const_lv1_0)) then 
                    i_fu_58 <= i_3_fu_148_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_58 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    out_bits_0_21_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((i_2_load_fu_139_p1 = ap_const_lv2_0) and (icmp_ln401_fu_142_p2 = ap_const_lv1_0))) then 
                    out_bits_0_21_fu_62 <= out_bits_1_fu_272_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    out_bits_0_21_fu_62 <= out_bits_0_1_reload;
                end if;
            end if; 
        end if;
    end process;

    out_bits_1_2_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if (((i_2_load_fu_139_p1 = ap_const_lv2_1) and (icmp_ln401_fu_142_p2 = ap_const_lv1_0))) then 
                    out_bits_1_2_fu_66 <= out_bits_1_fu_272_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    out_bits_1_2_fu_66 <= out_bits_1_1_reload;
                end if;
            end if; 
        end if;
    end process;

    out_bits_2_2_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((ap_const_boolean_1 = ap_condition_78)) then 
                    out_bits_2_2_fu_70 <= out_bits_1_fu_272_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    out_bits_2_2_fu_70 <= out_bits_2_1_reload;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln403_fu_266_p2 <= (trunc_ln403_fu_252_p1 and trunc_ln403_1_fu_262_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_78_assign_proc : process(icmp_ln401_fu_142_p2, i_2_load_fu_139_p1)
    begin
                ap_condition_78 <= (not((i_2_load_fu_139_p1 = ap_const_lv2_1)) and not((i_2_load_fu_139_p1 = ap_const_lv2_0)) and (icmp_ln401_fu_142_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln401_fu_142_p2)
    begin
        if (((icmp_ln401_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_58, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_58;
        end if; 
    end process;

    i_2_load_fu_139_p1 <= ap_sig_allocacmp_i_2;
    i_3_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv2_1));
    icmp_ln401_fu_142_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv2_3) else "0";
    icmp_ln403_fu_174_p2 <= "1" when (unsigned(sub_ln404_fu_162_p2) > unsigned(sub_ln403_fu_168_p2)) else "0";
    lshr_ln403_1_fu_256_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv63_7FFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln403_1_fu_242_p1(31-1 downto 0)))));
    lshr_ln403_fu_246_p2 <= std_logic_vector(shift_right(unsigned(select_ln403_1_fu_216_p3),to_integer(unsigned('0' & zext_ln403_fu_238_p1(31-1 downto 0)))));
    out_bits_0_21_out <= out_bits_0_21_fu_62;

    out_bits_0_21_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln401_fu_142_p2)
    begin
        if (((icmp_ln401_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_bits_0_21_out_ap_vld <= ap_const_logic_1;
        else 
            out_bits_0_21_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_bits_1_2_out <= out_bits_1_2_fu_66;

    out_bits_1_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln401_fu_142_p2)
    begin
        if (((icmp_ln401_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_bits_1_2_out_ap_vld <= ap_const_logic_1;
        else 
            out_bits_1_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_bits_1_fu_272_p3 <= (and_ln403_fu_266_p2 & ap_const_lv16_8000);
    out_bits_2_2_out <= out_bits_2_2_fu_70;

    out_bits_2_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln401_fu_142_p2)
    begin
        if (((icmp_ln401_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_bits_2_2_out_ap_vld <= ap_const_logic_1;
        else 
            out_bits_2_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln403_1_fu_216_p3 <= 
        tmp_fu_180_p4 when (icmp_ln403_fu_174_p2(0) = '1') else 
        in_val;
    select_ln403_2_fu_224_p3 <= 
        sub_ln403_2_fu_196_p2 when (icmp_ln403_fu_174_p2(0) = '1') else 
        sub_ln404_fu_162_p2;
    select_ln403_fu_208_p3 <= 
        sub_ln403_1_fu_190_p2 when (icmp_ln403_fu_174_p2(0) = '1') else 
        sub_ln403_3_fu_202_p2;
    shl_ln_fu_154_p3 <= (ap_sig_allocacmp_i_2 & ap_const_lv4_0);
    sub_ln403_1_fu_190_p2 <= std_logic_vector(unsigned(sub_ln404_fu_162_p2) - unsigned(sub_ln403_fu_168_p2));
    sub_ln403_2_fu_196_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(sub_ln404_fu_162_p2));
    sub_ln403_3_fu_202_p2 <= std_logic_vector(unsigned(sub_ln403_fu_168_p2) - unsigned(sub_ln404_fu_162_p2));
    sub_ln403_4_fu_232_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(select_ln403_fu_208_p3));
    sub_ln403_fu_168_p2 <= std_logic_vector(signed(ap_const_lv6_3E) - signed(shl_ln_fu_154_p3));
    sub_ln404_fu_162_p2 <= std_logic_vector(signed(ap_const_lv6_2F) - signed(shl_ln_fu_154_p3));
    
    tmp_fu_180_p4_proc : process(in_val)
    variable vlo_cpy : STD_LOGIC_VECTOR(63+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(63+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable tmp_fu_180_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(63 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(63 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3E(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := in_val;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(63-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(63-1-unsigned(ap_const_lv32_3E(6-1 downto 0)));
            for tmp_fu_180_p4_i in 0 to 63-1 loop
                v0_cpy(tmp_fu_180_p4_i) := in_val(63-1-tmp_fu_180_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(63-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_180_p4 <= resvalue(63-1 downto 0);
    end process;

    trunc_ln403_1_fu_262_p1 <= lshr_ln403_1_fu_256_p2(16 - 1 downto 0);
    trunc_ln403_fu_252_p1 <= lshr_ln403_fu_246_p2(16 - 1 downto 0);
    zext_ln403_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln403_4_fu_232_p2),63));
    zext_ln403_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln403_2_fu_224_p3),63));
end behav;
