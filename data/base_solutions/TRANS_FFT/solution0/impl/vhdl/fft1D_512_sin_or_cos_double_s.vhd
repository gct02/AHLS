-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft1D_512_sin_or_cos_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of fft1D_512_sin_or_cos_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_256_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_256_ce0 : STD_LOGIC;
    signal ref_4oPi_table_256_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fourth_order_double_sin_cos_K0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K0_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K0_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal fourth_order_double_sin_cos_K1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K1_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K1_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal fourth_order_double_sin_cos_K2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K2_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K2_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal fourth_order_double_sin_cos_K3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K3_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K3_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal fourth_order_double_sin_cos_K4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fourth_order_double_sin_cos_K4_ce0 : STD_LOGIC;
    signal fourth_order_double_sin_cos_K4_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal din_sign_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_fu_364_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_reg_1261 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_sig_fu_374_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal din_sig_reg_1268 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1274 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln398_fu_413_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln398_reg_1286 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln271_1_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_1_reg_1301 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_fu_482_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_1307 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Mx_bits_3_fu_506_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_bits_3_reg_1313 : STD_LOGIC_VECTOR (123 downto 0);
    signal Mx_zeros_fu_562_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Mx_zeros_reg_1318 : STD_LOGIC_VECTOR (6 downto 0);
    signal Mx_reg_1324 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Ex_1_fu_599_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_1_reg_1331 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_1337 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln506_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln506_reg_1343 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln271_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln271_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln282_reg_1354 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal cos_basis_fu_700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1367 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_fu_718_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal B_reg_1374 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln25_fu_732_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal zext_ln25_reg_1379 : STD_LOGIC_VECTOR (97 downto 0);
    signal B_squared_reg_1384 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_10_reg_1415 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal fourth_order_double_sin_cos_K3_load_reg_1420 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_11_reg_1425 : STD_LOGIC_VECTOR (34 downto 0);
    signal fourth_order_double_sin_cos_K4_load_reg_1430 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln37_1_fu_863_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln37_1_reg_1435 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln37_3_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln37_3_reg_1440 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal result_reg_1445 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln252_fu_959_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln252_reg_1450 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done : STD_LOGIC;
    signal grp_scaled_fixed2ieee_63_1_s_fu_314_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_63_1_s_fu_314_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_63_1_s_fu_314_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln397_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_764_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln36_fu_320_p0 : STD_LOGIC_VECTOR (34 downto 0);
    signal mul_ln36_fu_320_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln35_fu_324_p0 : STD_LOGIC_VECTOR (41 downto 0);
    signal mul_ln35_fu_324_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln34_fu_328_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln25_1_fu_773_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln27_fu_336_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln27_fu_336_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln33_fu_340_p0 : STD_LOGIC_VECTOR (55 downto 0);
    signal mul_ln37_fu_344_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_348_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal data_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln396_fu_384_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_fu_390_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_398_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln398_fu_424_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln398_fu_427_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal X_fu_417_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (169 downto 0);
    signal k_fu_464_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln451_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_fu_454_p4 : STD_LOGIC_VECTOR (123 downto 0);
    signal and_ln451_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_1_fu_500_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal tmp_2_fu_514_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal t_fu_524_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_3_fu_532_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_4_fu_542_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln75_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_554_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal Ex_fu_566_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln504_fu_581_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal shl_ln504_fu_584_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal select_ln453_fu_571_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln505_fu_578_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln506_fu_629_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln506_fu_634_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal lshr_ln506_fu_638_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal shl_ln506_fu_643_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_6_fu_655_p17 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_655_p19 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln242_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_648_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal B_trunc_fu_722_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal sin_basis_fu_748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_708_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal A_fu_756_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln33_fu_340_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal mul_ln34_fu_328_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal mul_ln27_fu_336_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal t1_1_fu_779_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln_fu_796_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln37_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_1_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_815_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln37_fu_853_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln37_2_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln36_fu_320_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln35_fu_324_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal tmp_12_fu_895_p4 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln37_2_fu_905_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln_fu_885_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln37_2_fu_909_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal Mx_1_fu_924_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln37_fu_344_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal Ex_2_fu_949_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln252_fu_955_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal data_1_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_998_p33 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_992_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p33 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_998_p35 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_1070_p35 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln242_fu_1142_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_fu_970_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln278_fu_1159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_1_fu_1149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln282_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_exp_fu_978_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln271_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_3_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_sign_4_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln259_fu_1169_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_exp_1_fu_1187_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln271_1_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_1214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln271_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_1220_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal results_sig_fu_988_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal results_sign_5_fu_1194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal results_exp_2_fu_1202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal results_sig_1_fu_1233_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_2_fu_1241_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln497_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal grp_fu_348_p10 : STD_LOGIC_VECTOR (169 downto 0);
    signal mul_ln33_fu_340_p00 : STD_LOGIC_VECTOR (107 downto 0);
    signal mul_ln34_fu_328_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal mul_ln35_fu_324_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal mul_ln35_fu_324_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal mul_ln36_fu_320_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln36_fu_320_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln37_fu_344_p10 : STD_LOGIC_VECTOR (125 downto 0);
    signal tmp_6_fu_655_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p13 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_655_p15 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_998_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_998_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p29 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1070_p31 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fft1D_512_scaled_fixed2ieee_63_1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_val : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_mul_35ns_25ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (34 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component fft1D_512_mul_42ns_33ns_75_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (41 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component fft1D_512_mul_49ns_44s_93_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component fft1D_512_mul_49ns_49ns_98_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component fft1D_512_mul_56ns_52s_108_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (55 downto 0);
        din1 : IN STD_LOGIC_VECTOR (51 downto 0);
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component fft1D_512_mul_64s_63ns_126_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (62 downto 0);
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component fft1D_512_mul_170s_53ns_170_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (169 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (169 downto 0) );
    end component;


    component fft1D_512_sparsemux_17_3_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (2 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (2 downto 0);
        din7_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fft1D_512_sparsemux_33_4_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (3 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (3 downto 0);
        din15_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        def : IN STD_LOGIC_VECTOR (0 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fft1D_512_sin_or_cos_double_s_ref_4oPi_table_256_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_ROM_1P_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    ref_4oPi_table_256_U : component fft1D_512_sin_or_cos_double_s_ref_4oPi_table_256_ROM_AUTO_1R
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_256_address0,
        ce0 => ref_4oPi_table_256_ce0,
        q0 => ref_4oPi_table_256_q0);

    fourth_order_double_sin_cos_K0_U : component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K0_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K0_address0,
        ce0 => fourth_order_double_sin_cos_K0_ce0,
        q0 => fourth_order_double_sin_cos_K0_q0);

    fourth_order_double_sin_cos_K1_U : component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K1_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K1_address0,
        ce0 => fourth_order_double_sin_cos_K1_ce0,
        q0 => fourth_order_double_sin_cos_K1_q0);

    fourth_order_double_sin_cos_K2_U : component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K2_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K2_address0,
        ce0 => fourth_order_double_sin_cos_K2_ce0,
        q0 => fourth_order_double_sin_cos_K2_q0);

    fourth_order_double_sin_cos_K3_U : component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K3_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K3_address0,
        ce0 => fourth_order_double_sin_cos_K3_ce0,
        q0 => fourth_order_double_sin_cos_K3_q0);

    fourth_order_double_sin_cos_K4_U : component fft1D_512_sin_or_cos_double_s_fourth_order_double_sin_cos_K4_ROM_1P_LUTRAM_1R
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fourth_order_double_sin_cos_K4_address0,
        ce0 => fourth_order_double_sin_cos_K4_ce0,
        q0 => fourth_order_double_sin_cos_K4_q0);

    grp_scaled_fixed2ieee_63_1_s_fu_314 : component fft1D_512_scaled_fixed2ieee_63_1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start,
        ap_done => grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done,
        ap_idle => grp_scaled_fixed2ieee_63_1_s_fu_314_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_63_1_s_fu_314_ap_ready,
        in_val => result_reg_1445,
        prescale => sub_ln252_reg_1450,
        ap_return => grp_scaled_fixed2ieee_63_1_s_fu_314_ap_return);

    mul_35ns_25ns_60_1_1_U33 : component fft1D_512_mul_35ns_25ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 35,
        din1_WIDTH => 25,
        dout_WIDTH => 60)
    port map (
        din0 => mul_ln36_fu_320_p0,
        din1 => mul_ln36_fu_320_p1,
        dout => mul_ln36_fu_320_p2);

    mul_42ns_33ns_75_1_1_U34 : component fft1D_512_mul_42ns_33ns_75_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 42,
        din1_WIDTH => 33,
        dout_WIDTH => 75)
    port map (
        din0 => mul_ln35_fu_324_p0,
        din1 => mul_ln35_fu_324_p1,
        dout => mul_ln35_fu_324_p2);

    mul_49ns_44s_93_1_1_U35 : component fft1D_512_mul_49ns_44s_93_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        din0 => mul_ln34_fu_328_p0,
        din1 => fourth_order_double_sin_cos_K2_q0,
        dout => mul_ln34_fu_328_p2);

    mul_49ns_49ns_98_1_1_U36 : component fft1D_512_mul_49ns_49ns_98_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        dout => grp_fu_332_p2);

    mul_49ns_49ns_98_1_1_U37 : component fft1D_512_mul_49ns_49ns_98_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        din0 => mul_ln27_fu_336_p0,
        din1 => mul_ln27_fu_336_p1,
        dout => mul_ln27_fu_336_p2);

    mul_56ns_52s_108_1_1_U38 : component fft1D_512_mul_56ns_52s_108_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 56,
        din1_WIDTH => 52,
        dout_WIDTH => 108)
    port map (
        din0 => mul_ln33_fu_340_p0,
        din1 => fourth_order_double_sin_cos_K1_q0,
        dout => mul_ln33_fu_340_p2);

    mul_64s_63ns_126_1_1_U39 : component fft1D_512_mul_64s_63ns_126_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 63,
        dout_WIDTH => 126)
    port map (
        din0 => add_ln37_3_reg_1440,
        din1 => mul_ln37_fu_344_p1,
        dout => mul_ln37_fu_344_p2);

    mul_170s_53ns_170_2_1_U40 : component fft1D_512_mul_170s_53ns_170_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 170,
        din1_WIDTH => 53,
        dout_WIDTH => 170)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        din1 => grp_fu_348_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_348_p2);

    sparsemux_17_3_1_1_1_U41 : component fft1D_512_sparsemux_17_3_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 1,
        CASE1 => "001",
        din1_WIDTH => 1,
        CASE2 => "010",
        din2_WIDTH => 1,
        CASE3 => "011",
        din3_WIDTH => 1,
        CASE4 => "100",
        din4_WIDTH => 1,
        CASE5 => "101",
        din5_WIDTH => 1,
        CASE6 => "110",
        din6_WIDTH => 1,
        CASE7 => "111",
        din7_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        def => tmp_6_fu_655_p17,
        sel => k_1_reg_1307,
        dout => tmp_6_fu_655_p19);

    sparsemux_33_4_1_1_1_U42 : component fft1D_512_sparsemux_33_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 1,
        CASE1 => "0001",
        din1_WIDTH => 1,
        CASE2 => "0010",
        din2_WIDTH => 1,
        CASE3 => "0011",
        din3_WIDTH => 1,
        CASE4 => "0100",
        din4_WIDTH => 1,
        CASE5 => "0101",
        din5_WIDTH => 1,
        CASE6 => "0110",
        din6_WIDTH => 1,
        CASE7 => "0111",
        din7_WIDTH => 1,
        CASE8 => "1000",
        din8_WIDTH => 1,
        CASE9 => "1001",
        din9_WIDTH => 1,
        CASE10 => "1010",
        din10_WIDTH => 1,
        CASE11 => "1011",
        din11_WIDTH => 1,
        CASE12 => "1100",
        din12_WIDTH => 1,
        CASE13 => "1101",
        din13_WIDTH => 1,
        CASE14 => "1110",
        din14_WIDTH => 1,
        CASE15 => "1111",
        din15_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        def => tmp_8_fu_998_p33,
        sel => index_fu_992_p3,
        dout => tmp_8_fu_998_p35);

    sparsemux_33_4_1_1_1_U43 : component fft1D_512_sparsemux_33_4_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 1,
        CASE1 => "0001",
        din1_WIDTH => 1,
        CASE2 => "0010",
        din2_WIDTH => 1,
        CASE3 => "0011",
        din3_WIDTH => 1,
        CASE4 => "0100",
        din4_WIDTH => 1,
        CASE5 => "0101",
        din5_WIDTH => 1,
        CASE6 => "0110",
        din6_WIDTH => 1,
        CASE7 => "0111",
        din7_WIDTH => 1,
        CASE8 => "1000",
        din8_WIDTH => 1,
        CASE9 => "1001",
        din9_WIDTH => 1,
        CASE10 => "1010",
        din10_WIDTH => 1,
        CASE11 => "1011",
        din11_WIDTH => 1,
        CASE12 => "1100",
        din12_WIDTH => 1,
        CASE13 => "1101",
        din13_WIDTH => 1,
        CASE14 => "1110",
        din14_WIDTH => 1,
        CASE15 => "1111",
        din15_WIDTH => 1,
        def_WIDTH => 1,
        sel_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        def => tmp_1_fu_1070_p33,
        sel => index_fu_992_p3,
        dout => tmp_1_fu_1070_p35);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done = ap_const_logic_1))) then 
                    ap_return_preg <= bitcast_ln497_fu_1251_p1;
                end if; 
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_63_1_s_fu_314_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                B_reg_1374 <= B_fu_718_p1;
                B_squared_reg_1384 <= grp_fu_332_p2(97 downto 49);
                cos_basis_reg_1367 <= cos_basis_fu_700_p3;
                    zext_ln25_reg_1379(48 downto 0) <= zext_ln25_fu_732_p1(48 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Ex_1_reg_1331 <= Ex_1_fu_599_p2;
                Mx_reg_1324 <= shl_ln504_fu_584_p2(123 downto 61);
                icmp_ln271_reg_1348 <= icmp_ln271_fu_619_p2;
                icmp_ln282_reg_1354 <= icmp_ln282_fu_624_p2;
                sub_ln506_reg_1343 <= sub_ln506_fu_613_p2;
                tmp_7_reg_1337 <= Ex_1_fu_599_p2(10 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Mx_bits_3_reg_1313 <= Mx_bits_3_fu_506_p3;
                Mx_zeros_reg_1318 <= Mx_zeros_fu_562_p1;
                k_1_reg_1307 <= k_1_fu_482_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln37_1_reg_1435 <= add_ln37_1_fu_863_p2;
                fourth_order_double_sin_cos_K3_load_reg_1420 <= fourth_order_double_sin_cos_K3_q0;
                fourth_order_double_sin_cos_K4_load_reg_1430 <= fourth_order_double_sin_cos_K4_q0;
                tmp_10_reg_1415 <= grp_fu_332_p2(97 downto 56);
                tmp_11_reg_1425 <= mul_ln27_fu_336_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln37_3_reg_1440 <= add_ln37_3_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                closepath_reg_1274 <= closepath_fu_378_p2;
                din_exp_reg_1261 <= data_fu_352_p1(62 downto 52);
                din_sig_reg_1268 <= din_sig_fu_374_p1;
                din_sign_reg_1255 <= data_fu_352_p1(63 downto 63);
                trunc_ln398_reg_1286 <= trunc_ln398_fu_413_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln271_1_reg_1301 <= icmp_ln271_1_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                result_reg_1445 <= mul_ln37_fu_344_p2(125 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sub_ln252_reg_1450 <= sub_ln252_fu_959_p2;
            end if;
        end if;
    end process;
    zext_ln25_reg_1379(97 downto 49) <= "0000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    A_fu_756_p3 <= (sin_basis_fu_748_p3 & tmp_9_fu_708_p4);
    B_fu_718_p1 <= x_1_fu_648_p3(56 - 1 downto 0);
    B_trunc_fu_722_p4 <= x_1_fu_648_p3(55 downto 7);
    Ex_1_fu_599_p2 <= std_logic_vector(unsigned(select_ln453_fu_571_p3) - unsigned(zext_ln505_fu_578_p1));
    Ex_2_fu_949_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_1367(0) = '1') else 
        Ex_1_reg_1331;
    Ex_fu_566_p2 <= std_logic_vector(unsigned(din_exp_reg_1261) + unsigned(ap_const_lv11_403));
    Mx_1_fu_924_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_reg_1367(0) = '1') else 
        Mx_reg_1324;
    Mx_bits_1_fu_500_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(Mx_bits_fu_454_p4));
    Mx_bits_3_fu_506_p3 <= 
        Mx_bits_1_fu_500_p2 when (and_ln451_fu_494_p2(0) = '1') else 
        Mx_bits_fu_454_p4;
    Mx_bits_fu_454_p4 <= grp_fu_348_p2(166 downto 43);
    Mx_zeros_fu_562_p1 <= tmp_5_fu_554_p3(7 - 1 downto 0);
    X_fu_417_p3 <= (ap_const_lv1_1 & din_sig_reg_1268);
    add_ln37_1_fu_863_p2 <= std_logic_vector(unsigned(add_ln37_fu_853_p2) + unsigned(sext_ln37_2_fu_859_p1));
    add_ln37_2_fu_909_p2 <= std_logic_vector(unsigned(add_ln37_1_reg_1435) + unsigned(zext_ln37_2_fu_905_p1));
    add_ln37_3_fu_918_p2 <= std_logic_vector(unsigned(add_ln37_2_fu_909_p2) + unsigned(zext_ln37_fu_914_p1));
    add_ln37_fu_853_p2 <= std_logic_vector(signed(sext_ln37_fu_845_p1) + signed(sext_ln37_1_fu_849_p1));
    add_ln396_fu_384_p2 <= std_logic_vector(unsigned(din_exp_fu_364_p4) + unsigned(ap_const_lv11_44D));
    addr_fu_390_p3 <= 
        ap_const_lv11_4A when (closepath_fu_378_p2(0) = '1') else 
        add_ln396_fu_384_p2;
    and_ln271_1_fu_1210_p2 <= (icmp_ln271_reg_1348 and icmp_ln271_1_reg_1301);
    and_ln271_fu_1155_p2 <= (icmp_ln271_reg_1348 and icmp_ln271_1_reg_1301);
    and_ln451_fu_494_p2 <= (xor_ln451_fu_489_p2 and tmp_fu_474_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done)
    begin
        if ((grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done, ap_CS_fsm_state10)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done, ap_CS_fsm_state10, bitcast_ln497_fu_1251_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_scaled_fixed2ieee_63_1_s_fu_314_ap_done = ap_const_logic_1))) then 
            ap_return <= bitcast_ln497_fu_1251_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln497_fu_1251_p1 <= t_2_fu_1241_p4;
    closepath_fu_378_p2 <= "1" when (unsigned(din_exp_fu_364_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    cos_basis_fu_700_p3 <= 
        xor_ln242_fu_694_p2 when (do_cos(0) = '1') else 
        tmp_6_fu_655_p19;
    data_1_fu_966_p1 <= grp_scaled_fixed2ieee_63_1_s_fu_314_ap_return;
    data_fu_352_p1 <= t_in;
    din_exp_fu_364_p4 <= data_fu_352_p1(62 downto 52);
    din_sig_fu_374_p1 <= data_fu_352_p1(52 - 1 downto 0);
    fourth_order_double_sin_cos_K0_address0 <= zext_ln32_fu_764_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_sin_cos_K0_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K1_address0 <= zext_ln32_fu_764_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_sin_cos_K1_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K2_address0 <= zext_ln32_fu_764_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_sin_cos_K2_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K3_address0 <= zext_ln32_fu_764_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_sin_cos_K3_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fourth_order_double_sin_cos_K4_address0 <= zext_ln32_fu_764_p1(8 - 1 downto 0);

    fourth_order_double_sin_cos_K4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fourth_order_double_sin_cos_K4_ce0 <= ap_const_logic_1;
        else 
            fourth_order_double_sin_cos_K4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_332_p0_assign_proc : process(ap_CS_fsm_state5, zext_ln25_fu_732_p1, ap_CS_fsm_state6, zext_ln25_1_fu_773_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_332_p0 <= zext_ln25_1_fu_773_p1(49 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_332_p0 <= zext_ln25_fu_732_p1(49 - 1 downto 0);
        else 
            grp_fu_332_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_332_p1_assign_proc : process(ap_CS_fsm_state5, zext_ln25_fu_732_p1, zext_ln25_reg_1379, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_332_p1 <= zext_ln25_reg_1379(49 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_332_p1 <= zext_ln25_fu_732_p1(49 - 1 downto 0);
        else 
            grp_fu_332_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_348_p0 <= shl_ln398_fu_427_p2(255 downto 86);
    grp_fu_348_p1 <= grp_fu_348_p10(53 - 1 downto 0);
    grp_fu_348_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(X_fu_417_p3),170));
    grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start <= grp_scaled_fixed2ieee_63_1_s_fu_314_ap_start_reg;
    icmp_ln271_1_fu_449_p2 <= "1" when (din_sig_reg_1268 = ap_const_lv52_0) else "0";
    icmp_ln271_fu_619_p2 <= "1" when (din_exp_reg_1261 = ap_const_lv11_0) else "0";
    icmp_ln282_fu_624_p2 <= "1" when (din_exp_reg_1261 = ap_const_lv11_7FF) else "0";
    index_fu_992_p3 <= (din_sign_reg_1255 & k_1_reg_1307);
    k_1_fu_482_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1274(0) = '1') else 
        k_fu_464_p4;
    k_fu_464_p4 <= grp_fu_348_p2(169 downto 167);
    lshr_ln506_fu_638_p2 <= std_logic_vector(shift_right(unsigned(Mx_reg_1324),to_integer(unsigned('0' & zext_ln506_fu_634_p1(31-1 downto 0)))));
    lshr_ln_fu_885_p4 <= mul_ln36_fu_320_p2(59 downto 31);
    mul_ln27_fu_336_p0 <= zext_ln25_1_fu_773_p1(49 - 1 downto 0);
    mul_ln27_fu_336_p1 <= zext_ln25_1_fu_773_p1(49 - 1 downto 0);
    mul_ln33_fu_340_p0 <= mul_ln33_fu_340_p00(56 - 1 downto 0);
    mul_ln33_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_reg_1374),108));
    mul_ln34_fu_328_p0 <= mul_ln34_fu_328_p00(49 - 1 downto 0);
    mul_ln34_fu_328_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_reg_1384),93));
    mul_ln35_fu_324_p0 <= mul_ln35_fu_324_p00(42 - 1 downto 0);
    mul_ln35_fu_324_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1415),75));
    mul_ln35_fu_324_p1 <= mul_ln35_fu_324_p10(33 - 1 downto 0);
    mul_ln35_fu_324_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K3_load_reg_1420),75));
    mul_ln36_fu_320_p0 <= mul_ln36_fu_320_p00(35 - 1 downto 0);
    mul_ln36_fu_320_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1425),60));
    mul_ln36_fu_320_p1 <= mul_ln36_fu_320_p10(25 - 1 downto 0);
    mul_ln36_fu_320_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fourth_order_double_sin_cos_K4_load_reg_1430),60));
    mul_ln37_fu_344_p1 <= mul_ln37_fu_344_p10(63 - 1 downto 0);
    mul_ln37_fu_344_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_1_fu_924_p3),126));
    or_ln271_fu_1228_p2 <= (icmp_ln282_reg_1354 or and_ln271_fu_1155_p2);
    ref_4oPi_table_256_address0 <= zext_ln397_fu_408_p1(4 - 1 downto 0);

    ref_4oPi_table_256_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            ref_4oPi_table_256_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_256_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_exp_1_fu_1187_p3 <= 
        ap_const_lv11_7FF when (icmp_ln282_reg_1354(0) = '1') else 
        results_exp_fu_978_p4;
    results_exp_2_fu_1202_p3 <= 
        select_ln259_fu_1169_p3 when (and_ln271_fu_1155_p2(0) = '1') else 
        results_exp_1_fu_1187_p3;
    results_exp_fu_978_p4 <= data_1_fu_966_p1(62 downto 52);
    results_sig_1_fu_1233_p3 <= 
        select_ln271_fu_1220_p3 when (or_ln271_fu_1228_p2(0) = '1') else 
        results_sig_fu_988_p1;
    results_sig_fu_988_p1 <= data_1_fu_966_p1(52 - 1 downto 0);
    results_sign_1_fu_1149_p2 <= (select_ln242_fu_1142_p3 or results_sign_fu_970_p3);
    results_sign_3_fu_1164_p2 <= (xor_ln278_fu_1159_p2 and din_sign_reg_1255);
    results_sign_4_fu_1181_p2 <= (xor_ln282_fu_1176_p2 and results_sign_1_fu_1149_p2);
    results_sign_5_fu_1194_p3 <= 
        results_sign_3_fu_1164_p2 when (and_ln271_fu_1155_p2(0) = '1') else 
        results_sign_4_fu_1181_p2;
    results_sign_fu_970_p3 <= data_1_fu_966_p1(63 downto 63);
    select_ln242_fu_1142_p3 <= 
        tmp_8_fu_998_p35 when (cos_basis_reg_1367(0) = '1') else 
        tmp_1_fu_1070_p35;
    select_ln259_fu_1169_p3 <= 
        ap_const_lv11_3FF when (do_cos(0) = '1') else 
        ap_const_lv11_0;
    select_ln271_fu_1220_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (xor_ln271_fu_1214_p2(0) = '1') else 
        ap_const_lv52_0;
    select_ln453_fu_571_p3 <= 
        Ex_fu_566_p2 when (closepath_reg_1274(0) = '1') else 
        ap_const_lv11_0;
    select_ln506_fu_629_p3 <= 
        sub_ln506_reg_1343 when (tmp_7_reg_1337(0) = '1') else 
        Ex_1_reg_1331;
        sext_ln252_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_2_fu_949_p3),12));

        sext_ln37_1_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_796_p4),64));

        sext_ln37_2_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_815_p4),64));

        sext_ln37_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_1_fu_779_p3),64));

        sext_ln75_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_542_p3),64));

    shl_ln398_fu_427_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_256_q0),to_integer(unsigned('0' & zext_ln398_fu_424_p1(31-1 downto 0)))));
    shl_ln504_fu_584_p2 <= std_logic_vector(shift_left(unsigned(Mx_bits_3_reg_1313),to_integer(unsigned('0' & zext_ln504_fu_581_p1(31-1 downto 0)))));
    shl_ln506_fu_643_p2 <= std_logic_vector(shift_left(unsigned(Mx_reg_1324),to_integer(unsigned('0' & zext_ln506_fu_634_p1(31-1 downto 0)))));
    sin_basis_fu_748_p3 <= 
        tmp_6_fu_655_p19 when (do_cos(0) = '1') else 
        xor_ln242_fu_694_p2;
    sub_ln252_fu_959_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sext_ln252_fu_955_p1));
    sub_ln506_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(Ex_1_fu_599_p2));
    t1_1_fu_779_p3 <= (fourth_order_double_sin_cos_K0_q0 & ap_const_lv4_0);
    t_2_fu_1241_p4 <= ((results_sign_5_fu_1194_p3 & results_exp_2_fu_1202_p3) & results_sig_1_fu_1233_p3);
    t_fu_524_p3 <= (tmp_2_fu_514_p4 & ap_const_lv1_1);
    tmp_12_fu_895_p4 <= mul_ln35_fu_324_p2(74 downto 38);
    tmp_1_fu_1070_p33 <= "X";
    tmp_2_fu_514_p4 <= Mx_bits_3_fu_506_p3(123 downto 63);
    
    tmp_3_fu_532_p4_proc : process(t_fu_524_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_3_fu_532_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := t_fu_524_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for tmp_3_fu_532_p4_i in 0 to 62-1 loop
                v0_cpy(tmp_3_fu_532_p4_i) := t_fu_524_p3(62-1-tmp_3_fu_532_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_3_fu_532_p4 <= resvalue(62-1 downto 0);
    end process;

    tmp_4_fu_542_p3 <= (ap_const_lv1_1 & tmp_3_fu_532_p4);
    
    tmp_5_fu_554_p3_proc : process(sext_ln75_fu_550_p1)
    begin
        tmp_5_fu_554_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln75_fu_550_p1(i) = '1' then
                tmp_5_fu_554_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_6_fu_655_p17 <= "X";
    tmp_8_fu_998_p33 <= "X";
    tmp_9_fu_708_p4 <= x_1_fu_648_p3(62 downto 56);
    tmp_fu_474_p3 <= grp_fu_348_p2(167 downto 167);
    tmp_s_fu_398_p4 <= addr_fu_390_p3(10 downto 7);
    trunc_ln1_fu_815_p4 <= mul_ln34_fu_328_p2(92 downto 45);
    trunc_ln398_fu_413_p1 <= addr_fu_390_p3(7 - 1 downto 0);
    trunc_ln_fu_796_p4 <= mul_ln33_fu_340_p2(107 downto 52);
    x_1_fu_648_p3 <= 
        lshr_ln506_fu_638_p2 when (tmp_7_reg_1337(0) = '1') else 
        shl_ln506_fu_643_p2;
    xor_ln242_fu_694_p2 <= (tmp_6_fu_655_p19 xor ap_const_lv1_1);
    xor_ln271_fu_1214_p2 <= (ap_const_lv1_1 xor and_ln271_1_fu_1210_p2);
    xor_ln278_fu_1159_p2 <= (do_cos xor ap_const_lv1_1);
    xor_ln282_fu_1176_p2 <= (icmp_ln282_reg_1354 xor ap_const_lv1_1);
    xor_ln451_fu_489_p2 <= (closepath_reg_1274 xor ap_const_lv1_1);
    zext_ln25_1_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_reg_1384),98));
    zext_ln25_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_fu_722_p4),98));
    zext_ln32_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(A_fu_756_p3),64));
    zext_ln37_2_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_895_p4),64));
    zext_ln37_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_885_p4),64));
    zext_ln397_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_398_p4),64));
    zext_ln398_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln398_reg_1286),256));
    zext_ln504_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1318),124));
    zext_ln505_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_reg_1318),11));
    zext_ln506_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln506_fu_629_p3),63));
end behav;
