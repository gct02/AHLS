// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft1D_512_loady8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_y_address0,
        a_y_ce0,
        a_y_we0,
        a_y_d0,
        a_y_address1,
        a_y_ce1,
        a_y_we1,
        a_y_d1,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1,
        offset
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_y_address0;
output   a_y_ce0;
output   a_y_we0;
output  [63:0] a_y_d0;
output  [2:0] a_y_address1;
output   a_y_ce1;
output   a_y_we1;
output  [63:0] a_y_d1;
output  [9:0] x_address0;
output   x_ce0;
input  [63:0] x_q0;
output  [9:0] x_address1;
output   x_ce1;
input  [63:0] x_q1;
input  [9:0] offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] a_y_address0;
reg a_y_ce0;
reg a_y_we0;
reg[2:0] a_y_address1;
reg a_y_ce1;
reg a_y_we1;
reg[9:0] x_address0;
reg x_ce0;
reg[9:0] x_address1;
reg x_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln104_fu_208_p1;
wire   [63:0] zext_ln105_fu_219_p1;
wire   [63:0] zext_ln106_fu_229_p1;
wire   [63:0] zext_ln107_fu_239_p1;
wire   [63:0] zext_ln108_fu_249_p1;
wire   [63:0] zext_ln109_fu_259_p1;
wire   [63:0] zext_ln110_fu_269_p1;
wire   [63:0] zext_ln111_fu_279_p1;
wire    ap_CS_fsm_state5;
wire   [9:0] add_ln105_fu_213_p2;
wire   [9:0] add_ln106_fu_224_p2;
wire   [9:0] add_ln107_fu_234_p2;
wire   [9:0] add_ln108_fu_244_p2;
wire   [9:0] add_ln109_fu_254_p2;
wire   [9:0] add_ln110_fu_264_p2;
wire   [9:0] add_ln111_fu_274_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_y_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_y_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_y_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_y_address0 = 64'd1;
    end else begin
        a_y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        a_y_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_y_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        a_y_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        a_y_address1 = 64'd0;
    end else begin
        a_y_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        a_y_ce0 = 1'b1;
    end else begin
        a_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        a_y_ce1 = 1'b1;
    end else begin
        a_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        a_y_we0 = 1'b1;
    end else begin
        a_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        a_y_we1 = 1'b1;
    end else begin
        a_y_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = zext_ln111_fu_279_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = zext_ln109_fu_259_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address0 = zext_ln107_fu_239_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = zext_ln105_fu_219_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address1 = zext_ln110_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address1 = zext_ln108_fu_249_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address1 = zext_ln106_fu_229_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address1 = zext_ln104_fu_208_p1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_y_d0 = x_q0;

assign a_y_d1 = x_q1;

assign add_ln105_fu_213_p2 = (offset + 10'd8);

assign add_ln106_fu_224_p2 = (offset + 10'd16);

assign add_ln107_fu_234_p2 = (offset + 10'd24);

assign add_ln108_fu_244_p2 = (offset + 10'd32);

assign add_ln109_fu_254_p2 = (offset + 10'd40);

assign add_ln110_fu_264_p2 = (offset + 10'd48);

assign add_ln111_fu_274_p2 = (offset + 10'd56);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign zext_ln104_fu_208_p1 = offset;

assign zext_ln105_fu_219_p1 = add_ln105_fu_213_p2;

assign zext_ln106_fu_229_p1 = add_ln106_fu_224_p2;

assign zext_ln107_fu_239_p1 = add_ln107_fu_234_p2;

assign zext_ln108_fu_249_p1 = add_ln108_fu_244_p2;

assign zext_ln109_fu_259_p1 = add_ln109_fu_254_p2;

assign zext_ln110_fu_269_p1 = add_ln110_fu_264_p2;

assign zext_ln111_fu_279_p1 = add_ln111_fu_274_p2;

endmodule //fft1D_512_loady8
