-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft1D_512_fft1D_512_Pipeline_twiddles is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_i : IN STD_LOGIC_VECTOR (63 downto 0);
    data_x_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    data_x_ce0 : OUT STD_LOGIC;
    data_x_we0 : OUT STD_LOGIC;
    data_x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_x_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    data_x_ce1 : OUT STD_LOGIC;
    data_x_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    data_y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    data_y_ce0 : OUT STD_LOGIC;
    data_y_we0 : OUT STD_LOGIC;
    data_y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_y_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    data_y_ce1 : OUT STD_LOGIC;
    data_y_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    twiddles8_reversed8_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    twiddles8_reversed8_ce0 : OUT STD_LOGIC;
    twiddles8_reversed8_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_2047_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2047_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2047_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2047_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2047_p_ce : OUT STD_LOGIC;
    grp_fu_2051_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2051_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2051_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_2051_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2051_p_ce : OUT STD_LOGIC;
    grp_fu_2105_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2105_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2105_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2105_p_ce : OUT STD_LOGIC;
    grp_fu_2110_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2110_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2110_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2110_p_ce : OUT STD_LOGIC;
    grp_fu_2117_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2117_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2117_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2117_p_ce : OUT STD_LOGIC;
    grp_fu_2122_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2122_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2122_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2122_p_ce : OUT STD_LOGIC;
    grp_fu_2127_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2127_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2127_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2127_p_ce : OUT STD_LOGIC;
    grp_fu_2132_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2132_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2132_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_2132_p_ce : OUT STD_LOGIC;
    grp_fu_6909_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_6909_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_6909_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_6909_p_ce : OUT STD_LOGIC;
    grp_fu_6913_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_6913_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_6913_p_ce : OUT STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6916_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_sin_or_cos_double_s_fu_6916_p_din2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_sin_or_cos_double_s_fu_6916_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_sin_or_cos_double_s_fu_6916_p_start : OUT STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6916_p_ready : IN STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6916_p_done : IN STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6916_p_idle : IN STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6927_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_sin_or_cos_double_s_fu_6927_p_din2 : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_sin_or_cos_double_s_fu_6927_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_sin_or_cos_double_s_fu_6927_p_start : OUT STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6927_p_ready : IN STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6927_p_done : IN STD_LOGIC;
    grp_sin_or_cos_double_s_fu_6927_p_idle : IN STD_LOGIC );
end;


architecture behav of fft1D_512_fft1D_512_Pipeline_twiddles is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_C01921FB54411744 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010000010001011101000100";
    constant ap_const_lv64_3F60000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111101100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln28_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_241 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_241_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_x_addr_reg_250 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_x_addr_reg_250_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal data_y_addr_reg_256_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_i_reg_267 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_reg_272 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_i_reg_277 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_reg_282 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_x_reg_288 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_y_reg_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul8_i_reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul11_i_reg_317 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul14_i_reg_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul17_i_reg_327 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_111_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_130_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_111_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_130_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln28_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_56 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln28_fu_218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft1D_512_sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_sitodp_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fft1D_512_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_111_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_111_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (icmp_ln28_reg_241_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_111_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_111_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_111_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_130_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_130_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (icmp_ln28_reg_241_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_sin_or_cos_double_s_fu_130_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_130_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_130_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln28_fu_205_p2 = ap_const_lv1_0))) then 
                    j_fu_56 <= add_ln28_fu_218_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_56 <= ap_const_lv4_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                conv_i_reg_267 <= grp_fu_6913_p_dout0;
                data_x_addr_reg_250_pp0_iter10_reg <= data_x_addr_reg_250_pp0_iter9_reg;
                data_x_addr_reg_250_pp0_iter11_reg <= data_x_addr_reg_250_pp0_iter10_reg;
                data_x_addr_reg_250_pp0_iter12_reg <= data_x_addr_reg_250_pp0_iter11_reg;
                data_x_addr_reg_250_pp0_iter13_reg <= data_x_addr_reg_250_pp0_iter12_reg;
                data_x_addr_reg_250_pp0_iter14_reg <= data_x_addr_reg_250_pp0_iter13_reg;
                data_x_addr_reg_250_pp0_iter15_reg <= data_x_addr_reg_250_pp0_iter14_reg;
                data_x_addr_reg_250_pp0_iter16_reg <= data_x_addr_reg_250_pp0_iter15_reg;
                data_x_addr_reg_250_pp0_iter17_reg <= data_x_addr_reg_250_pp0_iter16_reg;
                data_x_addr_reg_250_pp0_iter18_reg <= data_x_addr_reg_250_pp0_iter17_reg;
                data_x_addr_reg_250_pp0_iter19_reg <= data_x_addr_reg_250_pp0_iter18_reg;
                data_x_addr_reg_250_pp0_iter20_reg <= data_x_addr_reg_250_pp0_iter19_reg;
                data_x_addr_reg_250_pp0_iter21_reg <= data_x_addr_reg_250_pp0_iter20_reg;
                data_x_addr_reg_250_pp0_iter22_reg <= data_x_addr_reg_250_pp0_iter21_reg;
                data_x_addr_reg_250_pp0_iter23_reg <= data_x_addr_reg_250_pp0_iter22_reg;
                data_x_addr_reg_250_pp0_iter24_reg <= data_x_addr_reg_250_pp0_iter23_reg;
                data_x_addr_reg_250_pp0_iter25_reg <= data_x_addr_reg_250_pp0_iter24_reg;
                data_x_addr_reg_250_pp0_iter26_reg <= data_x_addr_reg_250_pp0_iter25_reg;
                data_x_addr_reg_250_pp0_iter27_reg <= data_x_addr_reg_250_pp0_iter26_reg;
                data_x_addr_reg_250_pp0_iter28_reg <= data_x_addr_reg_250_pp0_iter27_reg;
                data_x_addr_reg_250_pp0_iter29_reg <= data_x_addr_reg_250_pp0_iter28_reg;
                data_x_addr_reg_250_pp0_iter2_reg <= data_x_addr_reg_250_pp0_iter1_reg;
                data_x_addr_reg_250_pp0_iter30_reg <= data_x_addr_reg_250_pp0_iter29_reg;
                data_x_addr_reg_250_pp0_iter3_reg <= data_x_addr_reg_250_pp0_iter2_reg;
                data_x_addr_reg_250_pp0_iter4_reg <= data_x_addr_reg_250_pp0_iter3_reg;
                data_x_addr_reg_250_pp0_iter5_reg <= data_x_addr_reg_250_pp0_iter4_reg;
                data_x_addr_reg_250_pp0_iter6_reg <= data_x_addr_reg_250_pp0_iter5_reg;
                data_x_addr_reg_250_pp0_iter7_reg <= data_x_addr_reg_250_pp0_iter6_reg;
                data_x_addr_reg_250_pp0_iter8_reg <= data_x_addr_reg_250_pp0_iter7_reg;
                data_x_addr_reg_250_pp0_iter9_reg <= data_x_addr_reg_250_pp0_iter8_reg;
                data_y_addr_reg_256_pp0_iter10_reg <= data_y_addr_reg_256_pp0_iter9_reg;
                data_y_addr_reg_256_pp0_iter11_reg <= data_y_addr_reg_256_pp0_iter10_reg;
                data_y_addr_reg_256_pp0_iter12_reg <= data_y_addr_reg_256_pp0_iter11_reg;
                data_y_addr_reg_256_pp0_iter13_reg <= data_y_addr_reg_256_pp0_iter12_reg;
                data_y_addr_reg_256_pp0_iter14_reg <= data_y_addr_reg_256_pp0_iter13_reg;
                data_y_addr_reg_256_pp0_iter15_reg <= data_y_addr_reg_256_pp0_iter14_reg;
                data_y_addr_reg_256_pp0_iter16_reg <= data_y_addr_reg_256_pp0_iter15_reg;
                data_y_addr_reg_256_pp0_iter17_reg <= data_y_addr_reg_256_pp0_iter16_reg;
                data_y_addr_reg_256_pp0_iter18_reg <= data_y_addr_reg_256_pp0_iter17_reg;
                data_y_addr_reg_256_pp0_iter19_reg <= data_y_addr_reg_256_pp0_iter18_reg;
                data_y_addr_reg_256_pp0_iter20_reg <= data_y_addr_reg_256_pp0_iter19_reg;
                data_y_addr_reg_256_pp0_iter21_reg <= data_y_addr_reg_256_pp0_iter20_reg;
                data_y_addr_reg_256_pp0_iter22_reg <= data_y_addr_reg_256_pp0_iter21_reg;
                data_y_addr_reg_256_pp0_iter23_reg <= data_y_addr_reg_256_pp0_iter22_reg;
                data_y_addr_reg_256_pp0_iter24_reg <= data_y_addr_reg_256_pp0_iter23_reg;
                data_y_addr_reg_256_pp0_iter25_reg <= data_y_addr_reg_256_pp0_iter24_reg;
                data_y_addr_reg_256_pp0_iter26_reg <= data_y_addr_reg_256_pp0_iter25_reg;
                data_y_addr_reg_256_pp0_iter27_reg <= data_y_addr_reg_256_pp0_iter26_reg;
                data_y_addr_reg_256_pp0_iter28_reg <= data_y_addr_reg_256_pp0_iter27_reg;
                data_y_addr_reg_256_pp0_iter29_reg <= data_y_addr_reg_256_pp0_iter28_reg;
                data_y_addr_reg_256_pp0_iter2_reg <= data_y_addr_reg_256_pp0_iter1_reg;
                data_y_addr_reg_256_pp0_iter30_reg <= data_y_addr_reg_256_pp0_iter29_reg;
                data_y_addr_reg_256_pp0_iter3_reg <= data_y_addr_reg_256_pp0_iter2_reg;
                data_y_addr_reg_256_pp0_iter4_reg <= data_y_addr_reg_256_pp0_iter3_reg;
                data_y_addr_reg_256_pp0_iter5_reg <= data_y_addr_reg_256_pp0_iter4_reg;
                data_y_addr_reg_256_pp0_iter6_reg <= data_y_addr_reg_256_pp0_iter5_reg;
                data_y_addr_reg_256_pp0_iter7_reg <= data_y_addr_reg_256_pp0_iter6_reg;
                data_y_addr_reg_256_pp0_iter8_reg <= data_y_addr_reg_256_pp0_iter7_reg;
                data_y_addr_reg_256_pp0_iter9_reg <= data_y_addr_reg_256_pp0_iter8_reg;
                div_i_reg_277 <= grp_fu_2110_p_dout0;
                icmp_ln28_reg_241_pp0_iter10_reg <= icmp_ln28_reg_241_pp0_iter9_reg;
                icmp_ln28_reg_241_pp0_iter11_reg <= icmp_ln28_reg_241_pp0_iter10_reg;
                icmp_ln28_reg_241_pp0_iter12_reg <= icmp_ln28_reg_241_pp0_iter11_reg;
                icmp_ln28_reg_241_pp0_iter13_reg <= icmp_ln28_reg_241_pp0_iter12_reg;
                icmp_ln28_reg_241_pp0_iter2_reg <= icmp_ln28_reg_241_pp0_iter1_reg;
                icmp_ln28_reg_241_pp0_iter3_reg <= icmp_ln28_reg_241_pp0_iter2_reg;
                icmp_ln28_reg_241_pp0_iter4_reg <= icmp_ln28_reg_241_pp0_iter3_reg;
                icmp_ln28_reg_241_pp0_iter5_reg <= icmp_ln28_reg_241_pp0_iter4_reg;
                icmp_ln28_reg_241_pp0_iter6_reg <= icmp_ln28_reg_241_pp0_iter5_reg;
                icmp_ln28_reg_241_pp0_iter7_reg <= icmp_ln28_reg_241_pp0_iter6_reg;
                icmp_ln28_reg_241_pp0_iter8_reg <= icmp_ln28_reg_241_pp0_iter7_reg;
                icmp_ln28_reg_241_pp0_iter9_reg <= icmp_ln28_reg_241_pp0_iter8_reg;
                mul11_i_reg_317 <= grp_fu_2127_p_dout0;
                mul14_i_reg_322 <= grp_fu_2132_p_dout0;
                mul17_i_reg_327 <= grp_fu_6909_p_dout0;
                mul8_i_reg_312 <= grp_fu_2122_p_dout0;
                mul_i_reg_272 <= grp_fu_2105_p_dout0;
                phi_reg_282 <= grp_fu_2117_p_dout0;
                phi_x_reg_288 <= grp_sin_or_cos_double_s_fu_6916_p_dout0;
                phi_y_reg_294 <= grp_sin_or_cos_double_s_fu_6927_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                data_x_addr_reg_250 <= zext_ln28_fu_211_p1(3 - 1 downto 0);
                data_x_addr_reg_250_pp0_iter1_reg <= data_x_addr_reg_250;
                data_y_addr_reg_256 <= zext_ln28_fu_211_p1(3 - 1 downto 0);
                data_y_addr_reg_256_pp0_iter1_reg <= data_y_addr_reg_256;
                icmp_ln28_reg_241 <= icmp_ln28_fu_205_p2;
                icmp_ln28_reg_241_pp0_iter1_reg <= icmp_ln28_reg_241;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln28_fu_218_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_2) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln28_fu_205_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln28_fu_205_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter30_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter30_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_56, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_2 <= ap_const_lv4_1;
        else 
            ap_sig_allocacmp_j_2 <= j_fu_56;
        end if; 
    end process;

    data_x_address0 <= data_x_addr_reg_250_pp0_iter30_reg;
    data_x_address1 <= data_x_addr_reg_250_pp0_iter22_reg;

    data_x_ce0_assign_proc : process(ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            data_x_ce0 <= ap_const_logic_1;
        else 
            data_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_x_ce1_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_x_ce1 <= ap_const_logic_1;
        else 
            data_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_x_d0 <= grp_fu_2047_p_dout0;

    data_x_we0_assign_proc : process(ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            data_x_we0 <= ap_const_logic_1;
        else 
            data_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_y_address0 <= data_y_addr_reg_256_pp0_iter30_reg;
    data_y_address1 <= data_y_addr_reg_256_pp0_iter22_reg;

    data_y_ce0_assign_proc : process(ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            data_y_ce0 <= ap_const_logic_1;
        else 
            data_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_y_ce1_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_y_ce1 <= ap_const_logic_1;
        else 
            data_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_y_d0 <= grp_fu_2051_p_dout0;

    data_y_we0_assign_proc : process(ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            data_y_we0 <= ap_const_logic_1;
        else 
            data_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2047_p_ce <= ap_const_logic_1;
    grp_fu_2047_p_din0 <= mul8_i_reg_312;
    grp_fu_2047_p_din1 <= mul11_i_reg_317;
    grp_fu_2047_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_2051_p_ce <= ap_const_logic_1;
    grp_fu_2051_p_din0 <= mul14_i_reg_322;
    grp_fu_2051_p_din1 <= mul17_i_reg_327;
    grp_fu_2051_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_2105_p_ce <= ap_const_logic_1;
    grp_fu_2105_p_din0 <= conv_i_reg_267;
    grp_fu_2105_p_din1 <= ap_const_lv64_C01921FB54411744;
    grp_fu_2110_p_ce <= ap_const_logic_1;
    grp_fu_2110_p_din0 <= mul_i_reg_272;
    grp_fu_2110_p_din1 <= ap_const_lv64_3F60000000000000;
    grp_fu_2117_p_ce <= ap_const_logic_1;
    grp_fu_2117_p_din0 <= div_i_reg_277;
    grp_fu_2117_p_din1 <= conv2_i;
    grp_fu_2122_p_ce <= ap_const_logic_1;
    grp_fu_2122_p_din0 <= data_x_q1;
    grp_fu_2122_p_din1 <= phi_x_reg_288;
    grp_fu_2127_p_ce <= ap_const_logic_1;
    grp_fu_2127_p_din0 <= data_y_q1;
    grp_fu_2127_p_din1 <= phi_y_reg_294;
    grp_fu_2132_p_ce <= ap_const_logic_1;
    grp_fu_2132_p_din0 <= data_x_q1;
    grp_fu_2132_p_din1 <= phi_y_reg_294;
    grp_fu_6909_p_ce <= ap_const_logic_1;
    grp_fu_6909_p_din0 <= data_y_q1;
    grp_fu_6909_p_din1 <= phi_x_reg_288;
    grp_fu_6913_p_ce <= ap_const_logic_1;
    grp_fu_6913_p_din0 <= twiddles8_reversed8_q0;
    grp_sin_or_cos_double_s_fu_111_ap_ready <= grp_sin_or_cos_double_s_fu_6916_p_ready;
    grp_sin_or_cos_double_s_fu_130_ap_ready <= grp_sin_or_cos_double_s_fu_6927_p_ready;
    grp_sin_or_cos_double_s_fu_6916_p_din1 <= phi_reg_282;
    grp_sin_or_cos_double_s_fu_6916_p_din2 <= ap_const_lv1_1;
    grp_sin_or_cos_double_s_fu_6916_p_start <= grp_sin_or_cos_double_s_fu_111_ap_start_reg;
    grp_sin_or_cos_double_s_fu_6927_p_din1 <= phi_reg_282;
    grp_sin_or_cos_double_s_fu_6927_p_din2 <= ap_const_lv1_0;
    grp_sin_or_cos_double_s_fu_6927_p_start <= grp_sin_or_cos_double_s_fu_130_ap_start_reg;
    icmp_ln28_fu_205_p2 <= "1" when (ap_sig_allocacmp_j_2 = ap_const_lv4_8) else "0";
    twiddles8_reversed8_address0 <= zext_ln28_fu_211_p1(3 - 1 downto 0);

    twiddles8_reversed8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            twiddles8_reversed8_ce0 <= ap_const_logic_1;
        else 
            twiddles8_reversed8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln28_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_2),64));
end behav;
