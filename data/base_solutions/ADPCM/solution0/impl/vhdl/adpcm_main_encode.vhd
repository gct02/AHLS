-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xin1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin2 : IN STD_LOGIC_VECTOR (31 downto 0);
    tqmf_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce0 : OUT STD_LOGIC;
    tqmf_we0 : OUT STD_LOGIC;
    tqmf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tqmf_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce1 : OUT STD_LOGIC;
    tqmf_we1 : OUT STD_LOGIC;
    tqmf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce0 : OUT STD_LOGIC;
    h_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    h_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce1 : OUT STD_LOGIC;
    h_q1 : IN STD_LOGIC_VECTOR (14 downto 0);
    delay_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bpl_ce0 : OUT STD_LOGIC;
    delay_bpl_we0 : OUT STD_LOGIC;
    delay_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce0 : OUT STD_LOGIC;
    delay_dltx_we0 : OUT STD_LOGIC;
    delay_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce1 : OUT STD_LOGIC;
    delay_dltx_we1 : OUT STD_LOGIC;
    delay_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rlt1_o_ap_vld : OUT STD_LOGIC;
    al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    al1_o_ap_vld : OUT STD_LOGIC;
    rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rlt2_o_ap_vld : OUT STD_LOGIC;
    al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    al2_o_ap_vld : OUT STD_LOGIC;
    detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    detl_o_ap_vld : OUT STD_LOGIC;
    il : OUT STD_LOGIC_VECTOR (5 downto 0);
    il_ap_vld : OUT STD_LOGIC;
    qq4_code4_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qq4_code4_table_ce0 : OUT STD_LOGIC;
    qq4_code4_table_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    nbl_o_ap_vld : OUT STD_LOGIC;
    plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt1_o_ap_vld : OUT STD_LOGIC;
    plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt2_o_ap_vld : OUT STD_LOGIC;
    delay_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bph_ce0 : OUT STD_LOGIC;
    delay_bph_we0 : OUT STD_LOGIC;
    delay_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce0 : OUT STD_LOGIC;
    delay_dhx_we0 : OUT STD_LOGIC;
    delay_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dhx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    delay_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce1 : OUT STD_LOGIC;
    delay_dhx_we1 : OUT STD_LOGIC;
    delay_dhx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dhx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rh1_o_ap_vld : OUT STD_LOGIC;
    ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    ah1_o_ap_vld : OUT STD_LOGIC;
    rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rh2_o_ap_vld : OUT STD_LOGIC;
    ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    ah2_o_ap_vld : OUT STD_LOGIC;
    deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
    deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    deth_o_ap_vld : OUT STD_LOGIC;
    nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
    nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    nbh_o_ap_vld : OUT STD_LOGIC;
    ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph1_o_ap_vld : OUT STD_LOGIC;
    ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph2_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_filtep_fu_650_p_din1 : OUT STD_LOGIC_VECTOR (30 downto 0);
    grp_filtep_fu_650_p_din2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_filtep_fu_650_p_din3 : OUT STD_LOGIC_VECTOR (30 downto 0);
    grp_filtep_fu_650_p_din4 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_filtep_fu_650_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_filtep_fu_650_p_ready : IN STD_LOGIC;
    grp_logscl_fu_657_p_din1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    grp_logscl_fu_657_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_logscl_fu_657_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    grp_logscl_fu_657_p_start : OUT STD_LOGIC;
    grp_logscl_fu_657_p_ready : IN STD_LOGIC;
    grp_logscl_fu_657_p_done : IN STD_LOGIC;
    grp_logscl_fu_657_p_idle : IN STD_LOGIC;
    grp_scalel_fu_663_p_din1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_scalel_fu_663_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_scalel_fu_663_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    grp_scalel_fu_663_p_start : OUT STD_LOGIC;
    grp_scalel_fu_663_p_ready : IN STD_LOGIC;
    grp_scalel_fu_663_p_done : IN STD_LOGIC;
    grp_scalel_fu_663_p_idle : IN STD_LOGIC;
    grp_uppol1_fu_669_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_uppol1_fu_669_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_uppol1_fu_669_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol1_fu_669_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol1_fu_669_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_uppol1_fu_669_p_start : OUT STD_LOGIC;
    grp_uppol1_fu_669_p_ready : IN STD_LOGIC;
    grp_uppol1_fu_669_p_done : IN STD_LOGIC;
    grp_uppol1_fu_669_p_idle : IN STD_LOGIC;
    grp_uppol2_fu_676_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_uppol2_fu_676_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_uppol2_fu_676_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol2_fu_676_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol2_fu_676_p_din5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol2_fu_676_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    grp_uppol2_fu_676_p_start : OUT STD_LOGIC;
    grp_uppol2_fu_676_p_ready : IN STD_LOGIC;
    grp_uppol2_fu_676_p_done : IN STD_LOGIC;
    grp_uppol2_fu_676_p_idle : IN STD_LOGIC;
    tmp_s_logsch_fu_684_p_din1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    tmp_s_logsch_fu_684_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    tmp_s_logsch_fu_684_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    tmp_s_logsch_fu_684_p_ready : IN STD_LOGIC );
end;


architecture behav of adpcm_main_encode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv39_7FFFFFFFD4 : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111010100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv25_234 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000110100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv14_2310 : STD_LOGIC_VECTOR (13 downto 0) := "10001100010000";
    constant ap_const_lv14_39B0 : STD_LOGIC_VECTOR (13 downto 0) := "11100110110000";
    constant ap_const_lv14_1CF0 : STD_LOGIC_VECTOR (13 downto 0) := "01110011110000";
    constant ap_const_lv14_650 : STD_LOGIC_VECTOR (13 downto 0) := "00011001010000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_filtez_fu_318_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln255_fu_634_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln255_reg_1239 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln255_1_fu_638_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln255_1_reg_1244 : STD_LOGIC_VECTOR (46 downto 0);
    signal tqmf_load_2_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_load_3_reg_1254 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln269_fu_660_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln269_reg_1263 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln8_reg_1273 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln9_reg_1278 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_318_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln285_fu_809_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln285_reg_1294 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln285_fu_813_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln285_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_quantl_fu_336_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_1313 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_7_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln304_fu_871_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln304_reg_1329 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln314_fu_939_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln314_reg_1337 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln_fu_958_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_1344 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln1_fu_1009_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1_reg_1350 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln290_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal plt1_load_reg_1365 : STD_LOGIC_VECTOR (31 downto 0);
    signal plt2_load_reg_1371 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln315_1_fu_1073_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln315_1_reg_1376 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1381 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln317_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln317_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ph1_load_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ph2_load_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1403 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_5_reg_1408 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_uppol2_fu_388_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_11_reg_1413 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_filtez_fu_318_ap_start : STD_LOGIC;
    signal grp_filtez_fu_318_ap_idle : STD_LOGIC;
    signal grp_filtez_fu_318_ap_ready : STD_LOGIC;
    signal grp_filtez_fu_318_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filtez_fu_318_bpl_ce0 : STD_LOGIC;
    signal grp_filtez_fu_318_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_318_dlt_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filtez_fu_318_dlt_ce0 : STD_LOGIC;
    signal grp_filtez_fu_318_dlt_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_filtep_fu_328_rlt1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_filtep_fu_328_al1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_filtep_fu_328_rlt2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_filtep_fu_328_al2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_quantl_fu_336_ap_start : STD_LOGIC;
    signal grp_quantl_fu_336_ap_done : STD_LOGIC;
    signal grp_quantl_fu_336_ap_idle : STD_LOGIC;
    signal grp_quantl_fu_336_ap_ready : STD_LOGIC;
    signal tmp_9_abs_r_fu_348_ap_ready : STD_LOGIC;
    signal tmp_9_abs_r_fu_348_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_logscl_fu_353_ap_ready : STD_LOGIC;
    signal grp_upzero_fu_361_ap_start : STD_LOGIC;
    signal grp_upzero_fu_361_ap_done : STD_LOGIC;
    signal grp_upzero_fu_361_ap_idle : STD_LOGIC;
    signal grp_upzero_fu_361_ap_ready : STD_LOGIC;
    signal grp_upzero_fu_361_dlti_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_361_dlti_ce0 : STD_LOGIC;
    signal grp_upzero_fu_361_dlti_we0 : STD_LOGIC;
    signal grp_upzero_fu_361_dlti_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_361_dlti_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_361_dlti_ce1 : STD_LOGIC;
    signal grp_upzero_fu_361_dlti_we1 : STD_LOGIC;
    signal grp_upzero_fu_361_dlti_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_361_bli_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_361_bli_ce0 : STD_LOGIC;
    signal grp_upzero_fu_361_bli_we0 : STD_LOGIC;
    signal grp_upzero_fu_361_bli_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_370_ap_start : STD_LOGIC;
    signal grp_upzero_fu_370_ap_done : STD_LOGIC;
    signal grp_upzero_fu_370_ap_idle : STD_LOGIC;
    signal grp_upzero_fu_370_ap_ready : STD_LOGIC;
    signal grp_upzero_fu_370_dlti_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_370_dlti_ce0 : STD_LOGIC;
    signal grp_upzero_fu_370_dlti_we0 : STD_LOGIC;
    signal grp_upzero_fu_370_dlti_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_370_dlti_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_370_dlti_ce1 : STD_LOGIC;
    signal grp_upzero_fu_370_dlti_we1 : STD_LOGIC;
    signal grp_upzero_fu_370_dlti_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_370_bli_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_370_bli_ce0 : STD_LOGIC;
    signal grp_upzero_fu_370_bli_we0 : STD_LOGIC;
    signal grp_upzero_fu_370_bli_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uppol2_fu_379_ap_ready : STD_LOGIC;
    signal grp_uppol2_fu_388_ap_start : STD_LOGIC;
    signal grp_uppol2_fu_388_ap_done : STD_LOGIC;
    signal grp_uppol2_fu_388_ap_idle : STD_LOGIC;
    signal grp_uppol2_fu_388_ap_ready : STD_LOGIC;
    signal grp_scalel_fu_403_ap_ready : STD_LOGIC;
    signal grp_scalel_fu_403_nbl : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_scalel_fu_403_shift_constant : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_uppol1_fu_414_ap_ready : STD_LOGIC;
    signal grp_uppol1_fu_422_ap_start : STD_LOGIC;
    signal grp_uppol1_fu_422_ap_done : STD_LOGIC;
    signal grp_uppol1_fu_422_ap_idle : STD_LOGIC;
    signal grp_uppol1_fu_422_ap_ready : STD_LOGIC;
    signal grp_uppol1_fu_422_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_filtez_fu_318_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln269_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_quantl_fu_336_ap_start_reg : STD_LOGIC := '0';
    signal sub_ln304_fu_875_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_logscl_fu_353_ap_start_reg : STD_LOGIC := '0';
    signal grp_upzero_fu_361_ap_start_reg : STD_LOGIC := '0';
    signal grp_upzero_fu_370_ap_start_reg : STD_LOGIC := '0';
    signal grp_uppol2_fu_379_ap_start_reg : STD_LOGIC := '0';
    signal grp_uppol2_fu_388_ap_start_reg : STD_LOGIC := '0';
    signal grp_scalel_fu_403_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_uppol1_fu_414_ap_start_reg : STD_LOGIC := '0';
    signal grp_uppol1_fu_422_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln243_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln255_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln257_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln243_1_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln243_2_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln287_1_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln294_fu_972_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state14_on_subcall_done : BOOLEAN;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal add_ln321_fu_1023_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal idx_fu_196 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln243_fu_540_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_200 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_11_fu_531_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xa_1_fu_204 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xa_3_fu_598_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln244_fu_499_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xb_1_fu_208 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xb_3_fu_618_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln244_1_fu_508_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal idx17_fu_212 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln269_fu_675_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_6_fu_216 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_13_fu_651_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_438_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln251_fu_503_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln263_fu_691_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_438_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_469_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln250_1_fu_481_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln250_fu_477_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln250_1_fu_489_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal xa_fu_493_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln257_fu_552_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln257_fu_430_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln257_2_fu_594_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln258_fu_434_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln258_2_fu_614_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal add_ln243_1_fu_664_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_699_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln263_1_fu_710_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln263_2_fu_706_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln263_3_fu_717_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln263_fu_721_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln263_1_fu_695_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln262_fu_727_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal xb_4_fu_736_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xa_4_fu_731_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln278_fu_741_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sub_ln279_fu_757_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln243_2_fu_799_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_856_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_fu_881_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln310_fu_905_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln310_fu_905_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln310_fu_905_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal decis_fu_911_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln310_2_fu_921_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln311_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_931_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln305_fu_889_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln287_fu_952_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln287_fu_952_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln288_fu_968_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_986_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln314_fu_1003_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln314_fu_1003_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln315_fu_1019_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln287_1_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln314_1_fu_1070_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal mul_ln287_fu_952_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln310_fu_905_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln314_fu_1003_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_filtez IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bpl_ce0 : OUT STD_LOGIC;
        bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dlt_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlt_ce0 : OUT STD_LOGIC;
        dlt_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_filtep IS
    port (
        ap_ready : OUT STD_LOGIC;
        rlt1 : IN STD_LOGIC_VECTOR (30 downto 0);
        al1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rlt2 : IN STD_LOGIC_VECTOR (30 downto 0);
        al2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_quantl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        el : IN STD_LOGIC_VECTOR (31 downto 0);
        detl : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component adpcm_main_abs_r IS
    port (
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_logscl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        il : IN STD_LOGIC_VECTOR (5 downto 0);
        nbl : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_upzero IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dlt : IN STD_LOGIC_VECTOR (15 downto 0);
        dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce0 : OUT STD_LOGIC;
        dlti_we0 : OUT STD_LOGIC;
        dlti_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dlti_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce1 : OUT STD_LOGIC;
        dlti_we1 : OUT STD_LOGIC;
        dlti_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dlti_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bli_ce0 : OUT STD_LOGIC;
        bli_we0 : OUT STD_LOGIC;
        bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_uppol2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        al1 : IN STD_LOGIC_VECTOR (15 downto 0);
        al2 : IN STD_LOGIC_VECTOR (14 downto 0);
        plt : IN STD_LOGIC_VECTOR (31 downto 0);
        plt1 : IN STD_LOGIC_VECTOR (31 downto 0);
        plt2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_logsch IS
    port (
        ap_ready : OUT STD_LOGIC;
        ih : IN STD_LOGIC_VECTOR (1 downto 0);
        nbh : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_scalel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nbl : IN STD_LOGIC_VECTOR (14 downto 0);
        shift_constant : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_uppol1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        al1 : IN STD_LOGIC_VECTOR (15 downto 0);
        apl2 : IN STD_LOGIC_VECTOR (14 downto 0);
        plt : IN STD_LOGIC_VECTOR (31 downto 0);
        plt1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component adpcm_main_mul_15s_32s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component adpcm_main_mul_32s_7s_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component adpcm_main_mul_15ns_11ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component adpcm_main_mul_16s_15ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component adpcm_main_mux_4_2_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component adpcm_main_mul_14s_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    grp_filtez_fu_318 : component adpcm_main_filtez
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_filtez_fu_318_ap_start,
        ap_done => grp_filtez_fu_318_ap_done,
        ap_idle => grp_filtez_fu_318_ap_idle,
        ap_ready => grp_filtez_fu_318_ap_ready,
        bpl_address0 => grp_filtez_fu_318_bpl_address0,
        bpl_ce0 => grp_filtez_fu_318_bpl_ce0,
        bpl_q0 => grp_filtez_fu_318_bpl_q0,
        dlt_address0 => grp_filtez_fu_318_dlt_address0,
        dlt_ce0 => grp_filtez_fu_318_dlt_ce0,
        dlt_q0 => grp_filtez_fu_318_dlt_q0,
        ap_return => grp_filtez_fu_318_ap_return);

    grp_quantl_fu_336 : component adpcm_main_quantl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_quantl_fu_336_ap_start,
        ap_done => grp_quantl_fu_336_ap_done,
        ap_idle => grp_quantl_fu_336_ap_idle,
        ap_ready => grp_quantl_fu_336_ap_ready,
        el => sub_ln285_reg_1299,
        detl => detl_i,
        ap_return => grp_quantl_fu_336_ap_return);

    tmp_9_abs_r_fu_348 : component adpcm_main_abs_r
    port map (
        ap_ready => tmp_9_abs_r_fu_348_ap_ready,
        n => sub_ln304_fu_875_p2,
        ap_return => tmp_9_abs_r_fu_348_ap_return);

    grp_upzero_fu_361 : component adpcm_main_upzero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_upzero_fu_361_ap_start,
        ap_done => grp_upzero_fu_361_ap_done,
        ap_idle => grp_upzero_fu_361_ap_idle,
        ap_ready => grp_upzero_fu_361_ap_ready,
        dlt => trunc_ln_reg_1344,
        dlti_address0 => grp_upzero_fu_361_dlti_address0,
        dlti_ce0 => grp_upzero_fu_361_dlti_ce0,
        dlti_we0 => grp_upzero_fu_361_dlti_we0,
        dlti_d0 => grp_upzero_fu_361_dlti_d0,
        dlti_q0 => delay_dltx_q0,
        dlti_address1 => grp_upzero_fu_361_dlti_address1,
        dlti_ce1 => grp_upzero_fu_361_dlti_ce1,
        dlti_we1 => grp_upzero_fu_361_dlti_we1,
        dlti_d1 => grp_upzero_fu_361_dlti_d1,
        dlti_q1 => delay_dltx_q1,
        bli_address0 => grp_upzero_fu_361_bli_address0,
        bli_ce0 => grp_upzero_fu_361_bli_ce0,
        bli_we0 => grp_upzero_fu_361_bli_we0,
        bli_d0 => grp_upzero_fu_361_bli_d0,
        bli_q0 => delay_bpl_q0);

    grp_upzero_fu_370 : component adpcm_main_upzero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_upzero_fu_370_ap_start,
        ap_done => grp_upzero_fu_370_ap_done,
        ap_idle => grp_upzero_fu_370_ap_idle,
        ap_ready => grp_upzero_fu_370_ap_ready,
        dlt => sext_ln315_1_reg_1376,
        dlti_address0 => grp_upzero_fu_370_dlti_address0,
        dlti_ce0 => grp_upzero_fu_370_dlti_ce0,
        dlti_we0 => grp_upzero_fu_370_dlti_we0,
        dlti_d0 => grp_upzero_fu_370_dlti_d0,
        dlti_q0 => delay_dhx_q0,
        dlti_address1 => grp_upzero_fu_370_dlti_address1,
        dlti_ce1 => grp_upzero_fu_370_dlti_ce1,
        dlti_we1 => grp_upzero_fu_370_dlti_we1,
        dlti_d1 => grp_upzero_fu_370_dlti_d1,
        dlti_q1 => delay_dhx_q1,
        bli_address0 => grp_upzero_fu_370_bli_address0,
        bli_ce0 => grp_upzero_fu_370_bli_ce0,
        bli_we0 => grp_upzero_fu_370_bli_we0,
        bli_d0 => grp_upzero_fu_370_bli_d0,
        bli_q0 => delay_bph_q0);

    grp_uppol2_fu_388 : component adpcm_main_uppol2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_uppol2_fu_388_ap_start,
        ap_done => grp_uppol2_fu_388_ap_done,
        ap_idle => grp_uppol2_fu_388_ap_idle,
        ap_ready => grp_uppol2_fu_388_ap_ready,
        al1 => ah1_i,
        al2 => ah2_i,
        plt => add_ln317_reg_1386,
        plt1 => ph1_load_reg_1392,
        plt2 => ph2_load_reg_1398,
        ap_return => grp_uppol2_fu_388_ap_return);

    grp_uppol1_fu_422 : component adpcm_main_uppol1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_uppol1_fu_422_ap_start,
        ap_done => grp_uppol1_fu_422_ap_done,
        ap_idle => grp_uppol1_fu_422_ap_idle,
        ap_ready => grp_uppol1_fu_422_ap_ready,
        al1 => ah1_i,
        apl2 => tmp_11_reg_1413,
        plt => add_ln317_reg_1386,
        plt1 => ph1_load_reg_1392,
        ap_return => grp_uppol1_fu_422_ap_return);

    mul_15s_32s_47_1_1_U92 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => h_q1,
        din1 => tqmf_q1,
        dout => mul_ln257_fu_430_p2);

    mul_15s_32s_47_1_1_U93 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => h_q0,
        din1 => tqmf_q0,
        dout => mul_ln258_fu_434_p2);

    mul_32s_7s_39_1_1_U94 : component adpcm_main_mul_32s_7s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 39)
    port map (
        din0 => grp_fu_438_p0,
        din1 => grp_fu_438_p1,
        dout => grp_fu_438_p2);

    mul_15ns_11ns_25_1_1_U95 : component adpcm_main_mul_15ns_11ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 11,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln310_fu_905_p0,
        din1 => mul_ln310_fu_905_p1,
        dout => mul_ln310_fu_905_p2);

    mul_16s_15ns_31_1_1_U96 : component adpcm_main_mul_16s_15ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => qq4_code4_table_q0,
        din1 => mul_ln287_fu_952_p1,
        dout => mul_ln287_fu_952_p2);

    mux_4_2_14_1_1_U97 : component adpcm_main_mux_4_2_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 2,
        dout_WIDTH => 14)
    port map (
        din0 => ap_const_lv14_2310,
        din1 => ap_const_lv14_39B0,
        din2 => ap_const_lv14_1CF0,
        din3 => ap_const_lv14_650,
        din4 => add_ln314_reg_1337,
        dout => tmp_13_fu_986_p6);

    mul_14s_15ns_29_1_1_U98 : component adpcm_main_mul_14s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_13_fu_986_p6,
        din1 => mul_ln314_fu_1003_p1,
        dout => mul_ln314_fu_1003_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_filtez_fu_318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_filtez_fu_318_ap_start_reg <= ap_const_logic_0;
            else
                if ((((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_filtez_fu_318_ap_done = ap_const_logic_1)))) then 
                    grp_filtez_fu_318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filtez_fu_318_ap_ready = ap_const_logic_1)) then 
                    grp_filtez_fu_318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_logscl_fu_353_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_logscl_fu_353_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_logscl_fu_353_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_logscl_fu_353_ap_ready = ap_const_logic_1)) then 
                    grp_logscl_fu_353_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_quantl_fu_336_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_quantl_fu_336_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_filtez_fu_318_ap_done = ap_const_logic_1))) then 
                    grp_quantl_fu_336_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_quantl_fu_336_ap_ready = ap_const_logic_1)) then 
                    grp_quantl_fu_336_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_scalel_fu_403_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scalel_fu_403_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_scalel_fu_403_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scalel_fu_403_ap_ready = ap_const_logic_1)) then 
                    grp_scalel_fu_403_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uppol1_fu_414_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_uppol1_fu_414_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_uppol1_fu_414_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uppol1_fu_414_ap_ready = ap_const_logic_1)) then 
                    grp_uppol1_fu_414_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uppol1_fu_422_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_uppol1_fu_422_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_uppol1_fu_422_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uppol1_fu_422_ap_ready = ap_const_logic_1)) then 
                    grp_uppol1_fu_422_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uppol2_fu_379_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_uppol2_fu_379_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_uppol2_fu_379_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uppol2_fu_379_ap_ready = ap_const_logic_1)) then 
                    grp_uppol2_fu_379_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uppol2_fu_388_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_uppol2_fu_388_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_uppol2_fu_388_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uppol2_fu_388_ap_ready = ap_const_logic_1)) then 
                    grp_uppol2_fu_388_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_upzero_fu_361_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_upzero_fu_361_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_upzero_fu_361_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_upzero_fu_361_ap_ready = ap_const_logic_1)) then 
                    grp_upzero_fu_361_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_upzero_fu_370_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_upzero_fu_370_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_upzero_fu_370_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_upzero_fu_370_ap_ready = ap_const_logic_1)) then 
                    grp_upzero_fu_370_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_6_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_6_fu_216 <= ap_const_lv5_0;
            elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_6_fu_216 <= i_13_fu_651_p2;
            end if; 
        end if;
    end process;

    i_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_200 <= ap_const_lv4_0;
            elsif (((icmp_ln255_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_200 <= i_11_fu_531_p2;
            end if; 
        end if;
    end process;

    idx17_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx17_fu_212 <= ap_const_lv6_0;
            elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                idx17_fu_212 <= add_ln269_fu_675_p2;
            end if; 
        end if;
    end process;

    idx_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_fu_196 <= ap_const_lv5_0;
            elsif (((icmp_ln255_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_fu_196 <= add_ln243_fu_540_p2;
            end if; 
        end if;
    end process;

    xa_1_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                xa_1_fu_204 <= sext_ln244_fu_499_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                xa_1_fu_204 <= xa_3_fu_598_p2;
            end if; 
        end if;
    end process;

    xb_1_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                xb_1_fu_208 <= sext_ln244_1_fu_508_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                xb_1_fu_208 <= xb_3_fu_618_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln290_reg_1359 <= add_ln290_fu_1042_p2;
                add_ln317_reg_1386 <= add_ln317_fu_1088_p2;
                ph1_load_reg_1392 <= ph1_i;
                ph2_load_reg_1398 <= ph2_i;
                plt1_load_reg_1365 <= plt1_i;
                plt2_load_reg_1371 <= plt2_i;
                sext_ln315_1_reg_1376 <= sext_ln315_1_fu_1073_p1;
                tmp_s_reg_1381 <= tmp_s_logsch_fu_684_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln314_reg_1337 <= add_ln314_fu_939_p2;
                tmp_2_reg_1313 <= grp_quantl_fu_336_ap_return;
                tmp_7_reg_1324 <= grp_filtez_fu_318_ap_return;
                trunc_ln304_reg_1329 <= trunc_ln304_fu_871_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_filtez_fu_318_ap_done = ap_const_logic_1)))) then
                reg_449 <= grp_filtep_fu_650_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                sub_ln285_reg_1299 <= sub_ln285_fu_813_p2;
                tmp_reg_1289 <= grp_filtez_fu_318_ap_return;
                trunc_ln285_reg_1294 <= trunc_ln285_fu_809_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_11_reg_1413 <= grp_uppol2_fu_388_ap_return;
                tmp_3_reg_1403 <= grp_logscl_fu_657_p_dout0;
                tmp_5_reg_1408 <= grp_uppol2_fu_676_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tqmf_load_2_reg_1249 <= tqmf_q1;
                tqmf_load_3_reg_1254 <= tqmf_q0;
                trunc_ln255_1_reg_1244 <= trunc_ln255_1_fu_638_p1;
                trunc_ln255_reg_1239 <= trunc_ln255_fu_634_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln1_reg_1350 <= mul_ln314_fu_1003_p2(28 downto 15);
                trunc_ln_reg_1344 <= mul_ln287_fu_952_p2(30 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln269_reg_1263 <= trunc_ln269_fu_660_p1;
                trunc_ln8_reg_1273 <= add_ln278_fu_741_p2(46 downto 15);
                trunc_ln9_reg_1278 <= sub_ln279_fu_757_p2(46 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state8, grp_filtez_fu_318_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, icmp_ln269_fu_645_p2, ap_CS_fsm_state14, icmp_ln255_fu_525_p2, ap_block_state14_on_subcall_done, ap_block_state12_on_subcall_done, ap_block_state9_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_filtez_fu_318_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln243_1_fu_664_p2 <= std_logic_vector(unsigned(trunc_ln269_fu_660_p1) + unsigned(ap_const_lv5_15));
    add_ln243_2_fu_799_p2 <= std_logic_vector(unsigned(trunc_ln269_reg_1263) + unsigned(ap_const_lv5_17));
    add_ln243_fu_540_p2 <= std_logic_vector(unsigned(idx_fu_196) + unsigned(ap_const_lv5_2));
    add_ln257_fu_552_p2 <= std_logic_vector(unsigned(idx_fu_196) + unsigned(ap_const_lv5_3));
    add_ln269_fu_675_p2 <= std_logic_vector(unsigned(idx17_fu_212) + unsigned(ap_const_lv6_3F));
    add_ln278_fu_741_p2 <= std_logic_vector(unsigned(xb_4_fu_736_p2) + unsigned(xa_4_fu_731_p2));
    add_ln290_fu_1042_p2 <= std_logic_vector(signed(sext_ln287_1_fu_1034_p1) + signed(tmp_reg_1289));
    add_ln294_fu_972_p2 <= std_logic_vector(signed(sext_ln288_fu_968_p1) + signed(trunc_ln285_reg_1294));
    add_ln314_fu_939_p2 <= std_logic_vector(unsigned(select_ln311_fu_931_p3) + unsigned(select_ln305_fu_889_p3));
    add_ln317_fu_1088_p2 <= std_logic_vector(signed(sext_ln314_1_fu_1070_p1) + signed(tmp_7_reg_1324));
    add_ln321_fu_1023_p2 <= std_logic_vector(signed(sext_ln315_fu_1019_p1) + signed(trunc_ln304_reg_1329));

    ah1_o_assign_proc : process(ah1_i, grp_uppol1_fu_422_ap_return, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ah1_o <= grp_uppol1_fu_422_ap_return;
        else 
            ah1_o <= ah1_i;
        end if; 
    end process;


    ah1_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ah1_o_ap_vld <= ap_const_logic_1;
        else 
            ah1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ah2_o_assign_proc : process(ah2_i, ap_CS_fsm_state12, grp_uppol2_fu_388_ap_return)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ah2_o <= grp_uppol2_fu_388_ap_return;
        else 
            ah2_o <= ah2_i;
        end if; 
    end process;


    ah2_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ah2_o_ap_vld <= ap_const_logic_1;
        else 
            ah2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    al1_o_assign_proc : process(al1_i, ap_CS_fsm_state14, grp_uppol1_fu_669_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            al1_o <= grp_uppol1_fu_669_p_dout0;
        else 
            al1_o <= al1_i;
        end if; 
    end process;


    al1_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            al1_o_ap_vld <= ap_const_logic_1;
        else 
            al1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    al2_o_assign_proc : process(al2_i, ap_CS_fsm_state12, grp_uppol2_fu_676_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            al2_o <= grp_uppol2_fu_676_p_dout0;
        else 
            al2_o <= al2_i;
        end if; 
    end process;


    al2_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            al2_o_ap_vld <= ap_const_logic_1;
        else 
            al2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(ap_block_state12_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state12_on_subcall_done)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(ap_block_state14_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state14_on_subcall_done)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_filtez_fu_318_ap_done)
    begin
        if ((grp_filtez_fu_318_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(ap_block_state9_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state9_on_subcall_done)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(grp_upzero_fu_361_ap_done, grp_upzero_fu_370_ap_done, grp_uppol2_fu_388_ap_done, grp_logscl_fu_657_p_done, grp_scalel_fu_663_p_done, grp_uppol2_fu_676_p_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_scalel_fu_663_p_done = ap_const_logic_0) or (grp_uppol2_fu_388_ap_done = ap_const_logic_0) or (grp_uppol2_fu_676_p_done = ap_const_logic_0) or (grp_upzero_fu_370_ap_done = ap_const_logic_0) or (grp_upzero_fu_361_ap_done = ap_const_logic_0) or (grp_logscl_fu_657_p_done = ap_const_logic_0));
    end process;


    ap_block_state14_on_subcall_done_assign_proc : process(grp_uppol1_fu_422_ap_done, grp_scalel_fu_663_p_done, grp_uppol1_fu_669_p_done)
    begin
                ap_block_state14_on_subcall_done <= ((grp_uppol1_fu_422_ap_done = ap_const_logic_0) or (grp_uppol1_fu_669_p_done = ap_const_logic_0) or (grp_scalel_fu_663_p_done = ap_const_logic_0));
    end process;


    ap_block_state9_on_subcall_done_assign_proc : process(grp_filtez_fu_318_ap_done, grp_quantl_fu_336_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_quantl_fu_336_ap_done = ap_const_logic_0) or (grp_filtez_fu_318_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (add_ln314_reg_1337 & tmp_2_reg_1313);
    decis_fu_911_p4 <= mul_ln310_fu_905_p2(24 downto 12);

    delay_bph_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, grp_filtez_fu_318_bpl_address0, grp_upzero_fu_370_bli_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_bph_address0 <= grp_upzero_fu_370_bli_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_bph_address0 <= grp_filtez_fu_318_bpl_address0;
        else 
            delay_bph_address0 <= "XXX";
        end if; 
    end process;


    delay_bph_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, grp_filtez_fu_318_bpl_ce0, grp_upzero_fu_370_bli_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_bph_ce0 <= grp_upzero_fu_370_bli_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_bph_ce0 <= grp_filtez_fu_318_bpl_ce0;
        else 
            delay_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bph_d0 <= grp_upzero_fu_370_bli_d0;

    delay_bph_we0_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_370_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_bph_we0 <= grp_upzero_fu_370_bli_we0;
        else 
            delay_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bpl_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, grp_filtez_fu_318_bpl_address0, grp_upzero_fu_361_bli_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_bpl_address0 <= grp_upzero_fu_361_bli_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            delay_bpl_address0 <= grp_filtez_fu_318_bpl_address0;
        else 
            delay_bpl_address0 <= "XXX";
        end if; 
    end process;


    delay_bpl_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, grp_filtez_fu_318_bpl_ce0, grp_upzero_fu_361_bli_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_bpl_ce0 <= grp_upzero_fu_361_bli_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            delay_bpl_ce0 <= grp_filtez_fu_318_bpl_ce0;
        else 
            delay_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bpl_d0 <= grp_upzero_fu_361_bli_d0;

    delay_bpl_we0_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_361_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_bpl_we0 <= grp_upzero_fu_361_bli_we0;
        else 
            delay_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, grp_filtez_fu_318_dlt_address0, grp_upzero_fu_370_dlti_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dhx_address0 <= grp_upzero_fu_370_dlti_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_dhx_address0 <= grp_filtez_fu_318_dlt_address0;
        else 
            delay_dhx_address0 <= "XXX";
        end if; 
    end process;

    delay_dhx_address1 <= grp_upzero_fu_370_dlti_address1;

    delay_dhx_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, grp_filtez_fu_318_dlt_ce0, grp_upzero_fu_370_dlti_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dhx_ce0 <= grp_upzero_fu_370_dlti_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_dhx_ce0 <= grp_filtez_fu_318_dlt_ce0;
        else 
            delay_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_ce1_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_370_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dhx_ce1 <= grp_upzero_fu_370_dlti_ce1;
        else 
            delay_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dhx_d0 <= grp_upzero_fu_370_dlti_d0;
    delay_dhx_d1 <= grp_upzero_fu_370_dlti_d1;

    delay_dhx_we0_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_370_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dhx_we0 <= grp_upzero_fu_370_dlti_we0;
        else 
            delay_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_we1_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_370_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dhx_we1 <= grp_upzero_fu_370_dlti_we1;
        else 
            delay_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, grp_filtez_fu_318_dlt_address0, grp_upzero_fu_361_dlti_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dltx_address0 <= grp_upzero_fu_361_dlti_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            delay_dltx_address0 <= grp_filtez_fu_318_dlt_address0;
        else 
            delay_dltx_address0 <= "XXX";
        end if; 
    end process;

    delay_dltx_address1 <= grp_upzero_fu_361_dlti_address1;

    delay_dltx_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, grp_filtez_fu_318_dlt_ce0, grp_upzero_fu_361_dlti_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dltx_ce0 <= grp_upzero_fu_361_dlti_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            delay_dltx_ce0 <= grp_filtez_fu_318_dlt_ce0;
        else 
            delay_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_ce1_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_361_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dltx_ce1 <= grp_upzero_fu_361_dlti_ce1;
        else 
            delay_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    delay_dltx_d0 <= grp_upzero_fu_361_dlti_d0;
    delay_dltx_d1 <= grp_upzero_fu_361_dlti_d1;

    delay_dltx_we0_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_361_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dltx_we0 <= grp_upzero_fu_361_dlti_we0;
        else 
            delay_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_we1_assign_proc : process(ap_CS_fsm_state12, grp_upzero_fu_361_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            delay_dltx_we1 <= grp_upzero_fu_361_dlti_we1;
        else 
            delay_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    deth_o_assign_proc : process(deth_i, ap_CS_fsm_state12, grp_scalel_fu_663_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            deth_o <= grp_scalel_fu_663_p_dout0;
        else 
            deth_o <= deth_i;
        end if; 
    end process;


    deth_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            deth_o_ap_vld <= ap_const_logic_1;
        else 
            deth_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    detl_o_assign_proc : process(detl_i, ap_CS_fsm_state14, grp_scalel_fu_663_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            detl_o <= grp_scalel_fu_663_p_dout0;
        else 
            detl_o <= detl_i;
        end if; 
    end process;


    detl_o_ap_vld_assign_proc : process(ap_CS_fsm_state14, ap_block_state14_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state14_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            detl_o_ap_vld <= ap_const_logic_1;
        else 
            detl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_filtep_fu_328_al1_assign_proc : process(al1_i, ah1_i, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln269_fu_645_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_filtep_fu_328_al1 <= ah1_i;
        elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_filtep_fu_328_al1 <= al1_i;
        else 
            grp_filtep_fu_328_al1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtep_fu_328_al2_assign_proc : process(al2_i, ah2_i, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln269_fu_645_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_filtep_fu_328_al2 <= ah2_i;
        elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_filtep_fu_328_al2 <= al2_i;
        else 
            grp_filtep_fu_328_al2 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtep_fu_328_rlt1_assign_proc : process(rlt1_i, rh1_i, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln269_fu_645_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_filtep_fu_328_rlt1 <= rh1_i;
        elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_filtep_fu_328_rlt1 <= rlt1_i;
        else 
            grp_filtep_fu_328_rlt1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtep_fu_328_rlt2_assign_proc : process(rlt2_i, rh2_i, ap_CS_fsm_state6, ap_CS_fsm_state8, icmp_ln269_fu_645_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_filtep_fu_328_rlt2 <= rh2_i;
        elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_filtep_fu_328_rlt2 <= rlt2_i;
        else 
            grp_filtep_fu_328_rlt2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_filtep_fu_650_p_din1 <= grp_filtep_fu_328_rlt1;
    grp_filtep_fu_650_p_din2 <= grp_filtep_fu_328_al1;
    grp_filtep_fu_650_p_din3 <= grp_filtep_fu_328_rlt2;
    grp_filtep_fu_650_p_din4 <= grp_filtep_fu_328_al2;
    grp_filtez_fu_318_ap_start <= grp_filtez_fu_318_ap_start_reg;

    grp_filtez_fu_318_bpl_q0_assign_proc : process(delay_bpl_q0, delay_bph_q0, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_filtez_fu_318_bpl_q0 <= delay_bph_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_filtez_fu_318_bpl_q0 <= delay_bpl_q0;
        else 
            grp_filtez_fu_318_bpl_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtez_fu_318_dlt_q0_assign_proc : process(delay_dltx_q0, delay_dhx_q0, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_filtez_fu_318_dlt_q0 <= delay_dhx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_filtez_fu_318_dlt_q0 <= delay_dltx_q0;
        else 
            grp_filtez_fu_318_dlt_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_438_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state2, sext_ln251_fu_503_p1, sext_ln263_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_438_p0 <= sext_ln263_fu_691_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_438_p0 <= sext_ln251_fu_503_p1(32 - 1 downto 0);
        else 
            grp_fu_438_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_438_p1 <= ap_const_lv39_7FFFFFFFD4(7 - 1 downto 0);
    grp_fu_453_p2 <= std_logic_vector(unsigned(reg_449) + unsigned(grp_filtez_fu_318_ap_return));
    grp_logscl_fu_353_ap_ready <= grp_logscl_fu_657_p_ready;
    grp_logscl_fu_657_p_din1 <= tmp_2_reg_1313;
    grp_logscl_fu_657_p_din2 <= nbl_i;
    grp_logscl_fu_657_p_start <= grp_logscl_fu_353_ap_start_reg;
    grp_quantl_fu_336_ap_start <= grp_quantl_fu_336_ap_start_reg;
    grp_scalel_fu_403_ap_ready <= grp_scalel_fu_663_p_ready;

    grp_scalel_fu_403_nbl_assign_proc : process(tmp_s_reg_1381, tmp_3_reg_1403, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_scalel_fu_403_nbl <= tmp_3_reg_1403;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_scalel_fu_403_nbl <= tmp_s_reg_1381;
        else 
            grp_scalel_fu_403_nbl <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_scalel_fu_403_shift_constant_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_scalel_fu_403_shift_constant <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_scalel_fu_403_shift_constant <= ap_const_lv4_A;
        else 
            grp_scalel_fu_403_shift_constant <= "XXXX";
        end if; 
    end process;

    grp_scalel_fu_663_p_din1 <= grp_scalel_fu_403_nbl;
    grp_scalel_fu_663_p_din2 <= grp_scalel_fu_403_shift_constant;
    grp_scalel_fu_663_p_start <= grp_scalel_fu_403_ap_start_reg;
    grp_uppol1_fu_414_ap_ready <= grp_uppol1_fu_669_p_ready;
    grp_uppol1_fu_422_ap_start <= grp_uppol1_fu_422_ap_start_reg;
    grp_uppol1_fu_669_p_din1 <= al1_i;
    grp_uppol1_fu_669_p_din2 <= tmp_5_reg_1408;
    grp_uppol1_fu_669_p_din3 <= add_ln290_reg_1359;
    grp_uppol1_fu_669_p_din4 <= plt1_load_reg_1365;
    grp_uppol1_fu_669_p_start <= grp_uppol1_fu_414_ap_start_reg;
    grp_uppol2_fu_379_ap_ready <= grp_uppol2_fu_676_p_ready;
    grp_uppol2_fu_388_ap_start <= grp_uppol2_fu_388_ap_start_reg;
    grp_uppol2_fu_676_p_din1 <= al1_i;
    grp_uppol2_fu_676_p_din2 <= al2_i;
    grp_uppol2_fu_676_p_din3 <= add_ln290_reg_1359;
    grp_uppol2_fu_676_p_din4 <= plt1_load_reg_1365;
    grp_uppol2_fu_676_p_din5 <= plt2_load_reg_1371;
    grp_uppol2_fu_676_p_start <= grp_uppol2_fu_379_ap_start_reg;
    grp_upzero_fu_361_ap_start <= grp_upzero_fu_361_ap_start_reg;
    grp_upzero_fu_370_ap_start <= grp_upzero_fu_370_ap_start_reg;
    h_address0 <= zext_ln257_fu_558_p1(5 - 1 downto 0);
    h_address1 <= zext_ln243_fu_546_p1(5 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_11_fu_531_p2 <= std_logic_vector(unsigned(i_fu_200) + unsigned(ap_const_lv4_1));
    i_13_fu_651_p2 <= std_logic_vector(unsigned(i_6_fu_216) + unsigned(ap_const_lv5_1));
    icmp_ln255_fu_525_p2 <= "1" when (i_fu_200 = ap_const_lv4_A) else "0";
    icmp_ln269_fu_645_p2 <= "1" when (i_6_fu_216 = ap_const_lv5_16) else "0";
    icmp_ln311_fu_925_p2 <= "1" when (signed(tmp_9_abs_r_fu_348_ap_return) > signed(zext_ln310_2_fu_921_p1)) else "0";
    il <= grp_quantl_fu_336_ap_return;

    il_ap_vld_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            il_ap_vld <= ap_const_logic_1;
        else 
            il_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_856_p4 <= grp_quantl_fu_336_ap_return(5 downto 2);
    mul_ln287_fu_952_p1 <= mul_ln287_fu_952_p10(15 - 1 downto 0);
    mul_ln287_fu_952_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(detl_i),31));
    mul_ln310_fu_905_p0 <= mul_ln310_fu_905_p00(15 - 1 downto 0);
    mul_ln310_fu_905_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deth_i),25));
    mul_ln310_fu_905_p1 <= ap_const_lv25_234(11 - 1 downto 0);
    mul_ln314_fu_1003_p1 <= mul_ln314_fu_1003_p10(15 - 1 downto 0);
    mul_ln314_fu_1003_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deth_i),29));

    nbh_o_assign_proc : process(nbh_i, ap_CS_fsm_state11, tmp_s_logsch_fu_684_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            nbh_o <= tmp_s_logsch_fu_684_p_dout0;
        else 
            nbh_o <= nbh_i;
        end if; 
    end process;


    nbh_o_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            nbh_o_ap_vld <= ap_const_logic_1;
        else 
            nbh_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    nbl_o_assign_proc : process(nbl_i, ap_CS_fsm_state12, grp_logscl_fu_657_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            nbl_o <= grp_logscl_fu_657_p_dout0;
        else 
            nbl_o <= nbl_i;
        end if; 
    end process;


    nbl_o_ap_vld_assign_proc : process(ap_CS_fsm_state12, ap_block_state12_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            nbl_o_ap_vld <= ap_const_logic_1;
        else 
            nbl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ph1_o_assign_proc : process(ph1_i, ap_CS_fsm_state11, add_ln317_fu_1088_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ph1_o <= add_ln317_fu_1088_p2;
        else 
            ph1_o <= ph1_i;
        end if; 
    end process;


    ph1_o_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ph1_o_ap_vld <= ap_const_logic_1;
        else 
            ph1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ph2_o_assign_proc : process(ph1_i, ph2_i, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ph2_o <= ph1_i;
        else 
            ph2_o <= ph2_i;
        end if; 
    end process;


    ph2_o_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ph2_o_ap_vld <= ap_const_logic_1;
        else 
            ph2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    plt1_o_assign_proc : process(plt1_i, add_ln290_fu_1042_p2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plt1_o <= add_ln290_fu_1042_p2;
        else 
            plt1_o <= plt1_i;
        end if; 
    end process;


    plt1_o_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plt1_o_ap_vld <= ap_const_logic_1;
        else 
            plt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    plt2_o_assign_proc : process(plt1_i, plt2_i, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plt2_o <= plt1_i;
        else 
            plt2_o <= plt2_i;
        end if; 
    end process;


    plt2_o_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            plt2_o_ap_vld <= ap_const_logic_1;
        else 
            plt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    qq4_code4_table_address0 <= zext_ln287_1_fu_866_p1(4 - 1 downto 0);

    qq4_code4_table_ce0_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            qq4_code4_table_ce0 <= ap_const_logic_1;
        else 
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rh1_o_assign_proc : process(rh1_i, ap_CS_fsm_state10, add_ln321_fu_1023_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rh1_o <= add_ln321_fu_1023_p2;
        else 
            rh1_o <= rh1_i;
        end if; 
    end process;


    rh1_o_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rh1_o_ap_vld <= ap_const_logic_1;
        else 
            rh1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rh2_o_assign_proc : process(rh1_i, rh2_i, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            rh2_o <= rh1_i;
        else 
            rh2_o <= rh2_i;
        end if; 
    end process;


    rh2_o_ap_vld_assign_proc : process(ap_CS_fsm_state8, grp_filtez_fu_318_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_filtez_fu_318_ap_done = ap_const_logic_1))) then 
            rh2_o_ap_vld <= ap_const_logic_1;
        else 
            rh2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rlt1_o_assign_proc : process(rlt1_i, ap_CS_fsm_state10, add_ln294_fu_972_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rlt1_o <= add_ln294_fu_972_p2;
        else 
            rlt1_o <= rlt1_i;
        end if; 
    end process;


    rlt1_o_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            rlt1_o_ap_vld <= ap_const_logic_1;
        else 
            rlt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rlt2_o_assign_proc : process(rlt1_i, rlt2_i, ap_CS_fsm_state6, icmp_ln269_fu_645_p2)
    begin
        if (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rlt2_o <= rlt1_i;
        else 
            rlt2_o <= rlt2_i;
        end if; 
    end process;


    rlt2_o_ap_vld_assign_proc : process(ap_CS_fsm_state6, icmp_ln269_fu_645_p2)
    begin
        if (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            rlt2_o_ap_vld <= ap_const_logic_1;
        else 
            rlt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln305_fu_889_p3 <= 
        ap_const_lv2_2 when (tmp_14_fu_881_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln311_fu_931_p3 <= 
        ap_const_lv2_2 when (icmp_ln311_fu_925_p2(0) = '1') else 
        ap_const_lv2_3;
        sext_ln244_1_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_438_p2),50));

        sext_ln244_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xa_fu_493_p2),50));

        sext_ln250_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln250_1_fu_481_p3),37));

        sext_ln250_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_469_p3),37));

        sext_ln251_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tqmf_q0),39));

        sext_ln257_2_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln257_fu_430_p2),50));

        sext_ln258_2_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln258_fu_434_p2),50));

        sext_ln262_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln263_fu_721_p2),47));

        sext_ln263_1_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_438_p2),47));

        sext_ln263_2_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_699_p3),37));

        sext_ln263_3_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln263_1_fu_710_p3),37));

        sext_ln263_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tqmf_load_2_reg_1249),39));

        sext_ln287_1_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1344),32));

        sext_ln288_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_958_p4),31));

        sext_ln314_1_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1350),32));

        sext_ln315_1_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_1350),16));

        sext_ln315_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_1009_p4),31));

    shl_ln250_1_fu_481_p3 <= (tqmf_q1 & ap_const_lv2_0);
    shl_ln263_1_fu_710_p3 <= (tqmf_load_3_reg_1254 & ap_const_lv2_0);
    shl_ln2_fu_699_p3 <= (tqmf_load_3_reg_1254 & ap_const_lv4_0);
    shl_ln_fu_469_p3 <= (tqmf_q1 & ap_const_lv4_0);
    sub_ln263_fu_721_p2 <= std_logic_vector(signed(sext_ln263_2_fu_706_p1) - signed(sext_ln263_3_fu_717_p1));
    sub_ln279_fu_757_p2 <= std_logic_vector(unsigned(xa_4_fu_731_p2) - unsigned(xb_4_fu_736_p2));
    sub_ln285_fu_813_p2 <= std_logic_vector(unsigned(trunc_ln8_reg_1273) - unsigned(grp_fu_453_p2));
    sub_ln304_fu_875_p2 <= std_logic_vector(unsigned(trunc_ln9_reg_1278) - unsigned(grp_fu_453_p2));
    tmp_14_fu_881_p3 <= sub_ln304_fu_875_p2(31 downto 31);
    tmp_s_logsch_fu_684_p_din1 <= add_ln314_reg_1337;
    tmp_s_logsch_fu_684_p_din2 <= nbh_i;

    tqmf_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state3, icmp_ln269_fu_645_p2, icmp_ln255_fu_525_p2, zext_ln257_fu_558_p1, zext_ln243_1_fu_670_p1)
    begin
        if (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tqmf_address0 <= ap_const_lv5_0;
        elsif (((icmp_ln269_fu_645_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tqmf_address0 <= zext_ln243_1_fu_670_p1(5 - 1 downto 0);
        elsif (((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address0 <= ap_const_lv5_17;
        elsif (((icmp_ln255_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address0 <= zext_ln257_fu_558_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tqmf_address0 <= ap_const_lv5_1;
        else 
            tqmf_address0 <= "XXXXX";
        end if; 
    end process;


    tqmf_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state3, zext_ln243_fu_546_p1, icmp_ln255_fu_525_p2, zext_ln243_2_fu_804_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tqmf_address1 <= zext_ln243_2_fu_804_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tqmf_address1 <= ap_const_lv5_1;
        elsif (((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address1 <= ap_const_lv5_16;
        elsif (((icmp_ln255_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address1 <= zext_ln243_fu_546_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tqmf_address1 <= ap_const_lv5_0;
        else 
            tqmf_address1 <= "XXXXX";
        end if; 
    end process;


    tqmf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state3, icmp_ln269_fu_645_p2, icmp_ln255_fu_525_p2)
    begin
        if ((((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln269_fu_645_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln255_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            tqmf_ce0 <= ap_const_logic_1;
        else 
            tqmf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state3, icmp_ln255_fu_525_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln255_fu_525_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((icmp_ln255_fu_525_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            tqmf_ce1 <= ap_const_logic_1;
        else 
            tqmf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tqmf_d0 <= xin2;

    tqmf_d1_assign_proc : process(xin1, tqmf_q0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tqmf_d1 <= tqmf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tqmf_d1 <= xin1;
        else 
            tqmf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tqmf_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln269_fu_645_p2)
    begin
        if (((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tqmf_we0 <= ap_const_logic_1;
        else 
            tqmf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_we1_assign_proc : process(ap_CS_fsm_state6, icmp_ln269_fu_645_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln269_fu_645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            tqmf_we1 <= ap_const_logic_1;
        else 
            tqmf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1_fu_1009_p4 <= mul_ln314_fu_1003_p2(28 downto 15);
    trunc_ln255_1_fu_638_p1 <= xa_1_fu_204(47 - 1 downto 0);
    trunc_ln255_fu_634_p1 <= xb_1_fu_208(47 - 1 downto 0);
    trunc_ln269_fu_660_p1 <= idx17_fu_212(5 - 1 downto 0);
    trunc_ln285_fu_809_p1 <= grp_fu_453_p2(31 - 1 downto 0);
    trunc_ln304_fu_871_p1 <= grp_fu_453_p2(31 - 1 downto 0);
    trunc_ln_fu_958_p4 <= mul_ln287_fu_952_p2(30 downto 15);
    xa_3_fu_598_p2 <= std_logic_vector(signed(sext_ln257_2_fu_594_p1) + signed(xa_1_fu_204));
    xa_4_fu_731_p2 <= std_logic_vector(signed(sext_ln263_1_fu_695_p1) + signed(trunc_ln255_1_reg_1244));
    xa_fu_493_p2 <= std_logic_vector(signed(sext_ln250_fu_477_p1) - signed(sext_ln250_1_fu_489_p1));
    xb_3_fu_618_p2 <= std_logic_vector(signed(sext_ln258_2_fu_614_p1) + signed(xb_1_fu_208));
    xb_4_fu_736_p2 <= std_logic_vector(signed(sext_ln262_fu_727_p1) + signed(trunc_ln255_reg_1239));
    zext_ln243_1_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_1_fu_664_p2),64));
    zext_ln243_2_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_2_fu_799_p2),64));
    zext_ln243_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_fu_540_p2),64));
    zext_ln257_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_fu_552_p2),64));
    zext_ln287_1_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_856_p4),64));
    zext_ln310_2_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decis_fu_911_p4),32));
end behav;
