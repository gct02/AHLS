-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_logscl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    il : IN STD_LOGIC_VECTOR (5 downto 0);
    nbl : IN STD_LOGIC_VECTOR (14 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of adpcm_main_logscl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_4800 : STD_LOGIC_VECTOR (16 downto 0) := "00100100000000000";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal wl_code_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal wl_code_table_ce0 : STD_LOGIC;
    signal wl_code_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln512_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lshr_ln_fu_71_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_90_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln511_1_fu_98_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln511_fu_86_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln511_fu_102_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln_fu_108_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln512_1_fu_122_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln512_fu_118_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln512_fu_126_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln513_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_136_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln513_fu_144_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln515_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln515_fu_152_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln515_fu_162_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_logscl_wl_code_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    wl_code_table_U : component adpcm_main_logscl_wl_code_table_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wl_code_table_address0,
        ce0 => wl_code_table_ce0,
        q0 => wl_code_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv15_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= select_ln515_fu_162_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln512_fu_126_p2 <= std_logic_vector(signed(sext_ln512_1_fu_122_p1) + signed(sext_ln512_fu_118_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, select_ln515_fu_162_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= select_ln515_fu_162_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln515_fu_156_p2 <= "1" when (unsigned(select_ln513_fu_144_p3) > unsigned(ap_const_lv17_4800)) else "0";
    lshr_ln_fu_71_p4 <= il(5 downto 2);
    select_ln513_fu_144_p3 <= 
        ap_const_lv17_0 when (tmp_fu_136_p3(0) = '1') else 
        add_ln512_fu_126_p2;
    select_ln515_fu_162_p3 <= 
        ap_const_lv15_4800 when (icmp_ln515_fu_156_p2(0) = '1') else 
        trunc_ln515_fu_152_p1;
        sext_ln512_1_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wl_code_table_q0),17));

        sext_ln512_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_108_p4),17));

        sext_ln513_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln512_fu_126_p2),32));

    shl_ln_fu_90_p3 <= (nbl & ap_const_lv7_0);
    sub_ln511_fu_102_p2 <= std_logic_vector(unsigned(zext_ln511_1_fu_98_p1) - unsigned(zext_ln511_fu_86_p1));
    tmp_fu_136_p3 <= sext_ln513_fu_132_p1(31 downto 31);
    trunc_ln515_fu_152_p1 <= select_ln513_fu_144_p3(15 - 1 downto 0);
    trunc_ln_fu_108_p4 <= sub_ln511_fu_102_p2(22 downto 7);
    wl_code_table_address0 <= zext_ln512_fu_81_p1(4 - 1 downto 0);

    wl_code_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            wl_code_table_ce0 <= ap_const_logic_1;
        else 
            wl_code_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln511_1_fu_98_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_90_p3),23));
    zext_ln511_fu_86_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nbl),23));
    zext_ln512_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_71_p4),64));
end behav;
