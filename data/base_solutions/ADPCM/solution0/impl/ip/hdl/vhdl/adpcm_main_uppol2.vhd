-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_uppol2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    al1 : IN STD_LOGIC_VECTOR (15 downto 0);
    al2 : IN STD_LOGIC_VECTOR (14 downto 0);
    plt : IN STD_LOGIC_VECTOR (31 downto 0);
    plt1 : IN STD_LOGIC_VECTOR (31 downto 0);
    plt2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of adpcm_main_uppol2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv17_1FF80 : STD_LOGIC_VECTOR (16 downto 0) := "11111111110000000";
    constant ap_const_lv17_80 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_const_lv17_3000 : STD_LOGIC_VECTOR (16 downto 0) := "00011000000000000";
    constant ap_const_lv17_1D000 : STD_LOGIC_VECTOR (16 downto 0) := "11101000000000000";
    constant ap_const_lv15_5000 : STD_LOGIC_VECTOR (14 downto 0) := "101000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_2_reg_274 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_279 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln570_fu_94_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln570_fu_102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln574_fu_98_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln570_fu_94_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln574_fu_98_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal wd2_fu_134_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln566_fu_142_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_152_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln571_fu_146_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln572_fu_162_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_166_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln570_fu_176_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln580_fu_187_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_191_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_191_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln580_1_fu_199_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln580_fu_187_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln580_fu_203_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln1_fu_209_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln580_2_fu_219_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln580_fu_223_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln580_fu_230_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln574_1_fu_183_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl2_fu_236_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln583_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_1_fu_248_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln585_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln567_fu_256_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl2_2_fu_266_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_mul_32s_32s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32s_32s_64_1_1_U75 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => plt1,
        din1 => mul_ln570_fu_94_p1,
        dout => mul_ln570_fu_94_p2);

    mul_32s_32s_64_1_1_U76 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => plt2,
        din1 => mul_ln574_fu_98_p1,
        dout => mul_ln574_fu_98_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv15_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= apl2_2_fu_266_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_2_reg_274 <= mul_ln570_fu_94_p2(63 downto 63);
                tmp_3_reg_279 <= mul_ln574_fu_98_p2(63 downto 63);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln580_fu_230_p2 <= std_logic_vector(signed(sext_ln580_2_fu_219_p1) + signed(select_ln580_fu_223_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, apl2_2_fu_266_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= apl2_2_fu_266_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    apl2_1_fu_248_p3 <= 
        ap_const_lv17_3000 when (icmp_ln583_fu_242_p2(0) = '1') else 
        apl2_fu_236_p2;
    apl2_2_fu_266_p3 <= 
        ap_const_lv15_5000 when (icmp_ln585_fu_260_p2(0) = '1') else 
        trunc_ln567_fu_256_p1;
    apl2_fu_236_p2 <= std_logic_vector(unsigned(add_ln580_fu_230_p2) + unsigned(sext_ln574_1_fu_183_p1));
    icmp_ln583_fu_242_p2 <= "1" when (signed(apl2_fu_236_p2) > signed(ap_const_lv17_3000)) else "0";
    icmp_ln585_fu_260_p2 <= "1" when (signed(apl2_1_fu_248_p3) < signed(ap_const_lv17_1D000)) else "0";
    mul_ln570_fu_94_p1 <= sext_ln570_fu_102_p1(32 - 1 downto 0);
    mul_ln574_fu_98_p1 <= sext_ln570_fu_102_p1(32 - 1 downto 0);
    select_ln570_fu_176_p3 <= 
        sext_ln572_fu_162_p1 when (tmp_2_reg_274(0) = '1') else 
        tmp_1_fu_166_p4;
    select_ln580_fu_223_p3 <= 
        ap_const_lv17_1FF80 when (tmp_3_reg_279(0) = '1') else 
        ap_const_lv17_80;
        sext_ln566_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_fu_134_p3),19));

        sext_ln570_fu_102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(plt),64));

        sext_ln572_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_152_p4),12));

        sext_ln574_1_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln570_fu_176_p3),17));

        sext_ln580_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_191_p3),23));

        sext_ln580_2_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_209_p4),17));

    sext_ln580_fu_187_p0 <= al2;
        sext_ln580_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln580_fu_187_p0),23));

    shl_ln_fu_191_p1 <= al2;
    shl_ln_fu_191_p3 <= (shl_ln_fu_191_p1 & ap_const_lv7_0);
    sub_ln571_fu_146_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(sext_ln566_fu_142_p1));
    sub_ln580_fu_203_p2 <= std_logic_vector(signed(sext_ln580_1_fu_199_p1) - signed(sext_ln580_fu_187_p1));
    tmp_1_fu_166_p4 <= sub_ln571_fu_146_p2(18 downto 7);
    tmp_fu_152_p4 <= al1(15 downto 5);
    trunc_ln1_fu_209_p4 <= sub_ln580_fu_203_p2(22 downto 7);
    trunc_ln567_fu_256_p1 <= apl2_1_fu_248_p3(15 - 1 downto 0);
    wd2_fu_134_p3 <= (al1 & ap_const_lv2_0);
end behav;
