-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_data_ce0 : OUT STD_LOGIC;
    in_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_data_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_data_ce1 : OUT STD_LOGIC;
    in_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    encoded_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    encoded_ce0 : OUT STD_LOGIC;
    encoded_we0 : OUT STD_LOGIC;
    encoded_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    encoded_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    decoded_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    decoded_ce0 : OUT STD_LOGIC;
    decoded_we0 : OUT STD_LOGIC;
    decoded_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    decoded_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    decoded_ce1 : OUT STD_LOGIC;
    decoded_we1 : OUT STD_LOGIC;
    decoded_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of adpcm_main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "adpcm_main_adpcm_main,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.213000,HLS_SYN_LAT=13504,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3025,HLS_SYN_LUT=9339,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dec_detl : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal detl : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal dec_deth : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal deth : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal rlt2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal rlt1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal plt2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal plt1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal al2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal al1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal nbl : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal rh2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal rh1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ph2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ph1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ah2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal ah1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal nbh : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal dec_rlt2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal dec_rlt1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal dec_plt2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dec_plt1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dec_al2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal dec_al1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dec_nbl : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal dec_rh2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal dec_rh1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal dec_ph2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dec_ph1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal dec_ah2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal dec_ah1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dec_nbh : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal delay_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dltx_ce0 : STD_LOGIC;
    signal delay_dltx_we0 : STD_LOGIC;
    signal delay_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_dltx_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_dltx_ce1 : STD_LOGIC;
    signal delay_dltx_we1 : STD_LOGIC;
    signal delay_dltx_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_dhx_ce0 : STD_LOGIC;
    signal delay_dhx_we0 : STD_LOGIC;
    signal delay_dhx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_dhx_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_dhx_ce1 : STD_LOGIC;
    signal delay_dhx_we1 : STD_LOGIC;
    signal delay_dhx_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dec_del_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_del_dltx_ce0 : STD_LOGIC;
    signal dec_del_dltx_we0 : STD_LOGIC;
    signal dec_del_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dec_del_dltx_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dec_del_dltx_ce1 : STD_LOGIC;
    signal dec_del_dltx_we1 : STD_LOGIC;
    signal dec_del_dltx_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal dec_del_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_del_dhx_ce0 : STD_LOGIC;
    signal dec_del_dhx_we0 : STD_LOGIC;
    signal dec_del_dhx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dec_del_dhx_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal dec_del_dhx_ce1 : STD_LOGIC;
    signal dec_del_dhx_we1 : STD_LOGIC;
    signal dec_del_dhx_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bpl_ce0 : STD_LOGIC;
    signal delay_bpl_we0 : STD_LOGIC;
    signal delay_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bph_ce0 : STD_LOGIC;
    signal delay_bph_we0 : STD_LOGIC;
    signal delay_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal delay_bph_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_del_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_del_bpl_ce0 : STD_LOGIC;
    signal dec_del_bpl_we0 : STD_LOGIC;
    signal dec_del_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_del_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_del_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_del_bph_ce0 : STD_LOGIC;
    signal dec_del_bph_we0 : STD_LOGIC;
    signal dec_del_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_del_bph_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tqmf_ce0 : STD_LOGIC;
    signal tqmf_we0 : STD_LOGIC;
    signal tqmf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_ce1 : STD_LOGIC;
    signal tqmf_we1 : STD_LOGIC;
    signal tqmf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal accumc_ce0 : STD_LOGIC;
    signal accumc_we0 : STD_LOGIC;
    signal accumc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumd_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal accumd_ce0 : STD_LOGIC;
    signal accumd_we0 : STD_LOGIC;
    signal accumd_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal accumd_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_ce0 : STD_LOGIC;
    signal h_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal h_ce1 : STD_LOGIC;
    signal h_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal il : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal qq4_code4_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal qq4_code4_table_ce0 : STD_LOGIC;
    signal qq4_code4_table_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal wl_code_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal wl_code_table_ce0 : STD_LOGIC;
    signal wl_code_table_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ilb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ilb_table_ce0 : STD_LOGIC;
    signal ilb_table_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ilb_table_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ilb_table_ce1 : STD_LOGIC;
    signal ilb_table_q1 : STD_LOGIC_VECTOR (11 downto 0);
    signal xout1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal xout2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_18_reg_597 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_data_load_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal in_data_load_1_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_19_reg_632 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln225_fu_552_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln225_reg_645 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_reset_fu_243_ap_start : STD_LOGIC;
    signal grp_reset_fu_243_ap_done : STD_LOGIC;
    signal grp_reset_fu_243_ap_idle : STD_LOGIC;
    signal grp_reset_fu_243_ap_ready : STD_LOGIC;
    signal grp_reset_fu_243_dec_detl : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_dec_detl_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_detl : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_detl_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_deth : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_dec_deth_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_deth : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_deth_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_rlt2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_rlt2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_rlt1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_rlt1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_plt2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_plt2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_plt1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_plt1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_al2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_al2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_al1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_al1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_nbl : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_nbl_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_rh2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_rh2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_rh1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_rh1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_ph2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_ph2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_ph1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_ph1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_ah2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_ah2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_ah1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_ah1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_nbh : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_nbh_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_rlt2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_dec_rlt2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_rlt1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_dec_rlt1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_plt2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_dec_plt2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_plt1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_dec_plt1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_al2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_dec_al2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_al1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_dec_al1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_nbl : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_dec_nbl_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_rh2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_dec_rh2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_rh1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_reset_fu_243_dec_rh1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_ph2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_dec_ph2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_ph1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_dec_ph1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_ah2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_dec_ah2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_ah1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_dec_ah1_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_dec_nbh : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_reset_fu_243_dec_nbh_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_delay_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_delay_dltx_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_dltx_we0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_delay_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_delay_dhx_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_dhx_we0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_dhx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_dec_del_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_dec_del_dltx_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_dltx_we0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_dec_del_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_dec_del_dhx_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_dhx_we0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_dhx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_reset_fu_243_delay_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_delay_bpl_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_bpl_we0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_delay_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_delay_bph_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_bph_we0 : STD_LOGIC;
    signal grp_reset_fu_243_delay_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_dec_del_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_dec_del_bpl_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_bpl_we0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_dec_del_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_reset_fu_243_dec_del_bph_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_bph_we0 : STD_LOGIC;
    signal grp_reset_fu_243_dec_del_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_tqmf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_reset_fu_243_tqmf_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_tqmf_we0 : STD_LOGIC;
    signal grp_reset_fu_243_tqmf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_accumc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reset_fu_243_accumc_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_accumc_we0 : STD_LOGIC;
    signal grp_reset_fu_243_accumc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_reset_fu_243_accumd_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_reset_fu_243_accumd_ce0 : STD_LOGIC;
    signal grp_reset_fu_243_accumd_we0 : STD_LOGIC;
    signal grp_reset_fu_243_accumd_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_ap_start : STD_LOGIC;
    signal grp_encode_fu_333_ap_done : STD_LOGIC;
    signal grp_encode_fu_333_ap_idle : STD_LOGIC;
    signal grp_encode_fu_333_ap_ready : STD_LOGIC;
    signal grp_encode_fu_333_tqmf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_333_tqmf_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_tqmf_we0 : STD_LOGIC;
    signal grp_encode_fu_333_tqmf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_tqmf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_333_tqmf_ce1 : STD_LOGIC;
    signal grp_encode_fu_333_tqmf_we1 : STD_LOGIC;
    signal grp_encode_fu_333_tqmf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_h_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_333_h_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_h_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_333_h_ce1 : STD_LOGIC;
    signal grp_encode_fu_333_delay_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_333_delay_bpl_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_bpl_we0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_delay_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_333_delay_dltx_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dltx_we0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_333_delay_dltx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_333_delay_dltx_ce1 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dltx_we1 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dltx_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_333_rlt1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_333_rlt1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_al1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_333_al1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_rlt2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_333_rlt2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_al2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_333_al2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_detl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_333_detl_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_il : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_encode_fu_333_il_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_qq4_code4_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encode_fu_333_qq4_code4_table_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_nbl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_333_nbl_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_wl_code_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encode_fu_333_wl_code_table_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_ilb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_333_ilb_table_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_ilb_table_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_333_ilb_table_ce1 : STD_LOGIC;
    signal grp_encode_fu_333_plt1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_plt1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_plt2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_plt2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_delay_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_333_delay_bph_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_bph_we0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_delay_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_333_delay_dhx_ce0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dhx_we0 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dhx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_333_delay_dhx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_333_delay_dhx_ce1 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dhx_we1 : STD_LOGIC;
    signal grp_encode_fu_333_delay_dhx_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_333_rh1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_333_rh1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_ah1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_333_ah1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_rh2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_333_rh2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_ah2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_333_ah2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_deth_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_333_deth_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_nbh_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_333_nbh_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_ph1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_ph1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_ph2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_333_ph2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_333_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_decode_fu_399_ap_start : STD_LOGIC;
    signal grp_decode_fu_399_ap_done : STD_LOGIC;
    signal grp_decode_fu_399_ap_idle : STD_LOGIC;
    signal grp_decode_fu_399_ap_ready : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_399_dec_del_bpl_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_bpl_we0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_dec_del_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_399_dec_del_dltx_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dltx_we0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_399_dec_del_dltx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_399_dec_del_dltx_ce1 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dltx_we1 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dltx_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_399_dec_rlt1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_399_dec_rlt1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_al1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_399_dec_al1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_rlt2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_399_dec_rlt2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_al2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_399_dec_al2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_detl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_399_dec_detl_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_qq4_code4_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_399_qq4_code4_table_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_nbl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_399_dec_nbl_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_wl_code_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_399_wl_code_table_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_ilb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_399_ilb_table_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_ilb_table_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_399_ilb_table_ce1 : STD_LOGIC;
    signal grp_decode_fu_399_dec_plt1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_dec_plt1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_plt2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_dec_plt2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_399_dec_del_bph_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_bph_we0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_dec_del_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_399_dec_del_dhx_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dhx_we0 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dhx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_399_dec_del_dhx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_399_dec_del_dhx_ce1 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dhx_we1 : STD_LOGIC;
    signal grp_decode_fu_399_dec_del_dhx_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_399_dec_rh1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_399_dec_rh1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_ah1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_399_dec_ah1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_rh2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_399_dec_rh2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_ah2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_399_dec_ah2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_deth_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_399_dec_deth_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_nbh_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_399_dec_nbh_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_ph1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_dec_ph1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_dec_ph2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_dec_ph2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_accumc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_399_accumc_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_accumc_we0 : STD_LOGIC;
    signal grp_decode_fu_399_accumc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_h_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_399_h_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_h_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_decode_fu_399_h_ce1 : STD_LOGIC;
    signal grp_decode_fu_399_accumd_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_399_accumd_ce0 : STD_LOGIC;
    signal grp_decode_fu_399_accumd_we0 : STD_LOGIC;
    signal grp_decode_fu_399_accumd_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_xout1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_xout1_ap_vld : STD_LOGIC;
    signal grp_decode_fu_399_xout2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_399_xout2_ap_vld : STD_LOGIC;
    signal grp_reset_fu_243_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_encode_fu_333_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_decode_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln219_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln217_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln219_1_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln217_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln223_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln223_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln226_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln227_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_164 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln217_fu_478_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_11_fu_168 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln223_fu_536_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_484_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln219_fu_497_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln5_fu_562_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln227_fu_579_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_reset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dec_detl : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_detl_ap_vld : OUT STD_LOGIC;
        detl : OUT STD_LOGIC_VECTOR (14 downto 0);
        detl_ap_vld : OUT STD_LOGIC;
        dec_deth : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_deth_ap_vld : OUT STD_LOGIC;
        deth : OUT STD_LOGIC_VECTOR (14 downto 0);
        deth_ap_vld : OUT STD_LOGIC;
        rlt2 : OUT STD_LOGIC_VECTOR (30 downto 0);
        rlt2_ap_vld : OUT STD_LOGIC;
        rlt1 : OUT STD_LOGIC_VECTOR (30 downto 0);
        rlt1_ap_vld : OUT STD_LOGIC;
        plt2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        plt2_ap_vld : OUT STD_LOGIC;
        plt1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        plt1_ap_vld : OUT STD_LOGIC;
        al2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        al2_ap_vld : OUT STD_LOGIC;
        al1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        al1_ap_vld : OUT STD_LOGIC;
        nbl : OUT STD_LOGIC_VECTOR (14 downto 0);
        nbl_ap_vld : OUT STD_LOGIC;
        rh2 : OUT STD_LOGIC_VECTOR (30 downto 0);
        rh2_ap_vld : OUT STD_LOGIC;
        rh1 : OUT STD_LOGIC_VECTOR (30 downto 0);
        rh1_ap_vld : OUT STD_LOGIC;
        ph2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ph2_ap_vld : OUT STD_LOGIC;
        ph1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ph1_ap_vld : OUT STD_LOGIC;
        ah2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        ah2_ap_vld : OUT STD_LOGIC;
        ah1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ah1_ap_vld : OUT STD_LOGIC;
        nbh : OUT STD_LOGIC_VECTOR (14 downto 0);
        nbh_ap_vld : OUT STD_LOGIC;
        dec_rlt2 : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt2_ap_vld : OUT STD_LOGIC;
        dec_rlt1 : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt1_ap_vld : OUT STD_LOGIC;
        dec_plt2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_plt2_ap_vld : OUT STD_LOGIC;
        dec_plt1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_plt1_ap_vld : OUT STD_LOGIC;
        dec_al2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_al2_ap_vld : OUT STD_LOGIC;
        dec_al1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_al1_ap_vld : OUT STD_LOGIC;
        dec_nbl : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_nbl_ap_vld : OUT STD_LOGIC;
        dec_rh2 : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rh2_ap_vld : OUT STD_LOGIC;
        dec_rh1 : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rh1_ap_vld : OUT STD_LOGIC;
        dec_ph2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_ph2_ap_vld : OUT STD_LOGIC;
        dec_ph1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_ph1_ap_vld : OUT STD_LOGIC;
        dec_ah2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_ah2_ap_vld : OUT STD_LOGIC;
        dec_ah1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_ah1_ap_vld : OUT STD_LOGIC;
        dec_nbh : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_nbh_ap_vld : OUT STD_LOGIC;
        delay_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dltx_ce0 : OUT STD_LOGIC;
        delay_dltx_we0 : OUT STD_LOGIC;
        delay_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dhx_ce0 : OUT STD_LOGIC;
        delay_dhx_we0 : OUT STD_LOGIC;
        delay_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dltx_ce0 : OUT STD_LOGIC;
        dec_del_dltx_we0 : OUT STD_LOGIC;
        dec_del_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dhx_ce0 : OUT STD_LOGIC;
        dec_del_dhx_we0 : OUT STD_LOGIC;
        dec_del_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bpl_ce0 : OUT STD_LOGIC;
        delay_bpl_we0 : OUT STD_LOGIC;
        delay_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bph_ce0 : OUT STD_LOGIC;
        delay_bph_we0 : OUT STD_LOGIC;
        delay_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bpl_ce0 : OUT STD_LOGIC;
        dec_del_bpl_we0 : OUT STD_LOGIC;
        dec_del_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bph_ce0 : OUT STD_LOGIC;
        dec_del_bph_we0 : OUT STD_LOGIC;
        dec_del_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tqmf_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tqmf_ce0 : OUT STD_LOGIC;
        tqmf_we0 : OUT STD_LOGIC;
        tqmf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumc_ce0 : OUT STD_LOGIC;
        accumc_we0 : OUT STD_LOGIC;
        accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumd_ce0 : OUT STD_LOGIC;
        accumd_we0 : OUT STD_LOGIC;
        accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xin1 : IN STD_LOGIC_VECTOR (31 downto 0);
        xin2 : IN STD_LOGIC_VECTOR (31 downto 0);
        tqmf_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tqmf_ce0 : OUT STD_LOGIC;
        tqmf_we0 : OUT STD_LOGIC;
        tqmf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tqmf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tqmf_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tqmf_ce1 : OUT STD_LOGIC;
        tqmf_we1 : OUT STD_LOGIC;
        tqmf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tqmf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        h_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        h_ce1 : OUT STD_LOGIC;
        h_q1 : IN STD_LOGIC_VECTOR (14 downto 0);
        delay_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bpl_ce0 : OUT STD_LOGIC;
        delay_bpl_we0 : OUT STD_LOGIC;
        delay_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dltx_ce0 : OUT STD_LOGIC;
        delay_dltx_we0 : OUT STD_LOGIC;
        delay_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        delay_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dltx_ce1 : OUT STD_LOGIC;
        delay_dltx_we1 : OUT STD_LOGIC;
        delay_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rlt1_o_ap_vld : OUT STD_LOGIC;
        al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        al1_o_ap_vld : OUT STD_LOGIC;
        rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rlt2_o_ap_vld : OUT STD_LOGIC;
        al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        al2_o_ap_vld : OUT STD_LOGIC;
        detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        detl_o_ap_vld : OUT STD_LOGIC;
        il : OUT STD_LOGIC_VECTOR (5 downto 0);
        il_ap_vld : OUT STD_LOGIC;
        qq4_code4_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        qq4_code4_table_ce0 : OUT STD_LOGIC;
        qq4_code4_table_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        nbl_o_ap_vld : OUT STD_LOGIC;
        wl_code_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        wl_code_table_ce0 : OUT STD_LOGIC;
        wl_code_table_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ilb_table_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ilb_table_ce0 : OUT STD_LOGIC;
        ilb_table_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ilb_table_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ilb_table_ce1 : OUT STD_LOGIC;
        ilb_table_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
        plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        plt1_o_ap_vld : OUT STD_LOGIC;
        plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        plt2_o_ap_vld : OUT STD_LOGIC;
        delay_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bph_ce0 : OUT STD_LOGIC;
        delay_bph_we0 : OUT STD_LOGIC;
        delay_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dhx_ce0 : OUT STD_LOGIC;
        delay_dhx_we0 : OUT STD_LOGIC;
        delay_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dhx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        delay_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dhx_ce1 : OUT STD_LOGIC;
        delay_dhx_we1 : OUT STD_LOGIC;
        delay_dhx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dhx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rh1_o_ap_vld : OUT STD_LOGIC;
        ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        ah1_o_ap_vld : OUT STD_LOGIC;
        rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rh2_o_ap_vld : OUT STD_LOGIC;
        ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        ah2_o_ap_vld : OUT STD_LOGIC;
        deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
        deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        deth_o_ap_vld : OUT STD_LOGIC;
        nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
        nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        nbh_o_ap_vld : OUT STD_LOGIC;
        ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ph1_o_ap_vld : OUT STD_LOGIC;
        ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ph2_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component adpcm_main_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (7 downto 0);
        dec_del_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bpl_ce0 : OUT STD_LOGIC;
        dec_del_bpl_we0 : OUT STD_LOGIC;
        dec_del_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_del_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dltx_ce0 : OUT STD_LOGIC;
        dec_del_dltx_we0 : OUT STD_LOGIC;
        dec_del_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dltx_ce1 : OUT STD_LOGIC;
        dec_del_dltx_we1 : OUT STD_LOGIC;
        dec_del_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt1_o_ap_vld : OUT STD_LOGIC;
        dec_al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_al1_o_ap_vld : OUT STD_LOGIC;
        dec_rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt2_o_ap_vld : OUT STD_LOGIC;
        dec_al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_al2_o_ap_vld : OUT STD_LOGIC;
        dec_detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_detl_o_ap_vld : OUT STD_LOGIC;
        qq4_code4_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        qq4_code4_table_ce0 : OUT STD_LOGIC;
        qq4_code4_table_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        il : IN STD_LOGIC_VECTOR (5 downto 0);
        dec_nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_nbl_o_ap_vld : OUT STD_LOGIC;
        wl_code_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        wl_code_table_ce0 : OUT STD_LOGIC;
        wl_code_table_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ilb_table_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ilb_table_ce0 : OUT STD_LOGIC;
        ilb_table_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ilb_table_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        ilb_table_ce1 : OUT STD_LOGIC;
        ilb_table_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dec_plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_plt1_o_ap_vld : OUT STD_LOGIC;
        dec_plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_plt2_o_ap_vld : OUT STD_LOGIC;
        dec_del_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bph_ce0 : OUT STD_LOGIC;
        dec_del_bph_we0 : OUT STD_LOGIC;
        dec_del_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_del_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dhx_ce0 : OUT STD_LOGIC;
        dec_del_dhx_we0 : OUT STD_LOGIC;
        dec_del_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dhx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dhx_ce1 : OUT STD_LOGIC;
        dec_del_dhx_we1 : OUT STD_LOGIC;
        dec_del_dhx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dhx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rh1_o_ap_vld : OUT STD_LOGIC;
        dec_ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_ah1_o_ap_vld : OUT STD_LOGIC;
        dec_rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rh2_o_ap_vld : OUT STD_LOGIC;
        dec_ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_ah2_o_ap_vld : OUT STD_LOGIC;
        dec_deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_deth_o_ap_vld : OUT STD_LOGIC;
        dec_nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_nbh_o_ap_vld : OUT STD_LOGIC;
        dec_ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_ph1_o_ap_vld : OUT STD_LOGIC;
        dec_ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_ph2_o_ap_vld : OUT STD_LOGIC;
        accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumc_ce0 : OUT STD_LOGIC;
        accumc_we0 : OUT STD_LOGIC;
        accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        h_ce0 : OUT STD_LOGIC;
        h_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
        h_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        h_ce1 : OUT STD_LOGIC;
        h_q1 : IN STD_LOGIC_VECTOR (14 downto 0);
        accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumd_ce0 : OUT STD_LOGIC;
        accumd_we0 : OUT STD_LOGIC;
        accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumd_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        xout1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xout1_ap_vld : OUT STD_LOGIC;
        xout2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xout2_ap_vld : OUT STD_LOGIC );
    end component;


    component adpcm_main_delay_dltx_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component adpcm_main_delay_bpl_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_tqmf_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_accumc_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_h_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_qq4_code4_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component adpcm_main_wl_code_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component adpcm_main_ilb_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    delay_dltx_U : component adpcm_main_delay_dltx_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_dltx_address0,
        ce0 => delay_dltx_ce0,
        we0 => delay_dltx_we0,
        d0 => delay_dltx_d0,
        q0 => delay_dltx_q0,
        address1 => grp_encode_fu_333_delay_dltx_address1,
        ce1 => delay_dltx_ce1,
        we1 => delay_dltx_we1,
        d1 => grp_encode_fu_333_delay_dltx_d1,
        q1 => delay_dltx_q1);

    delay_dhx_U : component adpcm_main_delay_dltx_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_dhx_address0,
        ce0 => delay_dhx_ce0,
        we0 => delay_dhx_we0,
        d0 => delay_dhx_d0,
        q0 => delay_dhx_q0,
        address1 => grp_encode_fu_333_delay_dhx_address1,
        ce1 => delay_dhx_ce1,
        we1 => delay_dhx_we1,
        d1 => grp_encode_fu_333_delay_dhx_d1,
        q1 => delay_dhx_q1);

    dec_del_dltx_U : component adpcm_main_delay_dltx_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dec_del_dltx_address0,
        ce0 => dec_del_dltx_ce0,
        we0 => dec_del_dltx_we0,
        d0 => dec_del_dltx_d0,
        q0 => dec_del_dltx_q0,
        address1 => grp_decode_fu_399_dec_del_dltx_address1,
        ce1 => dec_del_dltx_ce1,
        we1 => dec_del_dltx_we1,
        d1 => grp_decode_fu_399_dec_del_dltx_d1,
        q1 => dec_del_dltx_q1);

    dec_del_dhx_U : component adpcm_main_delay_dltx_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dec_del_dhx_address0,
        ce0 => dec_del_dhx_ce0,
        we0 => dec_del_dhx_we0,
        d0 => dec_del_dhx_d0,
        q0 => dec_del_dhx_q0,
        address1 => grp_decode_fu_399_dec_del_dhx_address1,
        ce1 => dec_del_dhx_ce1,
        we1 => dec_del_dhx_we1,
        d1 => grp_decode_fu_399_dec_del_dhx_d1,
        q1 => dec_del_dhx_q1);

    delay_bpl_U : component adpcm_main_delay_bpl_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_bpl_address0,
        ce0 => delay_bpl_ce0,
        we0 => delay_bpl_we0,
        d0 => delay_bpl_d0,
        q0 => delay_bpl_q0);

    delay_bph_U : component adpcm_main_delay_bpl_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delay_bph_address0,
        ce0 => delay_bph_ce0,
        we0 => delay_bph_we0,
        d0 => delay_bph_d0,
        q0 => delay_bph_q0);

    dec_del_bpl_U : component adpcm_main_delay_bpl_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dec_del_bpl_address0,
        ce0 => dec_del_bpl_ce0,
        we0 => dec_del_bpl_we0,
        d0 => dec_del_bpl_d0,
        q0 => dec_del_bpl_q0);

    dec_del_bph_U : component adpcm_main_delay_bpl_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dec_del_bph_address0,
        ce0 => dec_del_bph_ce0,
        we0 => dec_del_bph_we0,
        d0 => dec_del_bph_d0,
        q0 => dec_del_bph_q0);

    tqmf_U : component adpcm_main_tqmf_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tqmf_address0,
        ce0 => tqmf_ce0,
        we0 => tqmf_we0,
        d0 => tqmf_d0,
        q0 => tqmf_q0,
        address1 => grp_encode_fu_333_tqmf_address1,
        ce1 => tqmf_ce1,
        we1 => tqmf_we1,
        d1 => grp_encode_fu_333_tqmf_d1,
        q1 => tqmf_q1);

    accumc_U : component adpcm_main_accumc_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accumc_address0,
        ce0 => accumc_ce0,
        we0 => accumc_we0,
        d0 => accumc_d0,
        q0 => accumc_q0);

    accumd_U : component adpcm_main_accumc_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => accumd_address0,
        ce0 => accumd_ce0,
        we0 => accumd_we0,
        d0 => accumd_d0,
        q0 => accumd_q0);

    h_U : component adpcm_main_h_ROM_AUTO_1R
    generic map (
        DataWidth => 15,
        AddressRange => 24,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => h_address0,
        ce0 => h_ce0,
        q0 => h_q0,
        address1 => h_address1,
        ce1 => h_ce1,
        q1 => h_q1);

    qq4_code4_table_U : component adpcm_main_qq4_code4_table_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => qq4_code4_table_address0,
        ce0 => qq4_code4_table_ce0,
        q0 => qq4_code4_table_q0);

    wl_code_table_U : component adpcm_main_wl_code_table_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wl_code_table_address0,
        ce0 => wl_code_table_ce0,
        q0 => wl_code_table_q0);

    ilb_table_U : component adpcm_main_ilb_table_ROM_AUTO_1R
    generic map (
        DataWidth => 12,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ilb_table_address0,
        ce0 => ilb_table_ce0,
        q0 => ilb_table_q0,
        address1 => ilb_table_address1,
        ce1 => ilb_table_ce1,
        q1 => ilb_table_q1);

    grp_reset_fu_243 : component adpcm_main_reset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reset_fu_243_ap_start,
        ap_done => grp_reset_fu_243_ap_done,
        ap_idle => grp_reset_fu_243_ap_idle,
        ap_ready => grp_reset_fu_243_ap_ready,
        dec_detl => grp_reset_fu_243_dec_detl,
        dec_detl_ap_vld => grp_reset_fu_243_dec_detl_ap_vld,
        detl => grp_reset_fu_243_detl,
        detl_ap_vld => grp_reset_fu_243_detl_ap_vld,
        dec_deth => grp_reset_fu_243_dec_deth,
        dec_deth_ap_vld => grp_reset_fu_243_dec_deth_ap_vld,
        deth => grp_reset_fu_243_deth,
        deth_ap_vld => grp_reset_fu_243_deth_ap_vld,
        rlt2 => grp_reset_fu_243_rlt2,
        rlt2_ap_vld => grp_reset_fu_243_rlt2_ap_vld,
        rlt1 => grp_reset_fu_243_rlt1,
        rlt1_ap_vld => grp_reset_fu_243_rlt1_ap_vld,
        plt2 => grp_reset_fu_243_plt2,
        plt2_ap_vld => grp_reset_fu_243_plt2_ap_vld,
        plt1 => grp_reset_fu_243_plt1,
        plt1_ap_vld => grp_reset_fu_243_plt1_ap_vld,
        al2 => grp_reset_fu_243_al2,
        al2_ap_vld => grp_reset_fu_243_al2_ap_vld,
        al1 => grp_reset_fu_243_al1,
        al1_ap_vld => grp_reset_fu_243_al1_ap_vld,
        nbl => grp_reset_fu_243_nbl,
        nbl_ap_vld => grp_reset_fu_243_nbl_ap_vld,
        rh2 => grp_reset_fu_243_rh2,
        rh2_ap_vld => grp_reset_fu_243_rh2_ap_vld,
        rh1 => grp_reset_fu_243_rh1,
        rh1_ap_vld => grp_reset_fu_243_rh1_ap_vld,
        ph2 => grp_reset_fu_243_ph2,
        ph2_ap_vld => grp_reset_fu_243_ph2_ap_vld,
        ph1 => grp_reset_fu_243_ph1,
        ph1_ap_vld => grp_reset_fu_243_ph1_ap_vld,
        ah2 => grp_reset_fu_243_ah2,
        ah2_ap_vld => grp_reset_fu_243_ah2_ap_vld,
        ah1 => grp_reset_fu_243_ah1,
        ah1_ap_vld => grp_reset_fu_243_ah1_ap_vld,
        nbh => grp_reset_fu_243_nbh,
        nbh_ap_vld => grp_reset_fu_243_nbh_ap_vld,
        dec_rlt2 => grp_reset_fu_243_dec_rlt2,
        dec_rlt2_ap_vld => grp_reset_fu_243_dec_rlt2_ap_vld,
        dec_rlt1 => grp_reset_fu_243_dec_rlt1,
        dec_rlt1_ap_vld => grp_reset_fu_243_dec_rlt1_ap_vld,
        dec_plt2 => grp_reset_fu_243_dec_plt2,
        dec_plt2_ap_vld => grp_reset_fu_243_dec_plt2_ap_vld,
        dec_plt1 => grp_reset_fu_243_dec_plt1,
        dec_plt1_ap_vld => grp_reset_fu_243_dec_plt1_ap_vld,
        dec_al2 => grp_reset_fu_243_dec_al2,
        dec_al2_ap_vld => grp_reset_fu_243_dec_al2_ap_vld,
        dec_al1 => grp_reset_fu_243_dec_al1,
        dec_al1_ap_vld => grp_reset_fu_243_dec_al1_ap_vld,
        dec_nbl => grp_reset_fu_243_dec_nbl,
        dec_nbl_ap_vld => grp_reset_fu_243_dec_nbl_ap_vld,
        dec_rh2 => grp_reset_fu_243_dec_rh2,
        dec_rh2_ap_vld => grp_reset_fu_243_dec_rh2_ap_vld,
        dec_rh1 => grp_reset_fu_243_dec_rh1,
        dec_rh1_ap_vld => grp_reset_fu_243_dec_rh1_ap_vld,
        dec_ph2 => grp_reset_fu_243_dec_ph2,
        dec_ph2_ap_vld => grp_reset_fu_243_dec_ph2_ap_vld,
        dec_ph1 => grp_reset_fu_243_dec_ph1,
        dec_ph1_ap_vld => grp_reset_fu_243_dec_ph1_ap_vld,
        dec_ah2 => grp_reset_fu_243_dec_ah2,
        dec_ah2_ap_vld => grp_reset_fu_243_dec_ah2_ap_vld,
        dec_ah1 => grp_reset_fu_243_dec_ah1,
        dec_ah1_ap_vld => grp_reset_fu_243_dec_ah1_ap_vld,
        dec_nbh => grp_reset_fu_243_dec_nbh,
        dec_nbh_ap_vld => grp_reset_fu_243_dec_nbh_ap_vld,
        delay_dltx_address0 => grp_reset_fu_243_delay_dltx_address0,
        delay_dltx_ce0 => grp_reset_fu_243_delay_dltx_ce0,
        delay_dltx_we0 => grp_reset_fu_243_delay_dltx_we0,
        delay_dltx_d0 => grp_reset_fu_243_delay_dltx_d0,
        delay_dhx_address0 => grp_reset_fu_243_delay_dhx_address0,
        delay_dhx_ce0 => grp_reset_fu_243_delay_dhx_ce0,
        delay_dhx_we0 => grp_reset_fu_243_delay_dhx_we0,
        delay_dhx_d0 => grp_reset_fu_243_delay_dhx_d0,
        dec_del_dltx_address0 => grp_reset_fu_243_dec_del_dltx_address0,
        dec_del_dltx_ce0 => grp_reset_fu_243_dec_del_dltx_ce0,
        dec_del_dltx_we0 => grp_reset_fu_243_dec_del_dltx_we0,
        dec_del_dltx_d0 => grp_reset_fu_243_dec_del_dltx_d0,
        dec_del_dhx_address0 => grp_reset_fu_243_dec_del_dhx_address0,
        dec_del_dhx_ce0 => grp_reset_fu_243_dec_del_dhx_ce0,
        dec_del_dhx_we0 => grp_reset_fu_243_dec_del_dhx_we0,
        dec_del_dhx_d0 => grp_reset_fu_243_dec_del_dhx_d0,
        delay_bpl_address0 => grp_reset_fu_243_delay_bpl_address0,
        delay_bpl_ce0 => grp_reset_fu_243_delay_bpl_ce0,
        delay_bpl_we0 => grp_reset_fu_243_delay_bpl_we0,
        delay_bpl_d0 => grp_reset_fu_243_delay_bpl_d0,
        delay_bph_address0 => grp_reset_fu_243_delay_bph_address0,
        delay_bph_ce0 => grp_reset_fu_243_delay_bph_ce0,
        delay_bph_we0 => grp_reset_fu_243_delay_bph_we0,
        delay_bph_d0 => grp_reset_fu_243_delay_bph_d0,
        dec_del_bpl_address0 => grp_reset_fu_243_dec_del_bpl_address0,
        dec_del_bpl_ce0 => grp_reset_fu_243_dec_del_bpl_ce0,
        dec_del_bpl_we0 => grp_reset_fu_243_dec_del_bpl_we0,
        dec_del_bpl_d0 => grp_reset_fu_243_dec_del_bpl_d0,
        dec_del_bph_address0 => grp_reset_fu_243_dec_del_bph_address0,
        dec_del_bph_ce0 => grp_reset_fu_243_dec_del_bph_ce0,
        dec_del_bph_we0 => grp_reset_fu_243_dec_del_bph_we0,
        dec_del_bph_d0 => grp_reset_fu_243_dec_del_bph_d0,
        tqmf_address0 => grp_reset_fu_243_tqmf_address0,
        tqmf_ce0 => grp_reset_fu_243_tqmf_ce0,
        tqmf_we0 => grp_reset_fu_243_tqmf_we0,
        tqmf_d0 => grp_reset_fu_243_tqmf_d0,
        accumc_address0 => grp_reset_fu_243_accumc_address0,
        accumc_ce0 => grp_reset_fu_243_accumc_ce0,
        accumc_we0 => grp_reset_fu_243_accumc_we0,
        accumc_d0 => grp_reset_fu_243_accumc_d0,
        accumd_address0 => grp_reset_fu_243_accumd_address0,
        accumd_ce0 => grp_reset_fu_243_accumd_ce0,
        accumd_we0 => grp_reset_fu_243_accumd_we0,
        accumd_d0 => grp_reset_fu_243_accumd_d0);

    grp_encode_fu_333 : component adpcm_main_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_encode_fu_333_ap_start,
        ap_done => grp_encode_fu_333_ap_done,
        ap_idle => grp_encode_fu_333_ap_idle,
        ap_ready => grp_encode_fu_333_ap_ready,
        xin1 => in_data_load_reg_622,
        xin2 => in_data_load_1_reg_627,
        tqmf_address0 => grp_encode_fu_333_tqmf_address0,
        tqmf_ce0 => grp_encode_fu_333_tqmf_ce0,
        tqmf_we0 => grp_encode_fu_333_tqmf_we0,
        tqmf_d0 => grp_encode_fu_333_tqmf_d0,
        tqmf_q0 => tqmf_q0,
        tqmf_address1 => grp_encode_fu_333_tqmf_address1,
        tqmf_ce1 => grp_encode_fu_333_tqmf_ce1,
        tqmf_we1 => grp_encode_fu_333_tqmf_we1,
        tqmf_d1 => grp_encode_fu_333_tqmf_d1,
        tqmf_q1 => tqmf_q1,
        h_address0 => grp_encode_fu_333_h_address0,
        h_ce0 => grp_encode_fu_333_h_ce0,
        h_q0 => h_q0,
        h_address1 => grp_encode_fu_333_h_address1,
        h_ce1 => grp_encode_fu_333_h_ce1,
        h_q1 => h_q1,
        delay_bpl_address0 => grp_encode_fu_333_delay_bpl_address0,
        delay_bpl_ce0 => grp_encode_fu_333_delay_bpl_ce0,
        delay_bpl_we0 => grp_encode_fu_333_delay_bpl_we0,
        delay_bpl_d0 => grp_encode_fu_333_delay_bpl_d0,
        delay_bpl_q0 => delay_bpl_q0,
        delay_dltx_address0 => grp_encode_fu_333_delay_dltx_address0,
        delay_dltx_ce0 => grp_encode_fu_333_delay_dltx_ce0,
        delay_dltx_we0 => grp_encode_fu_333_delay_dltx_we0,
        delay_dltx_d0 => grp_encode_fu_333_delay_dltx_d0,
        delay_dltx_q0 => delay_dltx_q0,
        delay_dltx_address1 => grp_encode_fu_333_delay_dltx_address1,
        delay_dltx_ce1 => grp_encode_fu_333_delay_dltx_ce1,
        delay_dltx_we1 => grp_encode_fu_333_delay_dltx_we1,
        delay_dltx_d1 => grp_encode_fu_333_delay_dltx_d1,
        delay_dltx_q1 => delay_dltx_q1,
        rlt1_i => rlt1,
        rlt1_o => grp_encode_fu_333_rlt1_o,
        rlt1_o_ap_vld => grp_encode_fu_333_rlt1_o_ap_vld,
        al1_i => al1,
        al1_o => grp_encode_fu_333_al1_o,
        al1_o_ap_vld => grp_encode_fu_333_al1_o_ap_vld,
        rlt2_i => rlt2,
        rlt2_o => grp_encode_fu_333_rlt2_o,
        rlt2_o_ap_vld => grp_encode_fu_333_rlt2_o_ap_vld,
        al2_i => al2,
        al2_o => grp_encode_fu_333_al2_o,
        al2_o_ap_vld => grp_encode_fu_333_al2_o_ap_vld,
        detl_i => detl,
        detl_o => grp_encode_fu_333_detl_o,
        detl_o_ap_vld => grp_encode_fu_333_detl_o_ap_vld,
        il => grp_encode_fu_333_il,
        il_ap_vld => grp_encode_fu_333_il_ap_vld,
        qq4_code4_table_address0 => grp_encode_fu_333_qq4_code4_table_address0,
        qq4_code4_table_ce0 => grp_encode_fu_333_qq4_code4_table_ce0,
        qq4_code4_table_q0 => qq4_code4_table_q0,
        nbl_i => nbl,
        nbl_o => grp_encode_fu_333_nbl_o,
        nbl_o_ap_vld => grp_encode_fu_333_nbl_o_ap_vld,
        wl_code_table_address0 => grp_encode_fu_333_wl_code_table_address0,
        wl_code_table_ce0 => grp_encode_fu_333_wl_code_table_ce0,
        wl_code_table_q0 => wl_code_table_q0,
        ilb_table_address0 => grp_encode_fu_333_ilb_table_address0,
        ilb_table_ce0 => grp_encode_fu_333_ilb_table_ce0,
        ilb_table_q0 => ilb_table_q0,
        ilb_table_address1 => grp_encode_fu_333_ilb_table_address1,
        ilb_table_ce1 => grp_encode_fu_333_ilb_table_ce1,
        ilb_table_q1 => ilb_table_q1,
        plt1_i => plt1,
        plt1_o => grp_encode_fu_333_plt1_o,
        plt1_o_ap_vld => grp_encode_fu_333_plt1_o_ap_vld,
        plt2_i => plt2,
        plt2_o => grp_encode_fu_333_plt2_o,
        plt2_o_ap_vld => grp_encode_fu_333_plt2_o_ap_vld,
        delay_bph_address0 => grp_encode_fu_333_delay_bph_address0,
        delay_bph_ce0 => grp_encode_fu_333_delay_bph_ce0,
        delay_bph_we0 => grp_encode_fu_333_delay_bph_we0,
        delay_bph_d0 => grp_encode_fu_333_delay_bph_d0,
        delay_bph_q0 => delay_bph_q0,
        delay_dhx_address0 => grp_encode_fu_333_delay_dhx_address0,
        delay_dhx_ce0 => grp_encode_fu_333_delay_dhx_ce0,
        delay_dhx_we0 => grp_encode_fu_333_delay_dhx_we0,
        delay_dhx_d0 => grp_encode_fu_333_delay_dhx_d0,
        delay_dhx_q0 => delay_dhx_q0,
        delay_dhx_address1 => grp_encode_fu_333_delay_dhx_address1,
        delay_dhx_ce1 => grp_encode_fu_333_delay_dhx_ce1,
        delay_dhx_we1 => grp_encode_fu_333_delay_dhx_we1,
        delay_dhx_d1 => grp_encode_fu_333_delay_dhx_d1,
        delay_dhx_q1 => delay_dhx_q1,
        rh1_i => rh1,
        rh1_o => grp_encode_fu_333_rh1_o,
        rh1_o_ap_vld => grp_encode_fu_333_rh1_o_ap_vld,
        ah1_i => ah1,
        ah1_o => grp_encode_fu_333_ah1_o,
        ah1_o_ap_vld => grp_encode_fu_333_ah1_o_ap_vld,
        rh2_i => rh2,
        rh2_o => grp_encode_fu_333_rh2_o,
        rh2_o_ap_vld => grp_encode_fu_333_rh2_o_ap_vld,
        ah2_i => ah2,
        ah2_o => grp_encode_fu_333_ah2_o,
        ah2_o_ap_vld => grp_encode_fu_333_ah2_o_ap_vld,
        deth_i => deth,
        deth_o => grp_encode_fu_333_deth_o,
        deth_o_ap_vld => grp_encode_fu_333_deth_o_ap_vld,
        nbh_i => nbh,
        nbh_o => grp_encode_fu_333_nbh_o,
        nbh_o_ap_vld => grp_encode_fu_333_nbh_o_ap_vld,
        ph1_i => ph1,
        ph1_o => grp_encode_fu_333_ph1_o,
        ph1_o_ap_vld => grp_encode_fu_333_ph1_o_ap_vld,
        ph2_i => ph2,
        ph2_o => grp_encode_fu_333_ph2_o,
        ph2_o_ap_vld => grp_encode_fu_333_ph2_o_ap_vld,
        ap_return => grp_encode_fu_333_ap_return);

    grp_decode_fu_399 : component adpcm_main_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_fu_399_ap_start,
        ap_done => grp_decode_fu_399_ap_done,
        ap_idle => grp_decode_fu_399_ap_idle,
        ap_ready => grp_decode_fu_399_ap_ready,
        input_r => trunc_ln225_reg_645,
        dec_del_bpl_address0 => grp_decode_fu_399_dec_del_bpl_address0,
        dec_del_bpl_ce0 => grp_decode_fu_399_dec_del_bpl_ce0,
        dec_del_bpl_we0 => grp_decode_fu_399_dec_del_bpl_we0,
        dec_del_bpl_d0 => grp_decode_fu_399_dec_del_bpl_d0,
        dec_del_bpl_q0 => dec_del_bpl_q0,
        dec_del_dltx_address0 => grp_decode_fu_399_dec_del_dltx_address0,
        dec_del_dltx_ce0 => grp_decode_fu_399_dec_del_dltx_ce0,
        dec_del_dltx_we0 => grp_decode_fu_399_dec_del_dltx_we0,
        dec_del_dltx_d0 => grp_decode_fu_399_dec_del_dltx_d0,
        dec_del_dltx_q0 => dec_del_dltx_q0,
        dec_del_dltx_address1 => grp_decode_fu_399_dec_del_dltx_address1,
        dec_del_dltx_ce1 => grp_decode_fu_399_dec_del_dltx_ce1,
        dec_del_dltx_we1 => grp_decode_fu_399_dec_del_dltx_we1,
        dec_del_dltx_d1 => grp_decode_fu_399_dec_del_dltx_d1,
        dec_del_dltx_q1 => dec_del_dltx_q1,
        dec_rlt1_i => dec_rlt1,
        dec_rlt1_o => grp_decode_fu_399_dec_rlt1_o,
        dec_rlt1_o_ap_vld => grp_decode_fu_399_dec_rlt1_o_ap_vld,
        dec_al1_i => dec_al1,
        dec_al1_o => grp_decode_fu_399_dec_al1_o,
        dec_al1_o_ap_vld => grp_decode_fu_399_dec_al1_o_ap_vld,
        dec_rlt2_i => dec_rlt2,
        dec_rlt2_o => grp_decode_fu_399_dec_rlt2_o,
        dec_rlt2_o_ap_vld => grp_decode_fu_399_dec_rlt2_o_ap_vld,
        dec_al2_i => dec_al2,
        dec_al2_o => grp_decode_fu_399_dec_al2_o,
        dec_al2_o_ap_vld => grp_decode_fu_399_dec_al2_o_ap_vld,
        dec_detl_i => dec_detl,
        dec_detl_o => grp_decode_fu_399_dec_detl_o,
        dec_detl_o_ap_vld => grp_decode_fu_399_dec_detl_o_ap_vld,
        qq4_code4_table_address0 => grp_decode_fu_399_qq4_code4_table_address0,
        qq4_code4_table_ce0 => grp_decode_fu_399_qq4_code4_table_ce0,
        qq4_code4_table_q0 => qq4_code4_table_q0,
        il => il,
        dec_nbl_i => dec_nbl,
        dec_nbl_o => grp_decode_fu_399_dec_nbl_o,
        dec_nbl_o_ap_vld => grp_decode_fu_399_dec_nbl_o_ap_vld,
        wl_code_table_address0 => grp_decode_fu_399_wl_code_table_address0,
        wl_code_table_ce0 => grp_decode_fu_399_wl_code_table_ce0,
        wl_code_table_q0 => wl_code_table_q0,
        ilb_table_address0 => grp_decode_fu_399_ilb_table_address0,
        ilb_table_ce0 => grp_decode_fu_399_ilb_table_ce0,
        ilb_table_q0 => ilb_table_q0,
        ilb_table_address1 => grp_decode_fu_399_ilb_table_address1,
        ilb_table_ce1 => grp_decode_fu_399_ilb_table_ce1,
        ilb_table_q1 => ilb_table_q1,
        dec_plt1_i => dec_plt1,
        dec_plt1_o => grp_decode_fu_399_dec_plt1_o,
        dec_plt1_o_ap_vld => grp_decode_fu_399_dec_plt1_o_ap_vld,
        dec_plt2_i => dec_plt2,
        dec_plt2_o => grp_decode_fu_399_dec_plt2_o,
        dec_plt2_o_ap_vld => grp_decode_fu_399_dec_plt2_o_ap_vld,
        dec_del_bph_address0 => grp_decode_fu_399_dec_del_bph_address0,
        dec_del_bph_ce0 => grp_decode_fu_399_dec_del_bph_ce0,
        dec_del_bph_we0 => grp_decode_fu_399_dec_del_bph_we0,
        dec_del_bph_d0 => grp_decode_fu_399_dec_del_bph_d0,
        dec_del_bph_q0 => dec_del_bph_q0,
        dec_del_dhx_address0 => grp_decode_fu_399_dec_del_dhx_address0,
        dec_del_dhx_ce0 => grp_decode_fu_399_dec_del_dhx_ce0,
        dec_del_dhx_we0 => grp_decode_fu_399_dec_del_dhx_we0,
        dec_del_dhx_d0 => grp_decode_fu_399_dec_del_dhx_d0,
        dec_del_dhx_q0 => dec_del_dhx_q0,
        dec_del_dhx_address1 => grp_decode_fu_399_dec_del_dhx_address1,
        dec_del_dhx_ce1 => grp_decode_fu_399_dec_del_dhx_ce1,
        dec_del_dhx_we1 => grp_decode_fu_399_dec_del_dhx_we1,
        dec_del_dhx_d1 => grp_decode_fu_399_dec_del_dhx_d1,
        dec_del_dhx_q1 => dec_del_dhx_q1,
        dec_rh1_i => dec_rh1,
        dec_rh1_o => grp_decode_fu_399_dec_rh1_o,
        dec_rh1_o_ap_vld => grp_decode_fu_399_dec_rh1_o_ap_vld,
        dec_ah1_i => dec_ah1,
        dec_ah1_o => grp_decode_fu_399_dec_ah1_o,
        dec_ah1_o_ap_vld => grp_decode_fu_399_dec_ah1_o_ap_vld,
        dec_rh2_i => dec_rh2,
        dec_rh2_o => grp_decode_fu_399_dec_rh2_o,
        dec_rh2_o_ap_vld => grp_decode_fu_399_dec_rh2_o_ap_vld,
        dec_ah2_i => dec_ah2,
        dec_ah2_o => grp_decode_fu_399_dec_ah2_o,
        dec_ah2_o_ap_vld => grp_decode_fu_399_dec_ah2_o_ap_vld,
        dec_deth_i => dec_deth,
        dec_deth_o => grp_decode_fu_399_dec_deth_o,
        dec_deth_o_ap_vld => grp_decode_fu_399_dec_deth_o_ap_vld,
        dec_nbh_i => dec_nbh,
        dec_nbh_o => grp_decode_fu_399_dec_nbh_o,
        dec_nbh_o_ap_vld => grp_decode_fu_399_dec_nbh_o_ap_vld,
        dec_ph1_i => dec_ph1,
        dec_ph1_o => grp_decode_fu_399_dec_ph1_o,
        dec_ph1_o_ap_vld => grp_decode_fu_399_dec_ph1_o_ap_vld,
        dec_ph2_i => dec_ph2,
        dec_ph2_o => grp_decode_fu_399_dec_ph2_o,
        dec_ph2_o_ap_vld => grp_decode_fu_399_dec_ph2_o_ap_vld,
        accumc_address0 => grp_decode_fu_399_accumc_address0,
        accumc_ce0 => grp_decode_fu_399_accumc_ce0,
        accumc_we0 => grp_decode_fu_399_accumc_we0,
        accumc_d0 => grp_decode_fu_399_accumc_d0,
        accumc_q0 => accumc_q0,
        h_address0 => grp_decode_fu_399_h_address0,
        h_ce0 => grp_decode_fu_399_h_ce0,
        h_q0 => h_q0,
        h_address1 => grp_decode_fu_399_h_address1,
        h_ce1 => grp_decode_fu_399_h_ce1,
        h_q1 => h_q1,
        accumd_address0 => grp_decode_fu_399_accumd_address0,
        accumd_ce0 => grp_decode_fu_399_accumd_ce0,
        accumd_we0 => grp_decode_fu_399_accumd_we0,
        accumd_d0 => grp_decode_fu_399_accumd_d0,
        accumd_q0 => accumd_q0,
        xout1 => grp_decode_fu_399_xout1,
        xout1_ap_vld => grp_decode_fu_399_xout1_ap_vld,
        xout2 => grp_decode_fu_399_xout2,
        xout2_ap_vld => grp_decode_fu_399_xout2_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_decode_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_decode_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_decode_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encode_fu_333_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_encode_fu_333_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_encode_fu_333_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encode_fu_333_ap_ready = ap_const_logic_1)) then 
                    grp_encode_fu_333_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reset_fu_243_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reset_fu_243_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_reset_fu_243_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reset_fu_243_ap_ready = ap_const_logic_1)) then 
                    grp_reset_fu_243_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ah1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_ah1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ah1 <= grp_encode_fu_333_ah1_o;
            elsif (((grp_reset_fu_243_ah1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ah1 <= grp_reset_fu_243_ah1;
            end if; 
        end if;
    end process;

    ah2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_ah2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ah2 <= grp_encode_fu_333_ah2_o;
            elsif (((grp_reset_fu_243_ah2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ah2 <= grp_reset_fu_243_ah2;
            end if; 
        end if;
    end process;

    al1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_al1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                al1 <= grp_encode_fu_333_al1_o;
            elsif (((grp_reset_fu_243_al1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                al1 <= grp_reset_fu_243_al1;
            end if; 
        end if;
    end process;

    al2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_al2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                al2 <= grp_encode_fu_333_al2_o;
            elsif (((grp_reset_fu_243_al2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                al2 <= grp_reset_fu_243_al2;
            end if; 
        end if;
    end process;

    dec_ah1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_ah1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_ah1 <= grp_decode_fu_399_dec_ah1_o;
            elsif (((grp_reset_fu_243_dec_ah1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_ah1 <= grp_reset_fu_243_dec_ah1;
            end if; 
        end if;
    end process;

    dec_ah2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_ah2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_ah2 <= grp_decode_fu_399_dec_ah2_o;
            elsif (((grp_reset_fu_243_dec_ah2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_ah2 <= grp_reset_fu_243_dec_ah2;
            end if; 
        end if;
    end process;

    dec_al1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_al1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_al1 <= grp_decode_fu_399_dec_al1_o;
            elsif (((grp_reset_fu_243_dec_al1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_al1 <= grp_reset_fu_243_dec_al1;
            end if; 
        end if;
    end process;

    dec_al2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_al2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_al2 <= grp_decode_fu_399_dec_al2_o;
            elsif (((grp_reset_fu_243_dec_al2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_al2 <= grp_reset_fu_243_dec_al2;
            end if; 
        end if;
    end process;

    dec_deth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_deth_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_deth <= grp_decode_fu_399_dec_deth_o;
            elsif (((grp_reset_fu_243_dec_deth_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_deth <= grp_reset_fu_243_dec_deth;
            end if; 
        end if;
    end process;

    dec_detl_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_detl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_detl <= grp_decode_fu_399_dec_detl_o;
            elsif (((grp_reset_fu_243_dec_detl_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_detl <= grp_reset_fu_243_dec_detl;
            end if; 
        end if;
    end process;

    dec_nbh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_nbh_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_nbh <= grp_decode_fu_399_dec_nbh_o;
            elsif (((grp_reset_fu_243_dec_nbh_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_nbh <= grp_reset_fu_243_dec_nbh;
            end if; 
        end if;
    end process;

    dec_nbl_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_nbl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_nbl <= grp_decode_fu_399_dec_nbl_o;
            elsif (((grp_reset_fu_243_dec_nbl_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_nbl <= grp_reset_fu_243_dec_nbl;
            end if; 
        end if;
    end process;

    dec_ph1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_ph1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_ph1 <= grp_decode_fu_399_dec_ph1_o;
            elsif (((grp_reset_fu_243_dec_ph1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_ph1 <= grp_reset_fu_243_dec_ph1;
            end if; 
        end if;
    end process;

    dec_ph2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_ph2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_ph2 <= grp_decode_fu_399_dec_ph2_o;
            elsif (((grp_reset_fu_243_dec_ph2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_ph2 <= grp_reset_fu_243_dec_ph2;
            end if; 
        end if;
    end process;

    dec_plt1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_plt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_plt1 <= grp_decode_fu_399_dec_plt1_o;
            elsif (((grp_reset_fu_243_dec_plt1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_plt1 <= grp_reset_fu_243_dec_plt1;
            end if; 
        end if;
    end process;

    dec_plt2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_plt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_plt2 <= grp_decode_fu_399_dec_plt2_o;
            elsif (((grp_reset_fu_243_dec_plt2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_plt2 <= grp_reset_fu_243_dec_plt2;
            end if; 
        end if;
    end process;

    dec_rh1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_rh1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_rh1 <= grp_decode_fu_399_dec_rh1_o;
            elsif (((grp_reset_fu_243_dec_rh1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_rh1 <= grp_reset_fu_243_dec_rh1;
            end if; 
        end if;
    end process;

    dec_rh2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_rh2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_rh2 <= grp_decode_fu_399_dec_rh2_o;
            elsif (((grp_reset_fu_243_dec_rh2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_rh2 <= grp_reset_fu_243_dec_rh2;
            end if; 
        end if;
    end process;

    dec_rlt1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_rlt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_rlt1 <= grp_decode_fu_399_dec_rlt1_o;
            elsif (((grp_reset_fu_243_dec_rlt1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_rlt1 <= grp_reset_fu_243_dec_rlt1;
            end if; 
        end if;
    end process;

    dec_rlt2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_dec_rlt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                dec_rlt2 <= grp_decode_fu_399_dec_rlt2_o;
            elsif (((grp_reset_fu_243_dec_rlt2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                dec_rlt2 <= grp_reset_fu_243_dec_rlt2;
            end if; 
        end if;
    end process;

    deth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_deth_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                deth <= grp_encode_fu_333_deth_o;
            elsif (((grp_reset_fu_243_deth_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                deth <= grp_reset_fu_243_deth;
            end if; 
        end if;
    end process;

    detl_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_detl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                detl <= grp_encode_fu_333_detl_o;
            elsif (((grp_reset_fu_243_detl_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                detl <= grp_reset_fu_243_detl;
            end if; 
        end if;
    end process;

    i_11_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln217_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_11_fu_168 <= ap_const_lv6_0;
            elsif (((icmp_ln223_fu_530_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_11_fu_168 <= add_ln223_fu_536_p2;
            end if; 
        end if;
    end process;

    i_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_164 <= ap_const_lv6_0;
            elsif (((icmp_ln217_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_164 <= add_ln217_fu_478_p2;
            end if; 
        end if;
    end process;

    nbh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_nbh_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nbh <= grp_encode_fu_333_nbh_o;
            elsif (((grp_reset_fu_243_nbh_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                nbh <= grp_reset_fu_243_nbh;
            end if; 
        end if;
    end process;

    nbl_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_nbl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                nbl <= grp_encode_fu_333_nbl_o;
            elsif (((grp_reset_fu_243_nbl_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                nbl <= grp_reset_fu_243_nbl;
            end if; 
        end if;
    end process;

    ph1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_ph1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ph1 <= grp_encode_fu_333_ph1_o;
            elsif (((grp_reset_fu_243_ph1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ph1 <= grp_reset_fu_243_ph1;
            end if; 
        end if;
    end process;

    ph2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_ph2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                ph2 <= grp_encode_fu_333_ph2_o;
            elsif (((grp_reset_fu_243_ph2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ph2 <= grp_reset_fu_243_ph2;
            end if; 
        end if;
    end process;

    plt1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_plt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                plt1 <= grp_encode_fu_333_plt1_o;
            elsif (((grp_reset_fu_243_plt1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                plt1 <= grp_reset_fu_243_plt1;
            end if; 
        end if;
    end process;

    plt2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_plt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                plt2 <= grp_encode_fu_333_plt2_o;
            elsif (((grp_reset_fu_243_plt2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                plt2 <= grp_reset_fu_243_plt2;
            end if; 
        end if;
    end process;

    rh1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_rh1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                rh1 <= grp_encode_fu_333_rh1_o;
            elsif (((grp_reset_fu_243_rh1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rh1 <= grp_reset_fu_243_rh1;
            end if; 
        end if;
    end process;

    rh2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_rh2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                rh2 <= grp_encode_fu_333_rh2_o;
            elsif (((grp_reset_fu_243_rh2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rh2 <= grp_reset_fu_243_rh2;
            end if; 
        end if;
    end process;

    rlt1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_rlt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                rlt1 <= grp_encode_fu_333_rlt1_o;
            elsif (((grp_reset_fu_243_rlt1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rlt1 <= grp_reset_fu_243_rlt1;
            end if; 
        end if;
    end process;

    rlt2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_rlt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                rlt2 <= grp_encode_fu_333_rlt2_o;
            elsif (((grp_reset_fu_243_rlt2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                rlt2 <= grp_reset_fu_243_rlt2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_18_reg_597 <= i_fu_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_19_reg_632 <= i_11_fu_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_encode_fu_333_il_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                il <= grp_encode_fu_333_il;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_data_load_1_reg_627 <= in_data_q0;
                in_data_load_reg_622 <= in_data_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                trunc_ln225_reg_645 <= trunc_ln225_fu_552_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_xout1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                xout1 <= grp_decode_fu_399_xout1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_decode_fu_399_xout2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                xout2 <= grp_decode_fu_399_xout2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, grp_reset_fu_243_ap_done, grp_encode_fu_333_ap_done, grp_decode_fu_399_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, icmp_ln217_fu_472_p2, icmp_ln223_fu_530_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_reset_fu_243_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln217_fu_472_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_encode_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln223_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_decode_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    accumc_address0_assign_proc : process(grp_reset_fu_243_accumc_address0, grp_decode_fu_399_accumc_address0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumc_address0 <= grp_decode_fu_399_accumc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumc_address0 <= grp_reset_fu_243_accumc_address0;
        else 
            accumc_address0 <= "XXXX";
        end if; 
    end process;


    accumc_ce0_assign_proc : process(grp_reset_fu_243_accumc_ce0, grp_decode_fu_399_accumc_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumc_ce0 <= grp_decode_fu_399_accumc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumc_ce0 <= grp_reset_fu_243_accumc_ce0;
        else 
            accumc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumc_d0_assign_proc : process(grp_reset_fu_243_accumc_d0, grp_decode_fu_399_accumc_d0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumc_d0 <= grp_decode_fu_399_accumc_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumc_d0 <= grp_reset_fu_243_accumc_d0;
        else 
            accumc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accumc_we0_assign_proc : process(grp_reset_fu_243_accumc_we0, grp_decode_fu_399_accumc_we0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumc_we0 <= grp_decode_fu_399_accumc_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumc_we0 <= grp_reset_fu_243_accumc_we0;
        else 
            accumc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accumd_address0_assign_proc : process(grp_reset_fu_243_accumd_address0, grp_decode_fu_399_accumd_address0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumd_address0 <= grp_decode_fu_399_accumd_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumd_address0 <= grp_reset_fu_243_accumd_address0;
        else 
            accumd_address0 <= "XXXX";
        end if; 
    end process;


    accumd_ce0_assign_proc : process(grp_reset_fu_243_accumd_ce0, grp_decode_fu_399_accumd_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumd_ce0 <= grp_decode_fu_399_accumd_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumd_ce0 <= grp_reset_fu_243_accumd_ce0;
        else 
            accumd_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumd_d0_assign_proc : process(grp_reset_fu_243_accumd_d0, grp_decode_fu_399_accumd_d0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumd_d0 <= grp_decode_fu_399_accumd_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumd_d0 <= grp_reset_fu_243_accumd_d0;
        else 
            accumd_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accumd_we0_assign_proc : process(grp_reset_fu_243_accumd_we0, grp_decode_fu_399_accumd_we0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            accumd_we0 <= grp_decode_fu_399_accumd_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            accumd_we0 <= grp_reset_fu_243_accumd_we0;
        else 
            accumd_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln217_fu_478_p2 <= std_logic_vector(unsigned(i_fu_164) + unsigned(ap_const_lv6_1));
    add_ln223_fu_536_p2 <= std_logic_vector(unsigned(i_11_fu_168) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_reset_fu_243_ap_done)
    begin
        if ((grp_reset_fu_243_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_encode_fu_333_ap_done)
    begin
        if ((grp_encode_fu_333_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_decode_fu_399_ap_done)
    begin
        if ((grp_decode_fu_399_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln223_fu_530_p2)
    begin
        if (((icmp_ln223_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln223_fu_530_p2)
    begin
        if (((icmp_ln223_fu_530_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bph_address0_assign_proc : process(grp_reset_fu_243_dec_del_bph_address0, grp_decode_fu_399_dec_del_bph_address0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bph_address0 <= grp_decode_fu_399_dec_del_bph_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bph_address0 <= grp_reset_fu_243_dec_del_bph_address0;
        else 
            dec_del_bph_address0 <= "XXX";
        end if; 
    end process;


    dec_del_bph_ce0_assign_proc : process(grp_reset_fu_243_dec_del_bph_ce0, grp_decode_fu_399_dec_del_bph_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bph_ce0 <= grp_decode_fu_399_dec_del_bph_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bph_ce0 <= grp_reset_fu_243_dec_del_bph_ce0;
        else 
            dec_del_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bph_d0_assign_proc : process(grp_reset_fu_243_dec_del_bph_d0, grp_decode_fu_399_dec_del_bph_d0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bph_d0 <= grp_decode_fu_399_dec_del_bph_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bph_d0 <= grp_reset_fu_243_dec_del_bph_d0;
        else 
            dec_del_bph_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dec_del_bph_we0_assign_proc : process(grp_reset_fu_243_dec_del_bph_we0, grp_decode_fu_399_dec_del_bph_we0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bph_we0 <= grp_decode_fu_399_dec_del_bph_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bph_we0 <= grp_reset_fu_243_dec_del_bph_we0;
        else 
            dec_del_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bpl_address0_assign_proc : process(grp_reset_fu_243_dec_del_bpl_address0, grp_decode_fu_399_dec_del_bpl_address0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bpl_address0 <= grp_decode_fu_399_dec_del_bpl_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bpl_address0 <= grp_reset_fu_243_dec_del_bpl_address0;
        else 
            dec_del_bpl_address0 <= "XXX";
        end if; 
    end process;


    dec_del_bpl_ce0_assign_proc : process(grp_reset_fu_243_dec_del_bpl_ce0, grp_decode_fu_399_dec_del_bpl_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bpl_ce0 <= grp_decode_fu_399_dec_del_bpl_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bpl_ce0 <= grp_reset_fu_243_dec_del_bpl_ce0;
        else 
            dec_del_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bpl_d0_assign_proc : process(grp_reset_fu_243_dec_del_bpl_d0, grp_decode_fu_399_dec_del_bpl_d0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bpl_d0 <= grp_decode_fu_399_dec_del_bpl_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bpl_d0 <= grp_reset_fu_243_dec_del_bpl_d0;
        else 
            dec_del_bpl_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dec_del_bpl_we0_assign_proc : process(grp_reset_fu_243_dec_del_bpl_we0, grp_decode_fu_399_dec_del_bpl_we0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_bpl_we0 <= grp_decode_fu_399_dec_del_bpl_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bpl_we0 <= grp_reset_fu_243_dec_del_bpl_we0;
        else 
            dec_del_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_address0_assign_proc : process(grp_reset_fu_243_dec_del_dhx_address0, grp_decode_fu_399_dec_del_dhx_address0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dhx_address0 <= grp_decode_fu_399_dec_del_dhx_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dhx_address0 <= grp_reset_fu_243_dec_del_dhx_address0;
        else 
            dec_del_dhx_address0 <= "XXX";
        end if; 
    end process;


    dec_del_dhx_ce0_assign_proc : process(grp_reset_fu_243_dec_del_dhx_ce0, grp_decode_fu_399_dec_del_dhx_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dhx_ce0 <= grp_decode_fu_399_dec_del_dhx_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dhx_ce0 <= grp_reset_fu_243_dec_del_dhx_ce0;
        else 
            dec_del_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_ce1_assign_proc : process(grp_decode_fu_399_dec_del_dhx_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dhx_ce1 <= grp_decode_fu_399_dec_del_dhx_ce1;
        else 
            dec_del_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_d0_assign_proc : process(grp_reset_fu_243_dec_del_dhx_d0, grp_decode_fu_399_dec_del_dhx_d0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dhx_d0 <= grp_decode_fu_399_dec_del_dhx_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dhx_d0 <= grp_reset_fu_243_dec_del_dhx_d0;
        else 
            dec_del_dhx_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dec_del_dhx_we0_assign_proc : process(grp_reset_fu_243_dec_del_dhx_we0, grp_decode_fu_399_dec_del_dhx_we0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dhx_we0 <= grp_decode_fu_399_dec_del_dhx_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dhx_we0 <= grp_reset_fu_243_dec_del_dhx_we0;
        else 
            dec_del_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_we1_assign_proc : process(grp_decode_fu_399_dec_del_dhx_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dhx_we1 <= grp_decode_fu_399_dec_del_dhx_we1;
        else 
            dec_del_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_address0_assign_proc : process(grp_reset_fu_243_dec_del_dltx_address0, grp_decode_fu_399_dec_del_dltx_address0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dltx_address0 <= grp_decode_fu_399_dec_del_dltx_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dltx_address0 <= grp_reset_fu_243_dec_del_dltx_address0;
        else 
            dec_del_dltx_address0 <= "XXX";
        end if; 
    end process;


    dec_del_dltx_ce0_assign_proc : process(grp_reset_fu_243_dec_del_dltx_ce0, grp_decode_fu_399_dec_del_dltx_ce0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dltx_ce0 <= grp_decode_fu_399_dec_del_dltx_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dltx_ce0 <= grp_reset_fu_243_dec_del_dltx_ce0;
        else 
            dec_del_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_ce1_assign_proc : process(grp_decode_fu_399_dec_del_dltx_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dltx_ce1 <= grp_decode_fu_399_dec_del_dltx_ce1;
        else 
            dec_del_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_d0_assign_proc : process(grp_reset_fu_243_dec_del_dltx_d0, grp_decode_fu_399_dec_del_dltx_d0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dltx_d0 <= grp_decode_fu_399_dec_del_dltx_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dltx_d0 <= grp_reset_fu_243_dec_del_dltx_d0;
        else 
            dec_del_dltx_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dec_del_dltx_we0_assign_proc : process(grp_reset_fu_243_dec_del_dltx_we0, grp_decode_fu_399_dec_del_dltx_we0, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dltx_we0 <= grp_decode_fu_399_dec_del_dltx_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dltx_we0 <= grp_reset_fu_243_dec_del_dltx_we0;
        else 
            dec_del_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_we1_assign_proc : process(grp_decode_fu_399_dec_del_dltx_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_del_dltx_we1 <= grp_decode_fu_399_dec_del_dltx_we1;
        else 
            dec_del_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;

    decoded_address0 <= zext_ln227_fu_585_p1(7 - 1 downto 0);
    decoded_address1 <= zext_ln226_fu_569_p1(7 - 1 downto 0);

    decoded_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            decoded_ce0 <= ap_const_logic_1;
        else 
            decoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    decoded_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            decoded_ce1 <= ap_const_logic_1;
        else 
            decoded_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    decoded_d0 <= xout2;
    decoded_d1 <= xout1;

    decoded_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            decoded_we0 <= ap_const_logic_1;
        else 
            decoded_we0 <= ap_const_logic_0;
        end if; 
    end process;


    decoded_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            decoded_we1 <= ap_const_logic_1;
        else 
            decoded_we1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bph_address0_assign_proc : process(grp_reset_fu_243_delay_bph_address0, grp_encode_fu_333_delay_bph_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bph_address0 <= grp_encode_fu_333_delay_bph_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bph_address0 <= grp_reset_fu_243_delay_bph_address0;
        else 
            delay_bph_address0 <= "XXX";
        end if; 
    end process;


    delay_bph_ce0_assign_proc : process(grp_reset_fu_243_delay_bph_ce0, grp_encode_fu_333_delay_bph_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bph_ce0 <= grp_encode_fu_333_delay_bph_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bph_ce0 <= grp_reset_fu_243_delay_bph_ce0;
        else 
            delay_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bph_d0_assign_proc : process(grp_reset_fu_243_delay_bph_d0, grp_encode_fu_333_delay_bph_d0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bph_d0 <= grp_encode_fu_333_delay_bph_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bph_d0 <= grp_reset_fu_243_delay_bph_d0;
        else 
            delay_bph_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_bph_we0_assign_proc : process(grp_reset_fu_243_delay_bph_we0, grp_encode_fu_333_delay_bph_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bph_we0 <= grp_encode_fu_333_delay_bph_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bph_we0 <= grp_reset_fu_243_delay_bph_we0;
        else 
            delay_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bpl_address0_assign_proc : process(grp_reset_fu_243_delay_bpl_address0, grp_encode_fu_333_delay_bpl_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bpl_address0 <= grp_encode_fu_333_delay_bpl_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bpl_address0 <= grp_reset_fu_243_delay_bpl_address0;
        else 
            delay_bpl_address0 <= "XXX";
        end if; 
    end process;


    delay_bpl_ce0_assign_proc : process(grp_reset_fu_243_delay_bpl_ce0, grp_encode_fu_333_delay_bpl_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bpl_ce0 <= grp_encode_fu_333_delay_bpl_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bpl_ce0 <= grp_reset_fu_243_delay_bpl_ce0;
        else 
            delay_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bpl_d0_assign_proc : process(grp_reset_fu_243_delay_bpl_d0, grp_encode_fu_333_delay_bpl_d0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bpl_d0 <= grp_encode_fu_333_delay_bpl_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bpl_d0 <= grp_reset_fu_243_delay_bpl_d0;
        else 
            delay_bpl_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_bpl_we0_assign_proc : process(grp_reset_fu_243_delay_bpl_we0, grp_encode_fu_333_delay_bpl_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_bpl_we0 <= grp_encode_fu_333_delay_bpl_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_bpl_we0 <= grp_reset_fu_243_delay_bpl_we0;
        else 
            delay_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_address0_assign_proc : process(grp_reset_fu_243_delay_dhx_address0, grp_encode_fu_333_delay_dhx_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dhx_address0 <= grp_encode_fu_333_delay_dhx_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dhx_address0 <= grp_reset_fu_243_delay_dhx_address0;
        else 
            delay_dhx_address0 <= "XXX";
        end if; 
    end process;


    delay_dhx_ce0_assign_proc : process(grp_reset_fu_243_delay_dhx_ce0, grp_encode_fu_333_delay_dhx_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dhx_ce0 <= grp_encode_fu_333_delay_dhx_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dhx_ce0 <= grp_reset_fu_243_delay_dhx_ce0;
        else 
            delay_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_ce1_assign_proc : process(grp_encode_fu_333_delay_dhx_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dhx_ce1 <= grp_encode_fu_333_delay_dhx_ce1;
        else 
            delay_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_d0_assign_proc : process(grp_reset_fu_243_delay_dhx_d0, grp_encode_fu_333_delay_dhx_d0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dhx_d0 <= grp_encode_fu_333_delay_dhx_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dhx_d0 <= grp_reset_fu_243_delay_dhx_d0;
        else 
            delay_dhx_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_dhx_we0_assign_proc : process(grp_reset_fu_243_delay_dhx_we0, grp_encode_fu_333_delay_dhx_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dhx_we0 <= grp_encode_fu_333_delay_dhx_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dhx_we0 <= grp_reset_fu_243_delay_dhx_we0;
        else 
            delay_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_we1_assign_proc : process(grp_encode_fu_333_delay_dhx_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dhx_we1 <= grp_encode_fu_333_delay_dhx_we1;
        else 
            delay_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_address0_assign_proc : process(grp_reset_fu_243_delay_dltx_address0, grp_encode_fu_333_delay_dltx_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dltx_address0 <= grp_encode_fu_333_delay_dltx_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dltx_address0 <= grp_reset_fu_243_delay_dltx_address0;
        else 
            delay_dltx_address0 <= "XXX";
        end if; 
    end process;


    delay_dltx_ce0_assign_proc : process(grp_reset_fu_243_delay_dltx_ce0, grp_encode_fu_333_delay_dltx_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dltx_ce0 <= grp_encode_fu_333_delay_dltx_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dltx_ce0 <= grp_reset_fu_243_delay_dltx_ce0;
        else 
            delay_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_ce1_assign_proc : process(grp_encode_fu_333_delay_dltx_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dltx_ce1 <= grp_encode_fu_333_delay_dltx_ce1;
        else 
            delay_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_d0_assign_proc : process(grp_reset_fu_243_delay_dltx_d0, grp_encode_fu_333_delay_dltx_d0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dltx_d0 <= grp_encode_fu_333_delay_dltx_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dltx_d0 <= grp_reset_fu_243_delay_dltx_d0;
        else 
            delay_dltx_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_dltx_we0_assign_proc : process(grp_reset_fu_243_delay_dltx_we0, grp_encode_fu_333_delay_dltx_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dltx_we0 <= grp_encode_fu_333_delay_dltx_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            delay_dltx_we0 <= grp_reset_fu_243_delay_dltx_we0;
        else 
            delay_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_we1_assign_proc : process(grp_encode_fu_333_delay_dltx_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            delay_dltx_we1 <= grp_encode_fu_333_delay_dltx_we1;
        else 
            delay_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    encoded_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, zext_ln217_fu_518_p1, zext_ln223_fu_542_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            encoded_address0 <= zext_ln223_fu_542_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            encoded_address0 <= zext_ln217_fu_518_p1(6 - 1 downto 0);
        else 
            encoded_address0 <= "XXXXXX";
        end if; 
    end process;


    encoded_ce0_assign_proc : process(ap_CS_fsm_state6, grp_encode_fu_333_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((grp_encode_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            encoded_ce0 <= ap_const_logic_1;
        else 
            encoded_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    encoded_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_encode_fu_333_ap_return),32));

    encoded_we0_assign_proc : process(grp_encode_fu_333_ap_done, ap_CS_fsm_state5)
    begin
        if (((grp_encode_fu_333_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            encoded_we0 <= ap_const_logic_1;
        else 
            encoded_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_decode_fu_399_ap_start <= grp_decode_fu_399_ap_start_reg;
    grp_encode_fu_333_ap_start <= grp_encode_fu_333_ap_start_reg;
    grp_reset_fu_243_ap_start <= grp_reset_fu_243_ap_start_reg;

    h_address0_assign_proc : process(grp_encode_fu_333_h_address0, grp_decode_fu_399_h_address0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            h_address0 <= grp_decode_fu_399_h_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_address0 <= grp_encode_fu_333_h_address0;
        else 
            h_address0 <= "XXXXX";
        end if; 
    end process;


    h_address1_assign_proc : process(grp_encode_fu_333_h_address1, grp_decode_fu_399_h_address1, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            h_address1 <= grp_decode_fu_399_h_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_address1 <= grp_encode_fu_333_h_address1;
        else 
            h_address1 <= "XXXXX";
        end if; 
    end process;


    h_ce0_assign_proc : process(grp_encode_fu_333_h_ce0, grp_decode_fu_399_h_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            h_ce0 <= grp_decode_fu_399_h_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_ce0 <= grp_encode_fu_333_h_ce0;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(grp_encode_fu_333_h_ce1, grp_decode_fu_399_h_ce1, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            h_ce1 <= grp_decode_fu_399_h_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_ce1 <= grp_encode_fu_333_h_ce1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln217_fu_472_p2 <= "1" when (i_fu_164 = ap_const_lv6_32) else "0";
    icmp_ln223_fu_530_p2 <= "1" when (i_11_fu_168 = ap_const_lv6_32) else "0";

    ilb_table_address0_assign_proc : process(grp_encode_fu_333_ilb_table_address0, grp_decode_fu_399_ilb_table_address0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ilb_table_address0 <= grp_decode_fu_399_ilb_table_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ilb_table_address0 <= grp_encode_fu_333_ilb_table_address0;
        else 
            ilb_table_address0 <= "XXXXX";
        end if; 
    end process;


    ilb_table_address1_assign_proc : process(grp_encode_fu_333_ilb_table_address1, grp_decode_fu_399_ilb_table_address1, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ilb_table_address1 <= grp_decode_fu_399_ilb_table_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ilb_table_address1 <= grp_encode_fu_333_ilb_table_address1;
        else 
            ilb_table_address1 <= "XXXXX";
        end if; 
    end process;


    ilb_table_ce0_assign_proc : process(grp_encode_fu_333_ilb_table_ce0, grp_decode_fu_399_ilb_table_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ilb_table_ce0 <= grp_decode_fu_399_ilb_table_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ilb_table_ce0 <= grp_encode_fu_333_ilb_table_ce0;
        else 
            ilb_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ilb_table_ce1_assign_proc : process(grp_encode_fu_333_ilb_table_ce1, grp_decode_fu_399_ilb_table_ce1, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ilb_table_ce1 <= grp_decode_fu_399_ilb_table_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ilb_table_ce1 <= grp_encode_fu_333_ilb_table_ce1;
        else 
            ilb_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_data_address0 <= zext_ln219_1_fu_503_p1(7 - 1 downto 0);
    in_data_address1 <= zext_ln219_fu_492_p1(7 - 1 downto 0);

    in_data_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce0 <= ap_const_logic_1;
        else 
            in_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_data_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            in_data_ce1 <= ap_const_logic_1;
        else 
            in_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln219_fu_497_p2 <= (shl_ln_fu_484_p3 or ap_const_lv7_1);
    or_ln227_fu_579_p2 <= (shl_ln5_fu_562_p3 or ap_const_lv7_1);

    qq4_code4_table_address0_assign_proc : process(grp_encode_fu_333_qq4_code4_table_address0, grp_decode_fu_399_qq4_code4_table_address0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qq4_code4_table_address0 <= grp_decode_fu_399_qq4_code4_table_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qq4_code4_table_address0 <= grp_encode_fu_333_qq4_code4_table_address0;
        else 
            qq4_code4_table_address0 <= "XXXX";
        end if; 
    end process;


    qq4_code4_table_ce0_assign_proc : process(grp_encode_fu_333_qq4_code4_table_ce0, grp_decode_fu_399_qq4_code4_table_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qq4_code4_table_ce0 <= grp_decode_fu_399_qq4_code4_table_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qq4_code4_table_ce0 <= grp_encode_fu_333_qq4_code4_table_ce0;
        else 
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln5_fu_562_p3 <= (i_19_reg_632 & ap_const_lv1_0);
    shl_ln_fu_484_p3 <= (i_fu_164 & ap_const_lv1_0);

    tqmf_address0_assign_proc : process(grp_reset_fu_243_tqmf_address0, grp_encode_fu_333_tqmf_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tqmf_address0 <= grp_encode_fu_333_tqmf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tqmf_address0 <= grp_reset_fu_243_tqmf_address0;
        else 
            tqmf_address0 <= "XXXXX";
        end if; 
    end process;


    tqmf_ce0_assign_proc : process(grp_reset_fu_243_tqmf_ce0, grp_encode_fu_333_tqmf_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tqmf_ce0 <= grp_encode_fu_333_tqmf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tqmf_ce0 <= grp_reset_fu_243_tqmf_ce0;
        else 
            tqmf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_ce1_assign_proc : process(grp_encode_fu_333_tqmf_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tqmf_ce1 <= grp_encode_fu_333_tqmf_ce1;
        else 
            tqmf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_d0_assign_proc : process(grp_reset_fu_243_tqmf_d0, grp_encode_fu_333_tqmf_d0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tqmf_d0 <= grp_encode_fu_333_tqmf_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tqmf_d0 <= grp_reset_fu_243_tqmf_d0;
        else 
            tqmf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tqmf_we0_assign_proc : process(grp_reset_fu_243_tqmf_we0, grp_encode_fu_333_tqmf_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tqmf_we0 <= grp_encode_fu_333_tqmf_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tqmf_we0 <= grp_reset_fu_243_tqmf_we0;
        else 
            tqmf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_we1_assign_proc : process(grp_encode_fu_333_tqmf_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tqmf_we1 <= grp_encode_fu_333_tqmf_we1;
        else 
            tqmf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln225_fu_552_p1 <= encoded_q0(8 - 1 downto 0);

    wl_code_table_address0_assign_proc : process(grp_encode_fu_333_wl_code_table_address0, grp_decode_fu_399_wl_code_table_address0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            wl_code_table_address0 <= grp_decode_fu_399_wl_code_table_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wl_code_table_address0 <= grp_encode_fu_333_wl_code_table_address0;
        else 
            wl_code_table_address0 <= "XXXX";
        end if; 
    end process;


    wl_code_table_ce0_assign_proc : process(grp_encode_fu_333_wl_code_table_ce0, grp_decode_fu_399_wl_code_table_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            wl_code_table_ce0 <= grp_decode_fu_399_wl_code_table_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            wl_code_table_ce0 <= grp_encode_fu_333_wl_code_table_ce0;
        else 
            wl_code_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln217_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_18_reg_597),64));
    zext_ln219_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln219_fu_497_p2),64));
    zext_ln219_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_484_p3),64));
    zext_ln223_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_fu_168),64));
    zext_ln226_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_562_p3),64));
    zext_ln227_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln227_fu_579_p2),64));
end behav;
