// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_upzero (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dlt,
        dlti_address0,
        dlti_ce0,
        dlti_we0,
        dlti_d0,
        dlti_q0,
        dlti_address1,
        dlti_ce1,
        dlti_we1,
        dlti_d1,
        dlti_q1,
        bli_address0,
        bli_ce0,
        bli_we0,
        bli_d0,
        bli_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] dlt;
output  [2:0] dlti_address0;
output   dlti_ce0;
output   dlti_we0;
output  [15:0] dlti_d0;
input  [15:0] dlti_q0;
output  [2:0] dlti_address1;
output   dlti_ce1;
output   dlti_we1;
output  [15:0] dlti_d1;
input  [15:0] dlti_q1;
output  [2:0] bli_address0;
output   bli_ce0;
output   bli_we0;
output  [31:0] bli_d0;
input  [31:0] bli_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] dlti_address0;
reg dlti_ce0;
reg dlti_we0;
reg[2:0] dlti_address1;
reg dlti_ce1;
reg dlti_we1;
reg[15:0] dlti_d1;
reg[2:0] bli_address0;
reg bli_ce0;
reg bli_we0;
reg[31:0] bli_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_180;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln535_fu_186_p2;
reg   [0:0] icmp_ln535_reg_330;
wire  signed [31:0] sext_ln543_fu_192_p1;
reg  signed [31:0] sext_ln543_reg_343;
wire    ap_CS_fsm_state2;
reg   [2:0] bli_addr_1_reg_356;
reg   [2:0] bli_addr_reg_364;
wire   [2:0] dlti_addr_2_reg_369;
wire   [2:0] dlti_addr_4_reg_374;
reg   [15:0] dlti_load_2_reg_379;
reg   [15:0] dlti_load_4_reg_396;
wire   [63:0] zext_ln543_fu_206_p1;
wire   [0:0] grp_fu_168_p2;
wire   [63:0] zext_ln537_fu_217_p1;
reg   [2:0] i_fu_64;
wire   [2:0] grp_fu_174_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln550_fu_284_p2;
wire    ap_CS_fsm_state4;
wire  signed [15:0] icmp_ln535_fu_186_p0;
wire  signed [15:0] sext_ln543_fu_192_p0;
wire  signed [15:0] mul_ln545_fu_231_p1;
wire   [31:0] mul_ln545_fu_231_p2;
wire  signed [63:0] sext_ln545_1_fu_236_p1;
wire   [0:0] tmp_fu_240_p3;
wire  signed [31:0] sext_ln549_fu_256_p0;
wire  signed [31:0] shl_ln1_fu_260_p1;
wire   [39:0] shl_ln1_fu_260_p3;
wire  signed [39:0] sext_ln549_fu_256_p1;
wire   [39:0] sub_ln549_fu_268_p2;
wire   [31:0] wd3_fu_274_p4;
wire   [31:0] select_ln549_fu_248_p3;
wire  signed [31:0] sext_ln539_fu_291_p0;
wire  signed [31:0] shl_ln_fu_295_p1;
wire   [39:0] shl_ln_fu_295_p3;
wire  signed [39:0] sext_ln539_fu_291_p1;
wire   [39:0] sub_ln539_fu_303_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 i_fu_64 = 3'd0;
end

adpcm_main_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U70(
    .din0(dlti_q0),
    .din1(mul_ln545_fu_231_p1),
    .dout(mul_ln545_fu_231_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln535_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln535_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        i_fu_64 <= 3'd0;
    end else if ((((icmp_ln535_reg_330 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0)) | ((icmp_ln535_reg_330 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0)))) begin
        i_fu_64 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_180 <= dlti_q0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_180 <= dlti_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bli_addr_1_reg_356 <= zext_ln543_fu_206_p1;
        bli_addr_reg_364 <= zext_ln537_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dlti_load_2_reg_379 <= dlti_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        dlti_load_4_reg_396 <= dlti_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln535_reg_330 <= icmp_ln535_fu_186_p2;
        sext_ln543_reg_343 <= sext_ln543_fu_192_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bli_address0 = bli_addr_reg_364;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bli_address0 = bli_addr_1_reg_356;
    end else if (((icmp_ln535_reg_330 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0))) begin
        bli_address0 = zext_ln537_fu_217_p1;
    end else if (((icmp_ln535_reg_330 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0))) begin
        bli_address0 = zext_ln543_fu_206_p1;
    end else begin
        bli_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln535_reg_330 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0)) | ((icmp_ln535_reg_330 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0)))) begin
        bli_ce0 = 1'b1;
    end else begin
        bli_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bli_d0 = {{sub_ln539_fu_303_p2[39:8]}};
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bli_d0 = add_ln550_fu_284_p2;
    end else begin
        bli_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        bli_we0 = 1'b1;
    end else begin
        bli_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dlti_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dlti_address0 = dlti_addr_4_reg_374;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dlti_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dlti_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln535_reg_330 == 1'd0) & (grp_fu_168_p2 == 1'd1)) | ((icmp_ln535_reg_330 == 1'd1) & (grp_fu_168_p2 == 1'd1))))) begin
        dlti_address0 = 64'd3;
    end else if (((icmp_ln535_reg_330 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0))) begin
        dlti_address0 = zext_ln543_fu_206_p1;
    end else begin
        dlti_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dlti_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dlti_address1 = dlti_addr_2_reg_369;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dlti_address1 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dlti_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dlti_address1 = 64'd4;
    end else begin
        dlti_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln535_reg_330 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state2) & (((icmp_ln535_reg_330 == 1'd0) & (grp_fu_168_p2 == 1'd1)) | ((icmp_ln535_reg_330 == 1'd1) & (grp_fu_168_p2 == 1'd1)))))) begin
        dlti_ce0 = 1'b1;
    end else begin
        dlti_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state8))) begin
        dlti_ce1 = 1'b1;
    end else begin
        dlti_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dlti_d1 = dlti_load_4_reg_396;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dlti_d1 = dlti_load_2_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dlti_d1 = dlt;
    end else begin
        dlti_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        dlti_we0 = 1'b1;
    end else begin
        dlti_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        dlti_we1 = 1'b1;
    end else begin
        dlti_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln535_reg_330 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (grp_fu_168_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state2) & (((icmp_ln535_reg_330 == 1'd0) & (grp_fu_168_p2 == 1'd1)) | ((icmp_ln535_reg_330 == 1'd1) & (grp_fu_168_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln550_fu_284_p2 = (wd3_fu_274_p4 + select_ln549_fu_248_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign dlti_addr_2_reg_369 = 64'd4;

assign dlti_addr_4_reg_374 = 64'd3;

assign dlti_d0 = reg_180;

assign grp_fu_168_p2 = ((i_fu_64 == 3'd6) ? 1'b1 : 1'b0);

assign grp_fu_174_p2 = (i_fu_64 + 3'd1);

assign icmp_ln535_fu_186_p0 = dlt;

assign icmp_ln535_fu_186_p2 = ((icmp_ln535_fu_186_p0 == 16'd0) ? 1'b1 : 1'b0);

assign mul_ln545_fu_231_p1 = sext_ln543_reg_343;

assign select_ln549_fu_248_p3 = ((tmp_fu_240_p3[0:0] == 1'b1) ? 32'd4294967168 : 32'd128);

assign sext_ln539_fu_291_p0 = bli_q0;

assign sext_ln539_fu_291_p1 = sext_ln539_fu_291_p0;

assign sext_ln543_fu_192_p0 = dlt;

assign sext_ln543_fu_192_p1 = sext_ln543_fu_192_p0;

assign sext_ln545_1_fu_236_p1 = $signed(mul_ln545_fu_231_p2);

assign sext_ln549_fu_256_p0 = bli_q0;

assign sext_ln549_fu_256_p1 = sext_ln549_fu_256_p0;

assign shl_ln1_fu_260_p1 = bli_q0;

assign shl_ln1_fu_260_p3 = {{shl_ln1_fu_260_p1}, {8'd0}};

assign shl_ln_fu_295_p1 = bli_q0;

assign shl_ln_fu_295_p3 = {{shl_ln_fu_295_p1}, {8'd0}};

assign sub_ln539_fu_303_p2 = ($signed(shl_ln_fu_295_p3) - $signed(sext_ln539_fu_291_p1));

assign sub_ln549_fu_268_p2 = ($signed(shl_ln1_fu_260_p3) - $signed(sext_ln549_fu_256_p1));

assign tmp_fu_240_p3 = sext_ln545_1_fu_236_p1[32'd63];

assign wd3_fu_274_p4 = {{sub_ln549_fu_268_p2[39:8]}};

assign zext_ln537_fu_217_p1 = i_fu_64;

assign zext_ln543_fu_206_p1 = i_fu_64;

endmodule //adpcm_main_upzero
