// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_logscl (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        il,
        nbl,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] il;
input  [14:0] nbl;
output  [14:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] wl_code_table_address0;
reg    wl_code_table_ce0;
wire   [12:0] wl_code_table_q0;
wire   [63:0] zext_ln512_fu_81_p1;
wire    ap_CS_fsm_state2;
wire   [3:0] lshr_ln_fu_71_p4;
wire   [21:0] shl_ln_fu_90_p3;
wire   [22:0] zext_ln511_1_fu_98_p1;
wire   [22:0] zext_ln511_fu_86_p1;
wire   [22:0] sub_ln511_fu_102_p2;
wire   [15:0] trunc_ln_fu_108_p4;
wire  signed [16:0] sext_ln512_1_fu_122_p1;
wire  signed [16:0] sext_ln512_fu_118_p1;
wire  signed [16:0] add_ln512_fu_126_p2;
wire  signed [31:0] sext_ln513_fu_132_p1;
wire   [0:0] tmp_fu_136_p3;
wire   [16:0] select_ln513_fu_144_p3;
wire   [0:0] icmp_ln515_fu_156_p2;
wire   [14:0] trunc_ln515_fu_152_p1;
wire   [14:0] select_ln515_fu_162_p3;
reg   [14:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 15'd0;
end

adpcm_main_logscl_wl_code_table_ROM_AUTO_1R #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
wl_code_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(wl_code_table_address0),
    .ce0(wl_code_table_ce0),
    .q0(wl_code_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 15'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= select_ln515_fu_162_p3;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = select_ln515_fu_162_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        wl_code_table_ce0 = 1'b1;
    end else begin
        wl_code_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln512_fu_126_p2 = ($signed(sext_ln512_1_fu_122_p1) + $signed(sext_ln512_fu_118_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln515_fu_156_p2 = ((select_ln513_fu_144_p3 > 17'd18432) ? 1'b1 : 1'b0);

assign lshr_ln_fu_71_p4 = {{il[5:2]}};

assign select_ln513_fu_144_p3 = ((tmp_fu_136_p3[0:0] == 1'b1) ? 17'd0 : add_ln512_fu_126_p2);

assign select_ln515_fu_162_p3 = ((icmp_ln515_fu_156_p2[0:0] == 1'b1) ? 15'd18432 : trunc_ln515_fu_152_p1);

assign sext_ln512_1_fu_122_p1 = $signed(wl_code_table_q0);

assign sext_ln512_fu_118_p1 = $signed(trunc_ln_fu_108_p4);

assign sext_ln513_fu_132_p1 = add_ln512_fu_126_p2;

assign shl_ln_fu_90_p3 = {{nbl}, {7'd0}};

assign sub_ln511_fu_102_p2 = (zext_ln511_1_fu_98_p1 - zext_ln511_fu_86_p1);

assign tmp_fu_136_p3 = sext_ln513_fu_132_p1[32'd31];

assign trunc_ln515_fu_152_p1 = select_ln513_fu_144_p3[14:0];

assign trunc_ln_fu_108_p4 = {{sub_ln511_fu_102_p2[22:7]}};

assign wl_code_table_address0 = zext_ln512_fu_81_p1;

assign zext_ln511_1_fu_98_p1 = shl_ln_fu_90_p3;

assign zext_ln511_fu_86_p1 = nbl;

assign zext_ln512_fu_81_p1 = lshr_ln_fu_71_p4;

endmodule //adpcm_main_logscl
