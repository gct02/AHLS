-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity adpcm_main_decode_qq6_code6_table_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 16; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of adpcm_main_decode_qq6_code6_table_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "1111111101111000", 1 => "1111111101111000", 2 => "1111111101111000", 3 => "1111111101111000", 
    4 => "1001111100011000", 5 => "1010101001110000", 6 => "1011010111000000", 7 => "1011111011000000", 
    8 => "1100010101111000", 9 => "1100101100111000", 10 => "1101000000001000", 11 => "1101010001001000", 
    12 => "1101100000001000", 13 => "1101101101110000", 14 => "1101111010000000", 15 => "1110000101010000", 
    16 => "1110001111101000", 17 => "1110011001010000", 18 => "1110100010010000", 19 => "1110101010110000", 
    20 => "1110110010110000", 21 => "1110111010010000", 22 => "1111000001011000", 23 => "1111001000001000", 
    24 => "1111001110100000", 25 => "1111010100101000", 26 => "1111011010100000", 27 => "1111100000010000", 
    28 => "1111100101101000", 29 => "1111101010110000", 30 => "1111101111110000", 31 => "1111110100101000", 
    32 => "0110000011101000", 33 => "0101010110010000", 34 => "0100101001000000", 35 => "0100000101000000", 
    36 => "0011101010001000", 37 => "0011010011001000", 38 => "0010111111111000", 39 => "0010101110111000", 
    40 => "0010011111111000", 41 => "0010010010010000", 42 => "0010000110000000", 43 => "0001111010110000", 
    44 => "0001110000011000", 45 => "0001100110110000", 46 => "0001011101110000", 47 => "0001010101010000", 
    48 => "0001001101010000", 49 => "0001000101110000", 50 => "0000111110101000", 51 => "0000110111111000", 
    52 => "0000110001100000", 53 => "0000101011011000", 54 => "0000100101100000", 55 => "0000011111110000", 
    56 => "0000011010011000", 57 => "0000010101010000", 58 => "0000010000010000", 59 => "0000001011011000", 
    60 => "0000000110110000", 61 => "0000000010001000", 62 => "1111111001010000", 63 => "1111111101111000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

