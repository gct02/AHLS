// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_scalel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        nbl,
        shift_constant,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] nbl;
input  [3:0] shift_constant;
output  [14:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] ilb_table_address0;
reg    ilb_table_ce0;
wire   [11:0] ilb_table_q0;
reg   [3:0] tmp_reg_129;
wire   [63:0] zext_ln525_fu_83_p1;
wire    ap_CS_fsm_state2;
wire   [4:0] wd1_fu_63_p4;
wire   [3:0] add_ln525_fu_91_p2;
wire   [4:0] zext_ln525_2_fu_97_p1;
wire   [4:0] zext_ln522_fu_88_p1;
wire   [4:0] sub_ln525_fu_101_p2;
wire  signed [31:0] sext_ln525_fu_107_p1;
wire   [11:0] sext_ln525cast_fu_111_p1;
wire   [11:0] wd3_fu_115_p2;
wire   [14:0] shl_ln_fu_121_p3;
reg   [14:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 15'd0;
end

adpcm_main_scalel_ilb_table_ROM_AUTO_1R #(
    .DataWidth( 12 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ilb_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ilb_table_address0),
    .ce0(ilb_table_ce0),
    .q0(ilb_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
                        ap_return_preg[14 : 3] <= shl_ln_fu_121_p3[14 : 3];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_129 <= {{nbl[14:11]}};
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = shl_ln_fu_121_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ilb_table_ce0 = 1'b1;
    end else begin
        ilb_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln525_fu_91_p2 = (shift_constant + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ilb_table_address0 = zext_ln525_fu_83_p1;

assign sext_ln525_fu_107_p1 = $signed(sub_ln525_fu_101_p2);

assign sext_ln525cast_fu_111_p1 = sext_ln525_fu_107_p1[11:0];

assign shl_ln_fu_121_p3 = {{wd3_fu_115_p2}, {3'd0}};

assign sub_ln525_fu_101_p2 = (zext_ln525_2_fu_97_p1 - zext_ln522_fu_88_p1);

assign wd1_fu_63_p4 = {{nbl[10:6]}};

assign wd3_fu_115_p2 = ilb_table_q0 >> sext_ln525cast_fu_111_p1;

assign zext_ln522_fu_88_p1 = tmp_reg_129;

assign zext_ln525_2_fu_97_p1 = add_ln525_fu_91_p2;

assign zext_ln525_fu_83_p1 = wd1_fu_63_p4;

always @ (posedge ap_clk) begin
    ap_return_preg[2:0] <= 3'b000;
end

endmodule //adpcm_main_scalel
