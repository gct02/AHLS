// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_uppol2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        al1,
        al2,
        plt,
        plt1,
        plt2,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] al1;
input  [14:0] al2;
input  [31:0] plt;
input  [31:0] plt1;
input  [31:0] plt2;
output  [14:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] tmp_2_reg_274;
reg   [0:0] tmp_3_reg_279;
wire    ap_CS_fsm_state2;
wire  signed [31:0] mul_ln570_fu_94_p1;
wire  signed [63:0] sext_ln570_fu_102_p1;
wire  signed [31:0] mul_ln574_fu_98_p1;
wire   [63:0] mul_ln570_fu_94_p2;
wire   [63:0] mul_ln574_fu_98_p2;
wire   [17:0] wd2_fu_134_p3;
wire  signed [18:0] sext_ln566_fu_142_p1;
wire   [10:0] tmp_fu_152_p4;
wire   [18:0] sub_ln571_fu_146_p2;
wire  signed [11:0] sext_ln572_fu_162_p1;
wire   [11:0] tmp_1_fu_166_p4;
wire   [11:0] select_ln570_fu_176_p3;
wire  signed [14:0] sext_ln580_fu_187_p0;
wire  signed [14:0] shl_ln_fu_191_p1;
wire   [21:0] shl_ln_fu_191_p3;
wire  signed [22:0] sext_ln580_1_fu_199_p1;
wire  signed [22:0] sext_ln580_fu_187_p1;
wire   [22:0] sub_ln580_fu_203_p2;
wire   [15:0] trunc_ln1_fu_209_p4;
wire  signed [16:0] sext_ln580_2_fu_219_p1;
wire   [16:0] select_ln580_fu_223_p3;
wire   [16:0] add_ln580_fu_230_p2;
wire  signed [16:0] sext_ln574_1_fu_183_p1;
wire   [16:0] apl2_fu_236_p2;
wire   [0:0] icmp_ln583_fu_242_p2;
wire   [16:0] apl2_1_fu_248_p3;
wire   [0:0] icmp_ln585_fu_260_p2;
wire   [14:0] trunc_ln567_fu_256_p1;
wire   [14:0] apl2_2_fu_266_p3;
reg   [14:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 15'd0;
end

adpcm_main_mul_32s_32s_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_1_1_U75(
    .din0(plt1),
    .din1(mul_ln570_fu_94_p1),
    .dout(mul_ln570_fu_94_p2)
);

adpcm_main_mul_32s_32s_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_1_1_U76(
    .din0(plt2),
    .din1(mul_ln574_fu_98_p1),
    .dout(mul_ln574_fu_98_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 15'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= apl2_2_fu_266_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_2_reg_274 <= mul_ln570_fu_94_p2[32'd63];
        tmp_3_reg_279 <= mul_ln574_fu_98_p2[32'd63];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = apl2_2_fu_266_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln580_fu_230_p2 = ($signed(sext_ln580_2_fu_219_p1) + $signed(select_ln580_fu_223_p3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign apl2_1_fu_248_p3 = ((icmp_ln583_fu_242_p2[0:0] == 1'b1) ? 17'd12288 : apl2_fu_236_p2);

assign apl2_2_fu_266_p3 = ((icmp_ln585_fu_260_p2[0:0] == 1'b1) ? 15'd20480 : trunc_ln567_fu_256_p1);

assign apl2_fu_236_p2 = ($signed(add_ln580_fu_230_p2) + $signed(sext_ln574_1_fu_183_p1));

assign icmp_ln583_fu_242_p2 = (($signed(apl2_fu_236_p2) > $signed(17'd12288)) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_260_p2 = (($signed(apl2_1_fu_248_p3) < $signed(17'd118784)) ? 1'b1 : 1'b0);

assign mul_ln570_fu_94_p1 = sext_ln570_fu_102_p1;

assign mul_ln574_fu_98_p1 = sext_ln570_fu_102_p1;

assign select_ln570_fu_176_p3 = ((tmp_2_reg_274[0:0] == 1'b1) ? sext_ln572_fu_162_p1 : tmp_1_fu_166_p4);

assign select_ln580_fu_223_p3 = ((tmp_3_reg_279[0:0] == 1'b1) ? 17'd130944 : 17'd128);

assign sext_ln566_fu_142_p1 = $signed(wd2_fu_134_p3);

assign sext_ln570_fu_102_p1 = $signed(plt);

assign sext_ln572_fu_162_p1 = $signed(tmp_fu_152_p4);

assign sext_ln574_1_fu_183_p1 = $signed(select_ln570_fu_176_p3);

assign sext_ln580_1_fu_199_p1 = $signed(shl_ln_fu_191_p3);

assign sext_ln580_2_fu_219_p1 = $signed(trunc_ln1_fu_209_p4);

assign sext_ln580_fu_187_p0 = al2;

assign sext_ln580_fu_187_p1 = sext_ln580_fu_187_p0;

assign shl_ln_fu_191_p1 = al2;

assign shl_ln_fu_191_p3 = {{shl_ln_fu_191_p1}, {7'd0}};

assign sub_ln571_fu_146_p2 = ($signed(19'd0) - $signed(sext_ln566_fu_142_p1));

assign sub_ln580_fu_203_p2 = ($signed(sext_ln580_1_fu_199_p1) - $signed(sext_ln580_fu_187_p1));

assign tmp_1_fu_166_p4 = {{sub_ln571_fu_146_p2[18:7]}};

assign tmp_fu_152_p4 = {{al1[15:5]}};

assign trunc_ln1_fu_209_p4 = {{sub_ln580_fu_203_p2[22:7]}};

assign trunc_ln567_fu_256_p1 = apl2_1_fu_248_p3[14:0];

assign wd2_fu_134_p3 = {{al1}, {2'd0}};

endmodule //adpcm_main_uppol2
