// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_uppol1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        al1,
        apl2,
        plt,
        plt1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] al1;
input  [14:0] apl2;
input  [31:0] plt;
input  [31:0] plt1;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [17:0] apl1_fu_134_p2;
reg   [17:0] apl1_reg_194;
wire    ap_CS_fsm_state2;
wire  signed [15:0] sext_ln597_fu_72_p0;
wire  signed [15:0] shl_ln_fu_76_p1;
wire   [23:0] shl_ln_fu_76_p3;
wire  signed [24:0] sext_ln597_1_fu_84_p1;
wire  signed [24:0] sext_ln597_fu_72_p1;
wire   [24:0] sub_ln597_fu_88_p2;
wire   [16:0] trunc_ln_fu_94_p4;
wire   [63:0] mul_ln599_fu_68_p2;
wire   [0:0] tmp_fu_118_p3;
wire   [17:0] select_ln599_fu_126_p3;
wire  signed [17:0] sext_ln599_2_fu_104_p1;
wire  signed [15:0] sext_ln20_fu_140_p1;
wire  signed [15:0] wd3_fu_144_p2;
wire  signed [17:0] sext_ln595_fu_150_p1;
wire   [0:0] icmp_ln607_fu_154_p2;
wire   [17:0] apl1_1_fu_159_p3;
wire  signed [15:0] apl1_2_fu_170_p2;
wire  signed [17:0] sext_ln609_fu_176_p1;
wire   [0:0] icmp_ln609_fu_180_p2;
wire   [15:0] trunc_ln595_fu_166_p1;
wire   [15:0] apl1_3_fu_186_p3;
reg   [15:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 16'd0;
end

adpcm_main_mul_32s_32s_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32s_32s_64_1_1_U83(
    .din0(plt1),
    .din1(plt),
    .dout(mul_ln599_fu_68_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= apl1_3_fu_186_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        apl1_reg_194 <= apl1_fu_134_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = apl1_3_fu_186_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign apl1_1_fu_159_p3 = ((icmp_ln607_fu_154_p2[0:0] == 1'b1) ? sext_ln595_fu_150_p1 : apl1_reg_194);

assign apl1_2_fu_170_p2 = ($signed(16'd0) - $signed(wd3_fu_144_p2));

assign apl1_3_fu_186_p3 = ((icmp_ln609_fu_180_p2[0:0] == 1'b1) ? apl1_2_fu_170_p2 : trunc_ln595_fu_166_p1);

assign apl1_fu_134_p2 = ($signed(select_ln599_fu_126_p3) + $signed(sext_ln599_2_fu_104_p1));

assign icmp_ln607_fu_154_p2 = (($signed(apl1_reg_194) > $signed(sext_ln595_fu_150_p1)) ? 1'b1 : 1'b0);

assign icmp_ln609_fu_180_p2 = (($signed(apl1_1_fu_159_p3) < $signed(sext_ln609_fu_176_p1)) ? 1'b1 : 1'b0);

assign select_ln599_fu_126_p3 = ((tmp_fu_118_p3[0:0] == 1'b1) ? 18'd261952 : 18'd192);

assign sext_ln20_fu_140_p1 = $signed(apl2);

assign sext_ln595_fu_150_p1 = wd3_fu_144_p2;

assign sext_ln597_1_fu_84_p1 = $signed(shl_ln_fu_76_p3);

assign sext_ln597_fu_72_p0 = al1;

assign sext_ln597_fu_72_p1 = sext_ln597_fu_72_p0;

assign sext_ln599_2_fu_104_p1 = $signed(trunc_ln_fu_94_p4);

assign sext_ln609_fu_176_p1 = apl1_2_fu_170_p2;

assign shl_ln_fu_76_p1 = al1;

assign shl_ln_fu_76_p3 = {{shl_ln_fu_76_p1}, {8'd0}};

assign sub_ln597_fu_88_p2 = ($signed(sext_ln597_1_fu_84_p1) - $signed(sext_ln597_fu_72_p1));

assign tmp_fu_118_p3 = mul_ln599_fu_68_p2[32'd63];

assign trunc_ln595_fu_166_p1 = apl1_1_fu_159_p3[15:0];

assign trunc_ln_fu_94_p4 = {{sub_ln597_fu_88_p2[24:8]}};

assign wd3_fu_144_p2 = ($signed(16'd15360) - $signed(sext_ln20_fu_140_p1));

endmodule //adpcm_main_uppol1
