-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_upzero is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dlt : IN STD_LOGIC_VECTOR (15 downto 0);
    dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce0 : OUT STD_LOGIC;
    dlti_we0 : OUT STD_LOGIC;
    dlti_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dlti_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlti_ce1 : OUT STD_LOGIC;
    dlti_we1 : OUT STD_LOGIC;
    dlti_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dlti_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bli_ce0 : OUT STD_LOGIC;
    bli_we0 : OUT STD_LOGIC;
    bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of adpcm_main_upzero is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_180 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln535_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln535_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln543_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln543_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bli_addr_1_reg_356 : STD_LOGIC_VECTOR (2 downto 0);
    signal bli_addr_reg_364 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_2_reg_369 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_addr_4_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal dlti_load_2_reg_379 : STD_LOGIC_VECTOR (15 downto 0);
    signal dlti_load_4_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln543_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln537_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_64 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal grp_fu_174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln550_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln535_fu_186_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln543_fu_192_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln545_fu_231_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln545_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln545_1_fu_236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln549_fu_256_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_260_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln549_fu_256_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln549_fu_268_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd3_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln549_fu_248_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln539_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_295_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln539_fu_291_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln539_fu_303_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_16s_16s_32_1_1_U70 : component adpcm_main_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => dlti_q0,
        din1 => mul_ln545_fu_231_p1,
        dout => mul_ln545_fu_231_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln535_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln535_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                i_fu_64 <= ap_const_lv3_0;
            elsif ((((icmp_ln535_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0)) or ((icmp_ln535_reg_330 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0)))) then 
                i_fu_64 <= grp_fu_174_p2;
            end if; 
        end if;
    end process;

    reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_180 <= dlti_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_180 <= dlti_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bli_addr_1_reg_356 <= zext_ln543_fu_206_p1(3 - 1 downto 0);
                bli_addr_reg_364 <= zext_ln537_fu_217_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                dlti_load_2_reg_379 <= dlti_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                dlti_load_4_reg_396 <= dlti_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln535_reg_330 <= icmp_ln535_fu_186_p2;
                sext_ln543_reg_343 <= sext_ln543_fu_192_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln535_reg_330, ap_CS_fsm_state2, grp_fu_168_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln535_reg_330 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln535_reg_330 = ap_const_lv1_0) and (grp_fu_168_p2 = ap_const_lv1_1)) or ((icmp_ln535_reg_330 = ap_const_lv1_1) and (grp_fu_168_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln550_fu_284_p2 <= std_logic_vector(unsigned(wd3_fu_274_p4) + unsigned(select_ln549_fu_248_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bli_address0_assign_proc : process(icmp_ln535_reg_330, ap_CS_fsm_state2, bli_addr_1_reg_356, bli_addr_reg_364, zext_ln543_fu_206_p1, grp_fu_168_p2, zext_ln537_fu_217_p1, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bli_address0 <= bli_addr_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bli_address0 <= bli_addr_1_reg_356;
        elsif (((icmp_ln535_reg_330 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0))) then 
            bli_address0 <= zext_ln537_fu_217_p1(3 - 1 downto 0);
        elsif (((icmp_ln535_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0))) then 
            bli_address0 <= zext_ln543_fu_206_p1(3 - 1 downto 0);
        else 
            bli_address0 <= "XXX";
        end if; 
    end process;


    bli_ce0_assign_proc : process(icmp_ln535_reg_330, ap_CS_fsm_state2, grp_fu_168_p2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln535_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0)) or ((icmp_ln535_reg_330 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0)))) then 
            bli_ce0 <= ap_const_logic_1;
        else 
            bli_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bli_d0_assign_proc : process(ap_CS_fsm_state3, add_ln550_fu_284_p2, ap_CS_fsm_state4, sub_ln539_fu_303_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bli_d0 <= sub_ln539_fu_303_p2(39 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bli_d0 <= add_ln550_fu_284_p2;
        else 
            bli_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bli_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bli_we0 <= ap_const_logic_1;
        else 
            bli_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_addr_2_reg_369 <= ap_const_lv64_4(3 - 1 downto 0);
    dlti_addr_4_reg_374 <= ap_const_lv64_3(3 - 1 downto 0);

    dlti_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln535_reg_330, ap_CS_fsm_state2, dlti_addr_4_reg_374, zext_ln543_fu_206_p1, grp_fu_168_p2, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dlti_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dlti_address0 <= dlti_addr_4_reg_374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dlti_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dlti_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln535_reg_330 = ap_const_lv1_0) and (grp_fu_168_p2 = ap_const_lv1_1)) or ((icmp_ln535_reg_330 = ap_const_lv1_1) and (grp_fu_168_p2 = ap_const_lv1_1))))) then 
            dlti_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((icmp_ln535_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0))) then 
            dlti_address0 <= zext_ln543_fu_206_p1(3 - 1 downto 0);
        else 
            dlti_address0 <= "XXX";
        end if; 
    end process;


    dlti_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, dlti_addr_2_reg_369, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dlti_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dlti_address1 <= dlti_addr_2_reg_369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dlti_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dlti_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dlti_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            dlti_address1 <= "XXX";
        end if; 
    end process;


    dlti_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln535_reg_330, ap_CS_fsm_state2, grp_fu_168_p2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln535_reg_330 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fu_168_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (((icmp_ln535_reg_330 = ap_const_lv1_0) and (grp_fu_168_p2 = ap_const_lv1_1)) or ((icmp_ln535_reg_330 = ap_const_lv1_1) and (grp_fu_168_p2 = ap_const_lv1_1)))))) then 
            dlti_ce0 <= ap_const_logic_1;
        else 
            dlti_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dlti_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state2, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            dlti_ce1 <= ap_const_logic_1;
        else 
            dlti_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dlti_d0 <= reg_180;

    dlti_d1_assign_proc : process(dlt, ap_CS_fsm_state6, ap_CS_fsm_state7, dlti_load_2_reg_379, dlti_load_4_reg_396, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dlti_d1 <= dlti_load_4_reg_396;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dlti_d1 <= dlti_load_2_reg_379;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dlti_d1 <= dlt;
        else 
            dlti_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dlti_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            dlti_we0 <= ap_const_logic_1;
        else 
            dlti_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dlti_we1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            dlti_we1 <= ap_const_logic_1;
        else 
            dlti_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_168_p2 <= "1" when (i_fu_64 = ap_const_lv3_6) else "0";
    grp_fu_174_p2 <= std_logic_vector(unsigned(i_fu_64) + unsigned(ap_const_lv3_1));
    icmp_ln535_fu_186_p0 <= dlt;
    icmp_ln535_fu_186_p2 <= "1" when (icmp_ln535_fu_186_p0 = ap_const_lv16_0) else "0";
    mul_ln545_fu_231_p1 <= sext_ln543_reg_343(16 - 1 downto 0);
    select_ln549_fu_248_p3 <= 
        ap_const_lv32_FFFFFF80 when (tmp_fu_240_p3(0) = '1') else 
        ap_const_lv32_80;
    sext_ln539_fu_291_p0 <= bli_q0;
        sext_ln539_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln539_fu_291_p0),40));

    sext_ln543_fu_192_p0 <= dlt;
        sext_ln543_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln543_fu_192_p0),32));

        sext_ln545_1_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln545_fu_231_p2),64));

    sext_ln549_fu_256_p0 <= bli_q0;
        sext_ln549_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln549_fu_256_p0),40));

    shl_ln1_fu_260_p1 <= bli_q0;
    shl_ln1_fu_260_p3 <= (shl_ln1_fu_260_p1 & ap_const_lv8_0);
    shl_ln_fu_295_p1 <= bli_q0;
    shl_ln_fu_295_p3 <= (shl_ln_fu_295_p1 & ap_const_lv8_0);
    sub_ln539_fu_303_p2 <= std_logic_vector(unsigned(shl_ln_fu_295_p3) - unsigned(sext_ln539_fu_291_p1));
    sub_ln549_fu_268_p2 <= std_logic_vector(unsigned(shl_ln1_fu_260_p3) - unsigned(sext_ln549_fu_256_p1));
    tmp_fu_240_p3 <= sext_ln545_1_fu_236_p1(63 downto 63);
    wd3_fu_274_p4 <= sub_ln549_fu_268_p2(39 downto 8);
    zext_ln537_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_64),64));
    zext_ln543_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_64),64));
end behav;
