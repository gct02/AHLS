-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_uppol1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    al1 : IN STD_LOGIC_VECTOR (15 downto 0);
    apl2 : IN STD_LOGIC_VECTOR (14 downto 0);
    plt : IN STD_LOGIC_VECTOR (31 downto 0);
    plt1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of adpcm_main_uppol1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv18_3FF40 : STD_LOGIC_VECTOR (17 downto 0) := "111111111101000000";
    constant ap_const_lv18_C0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011000000";
    constant ap_const_lv16_3C00 : STD_LOGIC_VECTOR (15 downto 0) := "0011110000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal apl1_fu_134_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal apl1_reg_194 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln597_fu_72_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_76_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_76_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln597_1_fu_84_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln597_fu_72_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln597_fu_88_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln_fu_94_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln599_fu_68_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln599_fu_126_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln599_2_fu_104_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln20_fu_140_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal wd3_fu_144_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln595_fu_150_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln607_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_1_fu_159_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal apl1_2_fu_170_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln609_fu_176_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln609_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_166_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_3_fu_186_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_mul_32s_32s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32s_32s_64_1_1_U83 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => plt1,
        din1 => plt,
        dout => mul_ln599_fu_68_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= apl1_3_fu_186_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                apl1_reg_194 <= apl1_fu_134_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, apl1_3_fu_186_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= apl1_3_fu_186_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    apl1_1_fu_159_p3 <= 
        sext_ln595_fu_150_p1 when (icmp_ln607_fu_154_p2(0) = '1') else 
        apl1_reg_194;
    apl1_2_fu_170_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(wd3_fu_144_p2));
    apl1_3_fu_186_p3 <= 
        apl1_2_fu_170_p2 when (icmp_ln609_fu_180_p2(0) = '1') else 
        trunc_ln595_fu_166_p1;
    apl1_fu_134_p2 <= std_logic_vector(unsigned(select_ln599_fu_126_p3) + unsigned(sext_ln599_2_fu_104_p1));
    icmp_ln607_fu_154_p2 <= "1" when (signed(apl1_reg_194) > signed(sext_ln595_fu_150_p1)) else "0";
    icmp_ln609_fu_180_p2 <= "1" when (signed(apl1_1_fu_159_p3) < signed(sext_ln609_fu_176_p1)) else "0";
    select_ln599_fu_126_p3 <= 
        ap_const_lv18_3FF40 when (tmp_fu_118_p3(0) = '1') else 
        ap_const_lv18_C0;
        sext_ln20_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl2),16));

        sext_ln595_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd3_fu_144_p2),18));

        sext_ln597_1_fu_84_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_76_p3),25));

    sext_ln597_fu_72_p0 <= al1;
        sext_ln597_fu_72_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln597_fu_72_p0),25));

        sext_ln599_2_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_94_p4),18));

        sext_ln609_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_2_fu_170_p2),18));

    shl_ln_fu_76_p1 <= al1;
    shl_ln_fu_76_p3 <= (shl_ln_fu_76_p1 & ap_const_lv8_0);
    sub_ln597_fu_88_p2 <= std_logic_vector(signed(sext_ln597_1_fu_84_p1) - signed(sext_ln597_fu_72_p1));
    tmp_fu_118_p3 <= mul_ln599_fu_68_p2(63 downto 63);
    trunc_ln595_fu_166_p1 <= apl1_1_fu_159_p3(16 - 1 downto 0);
    trunc_ln_fu_94_p4 <= sub_ln597_fu_88_p2(24 downto 8);
    wd3_fu_144_p2 <= std_logic_vector(unsigned(ap_const_lv16_3C00) - unsigned(sext_ln20_fu_140_p1));
end behav;
