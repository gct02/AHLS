-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_decode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (7 downto 0);
    dec_del_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bpl_ce0 : OUT STD_LOGIC;
    dec_del_bpl_we0 : OUT STD_LOGIC;
    dec_del_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce0 : OUT STD_LOGIC;
    dec_del_dltx_we0 : OUT STD_LOGIC;
    dec_del_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce1 : OUT STD_LOGIC;
    dec_del_dltx_we1 : OUT STD_LOGIC;
    dec_del_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt1_o_ap_vld : OUT STD_LOGIC;
    dec_al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_al1_o_ap_vld : OUT STD_LOGIC;
    dec_rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt2_o_ap_vld : OUT STD_LOGIC;
    dec_al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_al2_o_ap_vld : OUT STD_LOGIC;
    dec_detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_detl_o_ap_vld : OUT STD_LOGIC;
    qq4_code4_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qq4_code4_table_ce0 : OUT STD_LOGIC;
    qq4_code4_table_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    il : IN STD_LOGIC_VECTOR (5 downto 0);
    dec_nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_nbl_o_ap_vld : OUT STD_LOGIC;
    dec_plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_o_ap_vld : OUT STD_LOGIC;
    dec_plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_o_ap_vld : OUT STD_LOGIC;
    dec_del_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bph_ce0 : OUT STD_LOGIC;
    dec_del_bph_we0 : OUT STD_LOGIC;
    dec_del_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce0 : OUT STD_LOGIC;
    dec_del_dhx_we0 : OUT STD_LOGIC;
    dec_del_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dhx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce1 : OUT STD_LOGIC;
    dec_del_dhx_we1 : OUT STD_LOGIC;
    dec_del_dhx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dhx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rh1_o_ap_vld : OUT STD_LOGIC;
    dec_ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_ah1_o_ap_vld : OUT STD_LOGIC;
    dec_rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rh2_o_ap_vld : OUT STD_LOGIC;
    dec_ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_ah2_o_ap_vld : OUT STD_LOGIC;
    dec_deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_deth_o_ap_vld : OUT STD_LOGIC;
    dec_nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_nbh_o_ap_vld : OUT STD_LOGIC;
    dec_ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_o_ap_vld : OUT STD_LOGIC;
    dec_ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_o_ap_vld : OUT STD_LOGIC;
    accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumc_ce0 : OUT STD_LOGIC;
    accumc_we0 : OUT STD_LOGIC;
    accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce0 : OUT STD_LOGIC;
    h_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    h_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce1 : OUT STD_LOGIC;
    h_q1 : IN STD_LOGIC_VECTOR (14 downto 0);
    accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumd_ce0 : OUT STD_LOGIC;
    accumd_we0 : OUT STD_LOGIC;
    accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumd_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xout1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xout1_ap_vld : OUT STD_LOGIC;
    xout2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xout2_ap_vld : OUT STD_LOGIC;
    grp_filtep_fu_650_p_din1 : OUT STD_LOGIC_VECTOR (30 downto 0);
    grp_filtep_fu_650_p_din2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_filtep_fu_650_p_din3 : OUT STD_LOGIC_VECTOR (30 downto 0);
    grp_filtep_fu_650_p_din4 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_filtep_fu_650_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_filtep_fu_650_p_ready : IN STD_LOGIC;
    grp_logscl_fu_657_p_din1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    grp_logscl_fu_657_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_logscl_fu_657_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    grp_logscl_fu_657_p_start : OUT STD_LOGIC;
    grp_logscl_fu_657_p_ready : IN STD_LOGIC;
    grp_logscl_fu_657_p_done : IN STD_LOGIC;
    grp_logscl_fu_657_p_idle : IN STD_LOGIC;
    grp_scalel_fu_663_p_din1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_scalel_fu_663_p_din2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    grp_scalel_fu_663_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    grp_scalel_fu_663_p_start : OUT STD_LOGIC;
    grp_scalel_fu_663_p_ready : IN STD_LOGIC;
    grp_scalel_fu_663_p_done : IN STD_LOGIC;
    grp_scalel_fu_663_p_idle : IN STD_LOGIC;
    grp_uppol1_fu_669_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_uppol1_fu_669_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_uppol1_fu_669_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol1_fu_669_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol1_fu_669_p_dout0 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_uppol1_fu_669_p_start : OUT STD_LOGIC;
    grp_uppol1_fu_669_p_ready : IN STD_LOGIC;
    grp_uppol1_fu_669_p_done : IN STD_LOGIC;
    grp_uppol1_fu_669_p_idle : IN STD_LOGIC;
    grp_uppol2_fu_676_p_din1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_uppol2_fu_676_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    grp_uppol2_fu_676_p_din3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol2_fu_676_p_din4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol2_fu_676_p_din5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_uppol2_fu_676_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    grp_uppol2_fu_676_p_start : OUT STD_LOGIC;
    grp_uppol2_fu_676_p_ready : IN STD_LOGIC;
    grp_uppol2_fu_676_p_done : IN STD_LOGIC;
    grp_uppol2_fu_676_p_idle : IN STD_LOGIC;
    tmp_s_logsch_fu_684_p_din1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    tmp_s_logsch_fu_684_p_din2 : OUT STD_LOGIC_VECTOR (14 downto 0);
    tmp_s_logsch_fu_684_p_dout0 : IN STD_LOGIC_VECTOR (14 downto 0);
    tmp_s_logsch_fu_684_p_ready : IN STD_LOGIC );
end;


architecture behav of adpcm_main_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv39_7FFFFFFFD4 : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111010100";
    constant ap_const_lv14_2310 : STD_LOGIC_VECTOR (13 downto 0) := "10001100010000";
    constant ap_const_lv14_39B0 : STD_LOGIC_VECTOR (13 downto 0) := "11100110110000";
    constant ap_const_lv14_1CF0 : STD_LOGIC_VECTOR (13 downto 0) := "01110011110000";
    constant ap_const_lv14_650 : STD_LOGIC_VECTOR (13 downto 0) := "00011001010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal qq6_code6_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal qq6_code6_table_ce0 : STD_LOGIC;
    signal qq6_code6_table_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_407 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_filtez_fu_317_ap_done : STD_LOGIC;
    signal grp_upzero_fu_352_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_uppol1_fu_380_ap_done : STD_LOGIC;
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal trunc_ln23_fu_422_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln23_reg_1133 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_reg_1138 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_1143 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln364_1_fu_478_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln364_1_reg_1148 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln367_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln367_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal dec_ah2_load_reg_1177 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln365_fu_526_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln365_reg_1182 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_reg_1187 : STD_LOGIC_VECTOR (14 downto 0);
    signal dec_ph1_load_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_ph2_load_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_317_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1203 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln345_1_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_reg_1227 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_1232 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln347_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln347_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln350_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln350_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_plt1_load_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_plt2_load_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln371_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln371_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln378_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln378_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln379_fu_776_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln379_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln405_fu_1062_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln405_reg_1316 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_filtez_fu_317_ap_start : STD_LOGIC;
    signal grp_filtez_fu_317_ap_idle : STD_LOGIC;
    signal grp_filtez_fu_317_ap_ready : STD_LOGIC;
    signal grp_filtez_fu_317_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filtez_fu_317_bpl_ce0 : STD_LOGIC;
    signal grp_filtez_fu_317_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_317_dlt_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filtez_fu_317_dlt_ce0 : STD_LOGIC;
    signal grp_filtez_fu_317_dlt_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_logscl_fu_327_ap_ready : STD_LOGIC;
    signal grp_scalel_fu_341_ap_ready : STD_LOGIC;
    signal grp_scalel_fu_341_nbl : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_scalel_fu_341_shift_constant : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_upzero_fu_352_ap_start : STD_LOGIC;
    signal grp_upzero_fu_352_ap_idle : STD_LOGIC;
    signal grp_upzero_fu_352_ap_ready : STD_LOGIC;
    signal grp_upzero_fu_352_dlt : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_352_dlti_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_352_dlti_ce0 : STD_LOGIC;
    signal grp_upzero_fu_352_dlti_we0 : STD_LOGIC;
    signal grp_upzero_fu_352_dlti_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_352_dlti_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_352_dlti_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_352_dlti_ce1 : STD_LOGIC;
    signal grp_upzero_fu_352_dlti_we1 : STD_LOGIC;
    signal grp_upzero_fu_352_dlti_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_352_dlti_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_352_bli_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_352_bli_ce0 : STD_LOGIC;
    signal grp_upzero_fu_352_bli_we0 : STD_LOGIC;
    signal grp_upzero_fu_352_bli_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_352_bli_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uppol2_fu_363_ap_ready : STD_LOGIC;
    signal grp_uppol2_fu_363_al1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_uppol2_fu_363_al2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_uppol2_fu_363_plt : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uppol2_fu_363_plt1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uppol2_fu_363_plt2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtep_fu_372_rlt1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_filtep_fu_372_al1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_filtep_fu_372_rlt2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_filtep_fu_372_al2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_uppol1_fu_380_ap_ready : STD_LOGIC;
    signal grp_uppol1_fu_380_al1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_uppol1_fu_380_plt : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_uppol1_fu_380_plt1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_317_ap_start_reg : STD_LOGIC := '0';
    signal grp_logscl_fu_327_ap_start_reg : STD_LOGIC := '0';
    signal grp_scalel_fu_341_ap_start_reg : STD_LOGIC := '0';
    signal grp_upzero_fu_352_ap_start_reg : STD_LOGIC := '0';
    signal grp_uppol2_fu_363_ap_start_reg : STD_LOGIC := '0';
    signal grp_uppol1_fu_380_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln345_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln346_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln389_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln389_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln335_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln335_2_fu_1072_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln405_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln335_1_fu_1099_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln354_fu_693_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln372_fu_732_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal idx_fu_172 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln335_fu_857_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xa2_2_fu_176 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xa2_5_fu_933_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln333_1_fu_819_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal xa1_2_fu_180 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xa1_5_fu_913_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln333_fu_810_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal i_fu_184 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_15_fu_842_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx22_fu_188 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln405_fu_1078_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_fu_192 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_17_fu_1053_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln386_fu_814_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln395_fu_957_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_454_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_23_fu_454_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln364_fu_472_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln364_fu_472_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln364_1_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln345_fu_594_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln345_1_fu_586_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln345_fu_594_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln346_fu_614_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln346_fu_614_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln344_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln346_2_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln345_1_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln346_1_fu_665_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln345_fu_658_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_780_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln385_1_fu_792_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln385_fu_788_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln385_1_fu_800_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal xa1_fu_804_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln391_fu_868_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln391_fu_388_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln391_2_fu_909_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln392_fu_392_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln392_2_fu_929_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln395_1_fu_962_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln389_1_fu_953_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln3_fu_972_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln396_1_fu_984_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln396_fu_980_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln396_1_fu_992_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln396_fu_996_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln396_2_fu_1002_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln389_fu_949_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal xa1_4_fu_966_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal xa2_4_fu_1006_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln335_2_fu_1066_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln335_1_fu_1094_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal mul_ln364_fu_472_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_filtez IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bpl_ce0 : OUT STD_LOGIC;
        bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dlt_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlt_ce0 : OUT STD_LOGIC;
        dlt_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_logscl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        il : IN STD_LOGIC_VECTOR (5 downto 0);
        nbl : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_logsch IS
    port (
        ap_ready : OUT STD_LOGIC;
        ih : IN STD_LOGIC_VECTOR (1 downto 0);
        nbh : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_scalel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nbl : IN STD_LOGIC_VECTOR (14 downto 0);
        shift_constant : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_upzero IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dlt : IN STD_LOGIC_VECTOR (15 downto 0);
        dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce0 : OUT STD_LOGIC;
        dlti_we0 : OUT STD_LOGIC;
        dlti_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dlti_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce1 : OUT STD_LOGIC;
        dlti_we1 : OUT STD_LOGIC;
        dlti_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dlti_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bli_ce0 : OUT STD_LOGIC;
        bli_we0 : OUT STD_LOGIC;
        bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_uppol2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        al1 : IN STD_LOGIC_VECTOR (15 downto 0);
        al2 : IN STD_LOGIC_VECTOR (14 downto 0);
        plt : IN STD_LOGIC_VECTOR (31 downto 0);
        plt1 : IN STD_LOGIC_VECTOR (31 downto 0);
        plt2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_filtep IS
    port (
        ap_ready : OUT STD_LOGIC;
        rlt1 : IN STD_LOGIC_VECTOR (30 downto 0);
        al1 : IN STD_LOGIC_VECTOR (15 downto 0);
        rlt2 : IN STD_LOGIC_VECTOR (30 downto 0);
        al2 : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_uppol1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        al1 : IN STD_LOGIC_VECTOR (15 downto 0);
        apl2 : IN STD_LOGIC_VECTOR (14 downto 0);
        plt : IN STD_LOGIC_VECTOR (31 downto 0);
        plt1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component adpcm_main_mul_15s_32s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component adpcm_main_mul_32s_7s_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component adpcm_main_mux_4_2_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component adpcm_main_mul_14s_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component adpcm_main_mul_16s_15ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component adpcm_main_decode_qq6_code6_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    qq6_code6_table_U : component adpcm_main_decode_qq6_code6_table_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => qq6_code6_table_address0,
        ce0 => qq6_code6_table_ce0,
        q0 => qq6_code6_table_q0);

    grp_filtez_fu_317 : component adpcm_main_filtez
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_filtez_fu_317_ap_start,
        ap_done => grp_filtez_fu_317_ap_done,
        ap_idle => grp_filtez_fu_317_ap_idle,
        ap_ready => grp_filtez_fu_317_ap_ready,
        bpl_address0 => grp_filtez_fu_317_bpl_address0,
        bpl_ce0 => grp_filtez_fu_317_bpl_ce0,
        bpl_q0 => grp_filtez_fu_317_bpl_q0,
        dlt_address0 => grp_filtez_fu_317_dlt_address0,
        dlt_ce0 => grp_filtez_fu_317_dlt_ce0,
        dlt_q0 => grp_filtez_fu_317_dlt_q0,
        ap_return => grp_filtez_fu_317_ap_return);

    grp_upzero_fu_352 : component adpcm_main_upzero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_upzero_fu_352_ap_start,
        ap_done => grp_upzero_fu_352_ap_done,
        ap_idle => grp_upzero_fu_352_ap_idle,
        ap_ready => grp_upzero_fu_352_ap_ready,
        dlt => grp_upzero_fu_352_dlt,
        dlti_address0 => grp_upzero_fu_352_dlti_address0,
        dlti_ce0 => grp_upzero_fu_352_dlti_ce0,
        dlti_we0 => grp_upzero_fu_352_dlti_we0,
        dlti_d0 => grp_upzero_fu_352_dlti_d0,
        dlti_q0 => grp_upzero_fu_352_dlti_q0,
        dlti_address1 => grp_upzero_fu_352_dlti_address1,
        dlti_ce1 => grp_upzero_fu_352_dlti_ce1,
        dlti_we1 => grp_upzero_fu_352_dlti_we1,
        dlti_d1 => grp_upzero_fu_352_dlti_d1,
        dlti_q1 => grp_upzero_fu_352_dlti_q1,
        bli_address0 => grp_upzero_fu_352_bli_address0,
        bli_ce0 => grp_upzero_fu_352_bli_ce0,
        bli_we0 => grp_upzero_fu_352_bli_we0,
        bli_d0 => grp_upzero_fu_352_bli_d0,
        bli_q0 => grp_upzero_fu_352_bli_q0);

    mul_15s_32s_47_1_1_U130 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => h_q1,
        din1 => accumc_q0,
        dout => mul_ln391_fu_388_p2);

    mul_15s_32s_47_1_1_U131 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => h_q0,
        din1 => accumd_q0,
        dout => mul_ln392_fu_392_p2);

    mul_32s_7s_39_1_1_U132 : component adpcm_main_mul_32s_7s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 39)
    port map (
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        dout => grp_fu_396_p2);

    mux_4_2_14_1_1_U133 : component adpcm_main_mux_4_2_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 2,
        dout_WIDTH => 14)
    port map (
        din0 => ap_const_lv14_2310,
        din1 => ap_const_lv14_39B0,
        din2 => ap_const_lv14_1CF0,
        din3 => ap_const_lv14_650,
        din4 => tmp_23_fu_454_p5,
        dout => tmp_23_fu_454_p6);

    mul_14s_15ns_29_1_1_U134 : component adpcm_main_mul_14s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_23_fu_454_p6,
        din1 => mul_ln364_fu_472_p1,
        dout => mul_ln364_fu_472_p2);

    mul_16s_15ns_31_1_1_U135 : component adpcm_main_mul_16s_15ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => qq4_code4_table_q0,
        din1 => mul_ln345_fu_594_p1,
        dout => mul_ln345_fu_594_p2);

    mul_16s_15ns_31_1_1_U136 : component adpcm_main_mul_16s_15ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => qq6_code6_table_q0,
        din1 => mul_ln346_fu_614_p1,
        dout => mul_ln346_fu_614_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_filtez_fu_317_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_filtez_fu_317_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_filtez_fu_317_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filtez_fu_317_ap_ready = ap_const_logic_1)) then 
                    grp_filtez_fu_317_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_logscl_fu_327_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_logscl_fu_327_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_logscl_fu_327_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_logscl_fu_327_ap_ready = ap_const_logic_1)) then 
                    grp_logscl_fu_327_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_scalel_fu_341_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scalel_fu_341_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_scalel_fu_341_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scalel_fu_341_ap_ready = ap_const_logic_1)) then 
                    grp_scalel_fu_341_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uppol1_fu_380_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_uppol1_fu_380_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_uppol1_fu_380_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uppol1_fu_380_ap_ready = ap_const_logic_1)) then 
                    grp_uppol1_fu_380_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_uppol2_fu_363_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_uppol2_fu_363_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_uppol2_fu_363_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_uppol2_fu_363_ap_ready = ap_const_logic_1)) then 
                    grp_uppol2_fu_363_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_upzero_fu_352_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_upzero_fu_352_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_upzero_fu_352_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_upzero_fu_352_ap_ready = ap_const_logic_1)) then 
                    grp_upzero_fu_352_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_9_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_9_fu_192 <= ap_const_lv4_0;
            elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_9_fu_192 <= i_17_fu_1053_p2;
            end if; 
        end if;
    end process;

    i_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_184 <= ap_const_lv4_0;
            elsif (((icmp_ln389_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_fu_184 <= i_15_fu_842_p2;
            end if; 
        end if;
    end process;

    idx22_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                idx22_fu_188 <= ap_const_lv5_0;
            elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                idx22_fu_188 <= add_ln405_fu_1078_p2;
            end if; 
        end if;
    end process;

    idx_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_fu_172 <= ap_const_lv5_0;
            elsif (((icmp_ln389_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                idx_fu_172 <= add_ln335_fu_857_p2;
            end if; 
        end if;
    end process;

    xa1_2_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_uppol1_fu_380_ap_done = ap_const_logic_1))) then 
                xa1_2_fu_180 <= sext_ln333_fu_810_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                xa1_2_fu_180 <= xa1_5_fu_913_p2;
            end if; 
        end if;
    end process;

    xa2_2_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_uppol1_fu_380_ap_done = ap_const_logic_1))) then 
                xa2_2_fu_176 <= sext_ln333_1_fu_819_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                xa2_2_fu_176 <= xa2_5_fu_933_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln347_reg_1237 <= add_ln347_fu_671_p2;
                add_ln350_reg_1243 <= add_ln350_fu_677_p2;
                add_ln371_reg_1260 <= add_ln371_fu_727_p2;
                dec_plt1_load_reg_1249 <= dec_plt1_i;
                dec_plt2_load_reg_1255 <= dec_plt2_i;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln367_reg_1153 <= add_ln367_fu_492_p2;
                lshr_ln_reg_1143 <= input_r(5 downto 2);
                trunc_ln23_reg_1133 <= trunc_ln23_fu_422_p1;
                trunc_ln364_1_reg_1148 <= mul_ln364_fu_472_p2(28 downto 15);
                trunc_ln_reg_1138 <= input_r(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln379_reg_1271 <= add_ln379_fu_776_p2;
                sub_ln378_reg_1266 <= sub_ln378_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                dec_ah2_load_reg_1177 <= dec_ah2_i;
                dec_ph1_load_reg_1192 <= dec_ph1_i;
                dec_ph2_load_reg_1198 <= dec_ph2_i;
                sext_ln365_reg_1182 <= sext_ln365_fu_526_p1;
                tmp_19_reg_1187 <= tmp_s_logsch_fu_684_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)))) then
                reg_407 <= grp_uppol2_fu_676_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_13_reg_1232 <= grp_logscl_fu_657_p_dout0;
                tmp_reg_1203 <= grp_filtez_fu_317_ap_return;
                tmp_s_reg_1215 <= grp_filtep_fu_650_p_dout0;
                trunc_ln2_reg_1227 <= mul_ln346_fu_614_p2(30 downto 15);
                trunc_ln345_1_reg_1220 <= mul_ln345_fu_594_p2(30 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln405_reg_1316 <= trunc_ln405_fu_1062_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, grp_filtez_fu_317_ap_done, ap_block_state4_on_subcall_done, ap_CS_fsm_state6, grp_uppol1_fu_380_ap_done, ap_block_state6_on_subcall_done, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state12, icmp_ln389_fu_836_p2, icmp_ln405_fu_1047_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_filtez_fu_317_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_uppol1_fu_380_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    accumc_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln389_fu_851_p1, icmp_ln389_fu_836_p2, zext_ln335_2_fu_1072_p1, icmp_ln405_fu_1047_p2, zext_ln335_1_fu_1099_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            accumc_address0 <= zext_ln335_1_fu_1099_p1(4 - 1 downto 0);
        elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            accumc_address0 <= ap_const_lv4_0;
        elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            accumc_address0 <= zext_ln335_2_fu_1072_p1(4 - 1 downto 0);
        elsif (((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            accumc_address0 <= ap_const_lv4_A;
        elsif (((icmp_ln389_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            accumc_address0 <= zext_ln389_fu_851_p1(4 - 1 downto 0);
        else 
            accumc_address0 <= "XXXX";
        end if; 
    end process;


    accumc_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, icmp_ln389_fu_836_p2, icmp_ln405_fu_1047_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln405_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln389_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            accumc_ce0 <= ap_const_logic_1;
        else 
            accumc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumc_d0_assign_proc : process(accumc_q0, sub_ln378_reg_1266, ap_CS_fsm_state12, icmp_ln405_fu_1047_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            accumc_d0 <= accumc_q0;
        elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            accumc_d0 <= sub_ln378_reg_1266;
        else 
            accumc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accumc_we0_assign_proc : process(ap_CS_fsm_state12, icmp_ln405_fu_1047_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            accumc_we0 <= ap_const_logic_1;
        else 
            accumc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accumd_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, zext_ln389_fu_851_p1, icmp_ln389_fu_836_p2, zext_ln335_2_fu_1072_p1, icmp_ln405_fu_1047_p2, zext_ln335_1_fu_1099_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            accumd_address0 <= zext_ln335_1_fu_1099_p1(4 - 1 downto 0);
        elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            accumd_address0 <= ap_const_lv4_0;
        elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            accumd_address0 <= zext_ln335_2_fu_1072_p1(4 - 1 downto 0);
        elsif (((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            accumd_address0 <= ap_const_lv4_A;
        elsif (((icmp_ln389_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            accumd_address0 <= zext_ln389_fu_851_p1(4 - 1 downto 0);
        else 
            accumd_address0 <= "XXXX";
        end if; 
    end process;


    accumd_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, icmp_ln389_fu_836_p2, icmp_ln405_fu_1047_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln389_fu_836_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln405_fu_1047_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((icmp_ln389_fu_836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            accumd_ce0 <= ap_const_logic_1;
        else 
            accumd_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumd_d0_assign_proc : process(accumd_q0, add_ln379_reg_1271, ap_CS_fsm_state12, icmp_ln405_fu_1047_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            accumd_d0 <= accumd_q0;
        elsif (((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            accumd_d0 <= add_ln379_reg_1271;
        else 
            accumd_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accumd_we0_assign_proc : process(ap_CS_fsm_state12, icmp_ln405_fu_1047_p2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            accumd_we0 <= ap_const_logic_1;
        else 
            accumd_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln335_1_fu_1094_p2 <= std_logic_vector(unsigned(trunc_ln405_reg_1316) + unsigned(ap_const_lv4_A));
    add_ln335_2_fu_1066_p2 <= std_logic_vector(unsigned(trunc_ln405_fu_1062_p1) + unsigned(ap_const_lv4_9));
    add_ln335_fu_857_p2 <= std_logic_vector(unsigned(idx_fu_172) + unsigned(ap_const_lv5_2));
    add_ln344_fu_654_p2 <= std_logic_vector(unsigned(tmp_s_reg_1215) + unsigned(tmp_reg_1203));
    add_ln347_fu_671_p2 <= std_logic_vector(signed(sext_ln346_2_fu_668_p1) + signed(add_ln344_fu_654_p2));
    add_ln350_fu_677_p2 <= std_logic_vector(signed(sext_ln345_1_fu_662_p1) + signed(tmp_reg_1203));
    add_ln354_fu_693_p2 <= std_logic_vector(signed(sext_ln346_1_fu_665_p1) + signed(trunc_ln345_fu_658_p1));
    add_ln367_fu_492_p2 <= std_logic_vector(signed(sext_ln364_1_fu_488_p1) + signed(grp_filtez_fu_317_ap_return));
    add_ln371_fu_727_p2 <= std_logic_vector(unsigned(add_ln367_reg_1153) + unsigned(grp_filtep_fu_650_p_dout0));
    add_ln379_fu_776_p2 <= std_logic_vector(unsigned(add_ln371_reg_1260) + unsigned(add_ln347_reg_1237));
    add_ln391_fu_868_p2 <= std_logic_vector(unsigned(idx_fu_172) + unsigned(ap_const_lv5_3));
    add_ln405_fu_1078_p2 <= std_logic_vector(unsigned(idx22_fu_188) + unsigned(ap_const_lv5_1F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_filtez_fu_317_ap_done)
    begin
        if ((grp_filtez_fu_317_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state6_on_subcall_done)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_uppol1_fu_669_p_done)
    begin
        if ((grp_uppol1_fu_669_p_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state4_on_subcall_done_assign_proc : process(grp_filtez_fu_317_ap_done, grp_upzero_fu_352_ap_done, grp_logscl_fu_657_p_done, grp_scalel_fu_663_p_done, grp_uppol2_fu_676_p_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_uppol2_fu_676_p_done = ap_const_logic_0) or (grp_upzero_fu_352_ap_done = ap_const_logic_0) or (grp_scalel_fu_663_p_done = ap_const_logic_0) or (grp_logscl_fu_657_p_done = ap_const_logic_0) or (grp_filtez_fu_317_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_upzero_fu_352_ap_done, grp_scalel_fu_663_p_done, grp_uppol1_fu_669_p_done, grp_uppol2_fu_676_p_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_uppol1_fu_669_p_done = ap_const_logic_0) or (grp_uppol2_fu_676_p_done = ap_const_logic_0) or (grp_upzero_fu_352_ap_done = ap_const_logic_0) or (grp_scalel_fu_663_p_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12, icmp_ln405_fu_1047_p2)
    begin
        if ((((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln405_fu_1047_p2)
    begin
        if (((icmp_ln405_fu_1047_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dec_ah1_o_assign_proc : process(dec_ah1_i, ap_CS_fsm_state6, grp_uppol1_fu_669_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_ah1_o <= grp_uppol1_fu_669_p_dout0;
        else 
            dec_ah1_o <= dec_ah1_i;
        end if; 
    end process;


    dec_ah1_o_ap_vld_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            dec_ah1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ah1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_ah2_o_assign_proc : process(dec_ah2_i, ap_CS_fsm_state4, grp_uppol2_fu_676_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_ah2_o <= grp_uppol2_fu_676_p_dout0;
        else 
            dec_ah2_o <= dec_ah2_i;
        end if; 
    end process;


    dec_ah2_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_ah2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ah2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_al1_o_assign_proc : process(dec_al1_i, ap_CS_fsm_state8, grp_uppol1_fu_669_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dec_al1_o <= grp_uppol1_fu_669_p_dout0;
        else 
            dec_al1_o <= dec_al1_i;
        end if; 
    end process;


    dec_al1_o_ap_vld_assign_proc : process(grp_uppol1_fu_380_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_uppol1_fu_380_ap_done = ap_const_logic_1))) then 
            dec_al1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_al1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_al2_o_assign_proc : process(dec_al2_i, ap_CS_fsm_state6, grp_uppol2_fu_676_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_al2_o <= grp_uppol2_fu_676_p_dout0;
        else 
            dec_al2_o <= dec_al2_i;
        end if; 
    end process;


    dec_al2_o_ap_vld_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            dec_al2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_al2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bph_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, grp_filtez_fu_317_bpl_address0, grp_upzero_fu_352_bli_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bph_address0 <= grp_upzero_fu_352_bli_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bph_address0 <= grp_filtez_fu_317_bpl_address0;
        else 
            dec_del_bph_address0 <= "XXX";
        end if; 
    end process;


    dec_del_bph_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, grp_filtez_fu_317_bpl_ce0, grp_upzero_fu_352_bli_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bph_ce0 <= grp_upzero_fu_352_bli_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bph_ce0 <= grp_filtez_fu_317_bpl_ce0;
        else 
            dec_del_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bph_d0 <= grp_upzero_fu_352_bli_d0;

    dec_del_bph_we0_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_352_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bph_we0 <= grp_upzero_fu_352_bli_we0;
        else 
            dec_del_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bpl_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_317_bpl_address0, grp_upzero_fu_352_bli_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_bpl_address0 <= grp_upzero_fu_352_bli_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bpl_address0 <= grp_filtez_fu_317_bpl_address0;
        else 
            dec_del_bpl_address0 <= "XXX";
        end if; 
    end process;


    dec_del_bpl_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_317_bpl_ce0, grp_upzero_fu_352_bli_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_bpl_ce0 <= grp_upzero_fu_352_bli_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bpl_ce0 <= grp_filtez_fu_317_bpl_ce0;
        else 
            dec_del_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bpl_d0 <= grp_upzero_fu_352_bli_d0;

    dec_del_bpl_we0_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_352_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_bpl_we0 <= grp_upzero_fu_352_bli_we0;
        else 
            dec_del_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, grp_filtez_fu_317_dlt_address0, grp_upzero_fu_352_dlti_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_address0 <= grp_upzero_fu_352_dlti_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dhx_address0 <= grp_filtez_fu_317_dlt_address0;
        else 
            dec_del_dhx_address0 <= "XXX";
        end if; 
    end process;

    dec_del_dhx_address1 <= grp_upzero_fu_352_dlti_address1;

    dec_del_dhx_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, grp_filtez_fu_317_dlt_ce0, grp_upzero_fu_352_dlti_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_ce0 <= grp_upzero_fu_352_dlti_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dhx_ce0 <= grp_filtez_fu_317_dlt_ce0;
        else 
            dec_del_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_ce1_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_352_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_ce1 <= grp_upzero_fu_352_dlti_ce1;
        else 
            dec_del_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dhx_d0 <= grp_upzero_fu_352_dlti_d0;
    dec_del_dhx_d1 <= grp_upzero_fu_352_dlti_d1;

    dec_del_dhx_we0_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_352_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_we0 <= grp_upzero_fu_352_dlti_we0;
        else 
            dec_del_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_we1_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_352_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_we1 <= grp_upzero_fu_352_dlti_we1;
        else 
            dec_del_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_317_dlt_address0, grp_upzero_fu_352_dlti_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dltx_address0 <= grp_upzero_fu_352_dlti_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_address0 <= grp_filtez_fu_317_dlt_address0;
        else 
            dec_del_dltx_address0 <= "XXX";
        end if; 
    end process;

    dec_del_dltx_address1 <= grp_upzero_fu_352_dlti_address1;

    dec_del_dltx_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_317_dlt_ce0, grp_upzero_fu_352_dlti_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dltx_ce0 <= grp_upzero_fu_352_dlti_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_ce0 <= grp_filtez_fu_317_dlt_ce0;
        else 
            dec_del_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_ce1_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_352_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dltx_ce1 <= grp_upzero_fu_352_dlti_ce1;
        else 
            dec_del_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dltx_d0 <= grp_upzero_fu_352_dlti_d0;
    dec_del_dltx_d1 <= grp_upzero_fu_352_dlti_d1;

    dec_del_dltx_we0_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_352_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dltx_we0 <= grp_upzero_fu_352_dlti_we0;
        else 
            dec_del_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_we1_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_352_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dltx_we1 <= grp_upzero_fu_352_dlti_we1;
        else 
            dec_del_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_deth_o_assign_proc : process(dec_deth_i, ap_CS_fsm_state4, grp_scalel_fu_663_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_deth_o <= grp_scalel_fu_663_p_dout0;
        else 
            dec_deth_o <= dec_deth_i;
        end if; 
    end process;


    dec_deth_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_deth_o_ap_vld <= ap_const_logic_1;
        else 
            dec_deth_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_detl_o_assign_proc : process(dec_detl_i, ap_CS_fsm_state6, grp_scalel_fu_663_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_detl_o <= grp_scalel_fu_663_p_dout0;
        else 
            dec_detl_o <= dec_detl_i;
        end if; 
    end process;


    dec_detl_o_ap_vld_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            dec_detl_o_ap_vld <= ap_const_logic_1;
        else 
            dec_detl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_nbh_o_assign_proc : process(dec_nbh_i, ap_CS_fsm_state3, tmp_s_logsch_fu_684_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_nbh_o <= tmp_s_logsch_fu_684_p_dout0;
        else 
            dec_nbh_o <= dec_nbh_i;
        end if; 
    end process;


    dec_nbh_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_nbh_o_ap_vld <= ap_const_logic_1;
        else 
            dec_nbh_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_nbl_o_assign_proc : process(dec_nbl_i, ap_CS_fsm_state4, grp_logscl_fu_657_p_dout0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_nbl_o <= grp_logscl_fu_657_p_dout0;
        else 
            dec_nbl_o <= dec_nbl_i;
        end if; 
    end process;


    dec_nbl_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_nbl_o_ap_vld <= ap_const_logic_1;
        else 
            dec_nbl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_ph1_o_assign_proc : process(dec_ph1_i, add_ln367_reg_1153, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_ph1_o <= add_ln367_reg_1153;
        else 
            dec_ph1_o <= dec_ph1_i;
        end if; 
    end process;


    dec_ph1_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_ph1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ph1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_ph2_o_assign_proc : process(dec_ph1_i, dec_ph2_i, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_ph2_o <= dec_ph1_i;
        else 
            dec_ph2_o <= dec_ph2_i;
        end if; 
    end process;


    dec_ph2_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_ph2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ph2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_plt1_o_assign_proc : process(dec_plt1_i, ap_CS_fsm_state5, add_ln350_fu_677_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_plt1_o <= add_ln350_fu_677_p2;
        else 
            dec_plt1_o <= dec_plt1_i;
        end if; 
    end process;


    dec_plt1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_plt1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_plt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_plt2_o_assign_proc : process(dec_plt1_i, dec_plt2_i, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_plt2_o <= dec_plt1_i;
        else 
            dec_plt2_o <= dec_plt2_i;
        end if; 
    end process;


    dec_plt2_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_plt2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_plt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rh1_o_assign_proc : process(dec_rh1_i, ap_CS_fsm_state5, trunc_ln372_fu_732_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh1_o <= trunc_ln372_fu_732_p1;
        else 
            dec_rh1_o <= dec_rh1_i;
        end if; 
    end process;


    dec_rh1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rh1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rh2_o_assign_proc : process(dec_rh1_i, dec_rh2_i, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh2_o <= dec_rh1_i;
        else 
            dec_rh2_o <= dec_rh2_i;
        end if; 
    end process;


    dec_rh2_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rh2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rlt1_o_assign_proc : process(dec_rlt1_i, ap_CS_fsm_state5, add_ln354_fu_693_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rlt1_o <= add_ln354_fu_693_p2;
        else 
            dec_rlt1_o <= dec_rlt1_i;
        end if; 
    end process;


    dec_rlt1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rlt1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rlt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rlt2_o_assign_proc : process(dec_rlt1_i, dec_rlt2_i, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_rlt2_o <= dec_rlt1_i;
        else 
            dec_rlt2_o <= dec_rlt2_i;
        end if; 
    end process;


    dec_rlt2_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_rlt2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rlt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_filtep_fu_372_al1_assign_proc : process(dec_al1_i, dec_ah1_i, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_filtep_fu_372_al1 <= dec_ah1_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtep_fu_372_al1 <= dec_al1_i;
        else 
            grp_filtep_fu_372_al1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtep_fu_372_al2_assign_proc : process(dec_al2_i, ap_CS_fsm_state4, dec_ah2_load_reg_1177, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_filtep_fu_372_al2 <= dec_ah2_load_reg_1177;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtep_fu_372_al2 <= dec_al2_i;
        else 
            grp_filtep_fu_372_al2 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtep_fu_372_rlt1_assign_proc : process(dec_rlt1_i, dec_rh1_i, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_filtep_fu_372_rlt1 <= dec_rh1_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtep_fu_372_rlt1 <= dec_rlt1_i;
        else 
            grp_filtep_fu_372_rlt1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtep_fu_372_rlt2_assign_proc : process(dec_rlt2_i, dec_rh2_i, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_filtep_fu_372_rlt2 <= dec_rh2_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtep_fu_372_rlt2 <= dec_rlt2_i;
        else 
            grp_filtep_fu_372_rlt2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_filtep_fu_650_p_din1 <= grp_filtep_fu_372_rlt1;
    grp_filtep_fu_650_p_din2 <= grp_filtep_fu_372_al1;
    grp_filtep_fu_650_p_din3 <= grp_filtep_fu_372_rlt2;
    grp_filtep_fu_650_p_din4 <= grp_filtep_fu_372_al2;
    grp_filtez_fu_317_ap_start <= grp_filtez_fu_317_ap_start_reg;

    grp_filtez_fu_317_bpl_q0_assign_proc : process(dec_del_bpl_q0, dec_del_bph_q0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtez_fu_317_bpl_q0 <= dec_del_bpl_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_filtez_fu_317_bpl_q0 <= dec_del_bph_q0;
        else 
            grp_filtez_fu_317_bpl_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtez_fu_317_dlt_q0_assign_proc : process(dec_del_dltx_q0, dec_del_dhx_q0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtez_fu_317_dlt_q0 <= dec_del_dltx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_filtez_fu_317_dlt_q0 <= dec_del_dhx_q0;
        else 
            grp_filtez_fu_317_dlt_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, sext_ln386_fu_814_p1, sext_ln395_fu_957_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_396_p0 <= sext_ln395_fu_957_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_396_p0 <= sext_ln386_fu_814_p1(32 - 1 downto 0);
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_396_p1 <= ap_const_lv39_7FFFFFFFD4(7 - 1 downto 0);
    grp_logscl_fu_327_ap_ready <= grp_logscl_fu_657_p_ready;
    grp_logscl_fu_657_p_din1 <= trunc_ln23_reg_1133;
    grp_logscl_fu_657_p_din2 <= dec_nbl_i;
    grp_logscl_fu_657_p_start <= grp_logscl_fu_327_ap_start_reg;
    grp_scalel_fu_341_ap_ready <= grp_scalel_fu_663_p_ready;

    grp_scalel_fu_341_nbl_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_19_reg_1187, tmp_13_reg_1232)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_scalel_fu_341_nbl <= tmp_13_reg_1232;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_scalel_fu_341_nbl <= tmp_19_reg_1187;
        else 
            grp_scalel_fu_341_nbl <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_scalel_fu_341_shift_constant_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_scalel_fu_341_shift_constant <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_scalel_fu_341_shift_constant <= ap_const_lv4_A;
        else 
            grp_scalel_fu_341_shift_constant <= "XXXX";
        end if; 
    end process;

    grp_scalel_fu_663_p_din1 <= grp_scalel_fu_341_nbl;
    grp_scalel_fu_663_p_din2 <= grp_scalel_fu_341_shift_constant;
    grp_scalel_fu_663_p_start <= grp_scalel_fu_341_ap_start_reg;

    grp_uppol1_fu_380_al1_assign_proc : process(dec_al1_i, dec_ah1_i, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_uppol1_fu_380_al1 <= dec_al1_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol1_fu_380_al1 <= dec_ah1_i;
        else 
            grp_uppol1_fu_380_al1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_uppol1_fu_380_ap_done <= grp_uppol1_fu_669_p_done;
    grp_uppol1_fu_380_ap_ready <= grp_uppol1_fu_669_p_ready;

    grp_uppol1_fu_380_plt_assign_proc : process(ap_CS_fsm_state6, add_ln367_reg_1153, add_ln350_reg_1243, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_uppol1_fu_380_plt <= add_ln350_reg_1243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol1_fu_380_plt <= add_ln367_reg_1153;
        else 
            grp_uppol1_fu_380_plt <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_uppol1_fu_380_plt1_assign_proc : process(ap_CS_fsm_state6, dec_ph1_load_reg_1192, dec_plt1_load_reg_1249, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_uppol1_fu_380_plt1 <= dec_plt1_load_reg_1249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol1_fu_380_plt1 <= dec_ph1_load_reg_1192;
        else 
            grp_uppol1_fu_380_plt1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_uppol1_fu_669_p_din1 <= grp_uppol1_fu_380_al1;
    grp_uppol1_fu_669_p_din2 <= reg_407;
    grp_uppol1_fu_669_p_din3 <= grp_uppol1_fu_380_plt;
    grp_uppol1_fu_669_p_din4 <= grp_uppol1_fu_380_plt1;
    grp_uppol1_fu_669_p_start <= grp_uppol1_fu_380_ap_start_reg;

    grp_uppol2_fu_363_al1_assign_proc : process(dec_al1_i, dec_ah1_i, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol2_fu_363_al1 <= dec_al1_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_uppol2_fu_363_al1 <= dec_ah1_i;
        else 
            grp_uppol2_fu_363_al1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_uppol2_fu_363_al2_assign_proc : process(dec_al2_i, dec_ah2_i, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol2_fu_363_al2 <= dec_al2_i;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_uppol2_fu_363_al2 <= dec_ah2_i;
        else 
            grp_uppol2_fu_363_al2 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_uppol2_fu_363_ap_ready <= grp_uppol2_fu_676_p_ready;

    grp_uppol2_fu_363_plt_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, add_ln367_reg_1153, add_ln350_reg_1243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol2_fu_363_plt <= add_ln350_reg_1243;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_uppol2_fu_363_plt <= add_ln367_reg_1153;
        else 
            grp_uppol2_fu_363_plt <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_uppol2_fu_363_plt1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, dec_ph1_load_reg_1192, dec_plt1_load_reg_1249)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol2_fu_363_plt1 <= dec_plt1_load_reg_1249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_uppol2_fu_363_plt1 <= dec_ph1_load_reg_1192;
        else 
            grp_uppol2_fu_363_plt1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_uppol2_fu_363_plt2_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, dec_ph2_load_reg_1198, dec_plt2_load_reg_1255)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_uppol2_fu_363_plt2 <= dec_plt2_load_reg_1255;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_uppol2_fu_363_plt2 <= dec_ph2_load_reg_1198;
        else 
            grp_uppol2_fu_363_plt2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_uppol2_fu_676_p_din1 <= grp_uppol2_fu_363_al1;
    grp_uppol2_fu_676_p_din2 <= grp_uppol2_fu_363_al2;
    grp_uppol2_fu_676_p_din3 <= grp_uppol2_fu_363_plt;
    grp_uppol2_fu_676_p_din4 <= grp_uppol2_fu_363_plt1;
    grp_uppol2_fu_676_p_din5 <= grp_uppol2_fu_363_plt2;
    grp_uppol2_fu_676_p_start <= grp_uppol2_fu_363_ap_start_reg;
    grp_upzero_fu_352_ap_start <= grp_upzero_fu_352_ap_start_reg;

    grp_upzero_fu_352_bli_q0_assign_proc : process(dec_del_bpl_q0, dec_del_bph_q0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_352_bli_q0 <= dec_del_bpl_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_352_bli_q0 <= dec_del_bph_q0;
        else 
            grp_upzero_fu_352_bli_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_upzero_fu_352_dlt_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, sext_ln365_reg_1182, trunc_ln345_1_reg_1220)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_352_dlt <= trunc_ln345_1_reg_1220;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_352_dlt <= sext_ln365_reg_1182;
        else 
            grp_upzero_fu_352_dlt <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_upzero_fu_352_dlti_q0_assign_proc : process(dec_del_dltx_q0, dec_del_dhx_q0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_352_dlti_q0 <= dec_del_dltx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_352_dlti_q0 <= dec_del_dhx_q0;
        else 
            grp_upzero_fu_352_dlti_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_upzero_fu_352_dlti_q1_assign_proc : process(dec_del_dltx_q1, dec_del_dhx_q1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_352_dlti_q1 <= dec_del_dltx_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_352_dlti_q1 <= dec_del_dhx_q1;
        else 
            grp_upzero_fu_352_dlti_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_address0 <= zext_ln391_fu_874_p1(5 - 1 downto 0);
    h_address1 <= zext_ln335_fu_863_p1(5 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_15_fu_842_p2 <= std_logic_vector(unsigned(i_fu_184) + unsigned(ap_const_lv4_1));
    i_17_fu_1053_p2 <= std_logic_vector(unsigned(i_9_fu_192) + unsigned(ap_const_lv4_1));
    icmp_ln389_fu_836_p2 <= "1" when (i_fu_184 = ap_const_lv4_A) else "0";
    icmp_ln405_fu_1047_p2 <= "1" when (i_9_fu_192 = ap_const_lv4_A) else "0";
    mul_ln345_fu_594_p1 <= zext_ln345_1_fu_586_p1(15 - 1 downto 0);
    mul_ln346_fu_614_p1 <= zext_ln345_1_fu_586_p1(15 - 1 downto 0);
    mul_ln364_fu_472_p1 <= mul_ln364_fu_472_p10(15 - 1 downto 0);
    mul_ln364_fu_472_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dec_deth_i),29));
    qq4_code4_table_address0 <= zext_ln345_fu_498_p1(4 - 1 downto 0);

    qq4_code4_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            qq4_code4_table_ce0 <= ap_const_logic_1;
        else 
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    qq6_code6_table_address0 <= zext_ln346_fu_506_p1(6 - 1 downto 0);

    qq6_code6_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            qq6_code6_table_ce0 <= ap_const_logic_1;
        else 
            qq6_code6_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln333_1_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_396_p2),50));

        sext_ln333_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xa1_fu_804_p2),50));

        sext_ln345_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln345_1_reg_1220),32));

        sext_ln346_1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln345_1_reg_1220),31));

        sext_ln346_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_1227),32));

        sext_ln364_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln364_1_fu_478_p4),32));

        sext_ln365_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln364_1_reg_1148),16));

        sext_ln385_1_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln385_1_fu_792_p3),37));

        sext_ln385_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_780_p3),37));

        sext_ln386_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln379_fu_776_p2),39));

        sext_ln391_2_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln391_fu_388_p2),50));

        sext_ln392_2_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln392_fu_392_p2),50));

        sext_ln395_1_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_396_p2),46));

        sext_ln395_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(accumc_q0),39));

        sext_ln396_1_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln396_1_fu_984_p3),37));

        sext_ln396_2_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln396_fu_996_p2),46));

        sext_ln396_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_972_p3),37));

    shl_ln385_1_fu_792_p3 <= (sub_ln378_fu_772_p2 & ap_const_lv2_0);
    shl_ln396_1_fu_984_p3 <= (accumd_q0 & ap_const_lv2_0);
    shl_ln3_fu_972_p3 <= (accumd_q0 & ap_const_lv4_0);
    shl_ln_fu_780_p3 <= (sub_ln378_fu_772_p2 & ap_const_lv4_0);
    sub_ln378_fu_772_p2 <= std_logic_vector(unsigned(add_ln347_reg_1237) - unsigned(add_ln371_reg_1260));
    sub_ln396_fu_996_p2 <= std_logic_vector(signed(sext_ln396_fu_980_p1) - signed(sext_ln396_1_fu_992_p1));
    tmp_23_fu_454_p5 <= input_r(7 downto 6);
    tmp_s_logsch_fu_684_p_din1 <= trunc_ln_reg_1138;
    tmp_s_logsch_fu_684_p_din2 <= dec_nbh_i;
    trunc_ln23_fu_422_p1 <= input_r(6 - 1 downto 0);
    trunc_ln345_fu_658_p1 <= add_ln344_fu_654_p2(31 - 1 downto 0);
    trunc_ln364_1_fu_478_p4 <= mul_ln364_fu_472_p2(28 downto 15);
    trunc_ln372_fu_732_p1 <= add_ln371_fu_727_p2(31 - 1 downto 0);
    trunc_ln389_1_fu_953_p1 <= xa1_2_fu_180(46 - 1 downto 0);
    trunc_ln389_fu_949_p1 <= xa2_2_fu_176(46 - 1 downto 0);
    trunc_ln405_fu_1062_p1 <= idx22_fu_188(4 - 1 downto 0);
    xa1_4_fu_966_p2 <= std_logic_vector(signed(sext_ln395_1_fu_962_p1) + signed(trunc_ln389_1_fu_953_p1));
    xa1_5_fu_913_p2 <= std_logic_vector(signed(sext_ln391_2_fu_909_p1) + signed(xa1_2_fu_180));
    xa1_fu_804_p2 <= std_logic_vector(signed(sext_ln385_fu_788_p1) - signed(sext_ln385_1_fu_800_p1));
    xa2_4_fu_1006_p2 <= std_logic_vector(signed(sext_ln396_2_fu_1002_p1) + signed(trunc_ln389_fu_949_p1));
    xa2_5_fu_933_p2 <= std_logic_vector(signed(sext_ln392_2_fu_929_p1) + signed(xa2_2_fu_176));
    xout1 <= xa1_4_fu_966_p2(45 downto 14);

    xout1_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xout1_ap_vld <= ap_const_logic_1;
        else 
            xout1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xout2 <= xa2_4_fu_1006_p2(45 downto 14);

    xout2_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            xout2_ap_vld <= ap_const_logic_1;
        else 
            xout2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln335_1_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_1_fu_1094_p2),64));
    zext_ln335_2_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_2_fu_1066_p2),64));
    zext_ln335_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_fu_857_p2),64));
    zext_ln345_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dec_detl_i),31));
    zext_ln345_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1143),64));
    zext_ln346_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(il),64));
    zext_ln389_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_184),64));
    zext_ln391_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln391_fu_868_p2),64));
end behav;
