-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_decode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r : IN STD_LOGIC_VECTOR (7 downto 0);
    dec_del_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bpl_ce0 : OUT STD_LOGIC;
    dec_del_bpl_we0 : OUT STD_LOGIC;
    dec_del_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce0 : OUT STD_LOGIC;
    dec_del_dltx_we0 : OUT STD_LOGIC;
    dec_del_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce1 : OUT STD_LOGIC;
    dec_del_dltx_we1 : OUT STD_LOGIC;
    dec_del_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt1_o_ap_vld : OUT STD_LOGIC;
    dec_al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_al1_o_ap_vld : OUT STD_LOGIC;
    dec_rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt2_o_ap_vld : OUT STD_LOGIC;
    dec_al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_al2_o_ap_vld : OUT STD_LOGIC;
    dec_detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_detl_o_ap_vld : OUT STD_LOGIC;
    qq4_code4_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qq4_code4_table_ce0 : OUT STD_LOGIC;
    qq4_code4_table_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    il : IN STD_LOGIC_VECTOR (5 downto 0);
    dec_nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_nbl_o_ap_vld : OUT STD_LOGIC;
    wl_code_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    wl_code_table_ce0 : OUT STD_LOGIC;
    wl_code_table_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    ilb_table_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ilb_table_ce0 : OUT STD_LOGIC;
    ilb_table_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    ilb_table_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ilb_table_ce1 : OUT STD_LOGIC;
    ilb_table_q1 : IN STD_LOGIC_VECTOR (11 downto 0);
    dec_plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_o_ap_vld : OUT STD_LOGIC;
    dec_plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_o_ap_vld : OUT STD_LOGIC;
    dec_del_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bph_ce0 : OUT STD_LOGIC;
    dec_del_bph_we0 : OUT STD_LOGIC;
    dec_del_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce0 : OUT STD_LOGIC;
    dec_del_dhx_we0 : OUT STD_LOGIC;
    dec_del_dhx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dhx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce1 : OUT STD_LOGIC;
    dec_del_dhx_we1 : OUT STD_LOGIC;
    dec_del_dhx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dhx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rh1_o_ap_vld : OUT STD_LOGIC;
    dec_ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_ah1_o_ap_vld : OUT STD_LOGIC;
    dec_rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rh2_o_ap_vld : OUT STD_LOGIC;
    dec_ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_ah2_o_ap_vld : OUT STD_LOGIC;
    dec_deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_deth_o_ap_vld : OUT STD_LOGIC;
    dec_nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_nbh_o_ap_vld : OUT STD_LOGIC;
    dec_ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_o_ap_vld : OUT STD_LOGIC;
    dec_ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_o_ap_vld : OUT STD_LOGIC;
    accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumc_ce0 : OUT STD_LOGIC;
    accumc_we0 : OUT STD_LOGIC;
    accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce0 : OUT STD_LOGIC;
    h_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    h_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce1 : OUT STD_LOGIC;
    h_q1 : IN STD_LOGIC_VECTOR (14 downto 0);
    accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumd_ce0 : OUT STD_LOGIC;
    accumd_we0 : OUT STD_LOGIC;
    accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumd_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    xout1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xout1_ap_vld : OUT STD_LOGIC;
    xout2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    xout2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of adpcm_main_decode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv39_7FFFFFFFD4 : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111010100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv17_1FF80 : STD_LOGIC_VECTOR (16 downto 0) := "11111111110000000";
    constant ap_const_lv17_80 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_4800 : STD_LOGIC_VECTOR (16 downto 0) := "00100100000000000";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv11_31E : STD_LOGIC_VECTOR (10 downto 0) := "01100011110";
    constant ap_const_lv11_72A : STD_LOGIC_VECTOR (10 downto 0) := "11100101010";
    constant ap_const_lv17_5800 : STD_LOGIC_VECTOR (16 downto 0) := "00101100000000000";
    constant ap_const_lv15_5800 : STD_LOGIC_VECTOR (14 downto 0) := "101100000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv14_2310 : STD_LOGIC_VECTOR (13 downto 0) := "10001100010000";
    constant ap_const_lv14_39B0 : STD_LOGIC_VECTOR (13 downto 0) := "11100110110000";
    constant ap_const_lv14_1CF0 : STD_LOGIC_VECTOR (13 downto 0) := "01110011110000";
    constant ap_const_lv14_650 : STD_LOGIC_VECTOR (13 downto 0) := "00011001010000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv17_3000 : STD_LOGIC_VECTOR (16 downto 0) := "00011000000000000";
    constant ap_const_lv17_1D000 : STD_LOGIC_VECTOR (16 downto 0) := "11101000000000000";
    constant ap_const_lv15_5000 : STD_LOGIC_VECTOR (14 downto 0) := "101000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv18_3FF40 : STD_LOGIC_VECTOR (17 downto 0) := "111111111101000000";
    constant ap_const_lv18_C0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011000000";
    constant ap_const_lv15_3C00 : STD_LOGIC_VECTOR (14 downto 0) := "011110000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal qq6_code6_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal qq6_code6_table_ce0 : STD_LOGIC;
    signal qq6_code6_table_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_filtez_fu_427_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_filtez_fu_427_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_upzero_fu_437_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal trunc_ln15_reg_2095 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln345_2_reg_2101 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln10_reg_2108 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln12_reg_2113 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln522_2_reg_2123 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln344_fu_924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln344_reg_2136 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln345_fu_930_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln345_reg_2141 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_2146 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_fu_1088_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl2_reg_2151 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln364_1_reg_2157 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln347_fu_1191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln347_reg_2163 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln620_fu_1408_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln620_reg_2172 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_reg_2177 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_8_fu_1534_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl2_8_reg_2182 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln371_fu_1540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln371_reg_2188 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln378_fu_1719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln378_reg_2194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln379_fu_1723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln379_reg_2199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln405_fu_2009_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln405_reg_2244 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_filtez_fu_427_ap_start : STD_LOGIC;
    signal grp_filtez_fu_427_ap_idle : STD_LOGIC;
    signal grp_filtez_fu_427_ap_ready : STD_LOGIC;
    signal grp_filtez_fu_427_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filtez_fu_427_bpl_ce0 : STD_LOGIC;
    signal grp_filtez_fu_427_bpl_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_427_dlt_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_filtez_fu_427_dlt_ce0 : STD_LOGIC;
    signal grp_filtez_fu_427_dlt_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_437_ap_start : STD_LOGIC;
    signal grp_upzero_fu_437_ap_idle : STD_LOGIC;
    signal grp_upzero_fu_437_ap_ready : STD_LOGIC;
    signal grp_upzero_fu_437_dlt : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_437_dlti_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_437_dlti_ce0 : STD_LOGIC;
    signal grp_upzero_fu_437_dlti_we0 : STD_LOGIC;
    signal grp_upzero_fu_437_dlti_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_437_dlti_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_437_dlti_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_437_dlti_ce1 : STD_LOGIC;
    signal grp_upzero_fu_437_dlti_we1 : STD_LOGIC;
    signal grp_upzero_fu_437_dlti_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_437_dlti_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_upzero_fu_437_bli_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_upzero_fu_437_bli_ce0 : STD_LOGIC;
    signal grp_upzero_fu_437_bli_we0 : STD_LOGIC;
    signal grp_upzero_fu_437_bli_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_upzero_fu_437_bli_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_filtez_fu_427_ap_start_reg : STD_LOGIC := '0';
    signal grp_upzero_fu_437_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln345_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln346_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln525_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln525_2_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln389_fu_1798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln389_fu_1783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln335_fu_1810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln391_fu_1821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln335_2_fu_2019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln405_fu_1994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln335_1_fu_2046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln354_fu_1338_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal apl1_10_fu_1324_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl2_7_fu_1218_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln8_fu_952_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln515_fu_697_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln350_fu_966_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln372_fu_1546_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal apl1_14_fu_1705_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl2_10_fu_1599_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln526_2_fu_1168_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln624_fu_829_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln367_fu_1412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal idx_fu_244 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln335_fu_1804_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xa2_2_fu_248 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xa2_5_fu_1880_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln333_1_fu_1766_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal xa1_2_fu_252 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xa1_5_fu_1860_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln333_fu_1757_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal i_fu_256 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_15_fu_1789_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx121_fu_260 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln405_fu_2025_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_9_fu_264 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_17_fu_2000_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_448_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln479_4_fu_919_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln479_6_fu_1400_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln391_1_fu_1851_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_7_fu_910_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_10_fu_1391_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln391_fu_1846_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_456_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln475_6_fu_897_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_9_fu_1378_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_fu_892_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_8_fu_1373_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_460_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln570_4_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln570_6_fu_1444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_460_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln570_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln570_5_fu_1438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_464_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln574_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln574_2_fu_1491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_468_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln386_fu_1761_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln395_fu_1904_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_468_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_448_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_456_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_497_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln345_1_fu_533_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln345_fu_580_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln345_1_fu_572_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln345_fu_580_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln346_fu_601_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln346_fu_601_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_625_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln511_2_fu_633_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln511_fu_621_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln511_fu_637_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln11_fu_643_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln512_2_fu_657_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln512_fu_653_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln512_fu_661_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln509_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_671_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln513_fu_679_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln515_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln509_fu_687_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_fu_711_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_744_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln620_2_fu_752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln620_fu_740_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln620_fu_756_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal wd_fu_762_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_776_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln618_fu_772_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln621_fu_789_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln621_fu_793_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln617_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_803_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln622_fu_811_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln624_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln617_fu_819_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_2_fu_843_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal pl_fu_884_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_6_fu_897_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal pl2_fu_902_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln479_fu_915_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln479_4_fu_919_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_479_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln525_fu_937_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln525cast_fu_942_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_fu_946_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln345_1_fu_934_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd2_fu_980_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal wd2_fu_980_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln570_4_fu_998_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln566_fu_988_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_s_fu_1009_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1009_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln571_fu_1003_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln572_fu_1019_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_1023_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln570_fu_1033_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln574_fu_1045_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln9_fu_1050_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln9_fu_1050_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln580_fu_1058_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln479_fu_915_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln580_fu_1062_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln13_fu_1068_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln580_4_fu_1078_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_505_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln580_fu_1082_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln574_4_fu_1041_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_1120_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln364_fu_1137_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln364_fu_1137_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln525_2_fu_1153_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln525_2cast_fu_1158_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_5_fu_1162_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln477_fu_1182_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln346_2_fu_1188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln583_fu_1196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_6_fu_1201_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln585_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln567_fu_1208_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1_fu_1232_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1_fu_1232_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln597_fu_1239_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln477_fu_1182_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln597_fu_1243_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln14_fu_1249_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln599_fu_1263_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln599_fu_1259_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal wd3_4_fu_1276_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_fu_1270_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln595_fu_1282_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln607_fu_1290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_8_fu_1296_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln595_4_fu_1286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_9_fu_1308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln609_fu_1314_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln609_fu_1318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_1304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln346_1_fu_1185_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal pl_5_fu_1365_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_9_fu_1378_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal pl2_2_fu_1383_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln479_5_fu_1396_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln479_6_fu_1400_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln364_1_fu_1405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd2_2_fu_1426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal wd2_2_fu_1426_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln570_6_fu_1444_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln566_2_fu_1434_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_fu_1455_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1455_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln571_2_fu_1449_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln572_2_fu_1465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_1469_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln570_2_fu_1479_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln574_2_fu_1491_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln580_2_fu_1496_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln580_2_fu_1496_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln580_5_fu_1504_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln479_5_fu_1396_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln580_2_fu_1508_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln580_2_fu_1514_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln580_6_fu_1524_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln580_5_fu_1528_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln574_5_fu_1487_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln477_2_fu_1574_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln583_2_fu_1577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_9_fu_1582_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln585_2_fu_1593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln567_2_fu_1589_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln597_2_fu_1613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln597_2_fu_1613_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln597_2_fu_1620_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln477_2_fu_1574_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln597_2_fu_1624_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln597_2_fu_1630_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln599_2_fu_1644_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln599_2_fu_1640_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal wd3_6_fu_1657_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal apl1_11_fu_1651_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln595_5_fu_1663_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln607_2_fu_1671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_12_fu_1677_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln595_6_fu_1667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_13_fu_1689_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln609_2_fu_1695_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln609_2_fu_1699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_2_fu_1685_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln3_fu_1727_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln385_1_fu_1739_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln385_fu_1735_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln385_1_fu_1747_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal xa1_fu_1751_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_468_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln391_fu_1815_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln391_2_fu_1856_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln392_fu_452_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln392_2_fu_1876_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln395_1_fu_1909_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln389_1_fu_1900_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal shl_ln4_fu_1919_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln396_1_fu_1931_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln396_fu_1927_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln396_1_fu_1939_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln396_fu_1943_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln396_2_fu_1949_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln389_fu_1896_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal xa1_4_fu_1913_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal xa2_4_fu_1953_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal add_ln335_2_fu_2013_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln335_1_fu_2041_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal mul_ln364_fu_1137_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_filtez IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bpl_ce0 : OUT STD_LOGIC;
        bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dlt_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlt_ce0 : OUT STD_LOGIC;
        dlt_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_upzero IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dlt : IN STD_LOGIC_VECTOR (15 downto 0);
        dlti_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce0 : OUT STD_LOGIC;
        dlti_we0 : OUT STD_LOGIC;
        dlti_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dlti_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dlti_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dlti_ce1 : OUT STD_LOGIC;
        dlti_we1 : OUT STD_LOGIC;
        dlti_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dlti_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        bli_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bli_ce0 : OUT STD_LOGIC;
        bli_we0 : OUT STD_LOGIC;
        bli_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        bli_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_mul_15s_32s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component adpcm_main_mul_16s_32s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component adpcm_main_mul_32s_32s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component adpcm_main_mul_32s_7s_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component adpcm_main_mul_16s_15ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component adpcm_main_mux_4_2_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component adpcm_main_mux_4_2_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component adpcm_main_mul_14s_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component adpcm_main_decode_qq6_code6_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    qq6_code6_table_U : component adpcm_main_decode_qq6_code6_table_ROM_AUTO_1R
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => qq6_code6_table_address0,
        ce0 => qq6_code6_table_ce0,
        q0 => qq6_code6_table_q0);

    grp_filtez_fu_427 : component adpcm_main_filtez
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_filtez_fu_427_ap_start,
        ap_done => grp_filtez_fu_427_ap_done,
        ap_idle => grp_filtez_fu_427_ap_idle,
        ap_ready => grp_filtez_fu_427_ap_ready,
        bpl_address0 => grp_filtez_fu_427_bpl_address0,
        bpl_ce0 => grp_filtez_fu_427_bpl_ce0,
        bpl_q0 => grp_filtez_fu_427_bpl_q0,
        dlt_address0 => grp_filtez_fu_427_dlt_address0,
        dlt_ce0 => grp_filtez_fu_427_dlt_ce0,
        dlt_q0 => grp_filtez_fu_427_dlt_q0,
        ap_return => grp_filtez_fu_427_ap_return);

    grp_upzero_fu_437 : component adpcm_main_upzero
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_upzero_fu_437_ap_start,
        ap_done => grp_upzero_fu_437_ap_done,
        ap_idle => grp_upzero_fu_437_ap_idle,
        ap_ready => grp_upzero_fu_437_ap_ready,
        dlt => grp_upzero_fu_437_dlt,
        dlti_address0 => grp_upzero_fu_437_dlti_address0,
        dlti_ce0 => grp_upzero_fu_437_dlti_ce0,
        dlti_we0 => grp_upzero_fu_437_dlti_we0,
        dlti_d0 => grp_upzero_fu_437_dlti_d0,
        dlti_q0 => grp_upzero_fu_437_dlti_q0,
        dlti_address1 => grp_upzero_fu_437_dlti_address1,
        dlti_ce1 => grp_upzero_fu_437_dlti_ce1,
        dlti_we1 => grp_upzero_fu_437_dlti_we1,
        dlti_d1 => grp_upzero_fu_437_dlti_d1,
        dlti_q1 => grp_upzero_fu_437_dlti_q1,
        bli_address0 => grp_upzero_fu_437_bli_address0,
        bli_ce0 => grp_upzero_fu_437_bli_ce0,
        bli_we0 => grp_upzero_fu_437_bli_we0,
        bli_d0 => grp_upzero_fu_437_bli_d0,
        bli_q0 => grp_upzero_fu_437_bli_q0);

    mul_15s_32s_47_1_1_U110 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => grp_fu_448_p0,
        din1 => grp_fu_448_p1,
        dout => grp_fu_448_p2);

    mul_15s_32s_47_1_1_U111 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => h_q0,
        din1 => accumd_q0,
        dout => mul_ln392_fu_452_p2);

    mul_16s_32s_47_1_1_U112 : component adpcm_main_mul_16s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => grp_fu_456_p0,
        din1 => grp_fu_456_p1,
        dout => grp_fu_456_p2);

    mul_32s_32s_64_1_1_U113 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_460_p0,
        din1 => grp_fu_460_p1,
        dout => grp_fu_460_p2);

    mul_32s_32s_64_1_1_U114 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_464_p0,
        din1 => grp_fu_464_p1,
        dout => grp_fu_464_p2);

    mul_32s_7s_39_1_1_U115 : component adpcm_main_mul_32s_7s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 39)
    port map (
        din0 => grp_fu_468_p0,
        din1 => grp_fu_468_p1,
        dout => grp_fu_468_p2);

    mul_16s_15ns_31_1_1_U116 : component adpcm_main_mul_16s_15ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => qq4_code4_table_q0,
        din1 => mul_ln345_fu_580_p1,
        dout => mul_ln345_fu_580_p2);

    mul_16s_15ns_31_1_1_U117 : component adpcm_main_mul_16s_15ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => qq6_code6_table_q0,
        din1 => mul_ln346_fu_601_p1,
        dout => mul_ln346_fu_601_p2);

    mux_4_2_11_1_1_U118 : component adpcm_main_mux_4_2_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        din3_WIDTH => 11,
        din4_WIDTH => 2,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_31E,
        din1 => ap_const_lv11_72A,
        din2 => ap_const_lv11_31E,
        din3 => ap_const_lv11_72A,
        din4 => trunc_ln15_reg_2095,
        dout => tmp_5_fu_776_p6);

    mux_4_2_14_1_1_U119 : component adpcm_main_mux_4_2_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 2,
        dout_WIDTH => 14)
    port map (
        din0 => ap_const_lv14_2310,
        din1 => ap_const_lv14_39B0,
        din2 => ap_const_lv14_1CF0,
        din3 => ap_const_lv14_650,
        din4 => trunc_ln15_reg_2095,
        dout => tmp_4_fu_1120_p6);

    mul_14s_15ns_29_1_1_U120 : component adpcm_main_mul_14s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_4_fu_1120_p6,
        din1 => mul_ln364_fu_1137_p1,
        dout => mul_ln364_fu_1137_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_filtez_fu_427_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_filtez_fu_427_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_filtez_fu_427_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filtez_fu_427_ap_ready = ap_const_logic_1)) then 
                    grp_filtez_fu_427_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_upzero_fu_437_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_upzero_fu_437_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_upzero_fu_437_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_upzero_fu_437_ap_ready = ap_const_logic_1)) then 
                    grp_upzero_fu_437_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_9_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_9_fu_264 <= ap_const_lv4_0;
            elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_9_fu_264 <= i_17_fu_2000_p2;
            end if; 
        end if;
    end process;

    i_fu_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_256 <= ap_const_lv4_0;
            elsif (((icmp_ln389_fu_1783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_fu_256 <= i_15_fu_1789_p2;
            end if; 
        end if;
    end process;

    idx121_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                idx121_fu_260 <= ap_const_lv5_0;
            elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                idx121_fu_260 <= add_ln405_fu_2025_p2;
            end if; 
        end if;
    end process;

    idx_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_fu_244 <= ap_const_lv5_0;
            elsif (((icmp_ln389_fu_1783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                idx_fu_244 <= add_ln335_fu_1804_p2;
            end if; 
        end if;
    end process;

    xa1_2_fu_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_upzero_fu_437_ap_done = ap_const_logic_1))) then 
                xa1_2_fu_252 <= sext_ln333_fu_1757_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                xa1_2_fu_252 <= xa1_5_fu_1860_p2;
            end if; 
        end if;
    end process;

    xa2_2_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_upzero_fu_437_ap_done = ap_const_logic_1))) then 
                xa2_2_fu_248 <= sext_ln333_1_fu_1766_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                xa2_2_fu_248 <= xa2_5_fu_1880_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln344_reg_2136 <= add_ln344_fu_924_p2;
                apl2_reg_2151 <= apl2_fu_1088_p2;
                tmp_17_reg_2146 <= grp_fu_460_p2(63 downto 63);
                trunc_ln345_reg_2141 <= trunc_ln345_fu_930_p1;
                trunc_ln364_1_reg_2157 <= mul_ln364_fu_1137_p2(28 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln347_reg_2163 <= add_ln347_fu_1191_p2;
                add_ln371_reg_2188 <= add_ln371_fu_1540_p2;
                apl2_8_reg_2182 <= apl2_8_fu_1534_p2;
                sext_ln620_reg_2172 <= sext_ln620_fu_1408_p1;
                tmp_20_reg_2177 <= grp_fu_460_p2(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln379_reg_2199 <= add_ln379_fu_1723_p2;
                sub_ln378_reg_2194 <= sub_ln378_fu_1719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_filtez_fu_427_ap_done = ap_const_logic_1)))) then
                reg_519 <= grp_filtez_fu_427_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln10_reg_2108 <= mul_ln346_fu_601_p2(30 downto 15);
                trunc_ln12_reg_2113 <= select_ln515_fu_697_p3(14 downto 11);
                trunc_ln345_2_reg_2101 <= mul_ln345_fu_580_p2(30 downto 15);
                trunc_ln522_2_reg_2123 <= select_ln624_fu_829_p3(14 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln15_reg_2095 <= input_r(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln405_reg_2244 <= trunc_ln405_fu_2009_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_filtez_fu_427_ap_done, ap_CS_fsm_state4, grp_upzero_fu_437_ap_done, ap_block_state4_on_subcall_done, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state10, icmp_ln389_fu_1783_p2, icmp_ln405_fu_1994_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_filtez_fu_427_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_upzero_fu_437_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    accumc_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln389_fu_1798_p1, icmp_ln389_fu_1783_p2, zext_ln335_2_fu_2019_p1, icmp_ln405_fu_1994_p2, zext_ln335_1_fu_2046_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            accumc_address0 <= zext_ln335_1_fu_2046_p1(4 - 1 downto 0);
        elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accumc_address0 <= ap_const_lv4_0;
        elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accumc_address0 <= zext_ln335_2_fu_2019_p1(4 - 1 downto 0);
        elsif (((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            accumc_address0 <= ap_const_lv4_A;
        elsif (((icmp_ln389_fu_1783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            accumc_address0 <= zext_ln389_fu_1798_p1(4 - 1 downto 0);
        else 
            accumc_address0 <= "XXXX";
        end if; 
    end process;


    accumc_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, icmp_ln389_fu_1783_p2, icmp_ln405_fu_1994_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln405_fu_1994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln389_fu_1783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            accumc_ce0 <= ap_const_logic_1;
        else 
            accumc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumc_d0_assign_proc : process(accumc_q0, sub_ln378_reg_2194, ap_CS_fsm_state10, icmp_ln405_fu_1994_p2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            accumc_d0 <= accumc_q0;
        elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accumc_d0 <= sub_ln378_reg_2194;
        else 
            accumc_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accumc_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln405_fu_1994_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            accumc_we0 <= ap_const_logic_1;
        else 
            accumc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    accumd_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, zext_ln389_fu_1798_p1, icmp_ln389_fu_1783_p2, zext_ln335_2_fu_2019_p1, icmp_ln405_fu_1994_p2, zext_ln335_1_fu_2046_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            accumd_address0 <= zext_ln335_1_fu_2046_p1(4 - 1 downto 0);
        elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accumd_address0 <= ap_const_lv4_0;
        elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accumd_address0 <= zext_ln335_2_fu_2019_p1(4 - 1 downto 0);
        elsif (((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            accumd_address0 <= ap_const_lv4_A;
        elsif (((icmp_ln389_fu_1783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            accumd_address0 <= zext_ln389_fu_1798_p1(4 - 1 downto 0);
        else 
            accumd_address0 <= "XXXX";
        end if; 
    end process;


    accumd_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, icmp_ln389_fu_1783_p2, icmp_ln405_fu_1994_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln389_fu_1783_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln405_fu_1994_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((icmp_ln389_fu_1783_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            accumd_ce0 <= ap_const_logic_1;
        else 
            accumd_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    accumd_d0_assign_proc : process(accumd_q0, add_ln379_reg_2199, ap_CS_fsm_state10, icmp_ln405_fu_1994_p2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            accumd_d0 <= accumd_q0;
        elsif (((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            accumd_d0 <= add_ln379_reg_2199;
        else 
            accumd_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    accumd_we0_assign_proc : process(ap_CS_fsm_state10, icmp_ln405_fu_1994_p2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            accumd_we0 <= ap_const_logic_1;
        else 
            accumd_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln335_1_fu_2041_p2 <= std_logic_vector(unsigned(trunc_ln405_reg_2244) + unsigned(ap_const_lv4_A));
    add_ln335_2_fu_2013_p2 <= std_logic_vector(unsigned(trunc_ln405_fu_2009_p1) + unsigned(ap_const_lv4_9));
    add_ln335_fu_1804_p2 <= std_logic_vector(unsigned(idx_fu_244) + unsigned(ap_const_lv5_2));
    add_ln344_fu_924_p2 <= std_logic_vector(unsigned(grp_fu_479_p4) + unsigned(reg_519));
    add_ln347_fu_1191_p2 <= std_logic_vector(signed(sext_ln346_2_fu_1188_p1) + signed(add_ln344_reg_2136));
    add_ln350_fu_966_p2 <= std_logic_vector(signed(sext_ln345_1_fu_934_p1) + signed(reg_519));
    add_ln354_fu_1338_p2 <= std_logic_vector(unsigned(trunc_ln345_reg_2141) + unsigned(sext_ln346_1_fu_1185_p1));
    add_ln367_fu_1412_p2 <= std_logic_vector(signed(sext_ln364_1_fu_1405_p1) + signed(reg_519));
    add_ln371_fu_1540_p2 <= std_logic_vector(signed(add_ln367_fu_1412_p2) + signed(grp_fu_479_p4));
    add_ln379_fu_1723_p2 <= std_logic_vector(unsigned(add_ln371_reg_2188) + unsigned(add_ln347_reg_2163));
    add_ln391_fu_1815_p2 <= std_logic_vector(unsigned(idx_fu_244) + unsigned(ap_const_lv5_3));
    add_ln405_fu_2025_p2 <= std_logic_vector(unsigned(idx121_fu_260) + unsigned(ap_const_lv5_1F));
    add_ln512_fu_661_p2 <= std_logic_vector(signed(sext_ln512_2_fu_657_p1) + signed(sext_ln512_fu_653_p1));
    add_ln580_5_fu_1528_p2 <= std_logic_vector(signed(sext_ln580_6_fu_1524_p1) + signed(grp_fu_505_p3));
    add_ln580_fu_1082_p2 <= std_logic_vector(signed(sext_ln580_4_fu_1078_p1) + signed(grp_fu_505_p3));
    add_ln621_fu_793_p2 <= std_logic_vector(signed(sext_ln618_fu_772_p1) + signed(sext_ln621_fu_789_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_filtez_fu_427_ap_done)
    begin
        if ((grp_filtez_fu_427_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_upzero_fu_437_ap_done)
    begin
        if ((grp_upzero_fu_437_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state4_on_subcall_done_assign_proc : process(grp_filtez_fu_427_ap_done, grp_upzero_fu_437_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_upzero_fu_437_ap_done = ap_const_logic_0) or (grp_filtez_fu_427_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10, icmp_ln405_fu_1994_p2)
    begin
        if ((((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, icmp_ln405_fu_1994_p2)
    begin
        if (((icmp_ln405_fu_1994_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    apl1_10_fu_1324_p3 <= 
        apl1_9_fu_1308_p2 when (icmp_ln609_fu_1318_p2(0) = '1') else 
        trunc_ln595_fu_1304_p1;
    apl1_11_fu_1651_p2 <= std_logic_vector(unsigned(select_ln599_2_fu_1644_p3) + unsigned(sext_ln599_2_fu_1640_p1));
    apl1_12_fu_1677_p3 <= 
        zext_ln595_5_fu_1663_p1 when (icmp_ln607_2_fu_1671_p2(0) = '1') else 
        apl1_11_fu_1651_p2;
    apl1_13_fu_1689_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln595_6_fu_1667_p1));
    apl1_14_fu_1705_p3 <= 
        apl1_13_fu_1689_p2 when (icmp_ln609_2_fu_1699_p2(0) = '1') else 
        trunc_ln595_2_fu_1685_p1;
    apl1_8_fu_1296_p3 <= 
        zext_ln595_fu_1282_p1 when (icmp_ln607_fu_1290_p2(0) = '1') else 
        apl1_fu_1270_p2;
    apl1_9_fu_1308_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln595_4_fu_1286_p1));
    apl1_fu_1270_p2 <= std_logic_vector(unsigned(select_ln599_fu_1263_p3) + unsigned(sext_ln599_fu_1259_p1));
    apl2_10_fu_1599_p3 <= 
        ap_const_lv15_5000 when (icmp_ln585_2_fu_1593_p2(0) = '1') else 
        trunc_ln567_2_fu_1589_p1;
    apl2_6_fu_1201_p3 <= 
        ap_const_lv17_3000 when (icmp_ln583_fu_1196_p2(0) = '1') else 
        apl2_reg_2151;
    apl2_7_fu_1218_p3 <= 
        ap_const_lv15_5000 when (icmp_ln585_fu_1212_p2(0) = '1') else 
        trunc_ln567_fu_1208_p1;
    apl2_8_fu_1534_p2 <= std_logic_vector(unsigned(add_ln580_5_fu_1528_p2) + unsigned(sext_ln574_5_fu_1487_p1));
    apl2_9_fu_1582_p3 <= 
        ap_const_lv17_3000 when (icmp_ln583_2_fu_1577_p2(0) = '1') else 
        apl2_8_reg_2182;
    apl2_fu_1088_p2 <= std_logic_vector(unsigned(add_ln580_fu_1082_p2) + unsigned(sext_ln574_4_fu_1041_p1));

    dec_ah1_o_assign_proc : process(dec_ah1_i, ap_CS_fsm_state6, apl1_14_fu_1705_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_ah1_o <= apl1_14_fu_1705_p3;
        else 
            dec_ah1_o <= dec_ah1_i;
        end if; 
    end process;


    dec_ah1_o_ap_vld_assign_proc : process(grp_upzero_fu_437_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_upzero_fu_437_ap_done = ap_const_logic_1))) then 
            dec_ah1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ah1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_ah2_o_assign_proc : process(dec_ah2_i, ap_CS_fsm_state6, apl2_10_fu_1599_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_ah2_o <= apl2_10_fu_1599_p3;
        else 
            dec_ah2_o <= dec_ah2_i;
        end if; 
    end process;


    dec_ah2_o_ap_vld_assign_proc : process(grp_upzero_fu_437_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_upzero_fu_437_ap_done = ap_const_logic_1))) then 
            dec_ah2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ah2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_al1_o_assign_proc : process(dec_al1_i, ap_CS_fsm_state5, apl1_10_fu_1324_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_al1_o <= apl1_10_fu_1324_p3;
        else 
            dec_al1_o <= dec_al1_i;
        end if; 
    end process;


    dec_al1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_al1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_al1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_al2_o_assign_proc : process(dec_al2_i, ap_CS_fsm_state5, apl2_7_fu_1218_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_al2_o <= apl2_7_fu_1218_p3;
        else 
            dec_al2_o <= dec_al2_i;
        end if; 
    end process;


    dec_al2_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_al2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_al2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bph_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_427_bpl_address0, grp_upzero_fu_437_bli_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_bph_address0 <= grp_upzero_fu_437_bli_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bph_address0 <= grp_filtez_fu_427_bpl_address0;
        else 
            dec_del_bph_address0 <= "XXX";
        end if; 
    end process;


    dec_del_bph_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_427_bpl_ce0, grp_upzero_fu_437_bli_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_bph_ce0 <= grp_upzero_fu_437_bli_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bph_ce0 <= grp_filtez_fu_427_bpl_ce0;
        else 
            dec_del_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bph_d0 <= grp_upzero_fu_437_bli_d0;

    dec_del_bph_we0_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_437_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_bph_we0 <= grp_upzero_fu_437_bli_we0;
        else 
            dec_del_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_bpl_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_filtez_fu_427_bpl_address0, grp_upzero_fu_437_bli_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bpl_address0 <= grp_upzero_fu_437_bli_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bpl_address0 <= grp_filtez_fu_427_bpl_address0;
        else 
            dec_del_bpl_address0 <= "XXX";
        end if; 
    end process;


    dec_del_bpl_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_filtez_fu_427_bpl_ce0, grp_upzero_fu_437_bli_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bpl_ce0 <= grp_upzero_fu_437_bli_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_bpl_ce0 <= grp_filtez_fu_427_bpl_ce0;
        else 
            dec_del_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_bpl_d0 <= grp_upzero_fu_437_bli_d0;

    dec_del_bpl_we0_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_437_bli_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_bpl_we0 <= grp_upzero_fu_437_bli_we0;
        else 
            dec_del_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_427_dlt_address0, grp_upzero_fu_437_dlti_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dhx_address0 <= grp_upzero_fu_437_dlti_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_address0 <= grp_filtez_fu_427_dlt_address0;
        else 
            dec_del_dhx_address0 <= "XXX";
        end if; 
    end process;

    dec_del_dhx_address1 <= grp_upzero_fu_437_dlti_address1;

    dec_del_dhx_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, grp_filtez_fu_427_dlt_ce0, grp_upzero_fu_437_dlti_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dhx_ce0 <= grp_upzero_fu_437_dlti_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dhx_ce0 <= grp_filtez_fu_427_dlt_ce0;
        else 
            dec_del_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_ce1_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_437_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dhx_ce1 <= grp_upzero_fu_437_dlti_ce1;
        else 
            dec_del_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dhx_d0 <= grp_upzero_fu_437_dlti_d0;
    dec_del_dhx_d1 <= grp_upzero_fu_437_dlti_d1;

    dec_del_dhx_we0_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_437_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dhx_we0 <= grp_upzero_fu_437_dlti_we0;
        else 
            dec_del_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dhx_we1_assign_proc : process(ap_CS_fsm_state6, grp_upzero_fu_437_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dec_del_dhx_we1 <= grp_upzero_fu_437_dlti_we1;
        else 
            dec_del_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_filtez_fu_427_dlt_address0, grp_upzero_fu_437_dlti_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_address0 <= grp_upzero_fu_437_dlti_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dltx_address0 <= grp_filtez_fu_427_dlt_address0;
        else 
            dec_del_dltx_address0 <= "XXX";
        end if; 
    end process;

    dec_del_dltx_address1 <= grp_upzero_fu_437_dlti_address1;

    dec_del_dltx_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, grp_filtez_fu_427_dlt_ce0, grp_upzero_fu_437_dlti_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_ce0 <= grp_upzero_fu_437_dlti_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dec_del_dltx_ce0 <= grp_filtez_fu_427_dlt_ce0;
        else 
            dec_del_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_ce1_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_437_dlti_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_ce1 <= grp_upzero_fu_437_dlti_ce1;
        else 
            dec_del_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dec_del_dltx_d0 <= grp_upzero_fu_437_dlti_d0;
    dec_del_dltx_d1 <= grp_upzero_fu_437_dlti_d1;

    dec_del_dltx_we0_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_437_dlti_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_we0 <= grp_upzero_fu_437_dlti_we0;
        else 
            dec_del_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_del_dltx_we1_assign_proc : process(ap_CS_fsm_state4, grp_upzero_fu_437_dlti_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_del_dltx_we1 <= grp_upzero_fu_437_dlti_we1;
        else 
            dec_del_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dec_deth_o_assign_proc : process(dec_deth_i, ap_CS_fsm_state4, shl_ln526_2_fu_1168_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_deth_o <= shl_ln526_2_fu_1168_p3;
        else 
            dec_deth_o <= dec_deth_i;
        end if; 
    end process;


    dec_deth_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_deth_o_ap_vld <= ap_const_logic_1;
        else 
            dec_deth_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_detl_o_assign_proc : process(dec_detl_i, ap_CS_fsm_state4, shl_ln8_fu_952_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_detl_o <= shl_ln8_fu_952_p3;
        else 
            dec_detl_o <= dec_detl_i;
        end if; 
    end process;


    dec_detl_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_detl_o_ap_vld <= ap_const_logic_1;
        else 
            dec_detl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_nbh_o_assign_proc : process(dec_nbh_i, ap_CS_fsm_state3, select_ln624_fu_829_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_nbh_o <= select_ln624_fu_829_p3;
        else 
            dec_nbh_o <= dec_nbh_i;
        end if; 
    end process;


    dec_nbh_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_nbh_o_ap_vld <= ap_const_logic_1;
        else 
            dec_nbh_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_nbl_o_assign_proc : process(dec_nbl_i, ap_CS_fsm_state3, select_ln515_fu_697_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_nbl_o <= select_ln515_fu_697_p3;
        else 
            dec_nbl_o <= dec_nbl_i;
        end if; 
    end process;


    dec_nbl_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dec_nbl_o_ap_vld <= ap_const_logic_1;
        else 
            dec_nbl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_ph1_o_assign_proc : process(dec_ph1_i, ap_CS_fsm_state5, add_ln367_fu_1412_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_ph1_o <= add_ln367_fu_1412_p2;
        else 
            dec_ph1_o <= dec_ph1_i;
        end if; 
    end process;


    dec_ph1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_ph1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ph1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_ph2_o_assign_proc : process(dec_ph1_i, dec_ph2_i, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_ph2_o <= dec_ph1_i;
        else 
            dec_ph2_o <= dec_ph2_i;
        end if; 
    end process;


    dec_ph2_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_ph2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_ph2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_plt1_o_assign_proc : process(dec_plt1_i, ap_CS_fsm_state4, add_ln350_fu_966_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_plt1_o <= add_ln350_fu_966_p2;
        else 
            dec_plt1_o <= dec_plt1_i;
        end if; 
    end process;


    dec_plt1_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_plt1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_plt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_plt2_o_assign_proc : process(dec_plt1_i, dec_plt2_i, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_plt2_o <= dec_plt1_i;
        else 
            dec_plt2_o <= dec_plt2_i;
        end if; 
    end process;


    dec_plt2_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_plt2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_plt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rh1_o_assign_proc : process(dec_rh1_i, ap_CS_fsm_state5, trunc_ln372_fu_1546_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh1_o <= trunc_ln372_fu_1546_p1;
        else 
            dec_rh1_o <= dec_rh1_i;
        end if; 
    end process;


    dec_rh1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rh1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rh2_o_assign_proc : process(dec_rh1_i, dec_rh2_i, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh2_o <= dec_rh1_i;
        else 
            dec_rh2_o <= dec_rh2_i;
        end if; 
    end process;


    dec_rh2_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rh2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rh2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rlt1_o_assign_proc : process(dec_rlt1_i, ap_CS_fsm_state5, add_ln354_fu_1338_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rlt1_o <= add_ln354_fu_1338_p2;
        else 
            dec_rlt1_o <= dec_rlt1_i;
        end if; 
    end process;


    dec_rlt1_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dec_rlt1_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rlt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    dec_rlt2_o_assign_proc : process(dec_rlt1_i, dec_rlt2_i, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dec_rlt2_o <= dec_rlt1_i;
        else 
            dec_rlt2_o <= dec_rlt2_i;
        end if; 
    end process;


    dec_rlt2_o_ap_vld_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            dec_rlt2_o_ap_vld <= ap_const_logic_1;
        else 
            dec_rlt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_filtez_fu_427_ap_start <= grp_filtez_fu_427_ap_start_reg;

    grp_filtez_fu_427_bpl_q0_assign_proc : process(dec_del_bpl_q0, dec_del_bph_q0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtez_fu_427_bpl_q0 <= dec_del_bph_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_filtez_fu_427_bpl_q0 <= dec_del_bpl_q0;
        else 
            grp_filtez_fu_427_bpl_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_filtez_fu_427_dlt_q0_assign_proc : process(dec_del_dltx_q0, dec_del_dhx_q0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_filtez_fu_427_dlt_q0 <= dec_del_dhx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_filtez_fu_427_dlt_q0 <= dec_del_dltx_q0;
        else 
            grp_filtez_fu_427_dlt_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, sext_ln479_4_fu_919_p1, sext_ln479_6_fu_1400_p1, sext_ln391_1_fu_1851_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_448_p0 <= sext_ln391_1_fu_1851_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_448_p0 <= sext_ln479_6_fu_1400_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_448_p0 <= sext_ln479_4_fu_919_p1(15 - 1 downto 0);
        else 
            grp_fu_448_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_448_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, sext_ln475_7_fu_910_p1, sext_ln475_10_fu_1391_p1, sext_ln391_fu_1846_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_448_p1 <= sext_ln391_fu_1846_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_448_p1 <= sext_ln475_10_fu_1391_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_448_p1 <= sext_ln475_7_fu_910_p1(32 - 1 downto 0);
        else 
            grp_fu_448_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_456_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln475_6_fu_897_p1, sext_ln475_9_fu_1378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_456_p0 <= sext_ln475_9_fu_1378_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_456_p0 <= sext_ln475_6_fu_897_p1(16 - 1 downto 0);
        else 
            grp_fu_456_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_456_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln475_fu_892_p1, sext_ln475_8_fu_1373_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_456_p1 <= sext_ln475_8_fu_1373_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_456_p1 <= sext_ln475_fu_892_p1(32 - 1 downto 0);
        else 
            grp_fu_456_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_460_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln570_4_fu_998_p1, sext_ln570_6_fu_1444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_460_p0 <= sext_ln570_6_fu_1444_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_460_p0 <= sext_ln570_4_fu_998_p1(32 - 1 downto 0);
        else 
            grp_fu_460_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_460_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln570_fu_992_p1, sext_ln570_5_fu_1438_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_460_p1 <= sext_ln570_5_fu_1438_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_460_p1 <= sext_ln570_fu_992_p1(32 - 1 downto 0);
        else 
            grp_fu_460_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_464_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln574_fu_1045_p1, sext_ln574_2_fu_1491_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_464_p0 <= sext_ln574_2_fu_1491_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_464_p0 <= sext_ln574_fu_1045_p1(32 - 1 downto 0);
        else 
            grp_fu_464_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_464_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln570_fu_992_p1, sext_ln570_5_fu_1438_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_464_p1 <= sext_ln570_5_fu_1438_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_464_p1 <= sext_ln570_fu_992_p1(32 - 1 downto 0);
        else 
            grp_fu_464_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_468_p0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, sext_ln386_fu_1761_p1, sext_ln395_fu_1904_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_468_p0 <= sext_ln395_fu_1904_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_468_p0 <= sext_ln386_fu_1761_p1(32 - 1 downto 0);
        else 
            grp_fu_468_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_468_p1 <= ap_const_lv39_7FFFFFFFD4(7 - 1 downto 0);
    grp_fu_473_p2 <= std_logic_vector(unsigned(grp_fu_448_p2) + unsigned(grp_fu_456_p2));
    grp_fu_479_p4 <= grp_fu_473_p2(46 downto 15);
    grp_fu_489_p3 <= grp_fu_460_p2(63 downto 63);
    grp_fu_497_p3 <= grp_fu_464_p2(63 downto 63);
    grp_fu_505_p3 <= 
        ap_const_lv17_1FF80 when (grp_fu_497_p3(0) = '1') else 
        ap_const_lv17_80;
    grp_upzero_fu_437_ap_start <= grp_upzero_fu_437_ap_start_reg;

    grp_upzero_fu_437_bli_q0_assign_proc : process(dec_del_bpl_q0, dec_del_bph_q0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_437_bli_q0 <= dec_del_bph_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_437_bli_q0 <= dec_del_bpl_q0;
        else 
            grp_upzero_fu_437_bli_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_upzero_fu_437_dlt_assign_proc : process(ap_CS_fsm_state4, trunc_ln345_2_reg_2101, sext_ln620_reg_2172, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_437_dlt <= sext_ln620_reg_2172;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_437_dlt <= trunc_ln345_2_reg_2101;
        else 
            grp_upzero_fu_437_dlt <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_upzero_fu_437_dlti_q0_assign_proc : process(dec_del_dltx_q0, dec_del_dhx_q0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_437_dlti_q0 <= dec_del_dhx_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_437_dlti_q0 <= dec_del_dltx_q0;
        else 
            grp_upzero_fu_437_dlti_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_upzero_fu_437_dlti_q1_assign_proc : process(dec_del_dltx_q1, dec_del_dhx_q1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_upzero_fu_437_dlti_q1 <= dec_del_dhx_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_upzero_fu_437_dlti_q1 <= dec_del_dltx_q1;
        else 
            grp_upzero_fu_437_dlti_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_address0 <= zext_ln391_fu_1821_p1(5 - 1 downto 0);
    h_address1 <= zext_ln335_fu_1810_p1(5 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_15_fu_1789_p2 <= std_logic_vector(unsigned(i_fu_256) + unsigned(ap_const_lv4_1));
    i_17_fu_2000_p2 <= std_logic_vector(unsigned(i_9_fu_264) + unsigned(ap_const_lv4_1));
    icmp_ln389_fu_1783_p2 <= "1" when (i_fu_256 = ap_const_lv4_A) else "0";
    icmp_ln405_fu_1994_p2 <= "1" when (i_9_fu_264 = ap_const_lv4_A) else "0";
    icmp_ln515_fu_691_p2 <= "1" when (unsigned(select_ln513_fu_679_p3) > unsigned(ap_const_lv17_4800)) else "0";
    icmp_ln583_2_fu_1577_p2 <= "1" when (signed(apl2_8_reg_2182) > signed(ap_const_lv17_3000)) else "0";
    icmp_ln583_fu_1196_p2 <= "1" when (signed(apl2_reg_2151) > signed(ap_const_lv17_3000)) else "0";
    icmp_ln585_2_fu_1593_p2 <= "1" when (signed(apl2_9_fu_1582_p3) < signed(ap_const_lv17_1D000)) else "0";
    icmp_ln585_fu_1212_p2 <= "1" when (signed(apl2_6_fu_1201_p3) < signed(ap_const_lv17_1D000)) else "0";
    icmp_ln607_2_fu_1671_p2 <= "1" when (signed(apl1_11_fu_1651_p2) > signed(zext_ln595_5_fu_1663_p1)) else "0";
    icmp_ln607_fu_1290_p2 <= "1" when (signed(apl1_fu_1270_p2) > signed(zext_ln595_fu_1282_p1)) else "0";
    icmp_ln609_2_fu_1699_p2 <= "1" when (signed(apl1_12_fu_1677_p3) < signed(sext_ln609_2_fu_1695_p1)) else "0";
    icmp_ln609_fu_1318_p2 <= "1" when (signed(apl1_8_fu_1296_p3) < signed(sext_ln609_fu_1314_p1)) else "0";
    icmp_ln624_fu_823_p2 <= "1" when (unsigned(select_ln622_fu_811_p3) > unsigned(ap_const_lv17_5800)) else "0";
    ilb_table_address0 <= zext_ln525_2_fu_863_p1(5 - 1 downto 0);
    ilb_table_address1 <= zext_ln525_fu_731_p1(5 - 1 downto 0);

    ilb_table_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ilb_table_ce0 <= ap_const_logic_1;
        else 
            ilb_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ilb_table_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ilb_table_ce1 <= ap_const_logic_1;
        else 
            ilb_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln345_fu_580_p1 <= zext_ln345_1_fu_572_p1(15 - 1 downto 0);
    mul_ln346_fu_601_p1 <= zext_ln345_1_fu_572_p1(15 - 1 downto 0);
    mul_ln364_fu_1137_p1 <= mul_ln364_fu_1137_p10(15 - 1 downto 0);
    mul_ln364_fu_1137_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dec_deth_i),29));
    pl2_2_fu_1383_p3 <= (dec_rh2_i & ap_const_lv1_0);
    pl2_fu_902_p3 <= (dec_rlt2_i & ap_const_lv1_0);
    pl_5_fu_1365_p3 <= (dec_rh1_i & ap_const_lv1_0);
    pl_fu_884_p3 <= (dec_rlt1_i & ap_const_lv1_0);
    qq4_code4_table_address0 <= zext_ln345_fu_543_p1(4 - 1 downto 0);

    qq4_code4_table_ce0_assign_proc : process(ap_CS_fsm_state2, grp_filtez_fu_427_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_filtez_fu_427_ap_done = ap_const_logic_1))) then 
            qq4_code4_table_ce0 <= ap_const_logic_1;
        else 
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    qq6_code6_table_address0 <= zext_ln346_fu_553_p1(6 - 1 downto 0);

    qq6_code6_table_ce0_assign_proc : process(ap_CS_fsm_state2, grp_filtez_fu_427_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_filtez_fu_427_ap_done = ap_const_logic_1))) then 
            qq6_code6_table_ce0 <= ap_const_logic_1;
        else 
            qq6_code6_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln513_fu_679_p3 <= 
        ap_const_lv17_0 when (tmp_16_fu_671_p3(0) = '1') else 
        add_ln512_fu_661_p2;
    select_ln515_fu_697_p3 <= 
        ap_const_lv15_4800 when (icmp_ln515_fu_691_p2(0) = '1') else 
        trunc_ln509_fu_687_p1;
    select_ln570_2_fu_1479_p3 <= 
        sext_ln572_2_fu_1465_p1 when (grp_fu_489_p3(0) = '1') else 
        tmp_6_fu_1469_p4;
    select_ln570_fu_1033_p3 <= 
        sext_ln572_fu_1019_p1 when (grp_fu_489_p3(0) = '1') else 
        tmp_1_fu_1023_p4;
    select_ln599_2_fu_1644_p3 <= 
        ap_const_lv18_3FF40 when (tmp_20_reg_2177(0) = '1') else 
        ap_const_lv18_C0;
    select_ln599_fu_1263_p3 <= 
        ap_const_lv18_3FF40 when (tmp_17_reg_2146(0) = '1') else 
        ap_const_lv18_C0;
    select_ln622_fu_811_p3 <= 
        ap_const_lv17_0 when (tmp_19_fu_803_p3(0) = '1') else 
        add_ln621_fu_793_p2;
    select_ln624_fu_829_p3 <= 
        ap_const_lv15_5800 when (icmp_ln624_fu_823_p2(0) = '1') else 
        trunc_ln617_fu_819_p1;
        sext_ln333_1_fu_1766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_468_p2),50));

        sext_ln333_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xa1_fu_1751_p2),50));

        sext_ln345_1_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln345_2_reg_2101),32));

        sext_ln346_1_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln345_2_reg_2101),31));

        sext_ln346_2_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln10_reg_2108),32));

        sext_ln364_1_fu_1405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln364_1_reg_2157),32));

        sext_ln385_1_fu_1747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln385_1_fu_1739_p3),37));

        sext_ln385_fu_1735_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_1727_p3),37));

        sext_ln386_fu_1761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln379_fu_1723_p2),39));

        sext_ln391_1_fu_1851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_q1),47));

        sext_ln391_2_fu_1856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_448_p2),50));

        sext_ln391_fu_1846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(accumc_q0),47));

        sext_ln392_2_fu_1876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln392_fu_452_p2),50));

        sext_ln395_1_fu_1909_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_468_p2),46));

        sext_ln395_fu_1904_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(accumc_q0),39));

        sext_ln396_1_fu_1939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln396_1_fu_1931_p3),37));

        sext_ln396_2_fu_1949_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln396_fu_1943_p2),46));

        sext_ln396_fu_1927_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln4_fu_1919_p3),37));

        sext_ln475_10_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl2_2_fu_1383_p3),47));

    sext_ln475_6_fu_897_p0 <= dec_al1_i;
        sext_ln475_6_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln475_6_fu_897_p0),47));

        sext_ln475_7_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl2_fu_902_p3),47));

        sext_ln475_8_fu_1373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl_5_fu_1365_p3),47));

    sext_ln475_9_fu_1378_p0 <= dec_ah1_i;
        sext_ln475_9_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln475_9_fu_1378_p0),47));

        sext_ln475_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl_fu_884_p3),47));

    sext_ln477_2_fu_1574_p0 <= dec_ah1_i;
        sext_ln477_2_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln477_2_fu_1574_p0),25));

    sext_ln477_fu_1182_p0 <= dec_al1_i;
        sext_ln477_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln477_fu_1182_p0),25));

    sext_ln479_4_fu_919_p0 <= dec_al2_i;
        sext_ln479_4_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_4_fu_919_p0),47));

    sext_ln479_5_fu_1396_p0 <= dec_ah2_i;
        sext_ln479_5_fu_1396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_5_fu_1396_p0),23));

    sext_ln479_6_fu_1400_p0 <= dec_ah2_i;
        sext_ln479_6_fu_1400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_6_fu_1400_p0),47));

    sext_ln479_fu_915_p0 <= dec_al2_i;
        sext_ln479_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_fu_915_p0),23));

        sext_ln509_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln512_fu_661_p2),32));

        sext_ln512_2_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wl_code_table_q0),17));

        sext_ln512_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln11_fu_643_p4),17));

        sext_ln566_2_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_2_fu_1426_p3),19));

        sext_ln566_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_fu_980_p3),19));

    sext_ln570_4_fu_998_p0 <= dec_plt1_i;
        sext_ln570_4_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln570_4_fu_998_p0),64));

        sext_ln570_5_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln367_fu_1412_p2),64));

    sext_ln570_6_fu_1444_p0 <= dec_ph1_i;
        sext_ln570_6_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln570_6_fu_1444_p0),64));

        sext_ln570_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln350_fu_966_p2),64));

        sext_ln572_2_fu_1465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_1455_p4),12));

        sext_ln572_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_1009_p4),12));

    sext_ln574_2_fu_1491_p0 <= dec_ph2_i;
        sext_ln574_2_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln574_2_fu_1491_p0),64));

        sext_ln574_4_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln570_fu_1033_p3),17));

        sext_ln574_5_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln570_2_fu_1479_p3),17));

    sext_ln574_fu_1045_p0 <= dec_plt2_i;
        sext_ln574_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln574_fu_1045_p0),64));

        sext_ln580_4_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln13_fu_1068_p4),17));

        sext_ln580_5_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln580_2_fu_1496_p3),23));

        sext_ln580_6_fu_1524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln580_2_fu_1514_p4),17));

        sext_ln580_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln9_fu_1050_p3),23));

        sext_ln597_2_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln597_2_fu_1613_p3),25));

        sext_ln597_fu_1239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_1232_p3),25));

        sext_ln599_2_fu_1640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln597_2_fu_1630_p4),18));

        sext_ln599_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln14_fu_1249_p4),18));

        sext_ln609_2_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_13_fu_1689_p2),18));

        sext_ln609_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_9_fu_1308_p2),18));

        sext_ln617_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln621_fu_793_p2),32));

        sext_ln618_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd_fu_762_p4),17));

        sext_ln620_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln364_1_reg_2157),16));

        sext_ln621_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_776_p6),17));

    shl_ln1_fu_1232_p1 <= dec_al1_i;
    shl_ln1_fu_1232_p3 <= (shl_ln1_fu_1232_p1 & ap_const_lv8_0);
    shl_ln2_fu_744_p3 <= (dec_nbh_i & ap_const_lv7_0);
    shl_ln385_1_fu_1739_p3 <= (sub_ln378_fu_1719_p2 & ap_const_lv2_0);
    shl_ln396_1_fu_1931_p3 <= (accumd_q0 & ap_const_lv2_0);
    shl_ln3_fu_1727_p3 <= (sub_ln378_fu_1719_p2 & ap_const_lv4_0);
    shl_ln4_fu_1919_p3 <= (accumd_q0 & ap_const_lv4_0);
    shl_ln526_2_fu_1168_p3 <= (wd3_5_fu_1162_p2 & ap_const_lv3_0);
    shl_ln580_2_fu_1496_p1 <= dec_ah2_i;
    shl_ln580_2_fu_1496_p3 <= (shl_ln580_2_fu_1496_p1 & ap_const_lv7_0);
    shl_ln597_2_fu_1613_p1 <= dec_ah1_i;
    shl_ln597_2_fu_1613_p3 <= (shl_ln597_2_fu_1613_p1 & ap_const_lv8_0);
    shl_ln8_fu_952_p3 <= (wd3_fu_946_p2 & ap_const_lv3_0);
    shl_ln9_fu_1050_p1 <= dec_al2_i;
    shl_ln9_fu_1050_p3 <= (shl_ln9_fu_1050_p1 & ap_const_lv7_0);
    shl_ln_fu_625_p3 <= (dec_nbl_i & ap_const_lv7_0);
    sub_ln378_fu_1719_p2 <= std_logic_vector(unsigned(add_ln347_reg_2163) - unsigned(add_ln371_reg_2188));
    sub_ln396_fu_1943_p2 <= std_logic_vector(signed(sext_ln396_fu_1927_p1) - signed(sext_ln396_1_fu_1939_p1));
    sub_ln511_fu_637_p2 <= std_logic_vector(unsigned(zext_ln511_2_fu_633_p1) - unsigned(zext_ln511_fu_621_p1));
    sub_ln525_2_fu_1153_p2 <= std_logic_vector(signed(ap_const_lv4_B) - signed(trunc_ln522_2_reg_2123));
    sub_ln525_2cast_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln525_2_fu_1153_p2),12));
    sub_ln525_fu_937_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(trunc_ln12_reg_2113));
    sub_ln525cast_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln525_fu_937_p2),12));
    sub_ln571_2_fu_1449_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(sext_ln566_2_fu_1434_p1));
    sub_ln571_fu_1003_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(sext_ln566_fu_988_p1));
    sub_ln580_2_fu_1508_p2 <= std_logic_vector(signed(sext_ln580_5_fu_1504_p1) - signed(sext_ln479_5_fu_1396_p1));
    sub_ln580_fu_1062_p2 <= std_logic_vector(signed(sext_ln580_fu_1058_p1) - signed(sext_ln479_fu_915_p1));
    sub_ln597_2_fu_1624_p2 <= std_logic_vector(signed(sext_ln597_2_fu_1620_p1) - signed(sext_ln477_2_fu_1574_p1));
    sub_ln597_fu_1243_p2 <= std_logic_vector(signed(sext_ln597_fu_1239_p1) - signed(sext_ln477_fu_1182_p1));
    sub_ln620_fu_756_p2 <= std_logic_vector(unsigned(zext_ln620_2_fu_752_p1) - unsigned(zext_ln620_fu_740_p1));
    tmp_16_fu_671_p3 <= sext_ln509_fu_667_p1(31 downto 31);
    tmp_19_fu_803_p3 <= sext_ln617_fu_799_p1(31 downto 31);
    tmp_1_fu_1023_p4 <= sub_ln571_fu_1003_p2(18 downto 7);
    tmp_2_fu_1455_p1 <= dec_ah1_i;
    tmp_2_fu_1455_p4 <= tmp_2_fu_1455_p1(15 downto 5);
    tmp_6_fu_1469_p4 <= sub_ln571_2_fu_1449_p2(18 downto 7);
    tmp_s_fu_1009_p1 <= dec_al1_i;
    tmp_s_fu_1009_p4 <= tmp_s_fu_1009_p1(15 downto 5);
    trunc_ln11_fu_643_p4 <= sub_ln511_fu_637_p2(22 downto 7);
    trunc_ln13_fu_1068_p4 <= sub_ln580_fu_1062_p2(22 downto 7);
    trunc_ln14_fu_1249_p4 <= sub_ln597_fu_1243_p2(24 downto 8);
    trunc_ln345_1_fu_533_p4 <= input_r(5 downto 2);
    trunc_ln345_fu_930_p1 <= add_ln344_fu_924_p2(31 - 1 downto 0);
    trunc_ln372_fu_1546_p1 <= add_ln371_fu_1540_p2(31 - 1 downto 0);
    trunc_ln389_1_fu_1900_p1 <= xa1_2_fu_252(46 - 1 downto 0);
    trunc_ln389_fu_1896_p1 <= xa2_2_fu_248(46 - 1 downto 0);
    trunc_ln405_fu_2009_p1 <= idx121_fu_260(4 - 1 downto 0);
    trunc_ln509_fu_687_p1 <= select_ln513_fu_679_p3(15 - 1 downto 0);
    trunc_ln567_2_fu_1589_p1 <= apl2_9_fu_1582_p3(15 - 1 downto 0);
    trunc_ln567_fu_1208_p1 <= apl2_6_fu_1201_p3(15 - 1 downto 0);
    trunc_ln580_2_fu_1514_p4 <= sub_ln580_2_fu_1508_p2(22 downto 7);
    trunc_ln595_2_fu_1685_p1 <= apl1_12_fu_1677_p3(16 - 1 downto 0);
    trunc_ln595_fu_1304_p1 <= apl1_8_fu_1296_p3(16 - 1 downto 0);
    trunc_ln597_2_fu_1630_p4 <= sub_ln597_2_fu_1624_p2(24 downto 8);
    trunc_ln617_fu_819_p1 <= select_ln622_fu_811_p3(15 - 1 downto 0);
    wd1_2_fu_843_p4 <= select_ln624_fu_829_p3(10 downto 6);
    wd1_fu_711_p4 <= select_ln515_fu_697_p3(10 downto 6);
    wd2_2_fu_1426_p1 <= dec_ah1_i;
    wd2_2_fu_1426_p3 <= (wd2_2_fu_1426_p1 & ap_const_lv2_0);
    wd2_fu_980_p1 <= dec_al1_i;
    wd2_fu_980_p3 <= (wd2_fu_980_p1 & ap_const_lv2_0);
    wd3_4_fu_1276_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_7_fu_1218_p3));
    wd3_5_fu_1162_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & sub_ln525_2cast_fu_1158_p1(12-1 downto 0)))));
    wd3_6_fu_1657_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_10_fu_1599_p3));
    wd3_fu_946_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q1),to_integer(unsigned('0' & sub_ln525cast_fu_942_p1(12-1 downto 0)))));
    wd_fu_762_p4 <= sub_ln620_fu_756_p2(22 downto 7);
    wl_code_table_address0 <= zext_ln345_fu_543_p1(4 - 1 downto 0);

    wl_code_table_ce0_assign_proc : process(ap_CS_fsm_state2, grp_filtez_fu_427_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_filtez_fu_427_ap_done = ap_const_logic_1))) then 
            wl_code_table_ce0 <= ap_const_logic_1;
        else 
            wl_code_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xa1_4_fu_1913_p2 <= std_logic_vector(signed(sext_ln395_1_fu_1909_p1) + signed(trunc_ln389_1_fu_1900_p1));
    xa1_5_fu_1860_p2 <= std_logic_vector(signed(sext_ln391_2_fu_1856_p1) + signed(xa1_2_fu_252));
    xa1_fu_1751_p2 <= std_logic_vector(signed(sext_ln385_fu_1735_p1) - signed(sext_ln385_1_fu_1747_p1));
    xa2_4_fu_1953_p2 <= std_logic_vector(signed(sext_ln396_2_fu_1949_p1) + signed(trunc_ln389_fu_1896_p1));
    xa2_5_fu_1880_p2 <= std_logic_vector(signed(sext_ln392_2_fu_1876_p1) + signed(xa2_2_fu_248));
    xout1 <= xa1_4_fu_1913_p2(45 downto 14);

    xout1_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            xout1_ap_vld <= ap_const_logic_1;
        else 
            xout1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xout2 <= xa2_4_fu_1953_p2(45 downto 14);

    xout2_ap_vld_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            xout2_ap_vld <= ap_const_logic_1;
        else 
            xout2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln335_1_fu_2046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_1_fu_2041_p2),64));
    zext_ln335_2_fu_2019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_2_fu_2013_p2),64));
    zext_ln335_fu_1810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln335_fu_1804_p2),64));
    zext_ln345_1_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dec_detl_i),31));
    zext_ln345_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln345_1_fu_533_p4),64));
    zext_ln346_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(il),64));
    zext_ln389_fu_1798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_256),64));
    zext_ln391_fu_1821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln391_fu_1815_p2),64));
    zext_ln511_2_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_625_p3),23));
    zext_ln511_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dec_nbl_i),23));
    zext_ln525_2_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd1_2_fu_843_p4),64));
    zext_ln525_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd1_fu_711_p4),64));
    zext_ln595_4_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_4_fu_1276_p2),16));
    zext_ln595_5_fu_1663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_6_fu_1657_p2),18));
    zext_ln595_6_fu_1667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_6_fu_1657_p2),16));
    zext_ln595_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_4_fu_1276_p2),18));
    zext_ln620_2_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_744_p3),23));
    zext_ln620_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dec_nbh_i),23));
end behav;
