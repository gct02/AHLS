-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity adpcm_main_quantl_decis_levl_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 15; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 30
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of adpcm_main_quantl_decis_levl_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000100011000", 1 => "000001001000000", 2 => "000001101110000", 3 => "000010010110000", 
    4 => "000010111110000", 5 => "000011101001000", 6 => "000100010100000", 7 => "000101000011000", 
    8 => "000101110010000", 9 => "000110100110000", 10 => "000111011001000", 11 => "001000010010000", 
    12 => "001001001011000", 13 => "001010001010000", 14 => "001011001010000", 15 => "001100010010000", 
    16 => "001101011010000", 17 => "001110101100000", 18 => "001111111111000", 19 => "010001100001000", 
    20 => "010011000011000", 21 => "010100111011000", 22 => "010110110010000", 23 => "011001001100000", 
    24 => "011011100101000", 25 => "011110111100000", 26 => "100010010011000", 27 => "100111111101000", 
    28 => "101101100111000", 29 => "111111111111111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

