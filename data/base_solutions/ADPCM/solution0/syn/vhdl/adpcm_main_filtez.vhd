-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_filtez is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bpl_ce0 : OUT STD_LOGIC;
    bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dlt_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dlt_ce0 : OUT STD_LOGIC;
    dlt_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of adpcm_main_filtez is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln460_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln464_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_fu_26 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln464_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zl_1_fu_30 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal zl_2_fu_182_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln460_fu_109_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_02_fu_34 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_fu_136_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_82_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln461_1_fu_104_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln466_1_fu_173_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_82_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln461_fu_99_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln466_fu_168_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln466_2_fu_178_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_mul_16s_32s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;



begin
    mul_16s_32s_48_1_1_U44 : component adpcm_main_mul_16s_32s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_82_p0,
        din1 => grp_fu_82_p1,
        dout => grp_fu_82_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_02_fu_34_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_02_fu_34 <= ap_const_lv3_1;
            elsif (((icmp_ln464_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_02_fu_34 <= i_fu_136_p2;
            end if; 
        end if;
    end process;

    idx_fu_26_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_26 <= ap_const_lv3_1;
            elsif (((icmp_ln464_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_fu_26 <= add_ln464_fu_142_p2;
            end if; 
        end if;
    end process;

    zl_1_fu_30_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                zl_1_fu_30 <= sext_ln460_fu_109_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                zl_1_fu_30 <= zl_2_fu_182_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln464_fu_121_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln464_fu_121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln464_fu_142_p2 <= std_logic_vector(unsigned(idx_fu_26) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln464_fu_121_p2)
    begin
        if ((((icmp_ln464_fu_121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln464_fu_121_p2)
    begin
        if (((icmp_ln464_fu_121_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= zl_1_fu_30(45 downto 14);

    bpl_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, zext_ln460_fu_130_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bpl_address0 <= zext_ln460_fu_130_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bpl_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            bpl_address0 <= "XXX";
        end if; 
    end process;


    bpl_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bpl_ce0 <= ap_const_logic_1;
        else 
            bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dlt_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, zext_ln460_fu_130_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dlt_address0 <= zext_ln460_fu_130_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dlt_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            dlt_address0 <= "XXX";
        end if; 
    end process;


    dlt_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dlt_ce0 <= ap_const_logic_1;
        else 
            dlt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_82_p0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, sext_ln461_1_fu_104_p1, sext_ln466_1_fu_173_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_82_p0 <= sext_ln466_1_fu_173_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_82_p0 <= sext_ln461_1_fu_104_p1(16 - 1 downto 0);
        else 
            grp_fu_82_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_82_p1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, sext_ln461_fu_99_p1, sext_ln466_fu_168_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_82_p1 <= sext_ln466_fu_168_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_82_p1 <= sext_ln461_fu_99_p1(32 - 1 downto 0);
        else 
            grp_fu_82_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_136_p2 <= std_logic_vector(unsigned(i_02_fu_34) + unsigned(ap_const_lv3_1));
    icmp_ln464_fu_121_p2 <= "1" when (i_02_fu_34 = ap_const_lv3_6) else "0";
        sext_ln460_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_82_p2),50));

        sext_ln461_1_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dlt_q0),48));

        sext_ln461_fu_99_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bpl_q0),48));

        sext_ln466_1_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dlt_q0),48));

        sext_ln466_2_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_82_p2),50));

        sext_ln466_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bpl_q0),48));

    zext_ln460_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_26),64));
    zl_2_fu_182_p2 <= std_logic_vector(signed(sext_ln466_2_fu_178_p1) + signed(zl_1_fu_30));
end behav;
