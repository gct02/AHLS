// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module aes_main_AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [3:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] reg_160;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] reg_165;
wire   [5:0] mul_fu_170_p3;
reg   [5:0] mul_reg_312;
wire   [5:0] add_ln471_fu_202_p2;
reg   [5:0] add_ln471_reg_320;
wire    ap_CS_fsm_state2;
wire   [3:0] shl_ln_fu_231_p3;
reg   [3:0] shl_ln_reg_335;
reg   [4:0] statemt_addr_reg_341;
reg   [4:0] statemt_addr_49_reg_346;
reg   [4:0] statemt_addr_50_reg_361;
reg   [4:0] statemt_addr_51_reg_366;
wire   [63:0] zext_ln471_fu_207_p1;
wire   [0:0] icmp_ln469_fu_186_p2;
wire   [63:0] zext_ln472_1_fu_222_p1;
wire   [63:0] zext_ln471_1_fu_239_p1;
wire   [63:0] zext_ln472_fu_250_p1;
wire   [63:0] zext_ln473_1_fu_269_p1;
wire   [63:0] zext_ln474_1_fu_280_p1;
wire   [63:0] zext_ln473_fu_290_p1;
wire   [63:0] zext_ln474_fu_300_p1;
reg   [2:0] j_fu_56;
wire   [2:0] add_ln469_fu_192_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] zext_ln469_fu_198_p1;
wire   [7:0] zext_ln471_3_fu_212_p1;
wire   [7:0] add_ln472_fu_216_p2;
wire   [1:0] trunc_ln471_fu_227_p1;
wire   [3:0] or_ln472_fu_244_p2;
wire   [8:0] zext_ln471_2_fu_260_p1;
wire   [8:0] add_ln473_fu_263_p2;
wire   [8:0] add_ln474_fu_274_p2;
wire   [3:0] or_ln473_fu_285_p2;
wire   [3:0] or_ln474_fu_295_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 j_fu_56 = 3'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_56 <= 3'd0;
    end else if (((icmp_ln469_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_56 <= add_ln469_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln471_reg_320 <= add_ln471_fu_202_p2;
        shl_ln_reg_335[3 : 2] <= shl_ln_fu_231_p3[3 : 2];
        statemt_addr_49_reg_346[3 : 2] <= zext_ln472_fu_250_p1[3 : 2];
        statemt_addr_reg_341[3 : 2] <= zext_ln471_1_fu_239_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_reg_312[5 : 2] <= mul_fu_170_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_160 <= grp_fu_148_p2;
        reg_165 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_addr_50_reg_361[3 : 2] <= zext_ln473_fu_290_p1[3 : 2];
        statemt_addr_51_reg_366[3 : 2] <= zext_ln474_fu_300_p1[3 : 2];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln469_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln469_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = statemt_addr_51_reg_366;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = statemt_addr_49_reg_346;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = zext_ln474_fu_300_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = zext_ln472_fu_250_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = statemt_addr_50_reg_361;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = statemt_addr_reg_341;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = zext_ln473_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = zext_ln471_1_fu_239_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address0 = zext_ln474_1_fu_280_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address0 = zext_ln472_1_fu_222_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address1 = zext_ln473_1_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address1 = zext_ln471_fu_207_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln469_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln469_fu_192_p2 = (j_fu_56 + 3'd1);

assign add_ln471_fu_202_p2 = (zext_ln469_fu_198_p1 + mul_reg_312);

assign add_ln472_fu_216_p2 = (zext_ln471_3_fu_212_p1 + 8'd120);

assign add_ln473_fu_263_p2 = (zext_ln471_2_fu_260_p1 + 9'd240);

assign add_ln474_fu_274_p2 = ($signed(zext_ln471_2_fu_260_p1) + $signed(9'd360));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_148_p2 = (word_q1 ^ statemt_q1);

assign grp_fu_154_p2 = (word_q0 ^ statemt_q0);

assign icmp_ln469_fu_186_p2 = ((j_fu_56 == 3'd4) ? 1'b1 : 1'b0);

assign mul_fu_170_p3 = {{n}, {2'd0}};

assign or_ln472_fu_244_p2 = (shl_ln_fu_231_p3 | 4'd1);

assign or_ln473_fu_285_p2 = (shl_ln_reg_335 | 4'd2);

assign or_ln474_fu_295_p2 = (shl_ln_reg_335 | 4'd3);

assign shl_ln_fu_231_p3 = {{trunc_ln471_fu_227_p1}, {2'd0}};

assign statemt_d0 = reg_165;

assign statemt_d1 = reg_160;

assign trunc_ln471_fu_227_p1 = j_fu_56[1:0];

assign zext_ln469_fu_198_p1 = j_fu_56;

assign zext_ln471_1_fu_239_p1 = shl_ln_fu_231_p3;

assign zext_ln471_2_fu_260_p1 = add_ln471_reg_320;

assign zext_ln471_3_fu_212_p1 = add_ln471_fu_202_p2;

assign zext_ln471_fu_207_p1 = add_ln471_fu_202_p2;

assign zext_ln472_1_fu_222_p1 = add_ln472_fu_216_p2;

assign zext_ln472_fu_250_p1 = or_ln472_fu_244_p2;

assign zext_ln473_1_fu_269_p1 = add_ln473_fu_263_p2;

assign zext_ln473_fu_290_p1 = or_ln473_fu_285_p2;

assign zext_ln474_1_fu_280_p1 = add_ln474_fu_274_p2;

assign zext_ln474_fu_300_p1 = or_ln474_fu_295_p2;

always @ (posedge ap_clk) begin
    mul_reg_312[1:0] <= 2'b00;
    shl_ln_reg_335[1:0] <= 2'b00;
    statemt_addr_reg_341[1:0] <= 2'b00;
    statemt_addr_reg_341[4] <= 1'b0;
    statemt_addr_49_reg_346[1:0] <= 2'b01;
    statemt_addr_49_reg_346[4] <= 1'b0;
    statemt_addr_50_reg_361[1:0] <= 2'b10;
    statemt_addr_50_reg_361[4] <= 1'b0;
    statemt_addr_51_reg_366[1:0] <= 2'b11;
    statemt_addr_51_reg_366[4] <= 1'b0;
end

endmodule //aes_main_AddRoundKey
