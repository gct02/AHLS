// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module aes_main_KeySchedule (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        word_address0,
        word_ce0,
        word_we0,
        word_d0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] key_address0;
output   key_ce0;
input  [31:0] key_q0;
output  [8:0] word_address0;
output   word_ce0;
output   word_we0;
output  [31:0] word_d0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg[8:0] word_address0;
reg word_ce0;
reg word_we0;
reg[31:0] word_d0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] Sbox_address0;
reg    Sbox_ce0;
wire   [7:0] Sbox_q0;
reg   [7:0] Sbox_address1;
reg    Sbox_ce1;
wire   [7:0] Sbox_q1;
wire   [4:0] Rcon0_address0;
reg    Rcon0_ce0;
wire   [7:0] Rcon0_q0;
reg   [31:0] reg_294;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
reg   [2:0] j_4_reg_1123;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln554_fu_313_p2;
reg   [2:0] add_ln554_reg_1131;
wire   [3:0] tmp_s_fu_323_p3;
reg   [3:0] tmp_s_reg_1136;
wire   [2:0] add_ln557_fu_342_p2;
reg   [2:0] add_ln557_reg_1151;
wire    ap_CS_fsm_state3;
wire   [5:0] add_ln571_fu_427_p2;
reg   [5:0] add_ln571_reg_1167;
wire    ap_CS_fsm_state5;
wire   [8:0] zext_ln571_2_fu_433_p1;
reg   [8:0] zext_ln571_2_reg_1172;
reg   [31:0] temp_2_1_reg_1197;
wire   [0:0] icmp_ln570_fu_730_p2;
reg   [0:0] icmp_ln570_reg_1217;
wire   [31:0] temp_1_2_fu_980_p3;
reg   [31:0] temp_1_2_reg_1233;
wire   [31:0] temp_0_2_fu_988_p3;
reg   [31:0] temp_0_2_reg_1238;
wire   [8:0] zext_ln501_fu_996_p1;
reg   [8:0] zext_ln501_reg_1243;
wire    ap_CS_fsm_state8;
wire   [31:0] temp_2_2_fu_1007_p3;
reg   [31:0] temp_2_2_reg_1248;
wire   [31:0] temp_3_fu_1013_p3;
reg   [31:0] temp_3_reg_1253;
wire   [8:0] zext_ln592_fu_1025_p1;
reg   [8:0] zext_ln592_reg_1258;
wire   [2:0] add_ln592_fu_1039_p2;
reg   [2:0] add_ln592_reg_1266;
wire    ap_CS_fsm_state9;
wire   [8:0] add_ln594_1_fu_1081_p2;
reg   [8:0] add_ln594_1_reg_1276;
wire   [31:0] tmp_fu_1086_p6;
reg   [31:0] tmp_reg_1281;
reg   [2:0] i_reg_255;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln554_fu_307_p2;
reg   [2:0] i_2_reg_267;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln559_fu_357_p1;
wire   [0:0] icmp_ln557_fu_336_p2;
wire   [63:0] zext_ln559_3_fu_413_p1;
wire   [63:0] zext_ln571_5_fu_447_p1;
wire   [0:0] icmp_ln565_fu_421_p2;
wire   [63:0] zext_ln572_fu_458_p1;
wire   [63:0] zext_ln573_fu_472_p1;
wire   [63:0] zext_ln571_1_fu_463_p1;
wire   [63:0] zext_ln571_8_fu_591_p1;
wire   [63:0] zext_ln571_fu_611_p1;
wire   [63:0] zext_ln572_4_fu_722_p1;
wire   [63:0] zext_ln573_4_fu_864_p1;
wire   [63:0] zext_ln574_2_fu_975_p1;
wire   [63:0] zext_ln594_1_fu_1076_p1;
wire   [0:0] icmp_ln592_fu_1033_p2;
wire   [63:0] zext_ln594_2_fu_1106_p1;
reg   [2:0] j_fu_114;
reg   [5:0] j_2_fu_118;
wire   [5:0] add_ln565_fu_1096_p2;
wire   [31:0] xor_ln594_fu_1110_p2;
wire   [1:0] empty_fu_319_p1;
wire   [3:0] zext_ln557_fu_348_p1;
wire   [3:0] add_ln559_fu_352_p2;
wire   [9:0] tmp_13_fu_366_p3;
wire   [5:0] tmp_14_fu_378_p3;
wire   [10:0] zext_ln559_1_fu_374_p1;
wire   [10:0] zext_ln559_2_fu_386_p1;
wire   [10:0] sub_ln559_fu_390_p2;
wire   [5:0] tmp_35_cast_fu_396_p4;
wire   [8:0] tmp_15_fu_406_p3;
wire   [7:0] zext_ln571_4_fu_437_p1;
wire   [7:0] add_ln571_2_fu_441_p2;
wire   [8:0] add_ln572_fu_452_p2;
wire   [8:0] add_ln573_fu_467_p2;
wire   [7:0] trunc_ln572_fu_477_p1;
wire   [7:0] sub_ln571_fu_485_p2;
wire   [3:0] trunc_ln571_2_fu_491_p4;
wire   [0:0] grp_fu_278_p3;
wire   [3:0] sub_ln571_1_fu_501_p2;
wire   [3:0] tmp_4_fu_507_p4;
wire   [3:0] select_ln571_fu_517_p3;
wire   [3:0] trunc_ln571_1_fu_533_p1;
wire   [4:0] p_and_f1_fu_537_p3;
wire   [3:0] sub_ln571_2_fu_549_p2;
wire   [4:0] p_and_t1_fu_555_p3;
wire   [5:0] zext_ln571_7_fu_563_p1;
wire   [5:0] sub_ln571_3_fu_567_p2;
wire   [5:0] zext_ln571_6_fu_545_p1;
wire   [5:0] select_ln571_1_fu_573_p3;
wire   [7:0] tmp_5_fu_525_p3;
wire  signed [7:0] sext_ln571_fu_581_p1;
wire   [7:0] add_ln571_3_fu_585_p2;
wire   [3:0] trunc_ln571_4_fu_596_p4;
wire   [3:0] add_ln571_1_fu_605_p2;
wire   [7:0] trunc_ln573_fu_481_p1;
wire   [7:0] sub_ln572_fu_616_p2;
wire   [3:0] trunc_ln572_2_fu_622_p4;
wire   [0:0] grp_fu_286_p3;
wire   [3:0] sub_ln572_1_fu_632_p2;
wire   [3:0] tmp_6_fu_638_p4;
wire   [3:0] select_ln572_fu_648_p3;
wire   [3:0] trunc_ln572_1_fu_664_p1;
wire   [4:0] p_and_f2_fu_668_p3;
wire   [3:0] sub_ln572_2_fu_680_p2;
wire   [4:0] p_and_t2_fu_686_p3;
wire   [5:0] zext_ln572_3_fu_694_p1;
wire   [5:0] sub_ln572_3_fu_698_p2;
wire   [5:0] zext_ln572_2_fu_676_p1;
wire   [5:0] select_ln572_1_fu_704_p3;
wire   [7:0] tmp_7_fu_656_p3;
wire  signed [7:0] sext_ln572_fu_712_p1;
wire   [7:0] add_ln572_1_fu_716_p2;
wire   [1:0] empty_69_fu_727_p1;
wire   [7:0] temp_0_fu_744_p2;
wire   [7:0] trunc_ln574_fu_736_p1;
wire   [7:0] sub_ln573_fu_758_p2;
wire   [3:0] trunc_ln573_2_fu_764_p4;
wire   [3:0] sub_ln573_1_fu_774_p2;
wire   [3:0] tmp_8_fu_780_p4;
wire   [3:0] select_ln573_fu_790_p3;
wire   [3:0] trunc_ln573_1_fu_806_p1;
wire   [4:0] p_and_f4_fu_810_p3;
wire   [3:0] sub_ln573_2_fu_822_p2;
wire   [4:0] p_and_t6_fu_828_p3;
wire   [5:0] zext_ln573_3_fu_836_p1;
wire   [5:0] sub_ln573_3_fu_840_p2;
wire   [5:0] zext_ln573_2_fu_818_p1;
wire   [5:0] select_ln573_1_fu_846_p3;
wire   [7:0] tmp_9_fu_798_p3;
wire  signed [7:0] sext_ln573_fu_854_p1;
wire   [7:0] add_ln573_1_fu_858_p2;
wire   [7:0] trunc_ln571_fu_740_p1;
wire   [7:0] sub_ln574_fu_869_p2;
wire   [3:0] trunc_ln574_2_fu_875_p4;
wire   [3:0] sub_ln574_1_fu_885_p2;
wire   [3:0] tmp_11_fu_891_p4;
wire   [3:0] select_ln574_fu_901_p3;
wire   [3:0] trunc_ln574_1_fu_917_p1;
wire   [4:0] p_and_f_fu_921_p3;
wire   [3:0] sub_ln574_2_fu_933_p2;
wire   [4:0] p_and_t_fu_939_p3;
wire   [5:0] zext_ln574_1_fu_947_p1;
wire   [5:0] sub_ln574_3_fu_951_p2;
wire   [5:0] zext_ln574_fu_929_p1;
wire   [5:0] select_ln574_1_fu_957_p3;
wire   [7:0] tmp_12_fu_909_p3;
wire  signed [7:0] sext_ln574_fu_965_p1;
wire   [7:0] add_ln574_fu_969_p2;
wire   [31:0] zext_ln572_1_fu_754_p1;
wire   [31:0] zext_ln571_3_fu_750_p1;
wire   [31:0] zext_ln573_1_fu_999_p1;
wire   [31:0] zext_ln577_fu_1003_p1;
wire   [5:0] empty_70_fu_1020_p2;
wire   [1:0] trunc_ln592_fu_1029_p1;
wire   [5:0] tmp_17_fu_1053_p3;
wire   [8:0] tmp_16_fu_1045_p3;
wire   [8:0] zext_ln594_fu_1061_p1;
wire   [8:0] sub_ln594_fu_1065_p2;
wire   [8:0] add_ln594_fu_1071_p2;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 j_fu_114 = 3'd0;
#0 j_2_fu_118 = 6'd0;
end

aes_main_KeySchedule_Sbox_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Sbox_address0),
    .ce0(Sbox_ce0),
    .q0(Sbox_q0),
    .address1(Sbox_address1),
    .ce1(Sbox_ce1),
    .q1(Sbox_q1)
);

aes_main_KeySchedule_Rcon0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
Rcon0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon0_address0),
    .ce0(Rcon0_ce0),
    .q0(Rcon0_q0)
);

aes_main_mux_4_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_4_2_32_1_1_U1(
    .din0(temp_0_2_reg_1238),
    .din1(temp_1_2_reg_1233),
    .din2(temp_2_2_reg_1248),
    .din3(temp_3_reg_1253),
    .din4(trunc_ln592_fu_1029_p1),
    .dout(tmp_fu_1086_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_267 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_267 <= add_ln592_reg_1266;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln554_fu_307_p2 == 1'd0))) begin
        i_reg_255 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_255 <= add_ln557_reg_1151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln554_fu_307_p2 == 1'd1))) begin
        j_2_fu_118 <= 6'd4;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln592_fu_1033_p2 == 1'd1))) begin
        j_2_fu_118 <= add_ln565_fu_1096_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_114 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln557_fu_336_p2 == 1'd1))) begin
        j_fu_114 <= add_ln554_reg_1131;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_294 <= word_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_294 <= word_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln554_reg_1131 <= add_ln554_fu_313_p2;
        j_4_reg_1123 <= j_fu_114;
        tmp_s_reg_1136[3 : 2] <= tmp_s_fu_323_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln557_reg_1151 <= add_ln557_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln571_reg_1167 <= add_ln571_fu_427_p2;
        zext_ln571_2_reg_1172[5 : 0] <= zext_ln571_2_fu_433_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln592_reg_1266 <= add_ln592_fu_1039_p2;
        add_ln594_1_reg_1276 <= add_ln594_1_fu_1081_p2;
        tmp_reg_1281 <= tmp_fu_1086_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln570_reg_1217 <= icmp_ln570_fu_730_p2;
        temp_0_2_reg_1238 <= temp_0_2_fu_988_p3;
        temp_1_2_reg_1233 <= temp_1_2_fu_980_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_2_1_reg_1197 <= word_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_2_2_reg_1248 <= temp_2_2_fu_1007_p3;
        temp_3_reg_1253 <= temp_3_fu_1013_p3;
        zext_ln501_reg_1243[5 : 0] <= zext_ln501_fu_996_p1[5 : 0];
        zext_ln592_reg_1258[5 : 0] <= zext_ln592_fu_1025_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Rcon0_ce0 = 1'b1;
    end else begin
        Rcon0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Sbox_address0 = zext_ln574_2_fu_975_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Sbox_address0 = zext_ln572_4_fu_722_p1;
    end else begin
        Sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        Sbox_address1 = zext_ln573_4_fu_864_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Sbox_address1 = zext_ln571_8_fu_591_p1;
    end else begin
        Sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        Sbox_ce0 = 1'b1;
    end else begin
        Sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        Sbox_ce1 = 1'b1;
    end else begin
        Sbox_ce1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln565_fu_421_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln565_fu_421_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        word_address0 = zext_ln594_2_fu_1106_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        word_address0 = zext_ln573_fu_472_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        word_address0 = zext_ln572_fu_458_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address0 = zext_ln559_3_fu_413_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        word_address1 = zext_ln594_1_fu_1076_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        word_address1 = zext_ln571_1_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        word_address1 = zext_ln571_5_fu_447_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        word_d0 = xor_ln594_fu_1110_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        word_d0 = key_q0;
    end else begin
        word_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        word_we0 = 1'b1;
    end else begin
        word_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln554_fu_307_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln557_fu_336_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln565_fu_421_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln592_fu_1033_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon0_address0 = zext_ln571_fu_611_p1;

assign add_ln554_fu_313_p2 = (j_fu_114 + 3'd1);

assign add_ln557_fu_342_p2 = (i_reg_255 + 3'd1);

assign add_ln559_fu_352_p2 = (zext_ln557_fu_348_p1 + tmp_s_reg_1136);

assign add_ln565_fu_1096_p2 = (j_2_fu_118 + 6'd1);

assign add_ln571_1_fu_605_p2 = ($signed(trunc_ln571_4_fu_596_p4) + $signed(4'd15));

assign add_ln571_2_fu_441_p2 = (zext_ln571_4_fu_437_p1 + 8'd120);

assign add_ln571_3_fu_585_p2 = ($signed(tmp_5_fu_525_p3) + $signed(sext_ln571_fu_581_p1));

assign add_ln571_fu_427_p2 = ($signed(j_2_fu_118) + $signed(6'd63));

assign add_ln572_1_fu_716_p2 = ($signed(tmp_7_fu_656_p3) + $signed(sext_ln572_fu_712_p1));

assign add_ln572_fu_452_p2 = (zext_ln571_2_fu_433_p1 + 9'd240);

assign add_ln573_1_fu_858_p2 = ($signed(tmp_9_fu_798_p3) + $signed(sext_ln573_fu_854_p1));

assign add_ln573_fu_467_p2 = ($signed(zext_ln571_2_reg_1172) + $signed(9'd360));

assign add_ln574_fu_969_p2 = ($signed(tmp_12_fu_909_p3) + $signed(sext_ln574_fu_965_p1));

assign add_ln592_fu_1039_p2 = (i_2_reg_267 + 3'd1);

assign add_ln594_1_fu_1081_p2 = (sub_ln594_fu_1065_p2 + zext_ln501_reg_1243);

assign add_ln594_fu_1071_p2 = (sub_ln594_fu_1065_p2 + zext_ln592_reg_1258);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_69_fu_727_p1 = j_2_fu_118[1:0];

assign empty_70_fu_1020_p2 = ($signed(j_2_fu_118) + $signed(6'd60));

assign empty_fu_319_p1 = j_fu_114[1:0];

assign grp_fu_278_p3 = word_q1[32'd31];

assign grp_fu_286_p3 = word_q0[32'd31];

assign icmp_ln554_fu_307_p2 = ((j_fu_114 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln557_fu_336_p2 = ((i_reg_255 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln565_fu_421_p2 = ((j_2_fu_118 == 6'd44) ? 1'b1 : 1'b0);

assign icmp_ln570_fu_730_p2 = ((empty_69_fu_727_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_1033_p2 = ((i_2_reg_267 == 3'd4) ? 1'b1 : 1'b0);

assign key_address0 = zext_ln559_fu_357_p1;

assign p_and_f1_fu_537_p3 = {{1'd0}, {trunc_ln571_1_fu_533_p1}};

assign p_and_f2_fu_668_p3 = {{1'd0}, {trunc_ln572_1_fu_664_p1}};

assign p_and_f4_fu_810_p3 = {{1'd0}, {trunc_ln573_1_fu_806_p1}};

assign p_and_f_fu_921_p3 = {{1'd0}, {trunc_ln574_1_fu_917_p1}};

assign p_and_t1_fu_555_p3 = {{1'd0}, {sub_ln571_2_fu_549_p2}};

assign p_and_t2_fu_686_p3 = {{1'd0}, {sub_ln572_2_fu_680_p2}};

assign p_and_t6_fu_828_p3 = {{1'd0}, {sub_ln573_2_fu_822_p2}};

assign p_and_t_fu_939_p3 = {{1'd0}, {sub_ln574_2_fu_933_p2}};

assign select_ln571_1_fu_573_p3 = ((grp_fu_278_p3[0:0] == 1'b1) ? sub_ln571_3_fu_567_p2 : zext_ln571_6_fu_545_p1);

assign select_ln571_fu_517_p3 = ((grp_fu_278_p3[0:0] == 1'b1) ? sub_ln571_1_fu_501_p2 : tmp_4_fu_507_p4);

assign select_ln572_1_fu_704_p3 = ((grp_fu_286_p3[0:0] == 1'b1) ? sub_ln572_3_fu_698_p2 : zext_ln572_2_fu_676_p1);

assign select_ln572_fu_648_p3 = ((grp_fu_286_p3[0:0] == 1'b1) ? sub_ln572_1_fu_632_p2 : tmp_6_fu_638_p4);

assign select_ln573_1_fu_846_p3 = ((grp_fu_286_p3[0:0] == 1'b1) ? sub_ln573_3_fu_840_p2 : zext_ln573_2_fu_818_p1);

assign select_ln573_fu_790_p3 = ((grp_fu_286_p3[0:0] == 1'b1) ? sub_ln573_1_fu_774_p2 : tmp_8_fu_780_p4);

assign select_ln574_1_fu_957_p3 = ((grp_fu_278_p3[0:0] == 1'b1) ? sub_ln574_3_fu_951_p2 : zext_ln574_fu_929_p1);

assign select_ln574_fu_901_p3 = ((grp_fu_278_p3[0:0] == 1'b1) ? sub_ln574_1_fu_885_p2 : tmp_11_fu_891_p4);

assign sext_ln571_fu_581_p1 = $signed(select_ln571_1_fu_573_p3);

assign sext_ln572_fu_712_p1 = $signed(select_ln572_1_fu_704_p3);

assign sext_ln573_fu_854_p1 = $signed(select_ln573_1_fu_846_p3);

assign sext_ln574_fu_965_p1 = $signed(select_ln574_1_fu_957_p3);

assign sub_ln559_fu_390_p2 = (zext_ln559_1_fu_374_p1 - zext_ln559_2_fu_386_p1);

assign sub_ln571_1_fu_501_p2 = (4'd0 - trunc_ln571_2_fu_491_p4);

assign sub_ln571_2_fu_549_p2 = (4'd0 - trunc_ln571_1_fu_533_p1);

assign sub_ln571_3_fu_567_p2 = (6'd0 - zext_ln571_7_fu_563_p1);

assign sub_ln571_fu_485_p2 = (8'd0 - trunc_ln572_fu_477_p1);

assign sub_ln572_1_fu_632_p2 = (4'd0 - trunc_ln572_2_fu_622_p4);

assign sub_ln572_2_fu_680_p2 = (4'd0 - trunc_ln572_1_fu_664_p1);

assign sub_ln572_3_fu_698_p2 = (6'd0 - zext_ln572_3_fu_694_p1);

assign sub_ln572_fu_616_p2 = (8'd0 - trunc_ln573_fu_481_p1);

assign sub_ln573_1_fu_774_p2 = (4'd0 - trunc_ln573_2_fu_764_p4);

assign sub_ln573_2_fu_822_p2 = (4'd0 - trunc_ln573_1_fu_806_p1);

assign sub_ln573_3_fu_840_p2 = (6'd0 - zext_ln573_3_fu_836_p1);

assign sub_ln573_fu_758_p2 = (8'd0 - trunc_ln574_fu_736_p1);

assign sub_ln574_1_fu_885_p2 = (4'd0 - trunc_ln574_2_fu_875_p4);

assign sub_ln574_2_fu_933_p2 = (4'd0 - trunc_ln574_1_fu_917_p1);

assign sub_ln574_3_fu_951_p2 = (6'd0 - zext_ln574_1_fu_947_p1);

assign sub_ln574_fu_869_p2 = (8'd0 - trunc_ln571_fu_740_p1);

assign sub_ln594_fu_1065_p2 = (tmp_16_fu_1045_p3 - zext_ln594_fu_1061_p1);

assign temp_0_2_fu_988_p3 = ((icmp_ln570_fu_730_p2[0:0] == 1'b1) ? zext_ln571_3_fu_750_p1 : word_q1);

assign temp_0_fu_744_p2 = (Sbox_q1 ^ Rcon0_q0);

assign temp_1_2_fu_980_p3 = ((icmp_ln570_fu_730_p2[0:0] == 1'b1) ? zext_ln572_1_fu_754_p1 : reg_294);

assign temp_2_2_fu_1007_p3 = ((icmp_ln570_reg_1217[0:0] == 1'b1) ? zext_ln573_1_fu_999_p1 : temp_2_1_reg_1197);

assign temp_3_fu_1013_p3 = ((icmp_ln570_reg_1217[0:0] == 1'b1) ? zext_ln577_fu_1003_p1 : reg_294);

assign tmp_11_fu_891_p4 = {{word_q1[7:4]}};

assign tmp_12_fu_909_p3 = {{select_ln574_fu_901_p3}, {4'd0}};

assign tmp_13_fu_366_p3 = {{i_reg_255}, {7'd0}};

assign tmp_14_fu_378_p3 = {{i_reg_255}, {3'd0}};

assign tmp_15_fu_406_p3 = {{tmp_35_cast_fu_396_p4}, {j_4_reg_1123}};

assign tmp_16_fu_1045_p3 = {{trunc_ln592_fu_1029_p1}, {7'd0}};

assign tmp_17_fu_1053_p3 = {{i_2_reg_267}, {3'd0}};

assign tmp_35_cast_fu_396_p4 = {{sub_ln559_fu_390_p2[8:3]}};

assign tmp_4_fu_507_p4 = {{word_q1[7:4]}};

assign tmp_5_fu_525_p3 = {{select_ln571_fu_517_p3}, {4'd0}};

assign tmp_6_fu_638_p4 = {{word_q0[7:4]}};

assign tmp_7_fu_656_p3 = {{select_ln572_fu_648_p3}, {4'd0}};

assign tmp_8_fu_780_p4 = {{word_q0[7:4]}};

assign tmp_9_fu_798_p3 = {{select_ln573_fu_790_p3}, {4'd0}};

assign tmp_s_fu_323_p3 = {{empty_fu_319_p1}, {2'd0}};

assign trunc_ln571_1_fu_533_p1 = word_q1[3:0];

assign trunc_ln571_2_fu_491_p4 = {{sub_ln571_fu_485_p2[7:4]}};

assign trunc_ln571_4_fu_596_p4 = {{j_2_fu_118[5:2]}};

assign trunc_ln571_fu_740_p1 = word_q1[7:0];

assign trunc_ln572_1_fu_664_p1 = word_q0[3:0];

assign trunc_ln572_2_fu_622_p4 = {{sub_ln572_fu_616_p2[7:4]}};

assign trunc_ln572_fu_477_p1 = word_q1[7:0];

assign trunc_ln573_1_fu_806_p1 = word_q0[3:0];

assign trunc_ln573_2_fu_764_p4 = {{sub_ln573_fu_758_p2[7:4]}};

assign trunc_ln573_fu_481_p1 = word_q0[7:0];

assign trunc_ln574_1_fu_917_p1 = word_q1[3:0];

assign trunc_ln574_2_fu_875_p4 = {{sub_ln574_fu_869_p2[7:4]}};

assign trunc_ln574_fu_736_p1 = word_q0[7:0];

assign trunc_ln592_fu_1029_p1 = i_2_reg_267[1:0];

assign xor_ln594_fu_1110_p2 = (word_q1 ^ tmp_reg_1281);

assign zext_ln501_fu_996_p1 = j_2_fu_118;

assign zext_ln557_fu_348_p1 = i_reg_255;

assign zext_ln559_1_fu_374_p1 = tmp_13_fu_366_p3;

assign zext_ln559_2_fu_386_p1 = tmp_14_fu_378_p3;

assign zext_ln559_3_fu_413_p1 = tmp_15_fu_406_p3;

assign zext_ln559_fu_357_p1 = add_ln559_fu_352_p2;

assign zext_ln571_1_fu_463_p1 = add_ln571_reg_1167;

assign zext_ln571_2_fu_433_p1 = add_ln571_fu_427_p2;

assign zext_ln571_3_fu_750_p1 = temp_0_fu_744_p2;

assign zext_ln571_4_fu_437_p1 = add_ln571_fu_427_p2;

assign zext_ln571_5_fu_447_p1 = add_ln571_2_fu_441_p2;

assign zext_ln571_6_fu_545_p1 = p_and_f1_fu_537_p3;

assign zext_ln571_7_fu_563_p1 = p_and_t1_fu_555_p3;

assign zext_ln571_8_fu_591_p1 = add_ln571_3_fu_585_p2;

assign zext_ln571_fu_611_p1 = add_ln571_1_fu_605_p2;

assign zext_ln572_1_fu_754_p1 = Sbox_q0;

assign zext_ln572_2_fu_676_p1 = p_and_f2_fu_668_p3;

assign zext_ln572_3_fu_694_p1 = p_and_t2_fu_686_p3;

assign zext_ln572_4_fu_722_p1 = add_ln572_1_fu_716_p2;

assign zext_ln572_fu_458_p1 = add_ln572_fu_452_p2;

assign zext_ln573_1_fu_999_p1 = Sbox_q1;

assign zext_ln573_2_fu_818_p1 = p_and_f4_fu_810_p3;

assign zext_ln573_3_fu_836_p1 = p_and_t6_fu_828_p3;

assign zext_ln573_4_fu_864_p1 = add_ln573_1_fu_858_p2;

assign zext_ln573_fu_472_p1 = add_ln573_fu_467_p2;

assign zext_ln574_1_fu_947_p1 = p_and_t_fu_939_p3;

assign zext_ln574_2_fu_975_p1 = add_ln574_fu_969_p2;

assign zext_ln574_fu_929_p1 = p_and_f_fu_921_p3;

assign zext_ln577_fu_1003_p1 = Sbox_q0;

assign zext_ln592_fu_1025_p1 = empty_70_fu_1020_p2;

assign zext_ln594_1_fu_1076_p1 = add_ln594_fu_1071_p2;

assign zext_ln594_2_fu_1106_p1 = add_ln594_1_reg_1276;

assign zext_ln594_fu_1061_p1 = tmp_17_fu_1053_p3;

always @ (posedge ap_clk) begin
    tmp_s_reg_1136[1:0] <= 2'b00;
    zext_ln571_2_reg_1172[8:6] <= 3'b000;
    zext_ln501_reg_1243[8:6] <= 3'b000;
    zext_ln592_reg_1258[8:6] <= 3'b000;
end

endmodule //aes_main_KeySchedule
