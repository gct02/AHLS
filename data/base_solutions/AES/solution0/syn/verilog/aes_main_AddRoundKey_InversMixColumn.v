// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module aes_main_AddRoundKey_InversMixColumn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [3:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[31:0] statemt_d0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[31:0] statemt_d1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_321_p2;
reg   [31:0] reg_353;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_327_p2;
reg   [31:0] reg_358;
wire   [5:0] mul_fu_363_p3;
reg   [5:0] mul_reg_1285;
wire   [5:0] add_ln382_fu_395_p2;
reg   [5:0] add_ln382_reg_1293;
wire    ap_CS_fsm_state2;
wire   [3:0] shl_ln_fu_424_p3;
reg   [3:0] shl_ln_reg_1308;
reg   [4:0] statemt_addr_reg_1314;
reg   [4:0] statemt_addr_38_reg_1319;
reg   [4:0] statemt_addr_39_reg_1341;
reg   [4:0] statemt_addr_40_reg_1346;
wire   [2:0] add_ln389_fu_512_p2;
reg   [2:0] add_ln389_reg_1354;
wire    ap_CS_fsm_state6;
wire   [1:0] empty_fu_518_p1;
reg   [1:0] empty_reg_1359;
wire   [3:0] tmp_s_fu_522_p3;
reg   [3:0] tmp_s_reg_1366;
wire   [2:0] add_ln404_fu_541_p2;
reg   [2:0] add_ln404_reg_1381;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln394_fu_556_p1;
reg   [63:0] zext_ln394_reg_1386;
wire   [1:0] trunc_ln414_fu_577_p1;
reg   [1:0] trunc_ln414_reg_1401;
reg   [31:0] statemt_load_38_reg_1407;
wire    ap_CS_fsm_state8;
wire   [31:0] xor_ln431_2_fu_905_p2;
reg   [31:0] xor_ln431_2_reg_1422;
wire   [3:0] shl_ln5_fu_1229_p3;
reg   [3:0] shl_ln5_reg_1430;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln438_fu_1237_p1;
reg   [63:0] zext_ln438_reg_1436;
wire   [63:0] zext_ln439_fu_1248_p1;
reg   [63:0] zext_ln439_reg_1446;
wire   [63:0] zext_ln440_fu_1263_p1;
reg   [63:0] zext_ln440_reg_1456;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln441_fu_1273_p1;
reg   [63:0] zext_ln441_reg_1466;
reg   [4:0] ret_address0;
reg    ret_ce0;
reg    ret_we0;
wire   [31:0] ret_d0;
wire   [31:0] ret_q0;
reg   [4:0] ret_address1;
reg    ret_ce1;
wire   [31:0] ret_q1;
reg   [2:0] i_3_reg_310;
wire   [0:0] icmp_ln389_fu_506_p2;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln382_fu_400_p1;
wire   [0:0] icmp_ln380_fu_379_p2;
wire   [63:0] zext_ln383_1_fu_415_p1;
wire   [63:0] zext_ln382_1_fu_432_p1;
wire   [63:0] zext_ln383_fu_443_p1;
wire   [63:0] zext_ln384_1_fu_467_p1;
wire   [63:0] zext_ln385_1_fu_478_p1;
wire   [63:0] zext_ln384_fu_488_p1;
wire   [63:0] zext_ln385_fu_498_p1;
wire   [0:0] icmp_ln392_fu_535_p2;
wire   [63:0] zext_ln404_fu_572_p1;
wire   [63:0] zext_ln414_fu_883_p1;
wire   [63:0] zext_ln424_fu_900_p1;
wire   [0:0] icmp_ln436_fu_1213_p2;
wire    ap_CS_fsm_state12;
reg   [2:0] j_fu_94;
wire   [2:0] add_ln380_fu_385_p2;
reg   [2:0] j_3_fu_102;
reg   [2:0] i_fu_106;
wire   [2:0] add_ln436_fu_1219_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] zext_ln380_fu_391_p1;
wire   [7:0] zext_ln382_3_fu_405_p1;
wire   [7:0] add_ln383_fu_409_p2;
wire   [1:0] trunc_ln382_fu_420_p1;
wire   [3:0] or_ln383_fu_437_p2;
wire   [8:0] zext_ln382_2_fu_458_p1;
wire   [8:0] add_ln384_fu_461_p2;
wire   [8:0] add_ln385_fu_472_p2;
wire   [3:0] or_ln384_fu_483_p2;
wire   [3:0] or_ln385_fu_493_p2;
wire   [3:0] zext_ln392_fu_547_p1;
wire   [3:0] add_ln394_fu_551_p2;
wire   [1:0] empty_71_fu_561_p1;
wire   [3:0] add_ln404_1_fu_565_p3;
wire   [23:0] grp_fu_333_p4;
wire   [31:0] and_ln_fu_585_p3;
wire   [29:0] trunc_ln395_fu_599_p1;
wire   [30:0] trunc_ln_fu_603_p3;
wire   [0:0] icmp_ln395_fu_593_p2;
wire   [30:0] xor_ln395_fu_611_p2;
wire   [30:0] select_ln395_fu_617_p3;
wire   [30:0] trunc_ln396_fu_625_p1;
wire   [30:0] xor_ln397_fu_629_p2;
wire   [23:0] tmp_19_fu_635_p4;
wire   [31:0] and_ln8_fu_645_p3;
wire   [30:0] shl_ln398_fu_659_p2;
wire   [0:0] icmp_ln398_fu_653_p2;
wire   [30:0] xor_ln398_fu_665_p2;
wire   [30:0] select_ln398_fu_671_p3;
wire   [30:0] xor_ln400_fu_679_p2;
wire   [23:0] tmp_20_fu_693_p4;
wire   [31:0] and_ln9_fu_703_p3;
wire   [31:0] x_fu_685_p3;
wire   [0:0] icmp_ln401_fu_711_p2;
wire   [31:0] xor_ln401_fu_717_p2;
wire   [29:0] trunc_ln377_fu_731_p1;
wire   [23:0] grp_fu_343_p4;
wire   [31:0] and_ln1_fu_743_p3;
wire   [30:0] trunc_ln7_fu_735_p3;
wire   [0:0] icmp_ln405_fu_751_p2;
wire   [30:0] x_13_fu_757_p2;
wire   [30:0] select_ln405_fu_763_p3;
wire   [23:0] tmp_22_fu_771_p4;
wire   [31:0] and_ln2_fu_781_p3;
wire   [30:0] shl_ln407_fu_795_p2;
wire   [0:0] icmp_ln407_fu_789_p2;
wire   [30:0] xor_ln407_fu_801_p2;
wire   [30:0] select_ln407_fu_807_p3;
wire   [30:0] trunc_ln408_fu_815_p1;
wire   [30:0] xor_ln409_fu_819_p2;
wire   [23:0] tmp_23_fu_833_p4;
wire   [31:0] and_ln3_fu_843_p3;
wire   [31:0] x_14_fu_825_p3;
wire   [0:0] icmp_ln410_fu_851_p2;
wire   [31:0] x_15_fu_857_p2;
wire   [1:0] xor_ln414_fu_871_p2;
wire   [3:0] or_ln_fu_876_p3;
wire   [1:0] add_ln424_fu_888_p2;
wire   [3:0] or_ln1_fu_893_p3;
wire   [31:0] x_12_fu_723_p3;
wire   [31:0] x_16_fu_863_p3;
wire   [31:0] and_ln4_fu_911_p3;
wire   [29:0] trunc_ln415_fu_925_p1;
wire   [30:0] trunc_ln1_fu_929_p3;
wire   [0:0] icmp_ln415_fu_919_p2;
wire   [30:0] xor_ln415_fu_937_p2;
wire   [30:0] select_ln415_fu_943_p3;
wire   [30:0] trunc_ln416_fu_951_p1;
wire   [30:0] xor_ln417_fu_955_p2;
wire   [23:0] tmp_25_fu_967_p4;
wire   [31:0] and_ln5_fu_977_p3;
wire   [30:0] shl_ln377_fu_961_p2;
wire   [0:0] icmp_ln418_fu_985_p2;
wire   [30:0] x_17_fu_991_p2;
wire   [30:0] select_ln418_fu_997_p3;
wire   [23:0] tmp_26_fu_1013_p4;
wire   [31:0] and_ln6_fu_1023_p3;
wire   [31:0] x_18_fu_1005_p3;
wire   [0:0] icmp_ln420_fu_1031_p2;
wire   [31:0] xor_ln420_fu_1037_p2;
wire   [29:0] trunc_ln377_1_fu_1051_p1;
wire   [31:0] and_ln7_fu_1063_p3;
wire   [30:0] trunc_ln377_2_fu_1055_p3;
wire   [0:0] icmp_ln425_fu_1071_p2;
wire   [30:0] x_20_fu_1077_p2;
wire   [30:0] select_ln425_fu_1083_p3;
wire   [23:0] tmp_28_fu_1097_p4;
wire   [31:0] and_ln10_fu_1107_p3;
wire   [30:0] shl_ln377_1_fu_1091_p2;
wire   [0:0] icmp_ln427_fu_1115_p2;
wire   [30:0] xor_ln427_fu_1121_p2;
wire   [30:0] select_ln427_fu_1127_p3;
wire   [23:0] tmp_29_fu_1143_p4;
wire   [31:0] and_ln11_fu_1153_p3;
wire   [31:0] x_21_fu_1135_p3;
wire   [0:0] icmp_ln429_fu_1161_p2;
wire   [31:0] x_22_fu_1167_p2;
wire   [31:0] xor_ln431_fu_1181_p2;
wire   [31:0] x_19_fu_1043_p3;
wire   [31:0] x_23_fu_1173_p3;
wire   [31:0] xor_ln431_3_fu_1192_p2;
wire   [31:0] xor_ln431_4_fu_1198_p2;
wire   [31:0] xor_ln431_1_fu_1186_p2;
wire   [1:0] trunc_ln438_fu_1225_p1;
wire   [3:0] or_ln439_fu_1242_p2;
wire   [3:0] or_ln440_fu_1258_p2;
wire   [3:0] or_ln441_fu_1268_p2;
reg   [11:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 j_fu_94 = 3'd0;
#0 j_3_fu_102 = 3'd0;
#0 i_fu_106 = 3'd0;
end

aes_main_AddRoundKey_InversMixColumn_ret_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ret_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ret_address0),
    .ce0(ret_ce0),
    .we0(ret_we0),
    .d0(ret_d0),
    .q0(ret_q0),
    .address1(ret_address1),
    .ce1(ret_ce1),
    .q1(ret_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_3_reg_310 <= add_ln404_reg_1381;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln389_fu_506_p2 == 1'd0))) begin
        i_3_reg_310 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln389_fu_506_p2 == 1'd1))) begin
        i_fu_106 <= 3'd0;
    end else if (((icmp_ln436_fu_1213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        i_fu_106 <= add_ln436_fu_1219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln380_fu_379_p2 == 1'd1))) begin
        j_3_fu_102 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln392_fu_535_p2 == 1'd1))) begin
        j_3_fu_102 <= add_ln389_reg_1354;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_94 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln380_fu_379_p2 == 1'd0))) begin
        j_fu_94 <= add_ln380_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln382_reg_1293 <= add_ln382_fu_395_p2;
        shl_ln_reg_1308[3 : 2] <= shl_ln_fu_424_p3[3 : 2];
        statemt_addr_38_reg_1319[3 : 2] <= zext_ln383_fu_443_p1[3 : 2];
        statemt_addr_reg_1314[3 : 2] <= zext_ln382_1_fu_432_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln389_reg_1354 <= add_ln389_fu_512_p2;
        empty_reg_1359 <= empty_fu_518_p1;
        tmp_s_reg_1366[3 : 2] <= tmp_s_fu_522_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln404_reg_1381 <= add_ln404_fu_541_p2;
        trunc_ln414_reg_1401 <= trunc_ln414_fu_577_p1;
        zext_ln394_reg_1386[3 : 0] <= zext_ln394_fu_556_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        mul_reg_1285[5 : 2] <= mul_fu_363_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_353 <= grp_fu_321_p2;
        reg_358 <= grp_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        shl_ln5_reg_1430[3 : 2] <= shl_ln5_fu_1229_p3[3 : 2];
        zext_ln438_reg_1436[3 : 2] <= zext_ln438_fu_1237_p1[3 : 2];
        zext_ln439_reg_1446[3 : 2] <= zext_ln439_fu_1248_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_addr_39_reg_1341[3 : 2] <= zext_ln384_fu_488_p1[3 : 2];
        statemt_addr_40_reg_1346[3 : 2] <= zext_ln385_fu_498_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_load_38_reg_1407 <= statemt_q0;
        xor_ln431_2_reg_1422 <= xor_ln431_2_fu_905_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        zext_ln440_reg_1456[3 : 2] <= zext_ln440_fu_1263_p1[3 : 2];
        zext_ln441_reg_1466[3 : 2] <= zext_ln441_fu_1273_p1[3 : 2];
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln436_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln436_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ret_address0 = zext_ln440_fu_1263_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_address0 = zext_ln439_fu_1248_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_address0 = zext_ln394_reg_1386;
    end else begin
        ret_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ret_address1 = zext_ln441_fu_1273_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        ret_address1 = zext_ln438_fu_1237_p1;
    end else begin
        ret_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ret_ce0 = 1'b1;
    end else begin
        ret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        ret_ce1 = 1'b1;
    end else begin
        ret_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ret_we0 = 1'b1;
    end else begin
        ret_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_address0 = zext_ln441_reg_1466;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address0 = zext_ln439_reg_1446;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address0 = zext_ln424_fu_900_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address0 = zext_ln404_fu_572_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = statemt_addr_40_reg_1346;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = statemt_addr_38_reg_1319;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = zext_ln385_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = zext_ln383_fu_443_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_address1 = zext_ln440_reg_1456;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_address1 = zext_ln438_reg_1436;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address1 = zext_ln414_fu_883_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address1 = zext_ln394_fu_556_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = statemt_addr_39_reg_1341;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = statemt_addr_reg_1314;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = zext_ln384_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = zext_ln382_1_fu_432_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_d0 = ret_q1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_d0 = ret_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_d0 = reg_358;
    end else begin
        statemt_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        statemt_d1 = ret_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        statemt_d1 = ret_q1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_d1 = reg_353;
    end else begin
        statemt_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address0 = zext_ln385_1_fu_478_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address0 = zext_ln383_1_fu_415_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address1 = zext_ln384_1_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address1 = zext_ln382_fu_400_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln380_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln389_fu_506_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln392_fu_535_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln436_fu_1213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln380_fu_385_p2 = (j_fu_94 + 3'd1);

assign add_ln382_fu_395_p2 = (zext_ln380_fu_391_p1 + mul_reg_1285);

assign add_ln383_fu_409_p2 = (zext_ln382_3_fu_405_p1 + 8'd120);

assign add_ln384_fu_461_p2 = (zext_ln382_2_fu_458_p1 + 9'd240);

assign add_ln385_fu_472_p2 = ($signed(zext_ln382_2_fu_458_p1) + $signed(9'd360));

assign add_ln389_fu_512_p2 = (j_3_fu_102 + 3'd1);

assign add_ln394_fu_551_p2 = (zext_ln392_fu_547_p1 + tmp_s_reg_1366);

assign add_ln404_1_fu_565_p3 = {{empty_reg_1359}, {empty_71_fu_561_p1}};

assign add_ln404_fu_541_p2 = (i_3_reg_310 + 3'd1);

assign add_ln424_fu_888_p2 = ($signed(trunc_ln414_reg_1401) + $signed(2'd3));

assign add_ln436_fu_1219_p2 = (i_fu_106 + 3'd1);

assign and_ln10_fu_1107_p3 = {{tmp_28_fu_1097_p4}, {8'd0}};

assign and_ln11_fu_1153_p3 = {{tmp_29_fu_1143_p4}, {8'd0}};

assign and_ln1_fu_743_p3 = {{grp_fu_343_p4}, {8'd0}};

assign and_ln2_fu_781_p3 = {{tmp_22_fu_771_p4}, {8'd0}};

assign and_ln3_fu_843_p3 = {{tmp_23_fu_833_p4}, {8'd0}};

assign and_ln4_fu_911_p3 = {{grp_fu_333_p4}, {8'd0}};

assign and_ln5_fu_977_p3 = {{tmp_25_fu_967_p4}, {8'd0}};

assign and_ln6_fu_1023_p3 = {{tmp_26_fu_1013_p4}, {8'd0}};

assign and_ln7_fu_1063_p3 = {{grp_fu_343_p4}, {8'd0}};

assign and_ln8_fu_645_p3 = {{tmp_19_fu_635_p4}, {8'd0}};

assign and_ln9_fu_703_p3 = {{tmp_20_fu_693_p4}, {8'd0}};

assign and_ln_fu_585_p3 = {{grp_fu_333_p4}, {8'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_71_fu_561_p1 = add_ln404_fu_541_p2[1:0];

assign empty_fu_518_p1 = j_3_fu_102[1:0];

assign grp_fu_321_p2 = (word_q1 ^ statemt_q1);

assign grp_fu_327_p2 = (word_q0 ^ statemt_q0);

assign grp_fu_333_p4 = {{statemt_q1[30:7]}};

assign grp_fu_343_p4 = {{statemt_q0[30:7]}};

assign icmp_ln380_fu_379_p2 = ((j_fu_94 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln389_fu_506_p2 = ((j_3_fu_102 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln392_fu_535_p2 = ((i_3_reg_310 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln395_fu_593_p2 = ((and_ln_fu_585_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln398_fu_653_p2 = ((and_ln8_fu_645_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln401_fu_711_p2 = ((and_ln9_fu_703_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln405_fu_751_p2 = ((and_ln1_fu_743_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln407_fu_789_p2 = ((and_ln2_fu_781_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln410_fu_851_p2 = ((and_ln3_fu_843_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln415_fu_919_p2 = ((and_ln4_fu_911_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln418_fu_985_p2 = ((and_ln5_fu_977_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln420_fu_1031_p2 = ((and_ln6_fu_1023_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln425_fu_1071_p2 = ((and_ln7_fu_1063_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln427_fu_1115_p2 = ((and_ln10_fu_1107_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln429_fu_1161_p2 = ((and_ln11_fu_1153_p3 == 32'd256) ? 1'b1 : 1'b0);

assign icmp_ln436_fu_1213_p2 = ((i_fu_106 == 3'd4) ? 1'b1 : 1'b0);

assign mul_fu_363_p3 = {{n}, {2'd0}};

assign or_ln1_fu_893_p3 = {{empty_reg_1359}, {add_ln424_fu_888_p2}};

assign or_ln383_fu_437_p2 = (shl_ln_fu_424_p3 | 4'd1);

assign or_ln384_fu_483_p2 = (shl_ln_reg_1308 | 4'd2);

assign or_ln385_fu_493_p2 = (shl_ln_reg_1308 | 4'd3);

assign or_ln439_fu_1242_p2 = (shl_ln5_fu_1229_p3 | 4'd1);

assign or_ln440_fu_1258_p2 = (shl_ln5_reg_1430 | 4'd2);

assign or_ln441_fu_1268_p2 = (shl_ln5_reg_1430 | 4'd3);

assign or_ln_fu_876_p3 = {{empty_reg_1359}, {xor_ln414_fu_871_p2}};

assign ret_d0 = (xor_ln431_4_fu_1198_p2 ^ xor_ln431_1_fu_1186_p2);

assign select_ln395_fu_617_p3 = ((icmp_ln395_fu_593_p2[0:0] == 1'b1) ? xor_ln395_fu_611_p2 : trunc_ln_fu_603_p3);

assign select_ln398_fu_671_p3 = ((icmp_ln398_fu_653_p2[0:0] == 1'b1) ? xor_ln398_fu_665_p2 : shl_ln398_fu_659_p2);

assign select_ln405_fu_763_p3 = ((icmp_ln405_fu_751_p2[0:0] == 1'b1) ? x_13_fu_757_p2 : trunc_ln7_fu_735_p3);

assign select_ln407_fu_807_p3 = ((icmp_ln407_fu_789_p2[0:0] == 1'b1) ? xor_ln407_fu_801_p2 : shl_ln407_fu_795_p2);

assign select_ln415_fu_943_p3 = ((icmp_ln415_fu_919_p2[0:0] == 1'b1) ? xor_ln415_fu_937_p2 : trunc_ln1_fu_929_p3);

assign select_ln418_fu_997_p3 = ((icmp_ln418_fu_985_p2[0:0] == 1'b1) ? x_17_fu_991_p2 : shl_ln377_fu_961_p2);

assign select_ln425_fu_1083_p3 = ((icmp_ln425_fu_1071_p2[0:0] == 1'b1) ? x_20_fu_1077_p2 : trunc_ln377_2_fu_1055_p3);

assign select_ln427_fu_1127_p3 = ((icmp_ln427_fu_1115_p2[0:0] == 1'b1) ? xor_ln427_fu_1121_p2 : shl_ln377_1_fu_1091_p2);

assign shl_ln377_1_fu_1091_p2 = select_ln425_fu_1083_p3 << 31'd1;

assign shl_ln377_fu_961_p2 = xor_ln417_fu_955_p2 << 31'd1;

assign shl_ln398_fu_659_p2 = xor_ln397_fu_629_p2 << 31'd1;

assign shl_ln407_fu_795_p2 = select_ln405_fu_763_p3 << 31'd1;

assign shl_ln5_fu_1229_p3 = {{trunc_ln438_fu_1225_p1}, {2'd0}};

assign shl_ln_fu_424_p3 = {{trunc_ln382_fu_420_p1}, {2'd0}};

assign tmp_19_fu_635_p4 = {{xor_ln397_fu_629_p2[30:7]}};

assign tmp_20_fu_693_p4 = {{xor_ln400_fu_679_p2[30:7]}};

assign tmp_22_fu_771_p4 = {{select_ln405_fu_763_p3[30:7]}};

assign tmp_23_fu_833_p4 = {{xor_ln409_fu_819_p2[30:7]}};

assign tmp_25_fu_967_p4 = {{xor_ln417_fu_955_p2[30:7]}};

assign tmp_26_fu_1013_p4 = {{select_ln418_fu_997_p3[30:7]}};

assign tmp_28_fu_1097_p4 = {{select_ln425_fu_1083_p3[30:7]}};

assign tmp_29_fu_1143_p4 = {{select_ln427_fu_1127_p3[30:7]}};

assign tmp_s_fu_522_p3 = {{empty_fu_518_p1}, {2'd0}};

assign trunc_ln1_fu_929_p3 = {{trunc_ln415_fu_925_p1}, {1'd0}};

assign trunc_ln377_1_fu_1051_p1 = statemt_q0[29:0];

assign trunc_ln377_2_fu_1055_p3 = {{trunc_ln377_1_fu_1051_p1}, {1'd0}};

assign trunc_ln377_fu_731_p1 = statemt_q0[29:0];

assign trunc_ln382_fu_420_p1 = j_fu_94[1:0];

assign trunc_ln395_fu_599_p1 = statemt_q1[29:0];

assign trunc_ln396_fu_625_p1 = statemt_q1[30:0];

assign trunc_ln408_fu_815_p1 = statemt_q0[30:0];

assign trunc_ln414_fu_577_p1 = i_3_reg_310[1:0];

assign trunc_ln415_fu_925_p1 = statemt_q1[29:0];

assign trunc_ln416_fu_951_p1 = statemt_q1[30:0];

assign trunc_ln438_fu_1225_p1 = i_fu_106[1:0];

assign trunc_ln7_fu_735_p3 = {{trunc_ln377_fu_731_p1}, {1'd0}};

assign trunc_ln_fu_603_p3 = {{trunc_ln395_fu_599_p1}, {1'd0}};

assign x_12_fu_723_p3 = ((icmp_ln401_fu_711_p2[0:0] == 1'b1) ? xor_ln401_fu_717_p2 : x_fu_685_p3);

assign x_13_fu_757_p2 = (trunc_ln7_fu_735_p3 ^ 31'd283);

assign x_14_fu_825_p3 = {{xor_ln409_fu_819_p2}, {1'd0}};

assign x_15_fu_857_p2 = (x_14_fu_825_p3 ^ 32'd283);

assign x_16_fu_863_p3 = ((icmp_ln410_fu_851_p2[0:0] == 1'b1) ? x_15_fu_857_p2 : x_14_fu_825_p3);

assign x_17_fu_991_p2 = (shl_ln377_fu_961_p2 ^ 31'd283);

assign x_18_fu_1005_p3 = {{select_ln418_fu_997_p3}, {1'd0}};

assign x_19_fu_1043_p3 = ((icmp_ln420_fu_1031_p2[0:0] == 1'b1) ? xor_ln420_fu_1037_p2 : x_18_fu_1005_p3);

assign x_20_fu_1077_p2 = (trunc_ln377_2_fu_1055_p3 ^ 31'd283);

assign x_21_fu_1135_p3 = {{select_ln427_fu_1127_p3}, {1'd0}};

assign x_22_fu_1167_p2 = (x_21_fu_1135_p3 ^ 32'd283);

assign x_23_fu_1173_p3 = ((icmp_ln429_fu_1161_p2[0:0] == 1'b1) ? x_22_fu_1167_p2 : x_21_fu_1135_p3);

assign x_fu_685_p3 = {{xor_ln400_fu_679_p2}, {1'd0}};

assign xor_ln395_fu_611_p2 = (trunc_ln_fu_603_p3 ^ 31'd283);

assign xor_ln397_fu_629_p2 = (trunc_ln396_fu_625_p1 ^ select_ln395_fu_617_p3);

assign xor_ln398_fu_665_p2 = (shl_ln398_fu_659_p2 ^ 31'd283);

assign xor_ln400_fu_679_p2 = (trunc_ln396_fu_625_p1 ^ select_ln398_fu_671_p3);

assign xor_ln401_fu_717_p2 = (x_fu_685_p3 ^ 32'd283);

assign xor_ln407_fu_801_p2 = (shl_ln407_fu_795_p2 ^ 31'd283);

assign xor_ln409_fu_819_p2 = (trunc_ln408_fu_815_p1 ^ select_ln407_fu_807_p3);

assign xor_ln414_fu_871_p2 = (trunc_ln414_reg_1401 ^ 2'd2);

assign xor_ln415_fu_937_p2 = (trunc_ln1_fu_929_p3 ^ 31'd283);

assign xor_ln417_fu_955_p2 = (trunc_ln416_fu_951_p1 ^ select_ln415_fu_943_p3);

assign xor_ln420_fu_1037_p2 = (x_18_fu_1005_p3 ^ 32'd283);

assign xor_ln427_fu_1121_p2 = (shl_ln377_1_fu_1091_p2 ^ 31'd283);

assign xor_ln431_1_fu_1186_p2 = (xor_ln431_fu_1181_p2 ^ statemt_q1);

assign xor_ln431_2_fu_905_p2 = (x_16_fu_863_p3 ^ x_12_fu_723_p3);

assign xor_ln431_3_fu_1192_p2 = (x_23_fu_1173_p3 ^ x_19_fu_1043_p3);

assign xor_ln431_4_fu_1198_p2 = (xor_ln431_3_fu_1192_p2 ^ xor_ln431_2_reg_1422);

assign xor_ln431_fu_1181_p2 = (statemt_q0 ^ statemt_load_38_reg_1407);

assign zext_ln380_fu_391_p1 = j_fu_94;

assign zext_ln382_1_fu_432_p1 = shl_ln_fu_424_p3;

assign zext_ln382_2_fu_458_p1 = add_ln382_reg_1293;

assign zext_ln382_3_fu_405_p1 = add_ln382_fu_395_p2;

assign zext_ln382_fu_400_p1 = add_ln382_fu_395_p2;

assign zext_ln383_1_fu_415_p1 = add_ln383_fu_409_p2;

assign zext_ln383_fu_443_p1 = or_ln383_fu_437_p2;

assign zext_ln384_1_fu_467_p1 = add_ln384_fu_461_p2;

assign zext_ln384_fu_488_p1 = or_ln384_fu_483_p2;

assign zext_ln385_1_fu_478_p1 = add_ln385_fu_472_p2;

assign zext_ln385_fu_498_p1 = or_ln385_fu_493_p2;

assign zext_ln392_fu_547_p1 = i_3_reg_310;

assign zext_ln394_fu_556_p1 = add_ln394_fu_551_p2;

assign zext_ln404_fu_572_p1 = add_ln404_1_fu_565_p3;

assign zext_ln414_fu_883_p1 = or_ln_fu_876_p3;

assign zext_ln424_fu_900_p1 = or_ln1_fu_893_p3;

assign zext_ln438_fu_1237_p1 = shl_ln5_fu_1229_p3;

assign zext_ln439_fu_1248_p1 = or_ln439_fu_1242_p2;

assign zext_ln440_fu_1263_p1 = or_ln440_fu_1258_p2;

assign zext_ln441_fu_1273_p1 = or_ln441_fu_1268_p2;

always @ (posedge ap_clk) begin
    mul_reg_1285[1:0] <= 2'b00;
    shl_ln_reg_1308[1:0] <= 2'b00;
    statemt_addr_reg_1314[1:0] <= 2'b00;
    statemt_addr_reg_1314[4] <= 1'b0;
    statemt_addr_38_reg_1319[1:0] <= 2'b01;
    statemt_addr_38_reg_1319[4] <= 1'b0;
    statemt_addr_39_reg_1341[1:0] <= 2'b10;
    statemt_addr_39_reg_1341[4] <= 1'b0;
    statemt_addr_40_reg_1346[1:0] <= 2'b11;
    statemt_addr_40_reg_1346[4] <= 1'b0;
    tmp_s_reg_1366[1:0] <= 2'b00;
    zext_ln394_reg_1386[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    shl_ln5_reg_1430[1:0] <= 2'b00;
    zext_ln438_reg_1436[1:0] <= 2'b00;
    zext_ln438_reg_1436[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln439_reg_1446[1:0] <= 2'b01;
    zext_ln439_reg_1446[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln440_reg_1456[1:0] <= 2'b10;
    zext_ln440_reg_1456[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln441_reg_1466[1:0] <= 2'b11;
    zext_ln441_reg_1466[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes_main_AddRoundKey_InversMixColumn
