-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_main_AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (3 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aes_main_AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_168_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_reg_310 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln471_fu_200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln471_reg_318 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_229_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_addr_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_49_reg_344 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_50_reg_359 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_51_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln471_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln469_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln472_1_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln471_1_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln472_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln473_1_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln474_1_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln473_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln474_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_54 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln469_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln469_fu_196_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln471_3_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln472_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln471_fu_225_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln472_fu_242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln471_2_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln473_fu_261_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln474_fu_272_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln473_fu_283_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln474_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_54 <= ap_const_lv3_0;
            elsif (((icmp_ln469_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_fu_54 <= add_ln469_fu_190_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln471_reg_318 <= add_ln471_fu_200_p2;
                    shl_ln_reg_333(3 downto 2) <= shl_ln_fu_229_p3(3 downto 2);
                    statemt_addr_49_reg_344(3 downto 2) <= zext_ln472_fu_248_p1(5 - 1 downto 0)(3 downto 2);
                    statemt_addr_reg_339(3 downto 2) <= zext_ln471_1_fu_237_p1(5 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    mul_reg_310(5 downto 2) <= mul_fu_168_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_158 <= grp_fu_146_p2;
                reg_163 <= grp_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    statemt_addr_50_reg_359(3 downto 2) <= zext_ln473_fu_288_p1(5 - 1 downto 0)(3 downto 2);
                    statemt_addr_51_reg_364(3 downto 2) <= zext_ln474_fu_298_p1(5 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    mul_reg_310(1 downto 0) <= "00";
    shl_ln_reg_333(1 downto 0) <= "00";
    statemt_addr_reg_339(1 downto 0) <= "00";
    statemt_addr_reg_339(4) <= '0';
    statemt_addr_49_reg_344(1 downto 0) <= "01";
    statemt_addr_49_reg_344(4) <= '0';
    statemt_addr_50_reg_359(1 downto 0) <= "10";
    statemt_addr_50_reg_359(4) <= '0';
    statemt_addr_51_reg_364(1 downto 0) <= "11";
    statemt_addr_51_reg_364(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln469_fu_184_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln469_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln469_fu_190_p2 <= std_logic_vector(unsigned(j_fu_54) + unsigned(ap_const_lv3_1));
    add_ln471_fu_200_p2 <= std_logic_vector(unsigned(zext_ln469_fu_196_p1) + unsigned(mul_reg_310));
    add_ln472_fu_214_p2 <= std_logic_vector(unsigned(zext_ln471_3_fu_210_p1) + unsigned(ap_const_lv8_78));
    add_ln473_fu_261_p2 <= std_logic_vector(unsigned(zext_ln471_2_fu_258_p1) + unsigned(ap_const_lv9_F0));
    add_ln474_fu_272_p2 <= std_logic_vector(unsigned(zext_ln471_2_fu_258_p1) + unsigned(ap_const_lv9_168));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln469_fu_184_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((icmp_ln469_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln469_fu_184_p2)
    begin
        if (((icmp_ln469_fu_184_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_146_p2 <= (word_q1 xor statemt_q1);
    grp_fu_152_p2 <= (word_q0 xor statemt_q0);
    icmp_ln469_fu_184_p2 <= "1" when (j_fu_54 = ap_const_lv3_4) else "0";
    mul_fu_168_p3 <= (n & ap_const_lv2_0);
    or_ln472_fu_242_p2 <= (shl_ln_fu_229_p3 or ap_const_lv4_1);
    or_ln473_fu_283_p2 <= (shl_ln_reg_333 or ap_const_lv4_2);
    or_ln474_fu_293_p2 <= (shl_ln_reg_333 or ap_const_lv4_3);
    shl_ln_fu_229_p3 <= (trunc_ln471_fu_225_p1 & ap_const_lv2_0);

    statemt_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, statemt_addr_49_reg_344, statemt_addr_51_reg_364, zext_ln472_fu_248_p1, zext_ln474_fu_298_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_address0 <= statemt_addr_51_reg_364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            statemt_address0 <= statemt_addr_49_reg_344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address0 <= zext_ln474_fu_298_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address0 <= zext_ln472_fu_248_p1(5 - 1 downto 0);
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, statemt_addr_reg_339, statemt_addr_50_reg_359, zext_ln471_1_fu_237_p1, zext_ln473_fu_288_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_address1 <= statemt_addr_50_reg_359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            statemt_address1 <= statemt_addr_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address1 <= zext_ln473_fu_288_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address1 <= zext_ln471_1_fu_237_p1(5 - 1 downto 0);
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_ce0 <= ap_const_logic_1;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_ce1 <= ap_const_logic_1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    statemt_d0 <= reg_163;
    statemt_d1 <= reg_158;

    statemt_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_we0 <= ap_const_logic_1;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_we1 <= ap_const_logic_1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln471_fu_225_p1 <= j_fu_54(2 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln472_1_fu_220_p1, zext_ln474_1_fu_278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address0 <= zext_ln474_1_fu_278_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address0 <= zext_ln472_1_fu_220_p1(9 - 1 downto 0);
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, zext_ln471_fu_205_p1, zext_ln473_1_fu_267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address1 <= zext_ln473_1_fu_267_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address1 <= zext_ln471_fu_205_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln469_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_54),6));
    zext_ln471_1_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_229_p3),64));
    zext_ln471_2_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln471_reg_318),9));
    zext_ln471_3_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln471_fu_200_p2),8));
    zext_ln471_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln471_fu_200_p2),64));
    zext_ln472_1_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln472_fu_214_p2),64));
    zext_ln472_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln472_fu_242_p2),64));
    zext_ln473_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln473_fu_261_p2),64));
    zext_ln473_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln473_fu_283_p2),64));
    zext_ln474_1_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln474_fu_272_p2),64));
    zext_ln474_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln474_fu_293_p2),64));
end behav;
