-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_main_decrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_we0 : OUT STD_LOGIC;
    word_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aes_main_decrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_4_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_KeySchedule_fu_54_ap_start : STD_LOGIC;
    signal grp_KeySchedule_fu_54_ap_done : STD_LOGIC;
    signal grp_KeySchedule_fu_54_ap_idle : STD_LOGIC;
    signal grp_KeySchedule_fu_54_ap_ready : STD_LOGIC;
    signal grp_KeySchedule_fu_54_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeySchedule_fu_54_key_ce0 : STD_LOGIC;
    signal grp_KeySchedule_fu_54_word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_KeySchedule_fu_54_word_ce0 : STD_LOGIC;
    signal grp_KeySchedule_fu_54_word_we0 : STD_LOGIC;
    signal grp_KeySchedule_fu_54_word_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeySchedule_fu_54_word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_KeySchedule_fu_54_word_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_ap_done : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_statemt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AddRoundKey_fu_66_statemt_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_statemt_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_statemt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_fu_66_statemt_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AddRoundKey_fu_66_statemt_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_statemt_we1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_statemt_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_fu_66_n : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_AddRoundKey_fu_66_word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_AddRoundKey_fu_66_word_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_66_word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_AddRoundKey_fu_66_word_ce1 : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_ap_start : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_ap_done : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_ap_idle : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_ap_ready : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_ce0 : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_we0 : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_ce1 : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_we1 : STD_LOGIC;
    signal grp_InversShiftRow_ByteSub_fu_77_statemt_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_ap_done : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_we0 : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_we1 : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_statemt_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_word_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_InversMixColumn_fu_85_word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_AddRoundKey_InversMixColumn_fu_85_word_ce1 : STD_LOGIC;
    signal grp_KeySchedule_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_AddRoundKey_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln116_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_InversShiftRow_ByteSub_fu_77_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_AddRoundKey_InversMixColumn_fu_85_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_01_fu_50 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_fu_109_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_main_KeySchedule IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce0 : OUT STD_LOGIC;
        word_we0 : OUT STD_LOGIC;
        word_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce1 : OUT STD_LOGIC;
        word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_main_AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce0 : OUT STD_LOGIC;
        statemt_we0 : OUT STD_LOGIC;
        statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce1 : OUT STD_LOGIC;
        statemt_we1 : OUT STD_LOGIC;
        statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (3 downto 0);
        word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce0 : OUT STD_LOGIC;
        word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce1 : OUT STD_LOGIC;
        word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_main_InversShiftRow_ByteSub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce0 : OUT STD_LOGIC;
        statemt_we0 : OUT STD_LOGIC;
        statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce1 : OUT STD_LOGIC;
        statemt_we1 : OUT STD_LOGIC;
        statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_main_AddRoundKey_InversMixColumn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce0 : OUT STD_LOGIC;
        statemt_we0 : OUT STD_LOGIC;
        statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce1 : OUT STD_LOGIC;
        statemt_we1 : OUT STD_LOGIC;
        statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (3 downto 0);
        word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce0 : OUT STD_LOGIC;
        word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce1 : OUT STD_LOGIC;
        word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_KeySchedule_fu_54 : component aes_main_KeySchedule
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeySchedule_fu_54_ap_start,
        ap_done => grp_KeySchedule_fu_54_ap_done,
        ap_idle => grp_KeySchedule_fu_54_ap_idle,
        ap_ready => grp_KeySchedule_fu_54_ap_ready,
        key_address0 => grp_KeySchedule_fu_54_key_address0,
        key_ce0 => grp_KeySchedule_fu_54_key_ce0,
        key_q0 => key_q0,
        word_address0 => grp_KeySchedule_fu_54_word_address0,
        word_ce0 => grp_KeySchedule_fu_54_word_ce0,
        word_we0 => grp_KeySchedule_fu_54_word_we0,
        word_d0 => grp_KeySchedule_fu_54_word_d0,
        word_q0 => word_q0,
        word_address1 => grp_KeySchedule_fu_54_word_address1,
        word_ce1 => grp_KeySchedule_fu_54_word_ce1,
        word_q1 => word_q1);

    grp_AddRoundKey_fu_66 : component aes_main_AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_fu_66_ap_start,
        ap_done => grp_AddRoundKey_fu_66_ap_done,
        ap_idle => grp_AddRoundKey_fu_66_ap_idle,
        ap_ready => grp_AddRoundKey_fu_66_ap_ready,
        statemt_address0 => grp_AddRoundKey_fu_66_statemt_address0,
        statemt_ce0 => grp_AddRoundKey_fu_66_statemt_ce0,
        statemt_we0 => grp_AddRoundKey_fu_66_statemt_we0,
        statemt_d0 => grp_AddRoundKey_fu_66_statemt_d0,
        statemt_q0 => statemt_q0,
        statemt_address1 => grp_AddRoundKey_fu_66_statemt_address1,
        statemt_ce1 => grp_AddRoundKey_fu_66_statemt_ce1,
        statemt_we1 => grp_AddRoundKey_fu_66_statemt_we1,
        statemt_d1 => grp_AddRoundKey_fu_66_statemt_d1,
        statemt_q1 => statemt_q1,
        n => grp_AddRoundKey_fu_66_n,
        word_address0 => grp_AddRoundKey_fu_66_word_address0,
        word_ce0 => grp_AddRoundKey_fu_66_word_ce0,
        word_q0 => word_q0,
        word_address1 => grp_AddRoundKey_fu_66_word_address1,
        word_ce1 => grp_AddRoundKey_fu_66_word_ce1,
        word_q1 => word_q1);

    grp_InversShiftRow_ByteSub_fu_77 : component aes_main_InversShiftRow_ByteSub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_InversShiftRow_ByteSub_fu_77_ap_start,
        ap_done => grp_InversShiftRow_ByteSub_fu_77_ap_done,
        ap_idle => grp_InversShiftRow_ByteSub_fu_77_ap_idle,
        ap_ready => grp_InversShiftRow_ByteSub_fu_77_ap_ready,
        statemt_address0 => grp_InversShiftRow_ByteSub_fu_77_statemt_address0,
        statemt_ce0 => grp_InversShiftRow_ByteSub_fu_77_statemt_ce0,
        statemt_we0 => grp_InversShiftRow_ByteSub_fu_77_statemt_we0,
        statemt_d0 => grp_InversShiftRow_ByteSub_fu_77_statemt_d0,
        statemt_q0 => statemt_q0,
        statemt_address1 => grp_InversShiftRow_ByteSub_fu_77_statemt_address1,
        statemt_ce1 => grp_InversShiftRow_ByteSub_fu_77_statemt_ce1,
        statemt_we1 => grp_InversShiftRow_ByteSub_fu_77_statemt_we1,
        statemt_d1 => grp_InversShiftRow_ByteSub_fu_77_statemt_d1,
        statemt_q1 => statemt_q1);

    grp_AddRoundKey_InversMixColumn_fu_85 : component aes_main_AddRoundKey_InversMixColumn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_InversMixColumn_fu_85_ap_start,
        ap_done => grp_AddRoundKey_InversMixColumn_fu_85_ap_done,
        ap_idle => grp_AddRoundKey_InversMixColumn_fu_85_ap_idle,
        ap_ready => grp_AddRoundKey_InversMixColumn_fu_85_ap_ready,
        statemt_address0 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_address0,
        statemt_ce0 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce0,
        statemt_we0 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_we0,
        statemt_d0 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_d0,
        statemt_q0 => statemt_q0,
        statemt_address1 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_address1,
        statemt_ce1 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce1,
        statemt_we1 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_we1,
        statemt_d1 => grp_AddRoundKey_InversMixColumn_fu_85_statemt_d1,
        statemt_q1 => statemt_q1,
        n => i_4_reg_127,
        word_address0 => grp_AddRoundKey_InversMixColumn_fu_85_word_address0,
        word_ce0 => grp_AddRoundKey_InversMixColumn_fu_85_word_ce0,
        word_q0 => word_q0,
        word_address1 => grp_AddRoundKey_InversMixColumn_fu_85_word_address1,
        word_ce1 => grp_AddRoundKey_InversMixColumn_fu_85_word_ce1,
        word_q1 => word_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_AddRoundKey_InversMixColumn_fu_85_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddRoundKey_InversMixColumn_fu_85_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln116_fu_103_p2 = ap_const_lv1_0))) then 
                    grp_AddRoundKey_InversMixColumn_fu_85_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_InversMixColumn_fu_85_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_InversMixColumn_fu_85_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AddRoundKey_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AddRoundKey_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln116_fu_103_p2 = ap_const_lv1_1)))) then 
                    grp_AddRoundKey_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AddRoundKey_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_AddRoundKey_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_InversShiftRow_ByteSub_fu_77_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_InversShiftRow_ByteSub_fu_77_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_InversShiftRow_ByteSub_fu_77_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_InversShiftRow_ByteSub_fu_77_ap_ready = ap_const_logic_1)) then 
                    grp_InversShiftRow_ByteSub_fu_77_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeySchedule_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeySchedule_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_KeySchedule_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeySchedule_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_KeySchedule_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_01_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_01_fu_50 <= ap_const_lv4_9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln116_fu_103_p2 = ap_const_lv1_0))) then 
                i_01_fu_50 <= i_fu_109_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_4_reg_127 <= i_01_fu_50;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, grp_KeySchedule_fu_54_ap_done, grp_AddRoundKey_fu_66_ap_done, grp_InversShiftRow_ByteSub_fu_77_ap_done, grp_AddRoundKey_InversMixColumn_fu_85_ap_done, ap_CS_fsm_state2, icmp_ln116_fu_103_p2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_KeySchedule_fu_54_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_AddRoundKey_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_InversShiftRow_ByteSub_fu_77_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln116_fu_103_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_AddRoundKey_InversMixColumn_fu_85_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_InversShiftRow_ByteSub_fu_77_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_AddRoundKey_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_InversShiftRow_ByteSub_fu_77_ap_done)
    begin
        if ((grp_InversShiftRow_ByteSub_fu_77_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(grp_AddRoundKey_fu_66_ap_done)
    begin
        if ((grp_AddRoundKey_fu_66_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_KeySchedule_fu_54_ap_done)
    begin
        if ((grp_KeySchedule_fu_54_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_AddRoundKey_fu_66_ap_done)
    begin
        if ((grp_AddRoundKey_fu_66_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_InversShiftRow_ByteSub_fu_77_ap_done)
    begin
        if ((grp_InversShiftRow_ByteSub_fu_77_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_AddRoundKey_InversMixColumn_fu_85_ap_done)
    begin
        if ((grp_AddRoundKey_InversMixColumn_fu_85_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_AddRoundKey_fu_66_ap_done, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_AddRoundKey_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_AddRoundKey_fu_66_ap_done, ap_CS_fsm_state11)
    begin
        if (((grp_AddRoundKey_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_AddRoundKey_InversMixColumn_fu_85_ap_start <= grp_AddRoundKey_InversMixColumn_fu_85_ap_start_reg;
    grp_AddRoundKey_fu_66_ap_start <= grp_AddRoundKey_fu_66_ap_start_reg;

    grp_AddRoundKey_fu_66_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_AddRoundKey_fu_66_n <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_AddRoundKey_fu_66_n <= ap_const_lv4_A;
        else 
            grp_AddRoundKey_fu_66_n <= "XXXX";
        end if; 
    end process;

    grp_InversShiftRow_ByteSub_fu_77_ap_start <= grp_InversShiftRow_ByteSub_fu_77_ap_start_reg;
    grp_KeySchedule_fu_54_ap_start <= grp_KeySchedule_fu_54_ap_start_reg;
    i_fu_109_p2 <= std_logic_vector(unsigned(i_01_fu_50) + unsigned(ap_const_lv4_F));
    icmp_ln116_fu_103_p2 <= "1" when (i_01_fu_50 = ap_const_lv4_0) else "0";
    key_address0 <= grp_KeySchedule_fu_54_key_address0;
    key_ce0 <= grp_KeySchedule_fu_54_key_ce0;

    statemt_address0_assign_proc : process(grp_AddRoundKey_fu_66_statemt_address0, grp_InversShiftRow_ByteSub_fu_77_statemt_address0, grp_AddRoundKey_InversMixColumn_fu_85_statemt_address0, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address0 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_address0 <= grp_InversShiftRow_ByteSub_fu_77_statemt_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_address0 <= grp_AddRoundKey_fu_66_statemt_address0;
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(grp_AddRoundKey_fu_66_statemt_address1, grp_InversShiftRow_ByteSub_fu_77_statemt_address1, grp_AddRoundKey_InversMixColumn_fu_85_statemt_address1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address1 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_address1 <= grp_InversShiftRow_ByteSub_fu_77_statemt_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_address1 <= grp_AddRoundKey_fu_66_statemt_address1;
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(grp_AddRoundKey_fu_66_statemt_ce0, grp_InversShiftRow_ByteSub_fu_77_statemt_ce0, grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce0, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_ce0 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_ce0 <= grp_InversShiftRow_ByteSub_fu_77_statemt_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_ce0 <= grp_AddRoundKey_fu_66_statemt_ce0;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(grp_AddRoundKey_fu_66_statemt_ce1, grp_InversShiftRow_ByteSub_fu_77_statemt_ce1, grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_ce1 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_ce1 <= grp_InversShiftRow_ByteSub_fu_77_statemt_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_ce1 <= grp_AddRoundKey_fu_66_statemt_ce1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_d0_assign_proc : process(grp_AddRoundKey_fu_66_statemt_d0, grp_InversShiftRow_ByteSub_fu_77_statemt_d0, grp_AddRoundKey_InversMixColumn_fu_85_statemt_d0, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_d0 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_d0 <= grp_InversShiftRow_ByteSub_fu_77_statemt_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_d0 <= grp_AddRoundKey_fu_66_statemt_d0;
        else 
            statemt_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_d1_assign_proc : process(grp_AddRoundKey_fu_66_statemt_d1, grp_InversShiftRow_ByteSub_fu_77_statemt_d1, grp_AddRoundKey_InversMixColumn_fu_85_statemt_d1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_d1 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_d1 <= grp_InversShiftRow_ByteSub_fu_77_statemt_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_d1 <= grp_AddRoundKey_fu_66_statemt_d1;
        else 
            statemt_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_we0_assign_proc : process(grp_AddRoundKey_fu_66_statemt_we0, grp_InversShiftRow_ByteSub_fu_77_statemt_we0, grp_AddRoundKey_InversMixColumn_fu_85_statemt_we0, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_we0 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_we0 <= grp_InversShiftRow_ByteSub_fu_77_statemt_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_we0 <= grp_AddRoundKey_fu_66_statemt_we0;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(grp_AddRoundKey_fu_66_statemt_we1, grp_InversShiftRow_ByteSub_fu_77_statemt_we1, grp_AddRoundKey_InversMixColumn_fu_85_statemt_we1, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_we1 <= grp_AddRoundKey_InversMixColumn_fu_85_statemt_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            statemt_we1 <= grp_InversShiftRow_ByteSub_fu_77_statemt_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            statemt_we1 <= grp_AddRoundKey_fu_66_statemt_we1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;


    word_address0_assign_proc : process(grp_KeySchedule_fu_54_word_address0, grp_AddRoundKey_fu_66_word_address0, grp_AddRoundKey_InversMixColumn_fu_85_word_address0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address0 <= grp_AddRoundKey_InversMixColumn_fu_85_word_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            word_address0 <= grp_AddRoundKey_fu_66_word_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address0 <= grp_KeySchedule_fu_54_word_address0;
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(grp_KeySchedule_fu_54_word_address1, grp_AddRoundKey_fu_66_word_address1, grp_AddRoundKey_InversMixColumn_fu_85_word_address1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address1 <= grp_AddRoundKey_InversMixColumn_fu_85_word_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            word_address1 <= grp_AddRoundKey_fu_66_word_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address1 <= grp_KeySchedule_fu_54_word_address1;
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(grp_KeySchedule_fu_54_word_ce0, grp_AddRoundKey_fu_66_word_ce0, grp_AddRoundKey_InversMixColumn_fu_85_word_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_ce0 <= grp_AddRoundKey_InversMixColumn_fu_85_word_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            word_ce0 <= grp_AddRoundKey_fu_66_word_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_ce0 <= grp_KeySchedule_fu_54_word_ce0;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(grp_KeySchedule_fu_54_word_ce1, grp_AddRoundKey_fu_66_word_ce1, grp_AddRoundKey_InversMixColumn_fu_85_word_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_ce1 <= grp_AddRoundKey_InversMixColumn_fu_85_word_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            word_ce1 <= grp_AddRoundKey_fu_66_word_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_ce1 <= grp_KeySchedule_fu_54_word_ce1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    word_d0 <= grp_KeySchedule_fu_54_word_d0;

    word_we0_assign_proc : process(grp_KeySchedule_fu_54_word_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_we0 <= grp_KeySchedule_fu_54_word_we0;
        else 
            word_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
