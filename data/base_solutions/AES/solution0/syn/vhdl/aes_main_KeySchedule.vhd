-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_main_KeySchedule is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_we0 : OUT STD_LOGIC;
    word_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aes_main_KeySchedule is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce0 : STD_LOGIC;
    signal Sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce1 : STD_LOGIC;
    signal Sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Rcon0_ce0 : STD_LOGIC;
    signal Rcon0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_4_reg_1123 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln554_fu_313_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln554_reg_1131 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_323_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_reg_1136 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln557_fu_342_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln557_reg_1151 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln571_fu_427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln571_reg_1167 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln571_2_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln571_2_reg_1172 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_2_1_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln570_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln570_reg_1217 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_1_2_fu_980_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_2_reg_1233 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_0_2_fu_988_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_0_2_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln501_fu_996_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln501_reg_1243 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp_2_2_fu_1007_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_2_reg_1248 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_fu_1013_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_reg_1253 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln592_fu_1025_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln592_reg_1258 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln592_fu_1039_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln592_reg_1266 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln594_1_fu_1081_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln594_1_reg_1276 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1086_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_255 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln554_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln559_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln557_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln559_3_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln571_5_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln565_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln572_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln571_1_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln571_8_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln571_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln572_4_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln573_4_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln574_2_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln594_1_fu_1076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln592_fu_1033_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln594_2_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_114 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal j_2_fu_118 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln565_fu_1096_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln594_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_319_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln557_fu_348_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln559_fu_352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_366_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_378_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln559_1_fu_374_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln559_2_fu_386_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln559_fu_390_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_35_cast_fu_396_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_406_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln571_4_fu_437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln571_2_fu_441_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln572_fu_452_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln573_fu_467_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln572_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln571_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln571_2_fu_491_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_278_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln571_1_fu_501_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_507_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln571_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln571_1_fu_533_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_f1_fu_537_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln571_2_fu_549_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_t1_fu_555_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln571_7_fu_563_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln571_3_fu_567_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln571_6_fu_545_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln571_1_fu_573_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_525_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln571_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln571_3_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln571_4_fu_596_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln571_1_fu_605_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln573_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln572_fu_616_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln572_2_fu_622_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_286_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln572_1_fu_632_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_638_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln572_fu_648_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln572_1_fu_664_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_f2_fu_668_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln572_2_fu_680_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_t2_fu_686_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln572_3_fu_694_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln572_3_fu_698_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln572_2_fu_676_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln572_1_fu_704_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_656_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln572_fu_712_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln572_1_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_69_fu_727_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_0_fu_744_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln574_fu_736_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln573_fu_758_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln573_2_fu_764_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln573_1_fu_774_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_780_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln573_fu_790_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln573_1_fu_806_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_f4_fu_810_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln573_2_fu_822_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_t6_fu_828_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln573_3_fu_836_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln573_3_fu_840_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln573_2_fu_818_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln573_1_fu_846_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_798_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln573_fu_854_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln573_1_fu_858_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln571_fu_740_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln574_fu_869_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln574_2_fu_875_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln574_1_fu_885_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_891_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln574_fu_901_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln574_1_fu_917_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_f_fu_921_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln574_2_fu_933_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_and_t_fu_939_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln574_1_fu_947_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln574_3_fu_951_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln574_fu_929_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln574_1_fu_957_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_909_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln574_fu_965_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln574_fu_969_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln572_1_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln571_3_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln573_1_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln577_fu_1003_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_fu_1020_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln592_fu_1029_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_17_fu_1053_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_1045_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln594_fu_1061_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln594_fu_1065_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln594_fu_1071_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_main_mux_4_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_main_KeySchedule_Sbox_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes_main_KeySchedule_Rcon0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Sbox_U : component aes_main_KeySchedule_Sbox_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Sbox_address0,
        ce0 => Sbox_ce0,
        q0 => Sbox_q0,
        address1 => Sbox_address1,
        ce1 => Sbox_ce1,
        q1 => Sbox_q1);

    Rcon0_U : component aes_main_KeySchedule_Rcon0_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon0_address0,
        ce0 => Rcon0_ce0,
        q0 => Rcon0_q0);

    mux_4_2_32_1_1_U1 : component aes_main_mux_4_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => temp_0_2_reg_1238,
        din1 => temp_1_2_reg_1233,
        din2 => temp_2_2_reg_1248,
        din3 => temp_3_reg_1253,
        din4 => trunc_ln592_fu_1029_p1,
        dout => tmp_fu_1086_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_2_reg_267 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_267 <= add_ln592_reg_1266;
            end if; 
        end if;
    end process;

    i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln554_fu_307_p2 = ap_const_lv1_0))) then 
                i_reg_255 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_255 <= add_ln557_reg_1151;
            end if; 
        end if;
    end process;

    j_2_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln554_fu_307_p2 = ap_const_lv1_1))) then 
                j_2_fu_118 <= ap_const_lv6_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln592_fu_1033_p2 = ap_const_lv1_1))) then 
                j_2_fu_118 <= add_ln565_fu_1096_p2;
            end if; 
        end if;
    end process;

    j_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_114 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln557_fu_336_p2 = ap_const_lv1_1))) then 
                j_fu_114 <= add_ln554_reg_1131;
            end if; 
        end if;
    end process;

    reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_294 <= word_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_294 <= word_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln554_reg_1131 <= add_ln554_fu_313_p2;
                j_4_reg_1123 <= j_fu_114;
                    tmp_s_reg_1136(3 downto 2) <= tmp_s_fu_323_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln557_reg_1151 <= add_ln557_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln571_reg_1167 <= add_ln571_fu_427_p2;
                    zext_ln571_2_reg_1172(5 downto 0) <= zext_ln571_2_fu_433_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln592_reg_1266 <= add_ln592_fu_1039_p2;
                add_ln594_1_reg_1276 <= add_ln594_1_fu_1081_p2;
                tmp_reg_1281 <= tmp_fu_1086_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln570_reg_1217 <= icmp_ln570_fu_730_p2;
                temp_0_2_reg_1238 <= temp_0_2_fu_988_p3;
                temp_1_2_reg_1233 <= temp_1_2_fu_980_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                temp_2_1_reg_1197 <= word_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                temp_2_2_reg_1248 <= temp_2_2_fu_1007_p3;
                temp_3_reg_1253 <= temp_3_fu_1013_p3;
                    zext_ln501_reg_1243(5 downto 0) <= zext_ln501_fu_996_p1(5 downto 0);
                    zext_ln592_reg_1258(5 downto 0) <= zext_ln592_fu_1025_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_1136(1 downto 0) <= "00";
    zext_ln571_2_reg_1172(8 downto 6) <= "000";
    zext_ln501_reg_1243(8 downto 6) <= "000";
    zext_ln592_reg_1258(8 downto 6) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state9, icmp_ln554_fu_307_p2, icmp_ln557_fu_336_p2, icmp_ln565_fu_421_p2, icmp_ln592_fu_1033_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln554_fu_307_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln557_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln565_fu_421_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln592_fu_1033_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Rcon0_address0 <= zext_ln571_fu_611_p1(5 - 1 downto 0);

    Rcon0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Rcon0_ce0 <= ap_const_logic_1;
        else 
            Rcon0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln572_4_fu_722_p1, zext_ln574_2_fu_975_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Sbox_address0 <= zext_ln574_2_fu_975_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Sbox_address0 <= zext_ln572_4_fu_722_p1(8 - 1 downto 0);
        else 
            Sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    Sbox_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, zext_ln571_8_fu_591_p1, zext_ln573_4_fu_864_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Sbox_address1 <= zext_ln573_4_fu_864_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Sbox_address1 <= zext_ln571_8_fu_591_p1(8 - 1 downto 0);
        else 
            Sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    Sbox_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Sbox_ce0 <= ap_const_logic_1;
        else 
            Sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Sbox_ce1 <= ap_const_logic_1;
        else 
            Sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln554_fu_313_p2 <= std_logic_vector(unsigned(j_fu_114) + unsigned(ap_const_lv3_1));
    add_ln557_fu_342_p2 <= std_logic_vector(unsigned(i_reg_255) + unsigned(ap_const_lv3_1));
    add_ln559_fu_352_p2 <= std_logic_vector(unsigned(zext_ln557_fu_348_p1) + unsigned(tmp_s_reg_1136));
    add_ln565_fu_1096_p2 <= std_logic_vector(unsigned(j_2_fu_118) + unsigned(ap_const_lv6_1));
    add_ln571_1_fu_605_p2 <= std_logic_vector(unsigned(trunc_ln571_4_fu_596_p4) + unsigned(ap_const_lv4_F));
    add_ln571_2_fu_441_p2 <= std_logic_vector(unsigned(zext_ln571_4_fu_437_p1) + unsigned(ap_const_lv8_78));
    add_ln571_3_fu_585_p2 <= std_logic_vector(unsigned(tmp_5_fu_525_p3) + unsigned(sext_ln571_fu_581_p1));
    add_ln571_fu_427_p2 <= std_logic_vector(unsigned(j_2_fu_118) + unsigned(ap_const_lv6_3F));
    add_ln572_1_fu_716_p2 <= std_logic_vector(unsigned(tmp_7_fu_656_p3) + unsigned(sext_ln572_fu_712_p1));
    add_ln572_fu_452_p2 <= std_logic_vector(unsigned(zext_ln571_2_fu_433_p1) + unsigned(ap_const_lv9_F0));
    add_ln573_1_fu_858_p2 <= std_logic_vector(unsigned(tmp_9_fu_798_p3) + unsigned(sext_ln573_fu_854_p1));
    add_ln573_fu_467_p2 <= std_logic_vector(unsigned(zext_ln571_2_reg_1172) + unsigned(ap_const_lv9_168));
    add_ln574_fu_969_p2 <= std_logic_vector(unsigned(tmp_12_fu_909_p3) + unsigned(sext_ln574_fu_965_p1));
    add_ln592_fu_1039_p2 <= std_logic_vector(unsigned(i_2_reg_267) + unsigned(ap_const_lv3_1));
    add_ln594_1_fu_1081_p2 <= std_logic_vector(unsigned(sub_ln594_fu_1065_p2) + unsigned(zext_ln501_reg_1243));
    add_ln594_fu_1071_p2 <= std_logic_vector(unsigned(sub_ln594_fu_1065_p2) + unsigned(zext_ln592_reg_1258));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln565_fu_421_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln565_fu_421_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln565_fu_421_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln565_fu_421_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_69_fu_727_p1 <= j_2_fu_118(2 - 1 downto 0);
    empty_70_fu_1020_p2 <= std_logic_vector(unsigned(j_2_fu_118) + unsigned(ap_const_lv6_3C));
    empty_fu_319_p1 <= j_fu_114(2 - 1 downto 0);
    grp_fu_278_p3 <= word_q1(31 downto 31);
    grp_fu_286_p3 <= word_q0(31 downto 31);
    icmp_ln554_fu_307_p2 <= "1" when (j_fu_114 = ap_const_lv3_4) else "0";
    icmp_ln557_fu_336_p2 <= "1" when (i_reg_255 = ap_const_lv3_4) else "0";
    icmp_ln565_fu_421_p2 <= "1" when (j_2_fu_118 = ap_const_lv6_2C) else "0";
    icmp_ln570_fu_730_p2 <= "1" when (empty_69_fu_727_p1 = ap_const_lv2_0) else "0";
    icmp_ln592_fu_1033_p2 <= "1" when (i_2_reg_267 = ap_const_lv3_4) else "0";
    key_address0 <= zext_ln559_fu_357_p1(5 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_and_f1_fu_537_p3 <= (ap_const_lv1_0 & trunc_ln571_1_fu_533_p1);
    p_and_f2_fu_668_p3 <= (ap_const_lv1_0 & trunc_ln572_1_fu_664_p1);
    p_and_f4_fu_810_p3 <= (ap_const_lv1_0 & trunc_ln573_1_fu_806_p1);
    p_and_f_fu_921_p3 <= (ap_const_lv1_0 & trunc_ln574_1_fu_917_p1);
    p_and_t1_fu_555_p3 <= (ap_const_lv1_0 & sub_ln571_2_fu_549_p2);
    p_and_t2_fu_686_p3 <= (ap_const_lv1_0 & sub_ln572_2_fu_680_p2);
    p_and_t6_fu_828_p3 <= (ap_const_lv1_0 & sub_ln573_2_fu_822_p2);
    p_and_t_fu_939_p3 <= (ap_const_lv1_0 & sub_ln574_2_fu_933_p2);
    select_ln571_1_fu_573_p3 <= 
        sub_ln571_3_fu_567_p2 when (grp_fu_278_p3(0) = '1') else 
        zext_ln571_6_fu_545_p1;
    select_ln571_fu_517_p3 <= 
        sub_ln571_1_fu_501_p2 when (grp_fu_278_p3(0) = '1') else 
        tmp_4_fu_507_p4;
    select_ln572_1_fu_704_p3 <= 
        sub_ln572_3_fu_698_p2 when (grp_fu_286_p3(0) = '1') else 
        zext_ln572_2_fu_676_p1;
    select_ln572_fu_648_p3 <= 
        sub_ln572_1_fu_632_p2 when (grp_fu_286_p3(0) = '1') else 
        tmp_6_fu_638_p4;
    select_ln573_1_fu_846_p3 <= 
        sub_ln573_3_fu_840_p2 when (grp_fu_286_p3(0) = '1') else 
        zext_ln573_2_fu_818_p1;
    select_ln573_fu_790_p3 <= 
        sub_ln573_1_fu_774_p2 when (grp_fu_286_p3(0) = '1') else 
        tmp_8_fu_780_p4;
    select_ln574_1_fu_957_p3 <= 
        sub_ln574_3_fu_951_p2 when (grp_fu_278_p3(0) = '1') else 
        zext_ln574_fu_929_p1;
    select_ln574_fu_901_p3 <= 
        sub_ln574_1_fu_885_p2 when (grp_fu_278_p3(0) = '1') else 
        tmp_11_fu_891_p4;
        sext_ln571_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln571_1_fu_573_p3),8));

        sext_ln572_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln572_1_fu_704_p3),8));

        sext_ln573_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln573_1_fu_846_p3),8));

        sext_ln574_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln574_1_fu_957_p3),8));

    sub_ln559_fu_390_p2 <= std_logic_vector(unsigned(zext_ln559_1_fu_374_p1) - unsigned(zext_ln559_2_fu_386_p1));
    sub_ln571_1_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln571_2_fu_491_p4));
    sub_ln571_2_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln571_1_fu_533_p1));
    sub_ln571_3_fu_567_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln571_7_fu_563_p1));
    sub_ln571_fu_485_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln572_fu_477_p1));
    sub_ln572_1_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln572_2_fu_622_p4));
    sub_ln572_2_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln572_1_fu_664_p1));
    sub_ln572_3_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln572_3_fu_694_p1));
    sub_ln572_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln573_fu_481_p1));
    sub_ln573_1_fu_774_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln573_2_fu_764_p4));
    sub_ln573_2_fu_822_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln573_1_fu_806_p1));
    sub_ln573_3_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln573_3_fu_836_p1));
    sub_ln573_fu_758_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln574_fu_736_p1));
    sub_ln574_1_fu_885_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln574_2_fu_875_p4));
    sub_ln574_2_fu_933_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(trunc_ln574_1_fu_917_p1));
    sub_ln574_3_fu_951_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln574_1_fu_947_p1));
    sub_ln574_fu_869_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln571_fu_740_p1));
    sub_ln594_fu_1065_p2 <= std_logic_vector(unsigned(tmp_16_fu_1045_p3) - unsigned(zext_ln594_fu_1061_p1));
    temp_0_2_fu_988_p3 <= 
        zext_ln571_3_fu_750_p1 when (icmp_ln570_fu_730_p2(0) = '1') else 
        word_q1;
    temp_0_fu_744_p2 <= (Sbox_q1 xor Rcon0_q0);
    temp_1_2_fu_980_p3 <= 
        zext_ln572_1_fu_754_p1 when (icmp_ln570_fu_730_p2(0) = '1') else 
        reg_294;
    temp_2_2_fu_1007_p3 <= 
        zext_ln573_1_fu_999_p1 when (icmp_ln570_reg_1217(0) = '1') else 
        temp_2_1_reg_1197;
    temp_3_fu_1013_p3 <= 
        zext_ln577_fu_1003_p1 when (icmp_ln570_reg_1217(0) = '1') else 
        reg_294;
    tmp_11_fu_891_p4 <= word_q1(7 downto 4);
    tmp_12_fu_909_p3 <= (select_ln574_fu_901_p3 & ap_const_lv4_0);
    tmp_13_fu_366_p3 <= (i_reg_255 & ap_const_lv7_0);
    tmp_14_fu_378_p3 <= (i_reg_255 & ap_const_lv3_0);
    tmp_15_fu_406_p3 <= (tmp_35_cast_fu_396_p4 & j_4_reg_1123);
    tmp_16_fu_1045_p3 <= (trunc_ln592_fu_1029_p1 & ap_const_lv7_0);
    tmp_17_fu_1053_p3 <= (i_2_reg_267 & ap_const_lv3_0);
    tmp_35_cast_fu_396_p4 <= sub_ln559_fu_390_p2(8 downto 3);
    tmp_4_fu_507_p4 <= word_q1(7 downto 4);
    tmp_5_fu_525_p3 <= (select_ln571_fu_517_p3 & ap_const_lv4_0);
    tmp_6_fu_638_p4 <= word_q0(7 downto 4);
    tmp_7_fu_656_p3 <= (select_ln572_fu_648_p3 & ap_const_lv4_0);
    tmp_8_fu_780_p4 <= word_q0(7 downto 4);
    tmp_9_fu_798_p3 <= (select_ln573_fu_790_p3 & ap_const_lv4_0);
    tmp_s_fu_323_p3 <= (empty_fu_319_p1 & ap_const_lv2_0);
    trunc_ln571_1_fu_533_p1 <= word_q1(4 - 1 downto 0);
    trunc_ln571_2_fu_491_p4 <= sub_ln571_fu_485_p2(7 downto 4);
    trunc_ln571_4_fu_596_p4 <= j_2_fu_118(5 downto 2);
    trunc_ln571_fu_740_p1 <= word_q1(8 - 1 downto 0);
    trunc_ln572_1_fu_664_p1 <= word_q0(4 - 1 downto 0);
    trunc_ln572_2_fu_622_p4 <= sub_ln572_fu_616_p2(7 downto 4);
    trunc_ln572_fu_477_p1 <= word_q1(8 - 1 downto 0);
    trunc_ln573_1_fu_806_p1 <= word_q0(4 - 1 downto 0);
    trunc_ln573_2_fu_764_p4 <= sub_ln573_fu_758_p2(7 downto 4);
    trunc_ln573_fu_481_p1 <= word_q0(8 - 1 downto 0);
    trunc_ln574_1_fu_917_p1 <= word_q1(4 - 1 downto 0);
    trunc_ln574_2_fu_875_p4 <= sub_ln574_fu_869_p2(7 downto 4);
    trunc_ln574_fu_736_p1 <= word_q0(8 - 1 downto 0);
    trunc_ln592_fu_1029_p1 <= i_2_reg_267(2 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state10, zext_ln559_3_fu_413_p1, zext_ln572_fu_458_p1, zext_ln573_fu_472_p1, zext_ln594_2_fu_1106_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_address0 <= zext_ln594_2_fu_1106_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            word_address0 <= zext_ln573_fu_472_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            word_address0 <= zext_ln572_fu_458_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_address0 <= zext_ln559_3_fu_413_p1(9 - 1 downto 0);
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state9, zext_ln571_5_fu_447_p1, zext_ln571_1_fu_463_p1, zext_ln594_1_fu_1076_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            word_address1 <= zext_ln594_1_fu_1076_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            word_address1 <= zext_ln571_1_fu_463_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            word_address1 <= zext_ln571_5_fu_447_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state5, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    word_d0_assign_proc : process(key_q0, ap_CS_fsm_state4, ap_CS_fsm_state10, xor_ln594_fu_1110_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            word_d0 <= xor_ln594_fu_1110_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_d0 <= key_q0;
        else 
            word_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            word_we0 <= ap_const_logic_1;
        else 
            word_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln594_fu_1110_p2 <= (word_q1 xor tmp_reg_1281);
    zext_ln501_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_fu_118),9));
    zext_ln557_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_255),4));
    zext_ln559_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_366_p3),11));
    zext_ln559_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_378_p3),11));
    zext_ln559_3_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_406_p3),64));
    zext_ln559_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln559_fu_352_p2),64));
    zext_ln571_1_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln571_reg_1167),64));
    zext_ln571_2_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln571_fu_427_p2),9));
    zext_ln571_3_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_0_fu_744_p2),32));
    zext_ln571_4_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln571_fu_427_p2),8));
    zext_ln571_5_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln571_2_fu_441_p2),64));
    zext_ln571_6_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f1_fu_537_p3),6));
    zext_ln571_7_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t1_fu_555_p3),6));
    zext_ln571_8_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln571_3_fu_585_p2),64));
    zext_ln571_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln571_1_fu_605_p2),64));
    zext_ln572_1_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q0),32));
    zext_ln572_2_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f2_fu_668_p3),6));
    zext_ln572_3_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t2_fu_686_p3),6));
    zext_ln572_4_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln572_1_fu_716_p2),64));
    zext_ln572_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln572_fu_452_p2),64));
    zext_ln573_1_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q1),32));
    zext_ln573_2_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f4_fu_810_p3),6));
    zext_ln573_3_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t6_fu_828_p3),6));
    zext_ln573_4_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln573_1_fu_858_p2),64));
    zext_ln573_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln573_fu_467_p2),64));
    zext_ln574_1_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_t_fu_939_p3),6));
    zext_ln574_2_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln574_fu_969_p2),64));
    zext_ln574_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_and_f_fu_921_p3),6));
    zext_ln577_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q0),32));
    zext_ln592_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_70_fu_1020_p2),9));
    zext_ln594_1_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln594_fu_1071_p2),64));
    zext_ln594_2_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln594_1_reg_1276),64));
    zext_ln594_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1053_p3),9));
end behav;
