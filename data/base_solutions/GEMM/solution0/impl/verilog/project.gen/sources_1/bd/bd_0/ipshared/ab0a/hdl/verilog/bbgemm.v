// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bbgemm_bbgemm,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.503000,HLS_SYN_LAT=2990225,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1128,HLS_SYN_LUT=1092,HLS_VERSION=2023_2}" *)

module bbgemm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m1_address0,
        m1_ce0,
        m1_q0,
        m2_address0,
        m2_ce0,
        m2_q0,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0,
        prod_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] m1_address0;
output   m1_ce0;
input  [63:0] m1_q0;
output  [11:0] m2_address0;
output   m2_ce0;
input  [63:0] m2_q0;
output  [11:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [63:0] prod_d0;
input  [63:0] prod_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m1_ce0;
reg m2_ce0;
reg[11:0] prod_address0;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] trunc_ln15_fu_187_p1;
reg   [5:0] trunc_ln15_reg_357;
wire    ap_CS_fsm_state2;
wire   [5:0] trunc_ln17_fu_199_p1;
reg   [5:0] trunc_ln17_reg_365;
wire    ap_CS_fsm_state3;
wire   [6:0] add_ln19_fu_219_p2;
reg   [6:0] add_ln19_reg_373;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln17_fu_225_p2;
wire   [3:0] add_ln21_fu_237_p2;
reg   [3:0] add_ln21_reg_386;
wire    ap_CS_fsm_state5;
wire   [2:0] trunc_ln24_fu_247_p1;
reg   [2:0] trunc_ln24_reg_391;
reg   [2:0] tmp_1_reg_396;
wire   [5:0] trunc_ln25_fu_266_p1;
reg   [5:0] trunc_ln25_reg_401;
wire   [63:0] temp_x_fu_283_p1;
reg   [63:0] temp_x_reg_411;
wire    ap_CS_fsm_state6;
wire   [3:0] add_ln26_fu_293_p2;
reg   [3:0] add_ln26_reg_419;
wire    ap_CS_fsm_state7;
wire   [5:0] add_ln28_fu_303_p2;
reg   [5:0] add_ln28_reg_424;
reg   [63:0] m2_load_reg_434;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [11:0] prod_addr_reg_444;
wire    ap_CS_fsm_state11;
wire   [63:0] grp_fu_167_p2;
reg   [63:0] mul_reg_449;
wire    ap_CS_fsm_state12;
reg   [63:0] prod_load_reg_454;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_fu_163_p2;
reg   [63:0] add_reg_464;
wire    ap_CS_fsm_state16;
reg   [6:0] kk_reg_117;
wire   [0:0] icmp_ln19_fu_213_p2;
wire   [0:0] tmp_fu_179_p3;
reg   [6:0] i_reg_129;
wire   [0:0] icmp_ln21_fu_231_p2;
wire   [0:0] tmp_2_fu_191_p3;
reg   [3:0] k_reg_141;
wire   [0:0] icmp_ln26_fu_287_p2;
reg   [3:0] j_reg_152;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln25_fu_278_p1;
wire   [63:0] zext_ln28_fu_316_p1;
wire   [63:0] zext_ln29_fu_331_p1;
reg   [6:0] jj_fu_74;
wire   [6:0] add_ln15_fu_203_p2;
wire   [63:0] grp_fu_163_p0;
wire   [63:0] grp_fu_167_p1;
wire   [5:0] zext_ln21_fu_243_p1;
wire   [5:0] add_ln25_fu_261_p2;
wire   [11:0] add_ln25_1_fu_270_p3;
wire   [5:0] zext_ln26_fu_299_p1;
wire   [11:0] add_ln28_1_fu_308_p4;
wire   [11:0] add_ln29_1_fu_325_p3;
reg   [16:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 jj_fu_74 = 7'd0;
end

bbgemm_dadd_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_163_p0),
    .din1(mul_reg_449),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

bbgemm_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_x_reg_411),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_191_p3 == 1'd0))) begin
        i_reg_129 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_231_p2 == 1'd1))) begin
        i_reg_129 <= add_ln19_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_152 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_152 <= add_ln26_reg_419;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        jj_fu_74 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_191_p3 == 1'd1))) begin
        jj_fu_74 <= add_ln15_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_213_p2 == 1'd0))) begin
        k_reg_141 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln26_fu_287_p2 == 1'd1))) begin
        k_reg_141 <= add_ln21_reg_386;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_179_p3 == 1'd0))) begin
        kk_reg_117 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_213_p2 == 1'd1))) begin
        kk_reg_117 <= add_ln17_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln19_reg_373 <= add_ln19_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_reg_386 <= add_ln21_fu_237_p2;
        tmp_1_reg_396 <= {{kk_reg_117[5:3]}};
        trunc_ln24_reg_391 <= trunc_ln24_fu_247_p1;
        trunc_ln25_reg_401 <= trunc_ln25_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln26_reg_419 <= add_ln26_fu_293_p2;
        add_ln28_reg_424 <= add_ln28_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_reg_464 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m2_load_reg_434 <= m2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_reg_449 <= grp_fu_167_p2;
        prod_load_reg_454 <= prod_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        prod_addr_reg_444 <= zext_ln29_fu_331_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_x_reg_411 <= temp_x_fu_283_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln15_reg_357 <= trunc_ln15_fu_187_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        trunc_ln17_reg_365 <= trunc_ln17_fu_199_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_179_p3 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_179_p3 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        m1_ce0 = 1'b1;
    end else begin
        m1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m2_ce0 = 1'b1;
    end else begin
        m2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        prod_address0 = prod_addr_reg_444;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        prod_address0 = zext_ln29_fu_331_p1;
    end else begin
        prod_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state11))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_179_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_191_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_213_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_231_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln26_fu_287_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_203_p2 = (jj_fu_74 + 7'd8);

assign add_ln17_fu_225_p2 = (kk_reg_117 + 7'd8);

assign add_ln19_fu_219_p2 = (i_reg_129 + 7'd1);

assign add_ln21_fu_237_p2 = (k_reg_141 + 4'd1);

assign add_ln25_1_fu_270_p3 = {{trunc_ln25_fu_266_p1}, {add_ln25_fu_261_p2}};

assign add_ln25_fu_261_p2 = (trunc_ln17_reg_365 + zext_ln21_fu_243_p1);

assign add_ln26_fu_293_p2 = (j_reg_152 + 4'd1);

assign add_ln28_1_fu_308_p4 = {{{tmp_1_reg_396}, {trunc_ln24_reg_391}}, {add_ln28_fu_303_p2}};

assign add_ln28_fu_303_p2 = (trunc_ln15_reg_357 + zext_ln26_fu_299_p1);

assign add_ln29_1_fu_325_p3 = {{trunc_ln25_reg_401}, {add_ln28_reg_424}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_163_p0 = prod_load_reg_454;

assign grp_fu_167_p1 = m2_load_reg_434;

assign icmp_ln19_fu_213_p2 = ((i_reg_129 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_231_p2 = ((k_reg_141 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_287_p2 = ((j_reg_152 == 4'd8) ? 1'b1 : 1'b0);

assign m1_address0 = zext_ln25_fu_278_p1;

assign m2_address0 = zext_ln28_fu_316_p1;

assign prod_d0 = add_reg_464;

assign temp_x_fu_283_p1 = m1_q0;

assign tmp_2_fu_191_p3 = kk_reg_117[32'd6];

assign tmp_fu_179_p3 = jj_fu_74[32'd6];

assign trunc_ln15_fu_187_p1 = jj_fu_74[5:0];

assign trunc_ln17_fu_199_p1 = kk_reg_117[5:0];

assign trunc_ln24_fu_247_p1 = k_reg_141[2:0];

assign trunc_ln25_fu_266_p1 = i_reg_129[5:0];

assign zext_ln21_fu_243_p1 = k_reg_141;

assign zext_ln25_fu_278_p1 = add_ln25_1_fu_270_p3;

assign zext_ln26_fu_299_p1 = j_reg_152;

assign zext_ln28_fu_316_p1 = add_ln28_1_fu_308_p4;

assign zext_ln29_fu_331_p1 = add_ln29_1_fu_325_p3;

endmodule //bbgemm
