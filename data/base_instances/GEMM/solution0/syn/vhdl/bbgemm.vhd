-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bbgemm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m1_ce0 : OUT STD_LOGIC;
    m1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    m2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m2_ce0 : OUT STD_LOGIC;
    m2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    prod_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    prod_ce0 : OUT STD_LOGIC;
    prod_we0 : OUT STD_LOGIC;
    prod_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    prod_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of bbgemm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bbgemm_bbgemm,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.503000,HLS_SYN_LAT=2990225,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1128,HLS_SYN_LUT=1092,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln15_fu_185_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_reg_355 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln17_fu_197_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln17_reg_363 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln19_fu_217_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_reg_371 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln17_fu_223_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_fu_235_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_reg_384 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln24_fu_245_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln24_reg_389 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln25_fu_264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln25_reg_399 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_x_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_x_reg_409 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln26_fu_291_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_reg_417 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln28_fu_301_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_reg_422 : STD_LOGIC_VECTOR (5 downto 0);
    signal m2_load_reg_432 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal prod_addr_reg_442 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_165_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_447 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal prod_load_reg_452 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_462 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal kk_reg_115 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln19_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_177_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_127 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_139 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln26_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln25_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal jj_fu_72 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln15_fu_201_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_161_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_241_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_fu_259_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln25_1_fu_268_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_fu_297_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_1_fu_306_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_1_fu_323_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bbgemm_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component bbgemm_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dadd_64ns_64ns_64_4_full_dsp_1_U1 : component bbgemm_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_161_p0,
        din1 => mul_reg_447,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U2 : component bbgemm_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_x_reg_409,
        din1 => grp_fu_165_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_165_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_189_p3 = ap_const_lv1_0))) then 
                i_reg_127 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_229_p2 = ap_const_lv1_1))) then 
                i_reg_127 <= add_ln19_reg_371;
            end if; 
        end if;
    end process;

    j_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_150 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_reg_150 <= add_ln26_reg_417;
            end if; 
        end if;
    end process;

    jj_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                jj_fu_72 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_189_p3 = ap_const_lv1_1))) then 
                jj_fu_72 <= add_ln15_fu_201_p2;
            end if; 
        end if;
    end process;

    k_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln19_fu_211_p2 = ap_const_lv1_0))) then 
                k_reg_139 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln26_fu_285_p2 = ap_const_lv1_1))) then 
                k_reg_139 <= add_ln21_reg_384;
            end if; 
        end if;
    end process;

    kk_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_177_p3 = ap_const_lv1_0))) then 
                kk_reg_115 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln19_fu_211_p2 = ap_const_lv1_1))) then 
                kk_reg_115 <= add_ln17_fu_223_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln19_reg_371 <= add_ln19_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln21_reg_384 <= add_ln21_fu_235_p2;
                tmp_1_reg_394 <= kk_reg_115(5 downto 3);
                trunc_ln24_reg_389 <= trunc_ln24_fu_245_p1;
                trunc_ln25_reg_399 <= trunc_ln25_fu_264_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln26_reg_417 <= add_ln26_fu_291_p2;
                add_ln28_reg_422 <= add_ln28_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_reg_462 <= grp_fu_161_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m2_load_reg_432 <= m2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_reg_447 <= grp_fu_165_p2;
                prod_load_reg_452 <= prod_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                prod_addr_reg_442 <= zext_ln29_fu_329_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                temp_x_reg_409 <= temp_x_fu_281_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln15_reg_355 <= trunc_ln15_fu_185_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln17_reg_363 <= trunc_ln17_fu_197_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, icmp_ln19_fu_211_p2, tmp_fu_177_p3, icmp_ln21_fu_229_p2, tmp_2_fu_189_p3, icmp_ln26_fu_285_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_177_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_189_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln19_fu_211_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_229_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln26_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_fu_201_p2 <= std_logic_vector(unsigned(jj_fu_72) + unsigned(ap_const_lv7_8));
    add_ln17_fu_223_p2 <= std_logic_vector(unsigned(kk_reg_115) + unsigned(ap_const_lv7_8));
    add_ln19_fu_217_p2 <= std_logic_vector(unsigned(i_reg_127) + unsigned(ap_const_lv7_1));
    add_ln21_fu_235_p2 <= std_logic_vector(unsigned(k_reg_139) + unsigned(ap_const_lv4_1));
    add_ln25_1_fu_268_p3 <= (trunc_ln25_fu_264_p1 & add_ln25_fu_259_p2);
    add_ln25_fu_259_p2 <= std_logic_vector(unsigned(trunc_ln17_reg_363) + unsigned(zext_ln21_fu_241_p1));
    add_ln26_fu_291_p2 <= std_logic_vector(unsigned(j_reg_150) + unsigned(ap_const_lv4_1));
    add_ln28_1_fu_306_p4 <= ((tmp_1_reg_394 & trunc_ln24_reg_389) & add_ln28_fu_301_p2);
    add_ln28_fu_301_p2 <= std_logic_vector(unsigned(trunc_ln15_reg_355) + unsigned(zext_ln26_fu_297_p1));
    add_ln29_1_fu_323_p3 <= (trunc_ln25_reg_399 & add_ln28_reg_422);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_177_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_177_p3 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_177_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_177_p3 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_161_p0 <= prod_load_reg_452;
    grp_fu_165_p1 <= m2_load_reg_432;
    icmp_ln19_fu_211_p2 <= "1" when (i_reg_127 = ap_const_lv7_40) else "0";
    icmp_ln21_fu_229_p2 <= "1" when (k_reg_139 = ap_const_lv4_8) else "0";
    icmp_ln26_fu_285_p2 <= "1" when (j_reg_150 = ap_const_lv4_8) else "0";
    m1_address0 <= zext_ln25_fu_276_p1(12 - 1 downto 0);

    m1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m1_ce0 <= ap_const_logic_1;
        else 
            m1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m2_address0 <= zext_ln28_fu_314_p1(12 - 1 downto 0);

    m2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m2_ce0 <= ap_const_logic_1;
        else 
            m2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prod_address0_assign_proc : process(prod_addr_reg_442, ap_CS_fsm_state11, ap_CS_fsm_state17, zext_ln29_fu_329_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            prod_address0 <= prod_addr_reg_442;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            prod_address0 <= zext_ln29_fu_329_p1(12 - 1 downto 0);
        else 
            prod_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    prod_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= add_reg_462;

    prod_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_x_fu_281_p1 <= m1_q0;
    tmp_2_fu_189_p3 <= kk_reg_115(6 downto 6);
    tmp_fu_177_p3 <= jj_fu_72(6 downto 6);
    trunc_ln15_fu_185_p1 <= jj_fu_72(6 - 1 downto 0);
    trunc_ln17_fu_197_p1 <= kk_reg_115(6 - 1 downto 0);
    trunc_ln24_fu_245_p1 <= k_reg_139(3 - 1 downto 0);
    trunc_ln25_fu_264_p1 <= i_reg_127(6 - 1 downto 0);
    zext_ln21_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_139),6));
    zext_ln25_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_1_fu_268_p3),64));
    zext_ln26_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_150),6));
    zext_ln28_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_306_p4),64));
    zext_ln29_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_323_p3),64));
end behav;
