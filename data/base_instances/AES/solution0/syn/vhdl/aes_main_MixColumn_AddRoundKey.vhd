-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_main_MixColumn_AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (3 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aes_main_MixColumn_AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv32_11B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mul_fu_295_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_reg_908 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_331_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_916 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln326_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln326_reg_922 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln328_reg_932 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln333_fu_355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln333_reg_942 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_9_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln327_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln333_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln333_reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln333_1_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln333_1_reg_995 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_load_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln336_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln336_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_load_23_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln350_2_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln350_2_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xor_ln359_2_fu_827_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln359_2_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln4_fu_852_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln4_reg_1043 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln366_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln366_reg_1049 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln367_reg_1059 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln368_fu_886_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln368_reg_1069 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln369_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln369_reg_1079 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_ce0 : STD_LOGIC;
    signal ret_we0 : STD_LOGIC;
    signal ret_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_ce1 : STD_LOGIC;
    signal ret_we1 : STD_LOGIC;
    signal ret_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln324_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln333_2_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln351_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln360_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln364_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_fu_76 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln324_fu_317_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_7_fu_84 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln364_fu_842_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln332_2_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln341_2_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln326_fu_327_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln328_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln324_fu_323_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln333_4_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln342_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_275_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln_fu_390_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln333_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln333_1_fu_414_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln333_3_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln351_fu_427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln360_fu_438_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_285_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln2_fu_449_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln326_fu_463_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln327_fu_468_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln329_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_491_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln1_fu_501_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln330_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln330_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln327_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_2_fu_521_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln332_1_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln332_3_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln332_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln336_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln338_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_4_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_578_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln3_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln339_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln339_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln336_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_5_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln341_1_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln341_3_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln341_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln345_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln345_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln347_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_7_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_679_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln5_fu_689_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln348_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln348_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln345_fu_659_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_8_fu_709_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln350_1_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln350_3_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln350_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln6_fu_739_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln354_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln354_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_10_fu_767_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_772_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal and_ln7_fu_782_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln357_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln357_fu_796_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_11_fu_802_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln354_fu_759_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln359_1_fu_815_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln359_3_fu_821_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln359_fu_810_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln366_fu_848_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln367_fu_865_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln368_fu_881_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln369_fu_891_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component aes_main_MixColumn_AddRoundKey_ret_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ret_U : component aes_main_MixColumn_AddRoundKey_ret_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ret_address0,
        ce0 => ret_ce0,
        we0 => ret_we0,
        d0 => ret_d0,
        q0 => ret_q0,
        address1 => ret_address1,
        ce1 => ret_ce1,
        we1 => ret_we1,
        d1 => ret_d1,
        q1 => ret_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_7_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln324_fu_311_p2 = ap_const_lv1_1))) then 
                j_7_fu_84 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln364_fu_836_p2 = ap_const_lv1_0))) then 
                j_7_fu_84 <= add_ln364_fu_842_p2;
            end if; 
        end if;
    end process;

    j_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_fu_76 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln324_fu_311_p2 = ap_const_lv1_0))) then 
                j_fu_76 <= add_ln324_fu_317_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln333_reg_942 <= add_ln333_fu_355_p2;
                    shl_ln_reg_916(3 downto 2) <= shl_ln_fu_331_p3(3 downto 2);
                    zext_ln326_reg_922(3 downto 2) <= zext_ln326_fu_339_p1(3 downto 2);
                    zext_ln328_reg_932(3 downto 2) <= zext_ln328_fu_350_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln327_reg_972 <= icmp_ln327_fu_398_p2;
                icmp_ln336_reg_1020 <= icmp_ln336_fu_457_p2;
                word_load_23_reg_1025 <= word_q0;
                word_load_reg_1015 <= word_q1;
                x_9_reg_964 <= statemt_q1;
                x_reg_977 <= statemt_q0;
                    zext_ln333_1_reg_995(3 downto 2) <= zext_ln333_1_fu_419_p1(3 downto 2);
                    zext_ln333_reg_985(3 downto 2) <= zext_ln333_fu_409_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    mul_reg_908(5 downto 2) <= mul_fu_295_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    shl_ln4_reg_1043(3 downto 2) <= shl_ln4_fu_852_p3(3 downto 2);
                    zext_ln366_reg_1049(3 downto 2) <= zext_ln366_fu_860_p1(3 downto 2);
                    zext_ln367_reg_1059(3 downto 2) <= zext_ln367_fu_871_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                xor_ln350_2_reg_1030 <= xor_ln350_2_fu_733_p2;
                xor_ln359_2_reg_1035 <= xor_ln359_2_fu_827_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    zext_ln368_reg_1069(3 downto 2) <= zext_ln368_fu_886_p1(3 downto 2);
                    zext_ln369_reg_1079(3 downto 2) <= zext_ln369_fu_896_p1(3 downto 2);
            end if;
        end if;
    end process;
    mul_reg_908(1 downto 0) <= "00";
    shl_ln_reg_916(1 downto 0) <= "00";
    zext_ln326_reg_922(1 downto 0) <= "00";
    zext_ln326_reg_922(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln328_reg_932(1 downto 0) <= "01";
    zext_ln328_reg_932(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln333_reg_985(1 downto 0) <= "10";
    zext_ln333_reg_985(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln333_1_reg_995(1 downto 0) <= "11";
    zext_ln333_1_reg_995(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    shl_ln4_reg_1043(1 downto 0) <= "00";
    zext_ln366_reg_1049(1 downto 0) <= "00";
    zext_ln366_reg_1049(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln367_reg_1059(1 downto 0) <= "01";
    zext_ln367_reg_1059(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln368_reg_1069(1 downto 0) <= "10";
    zext_ln368_reg_1069(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln369_reg_1079(1 downto 0) <= "11";
    zext_ln369_reg_1079(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state6, icmp_ln324_fu_311_p2, icmp_ln364_fu_836_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln324_fu_311_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln364_fu_836_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln324_fu_317_p2 <= std_logic_vector(unsigned(j_fu_76) + unsigned(ap_const_lv3_1));
    add_ln333_fu_355_p2 <= std_logic_vector(unsigned(zext_ln324_fu_323_p1) + unsigned(mul_reg_908));
    add_ln342_fu_369_p2 <= std_logic_vector(unsigned(zext_ln333_4_fu_365_p1) + unsigned(ap_const_lv8_78));
    add_ln351_fu_427_p2 <= std_logic_vector(unsigned(zext_ln333_3_fu_424_p1) + unsigned(ap_const_lv9_F0));
    add_ln360_fu_438_p2 <= std_logic_vector(unsigned(zext_ln333_3_fu_424_p1) + unsigned(ap_const_lv9_168));
    add_ln364_fu_842_p2 <= std_logic_vector(unsigned(j_7_fu_84) + unsigned(ap_const_lv3_1));
    and_ln1_fu_501_p3 <= (tmp_35_fu_491_p4 & ap_const_lv8_0);
    and_ln2_fu_449_p3 <= (grp_fu_285_p4 & ap_const_lv8_0);
    and_ln3_fu_588_p3 <= (tmp_37_fu_578_p4 & ap_const_lv8_0);
    and_ln4_fu_639_p3 <= (grp_fu_275_p4 & ap_const_lv8_0);
    and_ln5_fu_689_p3 <= (tmp_39_fu_679_p4 & ap_const_lv8_0);
    and_ln6_fu_739_p3 <= (grp_fu_285_p4 & ap_const_lv8_0);
    and_ln7_fu_782_p3 <= (tmp_41_fu_772_p4 & ap_const_lv8_0);
    and_ln_fu_390_p3 <= (grp_fu_275_p4 & ap_const_lv8_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln364_fu_836_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln364_fu_836_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln364_fu_836_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln364_fu_836_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p4 <= statemt_q1(30 downto 7);
    grp_fu_285_p4 <= statemt_q0(30 downto 7);
    icmp_ln324_fu_311_p2 <= "1" when (j_fu_76 = ap_const_lv3_4) else "0";
    icmp_ln327_fu_398_p2 <= "1" when (and_ln_fu_390_p3 = ap_const_lv32_100) else "0";
    icmp_ln330_fu_509_p2 <= "1" when (and_ln1_fu_501_p3 = ap_const_lv32_100) else "0";
    icmp_ln336_fu_457_p2 <= "1" when (and_ln2_fu_449_p3 = ap_const_lv32_100) else "0";
    icmp_ln339_fu_596_p2 <= "1" when (and_ln3_fu_588_p3 = ap_const_lv32_100) else "0";
    icmp_ln345_fu_647_p2 <= "1" when (and_ln4_fu_639_p3 = ap_const_lv32_100) else "0";
    icmp_ln348_fu_697_p2 <= "1" when (and_ln5_fu_689_p3 = ap_const_lv32_100) else "0";
    icmp_ln354_fu_747_p2 <= "1" when (and_ln6_fu_739_p3 = ap_const_lv32_100) else "0";
    icmp_ln357_fu_790_p2 <= "1" when (and_ln7_fu_782_p3 = ap_const_lv32_100) else "0";
    icmp_ln364_fu_836_p2 <= "1" when (j_7_fu_84 = ap_const_lv3_4) else "0";
    mul_fu_295_p3 <= (n & ap_const_lv2_0);
    or_ln328_fu_344_p2 <= (shl_ln_fu_331_p3 or ap_const_lv4_1);
    or_ln333_1_fu_414_p2 <= (shl_ln_reg_916 or ap_const_lv4_3);
    or_ln333_fu_404_p2 <= (shl_ln_reg_916 or ap_const_lv4_2);
    or_ln367_fu_865_p2 <= (shl_ln4_fu_852_p3 or ap_const_lv4_1);
    or_ln368_fu_881_p2 <= (shl_ln4_reg_1043 or ap_const_lv4_2);
    or_ln369_fu_891_p2 <= (shl_ln4_reg_1043 or ap_const_lv4_3);

    ret_address0_assign_proc : process(zext_ln328_reg_932, zext_ln333_1_reg_995, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln367_fu_871_p1, ap_CS_fsm_state7, zext_ln369_fu_896_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ret_address0 <= zext_ln369_fu_896_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ret_address0 <= zext_ln367_fu_871_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_address0 <= zext_ln333_1_reg_995(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ret_address0 <= zext_ln328_reg_932(5 - 1 downto 0);
        else 
            ret_address0 <= "XXXXX";
        end if; 
    end process;


    ret_address1_assign_proc : process(zext_ln326_reg_922, zext_ln333_reg_985, ap_CS_fsm_state4, ap_CS_fsm_state6, zext_ln366_fu_860_p1, zext_ln368_fu_886_p1, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ret_address1 <= zext_ln368_fu_886_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ret_address1 <= zext_ln366_fu_860_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_address1 <= zext_ln333_reg_985(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ret_address1 <= zext_ln326_reg_922(5 - 1 downto 0);
        else 
            ret_address1 <= "XXXXX";
        end if; 
    end process;


    ret_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ret_ce0 <= ap_const_logic_1;
        else 
            ret_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ret_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ret_ce1 <= ap_const_logic_1;
        else 
            ret_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ret_d0_assign_proc : process(ap_CS_fsm_state4, xor_ln359_2_reg_1035, ap_CS_fsm_state5, xor_ln341_2_fu_632_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_d0 <= xor_ln359_2_reg_1035;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ret_d0 <= xor_ln341_2_fu_632_p2;
        else 
            ret_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ret_d1_assign_proc : process(xor_ln350_2_reg_1030, ap_CS_fsm_state4, ap_CS_fsm_state5, xor_ln332_2_fu_546_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ret_d1 <= xor_ln350_2_reg_1030;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ret_d1 <= xor_ln332_2_fu_546_p2;
        else 
            ret_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ret_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ret_we0 <= ap_const_logic_1;
        else 
            ret_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ret_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ret_we1 <= ap_const_logic_1;
        else 
            ret_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln327_fu_474_p3 <= 
        xor_ln327_fu_468_p2 when (icmp_ln327_reg_972(0) = '1') else 
        shl_ln326_fu_463_p2;
    select_ln336_fu_559_p3 <= 
        xor_ln336_fu_553_p2 when (icmp_ln336_reg_1020(0) = '1') else 
        shl_ln329_fu_481_p2;
    select_ln345_fu_659_p3 <= 
        xor_ln345_fu_653_p2 when (icmp_ln345_fu_647_p2(0) = '1') else 
        shl_ln338_fu_566_p2;
    select_ln354_fu_759_p3 <= 
        xor_ln354_fu_753_p2 when (icmp_ln354_fu_747_p2(0) = '1') else 
        shl_ln347_fu_667_p2;
    shl_ln326_fu_463_p2 <= std_logic_vector(shift_left(unsigned(x_9_reg_964),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln329_fu_481_p2 <= std_logic_vector(shift_left(unsigned(x_reg_977),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln338_fu_566_p2 <= std_logic_vector(shift_left(unsigned(statemt_q1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln347_fu_667_p2 <= std_logic_vector(shift_left(unsigned(statemt_q0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln4_fu_852_p3 <= (trunc_ln366_fu_848_p1 & ap_const_lv2_0);
    shl_ln_fu_331_p3 <= (trunc_ln326_fu_327_p1 & ap_const_lv2_0);

    statemt_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln328_fu_350_p1, ap_CS_fsm_state3, zext_ln333_1_fu_419_p1, zext_ln367_reg_1059, ap_CS_fsm_state7, zext_ln369_reg_1079, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address0 <= zext_ln369_reg_1079(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_address0 <= zext_ln367_reg_1059(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address0 <= zext_ln333_1_fu_419_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address0 <= zext_ln328_fu_350_p1(5 - 1 downto 0);
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(ap_CS_fsm_state2, zext_ln326_fu_339_p1, ap_CS_fsm_state3, zext_ln333_fu_409_p1, zext_ln366_reg_1049, zext_ln368_reg_1069, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address1 <= zext_ln368_reg_1069(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            statemt_address1 <= zext_ln366_reg_1049(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address1 <= zext_ln333_fu_409_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address1 <= zext_ln326_fu_339_p1(5 - 1 downto 0);
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            statemt_ce0 <= ap_const_logic_1;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            statemt_ce1 <= ap_const_logic_1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    statemt_d0 <= ret_q0;
    statemt_d1 <= ret_q1;

    statemt_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            statemt_we0 <= ap_const_logic_1;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            statemt_we1 <= ap_const_logic_1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_35_fu_491_p4 <= x_1_fu_486_p2(31 downto 8);
    tmp_37_fu_578_p4 <= x_4_fu_572_p2(31 downto 8);
    tmp_39_fu_679_p4 <= x_7_fu_673_p2(31 downto 8);
    tmp_41_fu_772_p4 <= x_10_fu_767_p2(31 downto 8);
    trunc_ln326_fu_327_p1 <= j_fu_76(2 - 1 downto 0);
    trunc_ln366_fu_848_p1 <= j_7_fu_84(2 - 1 downto 0);

    word_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln342_fu_375_p1, zext_ln360_fu_444_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address0 <= zext_ln360_fu_444_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address0 <= zext_ln342_fu_375_p1(9 - 1 downto 0);
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln333_2_fu_360_p1, zext_ln351_fu_433_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_address1 <= zext_ln351_fu_433_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address1 <= zext_ln333_2_fu_360_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    x_10_fu_767_p2 <= (x_9_reg_964 xor shl_ln326_fu_463_p2);
    x_11_fu_802_p3 <= 
        xor_ln357_fu_796_p2 when (icmp_ln357_fu_790_p2(0) = '1') else 
        x_10_fu_767_p2;
    x_1_fu_486_p2 <= (x_reg_977 xor shl_ln329_fu_481_p2);
    x_2_fu_521_p3 <= 
        xor_ln330_fu_515_p2 when (icmp_ln330_fu_509_p2(0) = '1') else 
        x_1_fu_486_p2;
    x_4_fu_572_p2 <= (statemt_q1 xor shl_ln338_fu_566_p2);
    x_5_fu_608_p3 <= 
        xor_ln339_fu_602_p2 when (icmp_ln339_fu_596_p2(0) = '1') else 
        x_4_fu_572_p2;
    x_7_fu_673_p2 <= (statemt_q0 xor shl_ln347_fu_667_p2);
    x_8_fu_709_p3 <= 
        xor_ln348_fu_703_p2 when (icmp_ln348_fu_697_p2(0) = '1') else 
        x_7_fu_673_p2;
    xor_ln327_fu_468_p2 <= (shl_ln326_fu_463_p2 xor ap_const_lv32_11B);
    xor_ln330_fu_515_p2 <= (x_1_fu_486_p2 xor ap_const_lv32_11B);
    xor_ln332_1_fu_535_p2 <= (x_2_fu_521_p3 xor select_ln327_fu_474_p3);
    xor_ln332_2_fu_546_p2 <= (xor_ln332_fu_529_p2 xor xor_ln332_3_fu_541_p2);
    xor_ln332_3_fu_541_p2 <= (xor_ln332_1_fu_535_p2 xor word_load_reg_1015);
    xor_ln332_fu_529_p2 <= (statemt_q1 xor statemt_q0);
    xor_ln336_fu_553_p2 <= (shl_ln329_fu_481_p2 xor ap_const_lv32_11B);
    xor_ln339_fu_602_p2 <= (x_4_fu_572_p2 xor ap_const_lv32_11B);
    xor_ln341_1_fu_621_p2 <= (x_5_fu_608_p3 xor select_ln336_fu_559_p3);
    xor_ln341_2_fu_632_p2 <= (xor_ln341_fu_616_p2 xor xor_ln341_3_fu_627_p2);
    xor_ln341_3_fu_627_p2 <= (xor_ln341_1_fu_621_p2 xor word_load_23_reg_1025);
    xor_ln341_fu_616_p2 <= (x_9_reg_964 xor statemt_q0);
    xor_ln345_fu_653_p2 <= (shl_ln338_fu_566_p2 xor ap_const_lv32_11B);
    xor_ln348_fu_703_p2 <= (x_7_fu_673_p2 xor ap_const_lv32_11B);
    xor_ln350_1_fu_721_p2 <= (x_8_fu_709_p3 xor select_ln345_fu_659_p3);
    xor_ln350_2_fu_733_p2 <= (xor_ln350_fu_717_p2 xor xor_ln350_3_fu_727_p2);
    xor_ln350_3_fu_727_p2 <= (xor_ln350_1_fu_721_p2 xor word_q1);
    xor_ln350_fu_717_p2 <= (x_reg_977 xor x_9_reg_964);
    xor_ln354_fu_753_p2 <= (shl_ln347_fu_667_p2 xor ap_const_lv32_11B);
    xor_ln357_fu_796_p2 <= (x_10_fu_767_p2 xor ap_const_lv32_11B);
    xor_ln359_1_fu_815_p2 <= (x_11_fu_802_p3 xor select_ln354_fu_759_p3);
    xor_ln359_2_fu_827_p2 <= (xor_ln359_fu_810_p2 xor xor_ln359_3_fu_821_p2);
    xor_ln359_3_fu_821_p2 <= (xor_ln359_1_fu_815_p2 xor word_q0);
    xor_ln359_fu_810_p2 <= (x_reg_977 xor statemt_q1);
    zext_ln324_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_76),6));
    zext_ln326_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_331_p3),64));
    zext_ln328_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln328_fu_344_p2),64));
    zext_ln333_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln333_1_fu_414_p2),64));
    zext_ln333_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln333_fu_355_p2),64));
    zext_ln333_3_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln333_reg_942),9));
    zext_ln333_4_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln333_fu_355_p2),8));
    zext_ln333_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln333_fu_404_p2),64));
    zext_ln342_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln342_fu_369_p2),64));
    zext_ln351_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln351_fu_427_p2),64));
    zext_ln360_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln360_fu_438_p2),64));
    zext_ln366_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_852_p3),64));
    zext_ln367_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln367_fu_865_p2),64));
    zext_ln368_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln368_fu_881_p2),64));
    zext_ln369_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln369_fu_891_p2),64));
end behav;
