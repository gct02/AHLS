// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aes_main_aes_main,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.977500,HLS_SYN_LAT=2624,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1658,HLS_SYN_LUT=8430,HLS_VERSION=2023_2}" *)

module aes_main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        key_address0,
        key_ce0,
        key_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
output  [4:0] key_address0;
output   key_ce0;
input  [31:0] key_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[31:0] statemt_d0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[31:0] statemt_d1;
reg[4:0] key_address0;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] word_address0;
reg    word_ce0;
reg    word_we0;
reg   [31:0] word_d0;
wire   [31:0] word_q0;
reg   [8:0] word_address1;
reg    word_ce1;
wire   [31:0] word_q1;
reg   [7:0] Sbox_address0;
reg    Sbox_ce0;
wire   [7:0] Sbox_q0;
reg   [7:0] Sbox_address1;
reg    Sbox_ce1;
wire   [7:0] Sbox_q1;
reg   [4:0] Rcon0_address0;
reg    Rcon0_ce0;
wire   [7:0] Rcon0_q0;
wire    grp_encrypt_fu_34_ap_start;
wire    grp_encrypt_fu_34_ap_done;
wire    grp_encrypt_fu_34_ap_idle;
wire    grp_encrypt_fu_34_ap_ready;
wire   [4:0] grp_encrypt_fu_34_statemt_address0;
wire    grp_encrypt_fu_34_statemt_ce0;
wire    grp_encrypt_fu_34_statemt_we0;
wire   [31:0] grp_encrypt_fu_34_statemt_d0;
wire   [4:0] grp_encrypt_fu_34_statemt_address1;
wire    grp_encrypt_fu_34_statemt_ce1;
wire    grp_encrypt_fu_34_statemt_we1;
wire   [31:0] grp_encrypt_fu_34_statemt_d1;
wire   [4:0] grp_encrypt_fu_34_key_address0;
wire    grp_encrypt_fu_34_key_ce0;
wire   [8:0] grp_encrypt_fu_34_word_address0;
wire    grp_encrypt_fu_34_word_ce0;
wire    grp_encrypt_fu_34_word_we0;
wire   [31:0] grp_encrypt_fu_34_word_d0;
wire   [8:0] grp_encrypt_fu_34_word_address1;
wire    grp_encrypt_fu_34_word_ce1;
wire   [7:0] grp_encrypt_fu_34_Sbox_address0;
wire    grp_encrypt_fu_34_Sbox_ce0;
wire   [7:0] grp_encrypt_fu_34_Sbox_address1;
wire    grp_encrypt_fu_34_Sbox_ce1;
wire   [4:0] grp_encrypt_fu_34_Rcon0_address0;
wire    grp_encrypt_fu_34_Rcon0_ce0;
wire    grp_decrypt_fu_50_ap_start;
wire    grp_decrypt_fu_50_ap_done;
wire    grp_decrypt_fu_50_ap_idle;
wire    grp_decrypt_fu_50_ap_ready;
wire   [4:0] grp_decrypt_fu_50_statemt_address0;
wire    grp_decrypt_fu_50_statemt_ce0;
wire    grp_decrypt_fu_50_statemt_we0;
wire   [31:0] grp_decrypt_fu_50_statemt_d0;
wire   [4:0] grp_decrypt_fu_50_statemt_address1;
wire    grp_decrypt_fu_50_statemt_ce1;
wire    grp_decrypt_fu_50_statemt_we1;
wire   [31:0] grp_decrypt_fu_50_statemt_d1;
wire   [4:0] grp_decrypt_fu_50_key_address0;
wire    grp_decrypt_fu_50_key_ce0;
wire   [8:0] grp_decrypt_fu_50_word_address0;
wire    grp_decrypt_fu_50_word_ce0;
wire    grp_decrypt_fu_50_word_we0;
wire   [31:0] grp_decrypt_fu_50_word_d0;
wire   [8:0] grp_decrypt_fu_50_word_address1;
wire    grp_decrypt_fu_50_word_ce1;
wire   [7:0] grp_decrypt_fu_50_Sbox_address0;
wire    grp_decrypt_fu_50_Sbox_ce0;
wire   [7:0] grp_decrypt_fu_50_Sbox_address1;
wire    grp_decrypt_fu_50_Sbox_ce1;
wire   [4:0] grp_decrypt_fu_50_Rcon0_address0;
wire    grp_decrypt_fu_50_Rcon0_ce0;
reg    grp_encrypt_fu_34_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_decrypt_fu_50_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_encrypt_fu_34_ap_start_reg = 1'b0;
#0 grp_decrypt_fu_50_ap_start_reg = 1'b0;
end

aes_main_word_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
word_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(word_address0),
    .ce0(word_ce0),
    .we0(word_we0),
    .d0(word_d0),
    .q0(word_q0),
    .address1(word_address1),
    .ce1(word_ce1),
    .q1(word_q1)
);

aes_main_ByteSub_ShiftRow_Sbox_1_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Sbox_address0),
    .ce0(Sbox_ce0),
    .q0(Sbox_q0),
    .address1(Sbox_address1),
    .ce1(Sbox_ce1),
    .q1(Sbox_q1)
);

aes_main_Rcon0_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
Rcon0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon0_address0),
    .ce0(Rcon0_ce0),
    .q0(Rcon0_q0)
);

aes_main_encrypt grp_encrypt_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_encrypt_fu_34_ap_start),
    .ap_done(grp_encrypt_fu_34_ap_done),
    .ap_idle(grp_encrypt_fu_34_ap_idle),
    .ap_ready(grp_encrypt_fu_34_ap_ready),
    .statemt_address0(grp_encrypt_fu_34_statemt_address0),
    .statemt_ce0(grp_encrypt_fu_34_statemt_ce0),
    .statemt_we0(grp_encrypt_fu_34_statemt_we0),
    .statemt_d0(grp_encrypt_fu_34_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_encrypt_fu_34_statemt_address1),
    .statemt_ce1(grp_encrypt_fu_34_statemt_ce1),
    .statemt_we1(grp_encrypt_fu_34_statemt_we1),
    .statemt_d1(grp_encrypt_fu_34_statemt_d1),
    .statemt_q1(statemt_q1),
    .key_address0(grp_encrypt_fu_34_key_address0),
    .key_ce0(grp_encrypt_fu_34_key_ce0),
    .key_q0(key_q0),
    .word_address0(grp_encrypt_fu_34_word_address0),
    .word_ce0(grp_encrypt_fu_34_word_ce0),
    .word_we0(grp_encrypt_fu_34_word_we0),
    .word_d0(grp_encrypt_fu_34_word_d0),
    .word_q0(word_q0),
    .word_address1(grp_encrypt_fu_34_word_address1),
    .word_ce1(grp_encrypt_fu_34_word_ce1),
    .word_q1(word_q1),
    .Sbox_address0(grp_encrypt_fu_34_Sbox_address0),
    .Sbox_ce0(grp_encrypt_fu_34_Sbox_ce0),
    .Sbox_q0(Sbox_q0),
    .Sbox_address1(grp_encrypt_fu_34_Sbox_address1),
    .Sbox_ce1(grp_encrypt_fu_34_Sbox_ce1),
    .Sbox_q1(Sbox_q1),
    .Rcon0_address0(grp_encrypt_fu_34_Rcon0_address0),
    .Rcon0_ce0(grp_encrypt_fu_34_Rcon0_ce0),
    .Rcon0_q0(Rcon0_q0)
);

aes_main_decrypt grp_decrypt_fu_50(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_decrypt_fu_50_ap_start),
    .ap_done(grp_decrypt_fu_50_ap_done),
    .ap_idle(grp_decrypt_fu_50_ap_idle),
    .ap_ready(grp_decrypt_fu_50_ap_ready),
    .statemt_address0(grp_decrypt_fu_50_statemt_address0),
    .statemt_ce0(grp_decrypt_fu_50_statemt_ce0),
    .statemt_we0(grp_decrypt_fu_50_statemt_we0),
    .statemt_d0(grp_decrypt_fu_50_statemt_d0),
    .statemt_q0(statemt_q0),
    .statemt_address1(grp_decrypt_fu_50_statemt_address1),
    .statemt_ce1(grp_decrypt_fu_50_statemt_ce1),
    .statemt_we1(grp_decrypt_fu_50_statemt_we1),
    .statemt_d1(grp_decrypt_fu_50_statemt_d1),
    .statemt_q1(statemt_q1),
    .key_address0(grp_decrypt_fu_50_key_address0),
    .key_ce0(grp_decrypt_fu_50_key_ce0),
    .key_q0(key_q0),
    .word_address0(grp_decrypt_fu_50_word_address0),
    .word_ce0(grp_decrypt_fu_50_word_ce0),
    .word_we0(grp_decrypt_fu_50_word_we0),
    .word_d0(grp_decrypt_fu_50_word_d0),
    .word_q0(word_q0),
    .word_address1(grp_decrypt_fu_50_word_address1),
    .word_ce1(grp_decrypt_fu_50_word_ce1),
    .word_q1(word_q1),
    .Sbox_address0(grp_decrypt_fu_50_Sbox_address0),
    .Sbox_ce0(grp_decrypt_fu_50_Sbox_ce0),
    .Sbox_q0(Sbox_q0),
    .Sbox_address1(grp_decrypt_fu_50_Sbox_address1),
    .Sbox_ce1(grp_decrypt_fu_50_Sbox_ce1),
    .Sbox_q1(Sbox_q1),
    .Rcon0_address0(grp_decrypt_fu_50_Rcon0_address0),
    .Rcon0_ce0(grp_decrypt_fu_50_Rcon0_ce0),
    .Rcon0_q0(Rcon0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_decrypt_fu_50_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_decrypt_fu_50_ap_start_reg <= 1'b1;
        end else if ((grp_decrypt_fu_50_ap_ready == 1'b1)) begin
            grp_decrypt_fu_50_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_encrypt_fu_34_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_encrypt_fu_34_ap_start_reg <= 1'b1;
        end else if ((grp_encrypt_fu_34_ap_ready == 1'b1)) begin
            grp_encrypt_fu_34_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Rcon0_address0 = grp_decrypt_fu_50_Rcon0_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Rcon0_address0 = grp_encrypt_fu_34_Rcon0_address0;
    end else begin
        Rcon0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Rcon0_ce0 = grp_decrypt_fu_50_Rcon0_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Rcon0_ce0 = grp_encrypt_fu_34_Rcon0_ce0;
    end else begin
        Rcon0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Sbox_address0 = grp_decrypt_fu_50_Sbox_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Sbox_address0 = grp_encrypt_fu_34_Sbox_address0;
    end else begin
        Sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Sbox_address1 = grp_decrypt_fu_50_Sbox_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Sbox_address1 = grp_encrypt_fu_34_Sbox_address1;
    end else begin
        Sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Sbox_ce0 = grp_decrypt_fu_50_Sbox_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Sbox_ce0 = grp_encrypt_fu_34_Sbox_ce0;
    end else begin
        Sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Sbox_ce1 = grp_decrypt_fu_50_Sbox_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Sbox_ce1 = grp_encrypt_fu_34_Sbox_ce1;
    end else begin
        Sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_encrypt_fu_34_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_decrypt_fu_50_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_decrypt_fu_50_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_decrypt_fu_50_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        key_address0 = grp_decrypt_fu_50_key_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_address0 = grp_encrypt_fu_34_key_address0;
    end else begin
        key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        key_ce0 = grp_decrypt_fu_50_key_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        key_ce0 = grp_encrypt_fu_34_key_ce0;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = grp_decrypt_fu_50_statemt_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = grp_encrypt_fu_34_statemt_address0;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = grp_decrypt_fu_50_statemt_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = grp_encrypt_fu_34_statemt_address1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_ce0 = grp_decrypt_fu_50_statemt_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_ce0 = grp_encrypt_fu_34_statemt_ce0;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_ce1 = grp_decrypt_fu_50_statemt_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_ce1 = grp_encrypt_fu_34_statemt_ce1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_d0 = grp_decrypt_fu_50_statemt_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_d0 = grp_encrypt_fu_34_statemt_d0;
    end else begin
        statemt_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_d1 = grp_decrypt_fu_50_statemt_d1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_d1 = grp_encrypt_fu_34_statemt_d1;
    end else begin
        statemt_d1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_we0 = grp_decrypt_fu_50_statemt_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_we0 = grp_encrypt_fu_34_statemt_we0;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_we1 = grp_decrypt_fu_50_statemt_we1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_we1 = grp_encrypt_fu_34_statemt_we1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address0 = grp_decrypt_fu_50_word_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address0 = grp_encrypt_fu_34_word_address0;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_address1 = grp_decrypt_fu_50_word_address1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address1 = grp_encrypt_fu_34_word_address1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_ce0 = grp_decrypt_fu_50_word_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_ce0 = grp_encrypt_fu_34_word_ce0;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_ce1 = grp_decrypt_fu_50_word_ce1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_ce1 = grp_encrypt_fu_34_word_ce1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_d0 = grp_decrypt_fu_50_word_d0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_d0 = grp_encrypt_fu_34_word_d0;
    end else begin
        word_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        word_we0 = grp_decrypt_fu_50_word_we0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_we0 = grp_encrypt_fu_34_word_we0;
    end else begin
        word_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_encrypt_fu_34_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_decrypt_fu_50_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_return = 32'd0;

assign grp_decrypt_fu_50_ap_start = grp_decrypt_fu_50_ap_start_reg;

assign grp_encrypt_fu_34_ap_start = grp_encrypt_fu_34_ap_start_reg;

endmodule //aes_main
