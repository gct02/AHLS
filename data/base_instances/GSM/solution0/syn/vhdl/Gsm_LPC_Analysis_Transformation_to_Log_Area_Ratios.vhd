-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_Transformation_to_Log_Area_Ratios is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    LARc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    LARc_ce0 : OUT STD_LOGIC;
    LARc_we0 : OUT STD_LOGIC;
    LARc_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    LARc_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Gsm_LPC_Analysis_Transformation_to_Log_Area_Ratios is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_5666 : STD_LOGIC_VECTOR (15 downto 0) := "0101011001100110";
    constant ap_const_lv16_799A : STD_LOGIC_VECTOR (15 downto 0) := "0111100110011010";
    constant ap_const_lv16_D4CD : STD_LOGIC_VECTOR (15 downto 0) := "1101010011001101";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_6800 : STD_LOGIC_VECTOR (15 downto 0) := "0110100000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal LARc_addr_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln248_fu_105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln248_fu_93_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_fu_56 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln248_fu_99_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_60 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_3_fu_110_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln67_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln67_fu_140_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_126_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_146_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_154_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_2_fu_168_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln259_fu_194_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln253_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln254_fu_178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_4_fu_200_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln255_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln253_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln255_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_3_fu_188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_5_fu_206_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_6_fu_226_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln262_fu_234_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_60 <= ap_const_lv4_1;
            elsif (((icmp_ln248_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_60 <= i_3_fu_110_p2;
            end if; 
        end if;
    end process;

    idx_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_56 <= ap_const_lv4_0;
            elsif (((icmp_ln248_fu_93_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_fu_56 <= add_ln248_fu_99_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                LARc_addr_reg_266 <= zext_ln248_fu_105_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln248_fu_93_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln248_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    LARc_address0_assign_proc : process(LARc_addr_reg_266, ap_CS_fsm_state2, zext_ln248_fu_105_p1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LARc_address0 <= LARc_addr_reg_266;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            LARc_address0 <= zext_ln248_fu_105_p1(3 - 1 downto 0);
        else 
            LARc_address0 <= "XXX";
        end if; 
    end process;


    LARc_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            LARc_ce0 <= ap_const_logic_1;
        else 
            LARc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    LARc_d0 <= 
        sub_ln262_fu_234_p2 when (tmp_fu_126_p3(0) = '1') else 
        temp_6_fu_226_p3;

    LARc_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LARc_we0 <= ap_const_logic_1;
        else 
            LARc_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln248_fu_99_p2 <= std_logic_vector(unsigned(idx_fu_56) + unsigned(ap_const_lv4_1));
    and_ln255_fu_220_p2 <= (xor_ln253_fu_214_p2 and icmp_ln255_fu_182_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln248_fu_93_p2)
    begin
        if ((((icmp_ln248_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln248_fu_93_p2)
    begin
        if (((icmp_ln248_fu_93_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_110_p2 <= std_logic_vector(unsigned(i_fu_60) + unsigned(ap_const_lv4_1));
    icmp_ln248_fu_93_p2 <= "1" when (i_fu_60 = ap_const_lv4_9) else "0";
    icmp_ln253_fu_162_p2 <= "1" when (signed(temp_fu_154_p3) < signed(ap_const_lv16_5666)) else "0";
    icmp_ln255_fu_182_p2 <= "1" when (signed(temp_fu_154_p3) < signed(ap_const_lv16_799A)) else "0";
    icmp_ln67_fu_134_p2 <= "1" when (LARc_q0 = ap_const_lv16_8000) else "0";
    select_ln67_fu_146_p3 <= 
        ap_const_lv16_7FFF when (icmp_ln67_fu_134_p2(0) = '1') else 
        sub_ln67_fu_140_p2;
        sext_ln254_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_2_fu_168_p4),16));

    shl_ln259_fu_194_p2 <= std_logic_vector(shift_left(unsigned(temp_fu_154_p3),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    sub_ln262_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(temp_6_fu_226_p3));
    sub_ln67_fu_140_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(LARc_q0));
    temp_2_fu_168_p4 <= temp_fu_154_p3(15 downto 1);
    temp_3_fu_188_p2 <= std_logic_vector(unsigned(temp_fu_154_p3) + unsigned(ap_const_lv16_D4CD));
    temp_4_fu_200_p2 <= std_logic_vector(unsigned(shl_ln259_fu_194_p2) + unsigned(ap_const_lv16_6800));
    temp_5_fu_206_p3 <= 
        sext_ln254_fu_178_p1 when (icmp_ln253_fu_162_p2(0) = '1') else 
        temp_4_fu_200_p2;
    temp_6_fu_226_p3 <= 
        temp_3_fu_188_p2 when (and_ln255_fu_220_p2(0) = '1') else 
        temp_5_fu_206_p3;
    temp_fu_154_p3 <= 
        select_ln67_fu_146_p3 when (tmp_fu_126_p3(0) = '1') else 
        LARc_q0;
    tmp_fu_126_p3 <= LARc_q0(15 downto 15);
    xor_ln253_fu_214_p2 <= (icmp_ln253_fu_162_p2 xor ap_const_lv1_1);
    zext_ln248_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_56),64));
end behav;
