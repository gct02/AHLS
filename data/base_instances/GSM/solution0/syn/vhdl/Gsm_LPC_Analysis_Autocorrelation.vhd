-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_Autocorrelation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_we0 : OUT STD_LOGIC;
    indata_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    indata_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce1 : OUT STD_LOGIC;
    indata_we1 : OUT STD_LOGIC;
    indata_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    indata_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    L_ACF_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_ACF_ce0 : OUT STD_LOGIC;
    L_ACF_we0 : OUT STD_LOGIC;
    L_ACF_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    L_ACF_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    L_ACF_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_ACF_ce1 : OUT STD_LOGIC;
    L_ACF_we1 : OUT STD_LOGIC;
    L_ACF_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    L_ACF_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bitoff_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bitoff_ce0 : OUT STD_LOGIC;
    bitoff_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
    bitoff_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bitoff_ce1 : OUT STD_LOGIC;
    bitoff_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
    bitoff_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bitoff_ce2 : OUT STD_LOGIC;
    bitoff_q2 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of Gsm_LPC_Analysis_Autocorrelation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C0000001 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_578 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_583 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_588 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln57_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_1995 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_2000 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_reg_2020 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_8_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_8_reg_2026 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_reg_2031 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal scalauto_2_fu_965_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal scalauto_2_reg_2042 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln62_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_reg_2047 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln62_1_reg_2051 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_assign_fu_1008_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal b_assign_reg_2055 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sl_4_reg_2172 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sl_5_reg_2179 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln84_fu_1057_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln84_reg_2196 : STD_LOGIC_VECTOR (16 downto 0);
    signal L_ACF_addr_3_reg_2206 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln89_fu_1061_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln89_reg_2211 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln89_1_fu_1065_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln89_1_reg_2217 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_addr_4_reg_2227 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln93_fu_1069_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln93_reg_2232 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln93_1_fu_1073_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln93_1_reg_2239 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln98_fu_1077_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln98_reg_2246 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln98_1_fu_1080_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln98_1_reg_2252 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln119_1_fu_1090_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln119_1_reg_2262 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln86_2_fu_1102_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln86_2_reg_2279 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_load_1_reg_2288 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_ACF_load_2_reg_2293 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln98_2_fu_1106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln98_2_reg_2304 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln104_2_fu_1112_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln104_2_reg_2317 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_load_3_reg_2327 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal L_ACF_load_4_reg_2332 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln111_1_fu_1119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln111_1_reg_2343 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln91_fu_1190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln91_reg_2384 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln102_fu_1203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln102_reg_2394 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln107_fu_1208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln107_reg_2399 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_1_fu_1233_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_1_reg_2414 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1871_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1879_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln126_fu_1260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln126_reg_2439 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_ACF_addr_10_reg_2450 : STD_LOGIC_VECTOR (3 downto 0);
    signal idx_load_reg_2455 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln139_fu_1438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln139_reg_2469 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln132_fu_1496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_reg_2496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal L_ACF_addr_11_reg_2539 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal zext_ln152_fu_1793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln152_reg_2552 : STD_LOGIC_VECTOR (15 downto 0);
    signal indata_addr_18_reg_2560 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_done : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_idle : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_ready : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_we0 : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce1 : STD_LOGIC;
    signal grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln49_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln49_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln115_fu_733_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_2_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_1031_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1023_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln131_fu_1450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln129_fu_1432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln39_fu_1481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_fu_1491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln135_fu_1561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_fu_1571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_fu_1634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_fu_1644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln139_fu_1701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_1659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln144_fu_1774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_1766_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln152_1_fu_1824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln152_fu_1812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal smax_fu_156 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal smax_1_fu_868_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal k_fu_160 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln49_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_3_fu_164 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln79_fu_1036_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal idx_fu_168 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_fu_172 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_10_fu_1455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_81_fu_176 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln132_fu_1510_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_fu_1306_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal empty_82_fu_180 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln133_fu_1530_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln120_fu_1320_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_83_fu_184 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln134_1_fu_1550_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln121_fu_1334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal empty_84_fu_188 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln135_1_fu_1604_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln122_fu_1348_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_85_fu_192 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln136_1_fu_1623_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln123_fu_1362_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal empty_86_fu_196 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln137_1_fu_1676_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_fu_1254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_87_fu_200 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln138_1_fu_1695_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln125_fu_1371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal empty_88_fu_204 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln139_1_fu_1728_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln126_fu_1380_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal empty_89_fu_208 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln140_fu_1747_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal k_4_fu_212 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln144_fu_1779_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx77_fu_216 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln152_fu_1818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal shl_ln146_fu_1802_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_assign_s_fu_639_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_653_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_fu_677_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln105_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln105_4_fu_681_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln105_4_fu_669_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal xor_ln105_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_701_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_717_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln70_fu_695_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_742_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_768_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln115_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_5_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln112_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_7_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_6_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln67_fu_840_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_826_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln67_fu_846_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_854_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln52_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln112_fu_881_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_5_fu_897_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln112_6_fu_907_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln113_fu_903_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_4_fu_891_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln112_fu_885_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_fu_917_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_4_fu_924_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln107_5_fu_935_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln107_3_fu_931_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_4_fu_946_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln107_fu_942_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln107_fu_913_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln107_6_fu_951_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal scalauto_fu_959_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln62_fu_978_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_984_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_1000_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub24_cast_fu_1004_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln111_fu_1086_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln119_1_fu_1090_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_fu_1094_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_2_fu_1102_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln111_fu_1123_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln111_fu_1123_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln111_fu_1123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln115_fu_1133_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln115_fu_1133_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln115_fu_1133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln116_fu_1142_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln116_fu_1142_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln116_fu_1142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln120_fu_1151_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln120_fu_1151_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln120_fu_1151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln121_fu_1160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln121_fu_1160_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln121_fu_1160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln84_fu_1172_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln84_1_fu_1168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln84_fu_1172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln84_fu_1172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln86_fu_1182_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln86_fu_1182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln86_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln91_fu_1190_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_fu_1190_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln93_fu_1195_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln93_fu_1195_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln93_fu_1195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln102_fu_1203_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln102_fu_1203_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln107_fu_1208_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln107_fu_1208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_fu_1212_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_fu_1212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln109_fu_1212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1862_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal mul_ln117_fu_1224_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln117_fu_1224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln117_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln84_2_fu_1178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1840_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1851_p4 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln109_1_fu_1217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1887_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln124_1_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_1_fu_1245_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln126_fu_1260_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln126_fu_1260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1938_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1896_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln119_3_fu_1282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1903_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1912_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln119_5_fu_1293_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln119_4_fu_1290_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln119_7_fu_1296_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln119_6_fu_1302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln119_3_fu_1285_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp22_cast_fu_1279_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1930_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln120_2_fu_1317_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln120_1_fu_1312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln91_1_fu_1270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1945_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln121_3_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln121_1_fu_1326_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln108_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1955_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln122_1_fu_1345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln122_1_fu_1340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln102_1_fu_1273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1921_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln123_1_fu_1359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln123_1_fu_1354_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1965_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln125_1_fu_1368_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln126_fu_1377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln131_fu_1444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln43_fu_1476_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln134_fu_1486_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln132_fu_1496_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_1500_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_1500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_1500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_1_fu_1506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln133_fu_1520_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln133_fu_1520_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln133_1_fu_1526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln134_fu_1540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln134_fu_1540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln134_1_fu_1546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln135_fu_1556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln136_fu_1566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln135_fu_1595_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln135_fu_1595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln135_1_fu_1600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln136_fu_1614_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln136_fu_1614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln136_1_fu_1619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln137_fu_1629_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln138_fu_1639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_1667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln137_fu_1667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln137_1_fu_1672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln138_fu_1686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln138_fu_1686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln138_1_fu_1691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln139_fu_1719_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln139_fu_1719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln139_1_fu_1724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln140_fu_1738_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln140_fu_1738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln140_1_fu_1743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_90_fu_1790_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1840_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln111_fu_1086_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1851_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1862_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1871_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1871_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1879_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1887_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1896_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1896_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1903_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1903_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1912_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1912_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1921_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1921_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1930_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1930_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1930_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1938_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1938_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1945_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln86_fu_1094_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1945_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1955_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1955_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1965_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1965_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Gsm_LPC_Analysis_Autocorrelation_Pipeline_VITIS_LOOP_65_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indata_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        indata_ce0 : OUT STD_LOGIC;
        indata_we0 : OUT STD_LOGIC;
        indata_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        indata_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        indata_ce1 : OUT STD_LOGIC;
        indata_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln65 : IN STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component Gsm_LPC_Analysis_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_32s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_am_addmul_16s_16s_16s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_mac_muladd_16s_16s_33s_33_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;



begin
    grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532 : component Gsm_LPC_Analysis_Autocorrelation_Pipeline_VITIS_LOOP_65_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start,
        ap_done => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_done,
        ap_idle => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_idle,
        ap_ready => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_ready,
        indata_address0 => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address0,
        indata_ce0 => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce0,
        indata_we0 => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_we0,
        indata_d0 => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_d0,
        indata_address1 => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address1,
        indata_ce1 => grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce1,
        indata_q1 => indata_q1,
        zext_ln65 => b_assign_reg_2055);

    mul_16s_16s_32_1_1_U5 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln111_fu_1123_p0,
        din1 => mul_ln111_fu_1123_p1,
        dout => mul_ln111_fu_1123_p2);

    mul_16s_16s_32_1_1_U6 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln115_fu_1133_p0,
        din1 => mul_ln115_fu_1133_p1,
        dout => mul_ln115_fu_1133_p2);

    mul_16s_16s_32_1_1_U7 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln116_fu_1142_p0,
        din1 => mul_ln116_fu_1142_p1,
        dout => mul_ln116_fu_1142_p2);

    mul_16s_16s_32_1_1_U8 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln120_fu_1151_p0,
        din1 => mul_ln120_fu_1151_p1,
        dout => mul_ln120_fu_1151_p2);

    mul_16s_16s_32_1_1_U9 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln121_fu_1160_p0,
        din1 => mul_ln121_fu_1160_p1,
        dout => mul_ln121_fu_1160_p2);

    mul_16s_16s_32_1_1_U10 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln84_fu_1172_p0,
        din1 => mul_ln84_fu_1172_p1,
        dout => mul_ln84_fu_1172_p2);

    mul_16s_16s_32_1_1_U11 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln86_fu_1182_p0,
        din1 => mul_ln86_fu_1182_p1,
        dout => mul_ln86_fu_1182_p2);

    mul_16s_16s_32_1_1_U12 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln91_fu_1190_p0,
        din1 => mul_ln91_fu_1190_p1,
        dout => mul_ln91_fu_1190_p2);

    mul_16s_16s_32_1_1_U13 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln93_fu_1195_p0,
        din1 => mul_ln93_fu_1195_p1,
        dout => mul_ln93_fu_1195_p2);

    mul_16s_16s_32_1_1_U14 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln102_fu_1203_p0,
        din1 => mul_ln102_fu_1203_p1,
        dout => mul_ln102_fu_1203_p2);

    mul_16s_16s_32_1_1_U15 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln107_fu_1208_p0,
        din1 => mul_ln107_fu_1208_p1,
        dout => mul_ln107_fu_1208_p2);

    mul_16s_16s_32_1_1_U16 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln109_fu_1212_p0,
        din1 => mul_ln109_fu_1212_p1,
        dout => mul_ln109_fu_1212_p2);

    mul_16s_16s_32_1_1_U17 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln117_fu_1224_p0,
        din1 => mul_ln117_fu_1224_p1,
        dout => mul_ln117_fu_1224_p2);

    mul_16s_16s_32_1_1_U18 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln126_fu_1260_p0,
        din1 => mul_ln126_fu_1260_p1,
        dout => mul_ln126_fu_1260_p2);

    mul_16s_16s_32_1_1_U19 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln132_fu_1500_p0,
        din1 => mul_ln132_fu_1500_p1,
        dout => mul_ln132_fu_1500_p2);

    mul_16s_16s_32_1_1_U20 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln133_fu_1520_p1,
        dout => mul_ln133_fu_1520_p2);

    mul_16s_16s_32_1_1_U21 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln134_fu_1540_p1,
        dout => mul_ln134_fu_1540_p2);

    mul_16s_16s_32_1_1_U22 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln135_fu_1595_p1,
        dout => mul_ln135_fu_1595_p2);

    mul_16s_16s_32_1_1_U23 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln136_fu_1614_p1,
        dout => mul_ln136_fu_1614_p2);

    mul_16s_16s_32_1_1_U24 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln137_fu_1667_p1,
        dout => mul_ln137_fu_1667_p2);

    mul_16s_16s_32_1_1_U25 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln138_fu_1686_p1,
        dout => mul_ln138_fu_1686_p2);

    mul_16s_16s_32_1_1_U26 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln139_fu_1719_p1,
        dout => mul_ln139_fu_1719_p2);

    mul_16s_16s_32_1_1_U27 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln140_fu_1738_p1,
        dout => mul_ln140_fu_1738_p2);

    ama_addmuladd_16s_16s_16s_32s_33_4_1_U28 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1840_p0,
        din1 => sl_4_reg_2172,
        din2 => sl_5_reg_2179,
        din3 => mul_ln120_fu_1151_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1840_p4);

    ama_addmuladd_16s_16s_16s_32s_33_4_1_U29 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1851_p0,
        din1 => reg_583,
        din2 => sl_4_reg_2172,
        din3 => mul_ln121_fu_1160_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1851_p4);

    am_addmul_16s_16s_16s_33_4_1_U30 : component Gsm_LPC_Analysis_am_addmul_16s_16s_16s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1862_p0,
        din1 => reg_578,
        din2 => reg_588,
        ce => ap_const_logic_1,
        dout => grp_fu_1862_p3);

    mac_muladd_16s_16s_32s_33_4_1_U31 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1871_p0,
        din1 => grp_fu_1871_p1,
        din2 => mul_ln111_fu_1123_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1871_p3);

    mac_muladd_16s_16s_32s_33_4_1_U32 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1879_p0,
        din1 => reg_588,
        din2 => mul_ln115_fu_1133_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1879_p3);

    mac_muladd_16s_16s_32s_33_4_1_U33 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1887_p0,
        din1 => reg_583,
        din2 => mul_ln116_fu_1142_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1887_p3);

    mac_muladd_16s_16s_32s_33_4_1_U34 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1896_p0,
        din1 => grp_fu_1896_p1,
        din2 => mul_ln86_fu_1182_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1896_p3);

    mac_muladd_16s_16s_32s_33_4_1_U35 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1903_p0,
        din1 => grp_fu_1903_p1,
        din2 => mul_ln93_fu_1195_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1903_p3);

    mac_muladd_16s_16s_33s_33_4_1_U36 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1912_p0,
        din1 => grp_fu_1912_p1,
        din2 => grp_fu_1871_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1912_p3);

    mac_muladd_16s_16s_33s_33_4_1_U37 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_33s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 33,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1921_p0,
        din1 => grp_fu_1921_p1,
        din2 => grp_fu_1879_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1921_p3);

    ama_addmuladd_16s_16s_16s_33s_34_4_1_U38 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 33,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1930_p0,
        din1 => grp_fu_1930_p1,
        din2 => grp_fu_1930_p2,
        din3 => grp_fu_1840_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1930_p4);

    am_addmul_16s_16s_16s_33_4_1_U39 : component Gsm_LPC_Analysis_am_addmul_16s_16s_16s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1938_p0,
        din1 => grp_fu_1938_p1,
        din2 => indata_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_1938_p3);

    ama_addmuladd_16s_16s_16s_33s_34_4_1_U40 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 33,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sl_5_reg_2179,
        din1 => grp_fu_1945_p1,
        din2 => grp_fu_1945_p2,
        din3 => grp_fu_1851_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1945_p4);

    ama_addmuladd_16s_16s_16s_33s_34_4_1_U41 : component Gsm_LPC_Analysis_ama_addmuladd_16s_16s_16s_33s_34_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 33,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_588,
        din1 => grp_fu_1955_p1,
        din2 => grp_fu_1955_p2,
        din3 => grp_fu_1862_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_1955_p4);

    mac_muladd_16s_16s_32s_33_4_1_U42 : component Gsm_LPC_Analysis_mac_muladd_16s_16s_32s_33_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 32,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1965_p0,
        din1 => grp_fu_1965_p1,
        din2 => mul_ln117_fu_1224_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1965_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln62_1_fu_994_p2 = ap_const_lv1_1))) then 
                    grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_ready = ap_const_logic_1)) then 
                    grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_81_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_81_fu_176 <= add_ln119_fu_1306_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_81_fu_176 <= add_ln132_fu_1510_p2;
            end if; 
        end if;
    end process;

    empty_82_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_82_fu_180 <= add_ln120_fu_1320_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_82_fu_180 <= add_ln133_fu_1530_p2;
            end if; 
        end if;
    end process;

    empty_83_fu_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_83_fu_184 <= add_ln121_fu_1334_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                empty_83_fu_184 <= add_ln134_1_fu_1550_p2;
            end if; 
        end if;
    end process;

    empty_84_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_84_fu_188 <= add_ln122_fu_1348_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                empty_84_fu_188 <= add_ln135_1_fu_1604_p2;
            end if; 
        end if;
    end process;

    empty_85_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_85_fu_192 <= add_ln123_fu_1362_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                empty_85_fu_192 <= add_ln136_1_fu_1623_p2;
            end if; 
        end if;
    end process;

    empty_86_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                empty_86_fu_196 <= add_ln124_fu_1254_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                empty_86_fu_196 <= add_ln137_1_fu_1676_p2;
            end if; 
        end if;
    end process;

    empty_87_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_87_fu_200 <= add_ln125_fu_1371_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                empty_87_fu_200 <= add_ln138_1_fu_1695_p2;
            end if; 
        end if;
    end process;

    empty_88_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_88_fu_204 <= add_ln126_fu_1380_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                empty_88_fu_204 <= add_ln139_1_fu_1728_p2;
            end if; 
        end if;
    end process;

    empty_89_fu_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                empty_89_fu_208 <= L_ACF_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                empty_89_fu_208 <= add_ln140_fu_1747_p2;
            end if; 
        end if;
    end process;

    i_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_32_fu_1023_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_fu_172 <= ap_const_lv8_8;
            elsif (((icmp_ln129_fu_1432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_fu_172 <= i_10_fu_1455_p2;
            end if; 
        end if;
    end process;

    idx77_fu_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln62_reg_2047 = ap_const_lv1_1)) then
                if (((tmp_33_fu_1766_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                    idx77_fu_216 <= ap_const_lv8_0;
                elsif (((icmp_ln152_fu_1812_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    idx77_fu_216 <= add_ln152_fu_1818_p2;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_32_fu_1023_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                idx_fu_168 <= ap_const_lv8_0;
            elsif (((icmp_ln129_fu_1432_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                idx_fu_168 <= add_ln139_fu_1438_p2;
            end if; 
        end if;
    end process;

    k_3_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_3_fu_164 <= ap_const_lv5_8;
            elsif (((tmp_32_fu_1023_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k_3_fu_164 <= add_ln79_fu_1036_p2;
            end if; 
        end if;
    end process;

    k_4_fu_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln129_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                k_4_fu_212 <= ap_const_lv5_8;
            elsif (((tmp_33_fu_1766_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                k_4_fu_212 <= add_ln144_fu_1779_p2;
            end if; 
        end if;
    end process;

    k_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_160 <= ap_const_lv8_0;
            elsif (((icmp_ln49_fu_611_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_fu_160 <= add_ln49_fu_617_p2;
            end if; 
        end if;
    end process;

    reg_578_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                reg_578 <= indata_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_578 <= indata_q0;
            end if; 
        end if;
    end process;

    reg_583_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_583 <= indata_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_583 <= indata_q1;
            end if; 
        end if;
    end process;

    reg_588_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_588 <= indata_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_588 <= indata_q0;
            end if; 
        end if;
    end process;

    reg_593_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_593 <= L_ACF_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_593 <= L_ACF_q0;
            end if; 
        end if;
    end process;

    smax_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                smax_fu_156 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                smax_fu_156 <= smax_1_fu_868_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                L_ACF_addr_11_reg_2539 <= zext_ln144_fu_1774_p1(4 - 1 downto 0);
                    zext_ln152_reg_2552(2 downto 0) <= zext_ln152_fu_1793_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                L_ACF_load_1_reg_2288 <= L_ACF_q1;
                L_ACF_load_2_reg_2293 <= L_ACF_q0;
                sext_ln104_2_reg_2317 <= sext_ln104_2_fu_1112_p1;
                sext_ln86_2_reg_2279 <= sext_ln86_2_fu_1102_p1;
                sext_ln98_2_reg_2304 <= sext_ln98_2_fu_1106_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                L_ACF_load_3_reg_2327 <= L_ACF_q0;
                L_ACF_load_4_reg_2332 <= L_ACF_q1;
                sext_ln111_1_reg_2343 <= sext_ln111_1_fu_1119_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln119_1_reg_2414 <= add_ln119_1_fu_1233_p2;
                mul_ln102_reg_2394 <= mul_ln102_fu_1203_p2;
                mul_ln107_reg_2399 <= mul_ln107_fu_1208_p2;
                mul_ln126_reg_2439 <= mul_ln126_fu_1260_p2;
                mul_ln91_reg_2384 <= mul_ln91_fu_1190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln139_reg_2469 <= add_ln139_fu_1438_p2;
                idx_load_reg_2455 <= idx_fu_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                and_ln107_8_reg_2026 <= and_ln107_8_fu_814_p2;
                and_ln107_reg_2020 <= and_ln107_fu_784_p2;
                icmp_ln107_reg_2000 <= icmp_ln107_fu_647_p2;
                icmp_ln57_reg_1995 <= icmp_ln57_fu_633_p2;
                or_ln107_reg_2031 <= or_ln107_fu_820_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                b_assign_reg_2055 <= b_assign_fu_1008_p2;
                icmp_ln62_1_reg_2051 <= icmp_ln62_1_fu_994_p2;
                icmp_ln62_reg_2047 <= icmp_ln62_fu_972_p2;
                scalauto_2_reg_2042 <= scalauto_2_fu_965_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                indata_addr_18_reg_2560 <= zext_ln152_1_fu_1824_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sext_ln119_1_reg_2262 <= sext_ln119_1_fu_1090_p1;
                sext_ln84_reg_2196 <= sext_ln84_fu_1057_p1;
                sext_ln89_1_reg_2217 <= sext_ln89_1_fu_1065_p1;
                sext_ln89_reg_2211 <= sext_ln89_fu_1061_p1;
                sext_ln93_1_reg_2239 <= sext_ln93_1_fu_1073_p1;
                sext_ln93_reg_2232 <= sext_ln93_fu_1069_p1;
                sext_ln98_1_reg_2252 <= sext_ln98_1_fu_1080_p1;
                sext_ln98_reg_2246 <= sext_ln98_fu_1077_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                sext_ln132_reg_2496 <= sext_ln132_fu_1496_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                sl_4_reg_2172 <= indata_q0;
                sl_5_reg_2179 <= indata_q1;
            end if;
        end if;
    end process;
    zext_ln152_reg_2552(15 downto 3) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln62_reg_2047, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state28, ap_CS_fsm_state5, icmp_ln49_fu_611_p2, tmp_32_fu_1023_p3, icmp_ln129_fu_1432_p2, tmp_33_fu_1766_p3, icmp_ln152_fu_1812_p2, ap_block_state5_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln49_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((tmp_32_fu_1023_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln129_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((tmp_33_fu_1766_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and ((icmp_ln152_fu_1812_p2 = ap_const_lv1_1) or (icmp_ln62_reg_2047 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    L_ACF_addr_10_reg_2450 <= ap_const_lv64_8(4 - 1 downto 0);
    L_ACF_addr_3_reg_2206 <= ap_const_lv64_1(4 - 1 downto 0);
    L_ACF_addr_4_reg_2227 <= ap_const_lv64_2(4 - 1 downto 0);

    L_ACF_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state10, L_ACF_addr_4_reg_2227, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, L_ACF_addr_11_reg_2539, zext_ln79_fu_1031_p1, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            L_ACF_address0 <= L_ACF_addr_11_reg_2539;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            L_ACF_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_ACF_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            L_ACF_address0 <= L_ACF_addr_4_reg_2227;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            L_ACF_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            L_ACF_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            L_ACF_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            L_ACF_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            L_ACF_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            L_ACF_address0 <= zext_ln79_fu_1031_p1(4 - 1 downto 0);
        else 
            L_ACF_address0 <= "XXXX";
        end if; 
    end process;


    L_ACF_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, L_ACF_addr_3_reg_2206, ap_CS_fsm_state12, ap_CS_fsm_state13, L_ACF_addr_10_reg_2450, ap_CS_fsm_state16, ap_CS_fsm_state26, zext_ln144_fu_1774_p1, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            L_ACF_address1 <= zext_ln144_fu_1774_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            L_ACF_address1 <= L_ACF_addr_10_reg_2450;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            L_ACF_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_ACF_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            L_ACF_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L_ACF_address1 <= L_ACF_addr_3_reg_2206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            L_ACF_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            L_ACF_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            L_ACF_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            L_ACF_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            L_ACF_address1 <= "XXXX";
        end if; 
    end process;


    L_ACF_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            L_ACF_ce0 <= ap_const_logic_1;
        else 
            L_ACF_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            L_ACF_ce1 <= ap_const_logic_1;
        else 
            L_ACF_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state16, empty_81_fu_176, empty_83_fu_184, ap_CS_fsm_state22, empty_85_fu_192, ap_CS_fsm_state23, empty_87_fu_200, ap_CS_fsm_state24, ap_CS_fsm_state27, shl_ln146_fu_1802_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            L_ACF_d0 <= shl_ln146_fu_1802_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            L_ACF_d0 <= empty_87_fu_200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_ACF_d0 <= empty_85_fu_192;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            L_ACF_d0 <= empty_83_fu_184;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L_ACF_d0 <= empty_81_fu_176;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            L_ACF_d0 <= ap_const_lv64_0;
        else 
            L_ACF_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_ACF_d1_assign_proc : process(ap_CS_fsm_state16, empty_82_fu_180, ap_CS_fsm_state22, empty_84_fu_188, ap_CS_fsm_state23, empty_86_fu_196, ap_CS_fsm_state24, empty_88_fu_204, empty_89_fu_208, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            L_ACF_d1 <= empty_89_fu_208;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            L_ACF_d1 <= empty_88_fu_204;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_ACF_d1 <= empty_86_fu_196;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            L_ACF_d1 <= empty_84_fu_188;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            L_ACF_d1 <= empty_82_fu_180;
        else 
            L_ACF_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_ACF_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state16, tmp_32_fu_1023_p3, icmp_ln129_fu_1432_p2, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln129_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((tmp_32_fu_1023_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            L_ACF_we0 <= ap_const_logic_1;
        else 
            L_ACF_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_we1_assign_proc : process(ap_CS_fsm_state16, icmp_ln129_fu_1432_p2, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln129_fu_1432_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            L_ACF_we1 <= ap_const_logic_1;
        else 
            L_ACF_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a_assign_s_fu_639_p3 <= (smax_fu_156 & ap_const_lv16_0);
    add_ln112_4_fu_891_p2 <= std_logic_vector(unsigned(zext_ln112_fu_881_p1) + unsigned(ap_const_lv5_F));
    add_ln112_5_fu_897_p2 <= std_logic_vector(unsigned(bitoff_q1) + unsigned(ap_const_lv4_7));
    add_ln112_6_fu_907_p2 <= std_logic_vector(unsigned(bitoff_q0) + unsigned(ap_const_lv4_F));
    add_ln112_fu_885_p2 <= std_logic_vector(unsigned(zext_ln112_fu_881_p1) + unsigned(ap_const_lv5_17));
    add_ln119_1_fu_1233_p2 <= std_logic_vector(unsigned(reg_593) + unsigned(sext_ln84_2_fu_1178_p1));
    add_ln119_3_fu_1285_p2 <= std_logic_vector(signed(sext_ln119_3_fu_1282_p1) + signed(add_ln119_1_reg_2414));
    add_ln119_7_fu_1296_p2 <= std_logic_vector(signed(sext_ln119_5_fu_1293_p1) + signed(sext_ln119_4_fu_1290_p1));
    add_ln119_fu_1306_p2 <= std_logic_vector(signed(sext_ln119_6_fu_1302_p1) + signed(add_ln119_3_fu_1285_p2));
    add_ln120_1_fu_1312_p2 <= std_logic_vector(unsigned(L_ACF_load_1_reg_2288) + unsigned(tmp22_cast_fu_1279_p1));
    add_ln120_fu_1320_p2 <= std_logic_vector(signed(sext_ln120_2_fu_1317_p1) + signed(add_ln120_1_fu_1312_p2));
    add_ln121_1_fu_1326_p2 <= std_logic_vector(unsigned(L_ACF_load_2_reg_2293) + unsigned(sext_ln91_1_fu_1270_p1));
    add_ln121_fu_1334_p2 <= std_logic_vector(signed(sext_ln121_3_fu_1331_p1) + signed(add_ln121_1_fu_1326_p2));
    add_ln122_1_fu_1340_p2 <= std_logic_vector(unsigned(L_ACF_load_3_reg_2327) + unsigned(sext_ln108_fu_1276_p1));
    add_ln122_fu_1348_p2 <= std_logic_vector(signed(sext_ln122_1_fu_1345_p1) + signed(add_ln122_1_fu_1340_p2));
    add_ln123_1_fu_1354_p2 <= std_logic_vector(unsigned(L_ACF_load_4_reg_2332) + unsigned(sext_ln102_1_fu_1273_p1));
    add_ln123_fu_1362_p2 <= std_logic_vector(signed(sext_ln123_1_fu_1359_p1) + signed(add_ln123_1_fu_1354_p2));
    add_ln124_1_fu_1245_p2 <= std_logic_vector(unsigned(L_ACF_q0) + unsigned(sext_ln109_1_fu_1217_p1));
    add_ln124_fu_1254_p2 <= std_logic_vector(signed(sext_ln124_1_fu_1251_p1) + signed(add_ln124_1_fu_1245_p2));
    add_ln125_fu_1371_p2 <= std_logic_vector(signed(sext_ln125_1_fu_1368_p1) + signed(reg_593));
    add_ln126_fu_1380_p2 <= std_logic_vector(unsigned(L_ACF_q0) + unsigned(sext_ln126_fu_1377_p1));
    add_ln131_fu_1444_p2 <= std_logic_vector(unsigned(idx_fu_168) + unsigned(ap_const_lv8_8));
    add_ln132_fu_1510_p2 <= std_logic_vector(signed(sext_ln132_1_fu_1506_p1) + signed(empty_81_fu_176));
    add_ln133_fu_1530_p2 <= std_logic_vector(signed(sext_ln133_1_fu_1526_p1) + signed(empty_82_fu_180));
    add_ln134_1_fu_1550_p2 <= std_logic_vector(signed(sext_ln134_1_fu_1546_p1) + signed(empty_83_fu_184));
    add_ln134_fu_1486_p2 <= std_logic_vector(unsigned(idx_load_reg_2455) + unsigned(ap_const_lv8_6));
    add_ln135_1_fu_1604_p2 <= std_logic_vector(signed(sext_ln135_1_fu_1600_p1) + signed(empty_84_fu_188));
    add_ln135_fu_1556_p2 <= std_logic_vector(unsigned(idx_load_reg_2455) + unsigned(ap_const_lv8_5));
    add_ln136_1_fu_1623_p2 <= std_logic_vector(signed(sext_ln136_1_fu_1619_p1) + signed(empty_85_fu_192));
    add_ln136_fu_1566_p2 <= std_logic_vector(unsigned(idx_load_reg_2455) + unsigned(ap_const_lv8_4));
    add_ln137_1_fu_1676_p2 <= std_logic_vector(signed(sext_ln137_1_fu_1672_p1) + signed(empty_86_fu_196));
    add_ln137_fu_1629_p2 <= std_logic_vector(unsigned(idx_load_reg_2455) + unsigned(ap_const_lv8_3));
    add_ln138_1_fu_1695_p2 <= std_logic_vector(signed(sext_ln138_1_fu_1691_p1) + signed(empty_87_fu_200));
    add_ln138_fu_1639_p2 <= std_logic_vector(unsigned(idx_load_reg_2455) + unsigned(ap_const_lv8_2));
    add_ln139_1_fu_1728_p2 <= std_logic_vector(signed(sext_ln139_1_fu_1724_p1) + signed(empty_88_fu_204));
    add_ln139_fu_1438_p2 <= std_logic_vector(unsigned(idx_fu_168) + unsigned(ap_const_lv8_1));
    add_ln140_fu_1747_p2 <= std_logic_vector(signed(sext_ln140_1_fu_1743_p1) + signed(empty_89_fu_208));
    add_ln144_fu_1779_p2 <= std_logic_vector(unsigned(k_4_fu_212) + unsigned(ap_const_lv5_1F));
    add_ln152_fu_1818_p2 <= std_logic_vector(unsigned(idx77_fu_216) + unsigned(ap_const_lv8_1));
    add_ln43_fu_1476_p2 <= std_logic_vector(unsigned(idx_load_reg_2455) + unsigned(ap_const_lv8_7));
    add_ln49_fu_617_p2 <= std_logic_vector(unsigned(k_fu_160) + unsigned(ap_const_lv8_1));
    add_ln62_fu_978_p2 <= std_logic_vector(unsigned(scalauto_2_fu_965_p3) + unsigned(ap_const_lv6_3F));
    add_ln79_fu_1036_p2 <= std_logic_vector(unsigned(k_3_fu_164) + unsigned(ap_const_lv5_1F));
    and_ln107_5_fu_790_p2 <= (xor_ln107_fu_762_p2 and tmp_26_fu_653_p3);
    and_ln107_6_fu_796_p2 <= (icmp_ln112_fu_711_p2 and and_ln107_5_fu_790_p2);
    and_ln107_7_fu_808_p2 <= (xor_ln112_fu_802_p2 and xor_ln107_fu_762_p2);
    and_ln107_8_fu_814_p2 <= (icmp_ln113_fu_727_p2 and and_ln107_7_fu_808_p2);
    and_ln107_fu_784_p2 <= (xor_ln107_fu_762_p2 and icmp_ln115_fu_778_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(ap_block_state5_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state5_on_subcall_done)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state5_on_subcall_done_assign_proc : process(icmp_ln62_1_reg_2051, grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_done = ap_const_logic_0) and (icmp_ln62_1_reg_2051 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln62_reg_2047, ap_CS_fsm_state28, icmp_ln152_fu_1812_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and ((icmp_ln152_fu_1812_p2 = ap_const_lv1_1) or (icmp_ln62_reg_2047 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln62_reg_2047, ap_CS_fsm_state28, icmp_ln152_fu_1812_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and ((icmp_ln152_fu_1812_p2 = ap_const_lv1_1) or (icmp_ln62_reg_2047 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_assign_fu_1008_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv15_4000),to_integer(unsigned('0' & sub24_cast_fu_1004_p1(15-1 downto 0)))));
    bitoff_address0 <= zext_ln113_2_fu_757_p1(8 - 1 downto 0);
    bitoff_address1 <= zext_ln114_fu_752_p1(8 - 1 downto 0);
    bitoff_address2 <= select_ln115_fu_733_p3(8 - 1 downto 0);

    bitoff_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce0 <= ap_const_logic_1;
        else 
            bitoff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce1 <= ap_const_logic_1;
        else 
            bitoff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce2 <= ap_const_logic_1;
        else 
            bitoff_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    empty_90_fu_1790_p1 <= scalauto_2_reg_2042(3 - 1 downto 0);
    empty_fu_1000_p1 <= add_ln62_fu_978_p2(2 - 1 downto 0);
    grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_ap_start_reg;
    grp_fu_1840_p0 <= sext_ln111_fu_1086_p1(16 - 1 downto 0);
    grp_fu_1851_p0 <= sext_ln111_fu_1086_p1(16 - 1 downto 0);
    grp_fu_1862_p0 <= sext_ln111_fu_1086_p1(16 - 1 downto 0);
    grp_fu_1871_p0 <= sext_ln119_1_fu_1090_p1(16 - 1 downto 0);
    grp_fu_1871_p1 <= sext_ln119_1_fu_1090_p1(16 - 1 downto 0);
    grp_fu_1879_p0 <= sext_ln119_1_fu_1090_p1(16 - 1 downto 0);
    grp_fu_1887_p0 <= sext_ln119_1_fu_1090_p1(16 - 1 downto 0);
    grp_fu_1896_p0 <= sext_ln89_1_reg_2217(16 - 1 downto 0);
    grp_fu_1896_p1 <= sext_ln89_1_reg_2217(16 - 1 downto 0);
    grp_fu_1903_p0 <= sext_ln98_2_fu_1106_p1(16 - 1 downto 0);
    grp_fu_1903_p1 <= sext_ln98_2_fu_1106_p1(16 - 1 downto 0);
    grp_fu_1912_p0 <= sext_ln104_2_fu_1112_p1(16 - 1 downto 0);
    grp_fu_1912_p1 <= sext_ln104_2_fu_1112_p1(16 - 1 downto 0);
    grp_fu_1921_p0 <= sext_ln104_2_fu_1112_p1(16 - 1 downto 0);
    grp_fu_1921_p1 <= sext_ln86_2_fu_1102_p1(16 - 1 downto 0);
    grp_fu_1930_p0 <= sext_ln98_1_reg_2252(16 - 1 downto 0);
    grp_fu_1930_p1 <= sext_ln89_reg_2211(16 - 1 downto 0);
    grp_fu_1930_p2 <= sext_ln93_reg_2232(16 - 1 downto 0);
    grp_fu_1938_p0 <= sext_ln89_reg_2211(16 - 1 downto 0);
    grp_fu_1938_p1 <= sext_ln84_reg_2196(16 - 1 downto 0);
    grp_fu_1945_p1 <= sext_ln86_fu_1094_p1(16 - 1 downto 0);
    grp_fu_1945_p2 <= sext_ln93_reg_2232(16 - 1 downto 0);
    grp_fu_1955_p1 <= sext_ln86_fu_1094_p1(16 - 1 downto 0);
    grp_fu_1955_p2 <= sext_ln98_reg_2246(16 - 1 downto 0);
    grp_fu_1965_p0 <= sext_ln119_1_reg_2262(16 - 1 downto 0);
    grp_fu_1965_p1 <= sext_ln86_2_fu_1102_p1(16 - 1 downto 0);
    i_10_fu_1455_p2 <= std_logic_vector(unsigned(i_fu_172) + unsigned(ap_const_lv8_1));
    icmp_ln107_fu_647_p2 <= "1" when (signed(a_assign_s_fu_639_p3) < signed(ap_const_lv32_C0000001)) else "0";
    icmp_ln112_fu_711_p2 <= "1" when (tmp_27_fu_701_p4 = ap_const_lv16_0) else "0";
    icmp_ln113_fu_727_p2 <= "1" when (tmp_28_fu_717_p4 = ap_const_lv8_0) else "0";
    icmp_ln115_fu_778_p2 <= "1" when (tmp_29_fu_768_p4 = ap_const_lv24_0) else "0";
    icmp_ln129_fu_1432_p2 <= "1" when (i_fu_172 = ap_const_lv8_A0) else "0";
    icmp_ln152_fu_1812_p2 <= "1" when (idx77_fu_216 = ap_const_lv8_A0) else "0";
    icmp_ln49_fu_611_p2 <= "1" when (k_fu_160 = ap_const_lv8_A0) else "0";
    icmp_ln52_fu_862_p2 <= "1" when (signed(temp_fu_854_p3) > signed(smax_fu_156)) else "0";
    icmp_ln57_fu_633_p2 <= "1" when (smax_fu_156 = ap_const_lv16_0) else "0";
    icmp_ln62_1_fu_994_p2 <= "1" when (tmp_30_fu_984_p4 = ap_const_lv4_0) else "0";
    icmp_ln62_fu_972_p2 <= "1" when (signed(scalauto_2_fu_965_p3) > signed(ap_const_lv6_0)) else "0";
    icmp_ln67_fu_834_p2 <= "1" when (indata_q0 = ap_const_lv16_8000) else "0";

    indata_address0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state9, ap_CS_fsm_state2, icmp_ln62_1_reg_2051, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state28, grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address0, ap_CS_fsm_state5, zext_ln49_fu_623_p1, zext_ln134_fu_1491_p1, zext_ln136_fu_1571_p1, zext_ln138_fu_1644_p1, zext_ln129_fu_1659_p1, zext_ln152_1_fu_1824_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            indata_address0 <= zext_ln152_1_fu_1824_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            indata_address0 <= zext_ln129_fu_1659_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            indata_address0 <= zext_ln138_fu_1644_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            indata_address0 <= zext_ln136_fu_1571_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            indata_address0 <= zext_ln134_fu_1491_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            indata_address0 <= ap_const_lv64_6(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            indata_address0 <= ap_const_lv64_4(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            indata_address0 <= ap_const_lv64_3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            indata_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            indata_address0 <= zext_ln49_fu_623_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2051 = ap_const_lv1_1))) then 
            indata_address0 <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address0;
        else 
            indata_address0 <= "XXXXXXXX";
        end if; 
    end process;


    indata_address1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln62_1_reg_2051, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, indata_addr_18_reg_2560, grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address1, ap_CS_fsm_state5, zext_ln131_fu_1450_p1, zext_ln39_fu_1481_p1, zext_ln135_fu_1561_p1, zext_ln137_fu_1634_p1, zext_ln139_fu_1701_p1, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            indata_address1 <= indata_addr_18_reg_2560;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            indata_address1 <= zext_ln139_fu_1701_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            indata_address1 <= zext_ln137_fu_1634_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            indata_address1 <= zext_ln135_fu_1561_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            indata_address1 <= zext_ln39_fu_1481_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            indata_address1 <= zext_ln131_fu_1450_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            indata_address1 <= ap_const_lv64_1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            indata_address1 <= ap_const_lv64_7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            indata_address1 <= ap_const_lv64_5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            indata_address1 <= ap_const_lv64_2(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2051 = ap_const_lv1_1))) then 
            indata_address1 <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_address1;
        else 
            indata_address1 <= "XXXXXXXX";
        end if; 
    end process;


    indata_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state9, ap_CS_fsm_state2, icmp_ln62_1_reg_2051, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state28, grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            indata_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2051 = ap_const_lv1_1))) then 
            indata_ce0 <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce0;
        else 
            indata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_ce1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln62_1_reg_2051, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce1, ap_CS_fsm_state5, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            indata_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2051 = ap_const_lv1_1))) then 
            indata_ce1 <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_ce1;
        else 
            indata_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    indata_d0 <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_d0;
    indata_d1 <= std_logic_vector(shift_left(unsigned(indata_q0),to_integer(unsigned('0' & zext_ln152_reg_2552(16-1 downto 0)))));

    indata_we0_assign_proc : process(icmp_ln62_1_reg_2051, grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_we0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln62_1_reg_2051 = ap_const_lv1_1))) then 
            indata_we0 <= grp_Autocorrelation_Pipeline_VITIS_LOOP_65_1_fu_532_indata_we0;
        else 
            indata_we0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_we1_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            indata_we1 <= ap_const_logic_1;
        else 
            indata_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln102_fu_1203_p0 <= sext_ln98_2_reg_2304(16 - 1 downto 0);
    mul_ln102_fu_1203_p1 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln107_fu_1208_p0 <= sext_ln104_2_reg_2317(16 - 1 downto 0);
    mul_ln107_fu_1208_p1 <= sext_ln89_1_reg_2217(16 - 1 downto 0);
    mul_ln109_fu_1212_p0 <= sext_ln104_2_reg_2317(16 - 1 downto 0);
    mul_ln109_fu_1212_p1 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln111_fu_1123_p0 <= sext_ln111_1_fu_1119_p1(16 - 1 downto 0);
    mul_ln111_fu_1123_p1 <= sext_ln111_1_fu_1119_p1(16 - 1 downto 0);
    mul_ln115_fu_1133_p0 <= sext_ln111_1_fu_1119_p1(16 - 1 downto 0);
    mul_ln115_fu_1133_p1 <= sext_ln89_1_reg_2217(16 - 1 downto 0);
    mul_ln116_fu_1142_p0 <= sext_ln111_1_fu_1119_p1(16 - 1 downto 0);
    mul_ln116_fu_1142_p1 <= sext_ln86_2_reg_2279(16 - 1 downto 0);
    mul_ln117_fu_1224_p0 <= sext_ln111_1_reg_2343(16 - 1 downto 0);
    mul_ln117_fu_1224_p1 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln120_fu_1151_p0 <= sext_ln119_1_reg_2262(16 - 1 downto 0);
    mul_ln120_fu_1151_p1 <= sext_ln111_1_fu_1119_p1(16 - 1 downto 0);
    mul_ln121_fu_1160_p0 <= sext_ln119_1_reg_2262(16 - 1 downto 0);
    mul_ln121_fu_1160_p1 <= sext_ln104_2_reg_2317(16 - 1 downto 0);
    mul_ln126_fu_1260_p0 <= sext_ln119_1_reg_2262(16 - 1 downto 0);
    mul_ln126_fu_1260_p1 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln132_fu_1500_p0 <= sext_ln132_fu_1496_p1(16 - 1 downto 0);
    mul_ln132_fu_1500_p1 <= sext_ln132_fu_1496_p1(16 - 1 downto 0);
    mul_ln133_fu_1520_p1 <= sext_ln132_fu_1496_p1(16 - 1 downto 0);
    mul_ln134_fu_1540_p1 <= sext_ln132_fu_1496_p1(16 - 1 downto 0);
    mul_ln135_fu_1595_p1 <= sext_ln132_reg_2496(16 - 1 downto 0);
    mul_ln136_fu_1614_p1 <= sext_ln132_reg_2496(16 - 1 downto 0);
    mul_ln137_fu_1667_p1 <= sext_ln132_reg_2496(16 - 1 downto 0);
    mul_ln138_fu_1686_p1 <= sext_ln132_reg_2496(16 - 1 downto 0);
    mul_ln139_fu_1719_p1 <= sext_ln132_reg_2496(16 - 1 downto 0);
    mul_ln140_fu_1738_p1 <= sext_ln132_reg_2496(16 - 1 downto 0);
    mul_ln84_fu_1172_p0 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln84_fu_1172_p1 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln86_fu_1182_p0 <= sext_ln86_2_reg_2279(16 - 1 downto 0);
    mul_ln86_fu_1182_p1 <= sext_ln86_2_reg_2279(16 - 1 downto 0);
    mul_ln91_fu_1190_p0 <= sext_ln89_1_reg_2217(16 - 1 downto 0);
    mul_ln91_fu_1190_p1 <= sext_ln84_1_fu_1168_p1(16 - 1 downto 0);
    mul_ln93_fu_1195_p0 <= sext_ln93_1_reg_2239(16 - 1 downto 0);
    mul_ln93_fu_1195_p1 <= sext_ln93_1_reg_2239(16 - 1 downto 0);
    or_ln107_3_fu_931_p2 <= (icmp_ln107_reg_2000 or and_ln107_reg_2020);
    or_ln107_4_fu_946_p2 <= (or_ln107_reg_2031 or or_ln107_3_fu_931_p2);
    or_ln107_fu_820_p2 <= (and_ln107_8_fu_814_p2 or and_ln107_6_fu_796_p2);
    scalauto_2_fu_965_p3 <= 
        ap_const_lv6_0 when (icmp_ln57_reg_1995(0) = '1') else 
        scalauto_fu_959_p2;
    scalauto_fu_959_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) - unsigned(select_ln107_6_fu_951_p3));
    select_ln105_4_fu_669_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_26_fu_653_p3(0) = '1') else 
        ap_const_lv24_0;
    select_ln105_fu_661_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_26_fu_653_p3(0) = '1') else 
        ap_const_lv32_0;
    select_ln107_4_fu_924_p3 <= 
        add_ln112_fu_885_p2 when (and_ln107_reg_2020(0) = '1') else 
        ap_const_lv5_0;
    select_ln107_5_fu_935_p3 <= 
        select_ln107_fu_917_p3 when (or_ln107_reg_2031(0) = '1') else 
        select_ln107_4_fu_924_p3;
    select_ln107_6_fu_951_p3 <= 
        zext_ln107_fu_942_p1 when (or_ln107_4_fu_946_p2(0) = '1') else 
        sext_ln107_fu_913_p1;
    select_ln107_fu_917_p3 <= 
        zext_ln113_fu_903_p1 when (and_ln107_8_reg_2026(0) = '1') else 
        add_ln112_4_fu_891_p2;
    select_ln115_fu_733_p3 <= 
        ap_const_lv64_FF when (tmp_26_fu_653_p3(0) = '1') else 
        ap_const_lv64_0;
    select_ln67_fu_846_p3 <= 
        ap_const_lv16_7FFF when (icmp_ln67_fu_834_p2(0) = '1') else 
        sub_ln67_fu_840_p2;
        sext_ln102_1_fu_1273_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln102_reg_2394),64));

        sext_ln104_2_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_5_reg_2179),32));

        sext_ln107_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln112_6_fu_907_p2),6));

        sext_ln108_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln107_reg_2399),64));

        sext_ln109_1_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln109_fu_1212_p2),64));

        sext_ln111_1_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_583),32));

    sext_ln111_fu_1086_p0 <= indata_q0;
        sext_ln111_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln111_fu_1086_p0),17));

    sext_ln119_1_fu_1090_p0 <= indata_q1;
        sext_ln119_1_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln119_1_fu_1090_p0),32));

        sext_ln119_3_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1896_p3),64));

        sext_ln119_4_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1903_p3),34));

        sext_ln119_5_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1912_p3),34));

        sext_ln119_6_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln119_7_fu_1296_p2),64));

        sext_ln120_2_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1930_p4),64));

        sext_ln121_3_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1945_p4),64));

        sext_ln122_1_fu_1345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1955_p4),64));

        sext_ln123_1_fu_1359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1921_p3),64));

        sext_ln124_1_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1887_p3),64));

        sext_ln125_1_fu_1368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1965_p3),64));

        sext_ln126_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln126_reg_2439),64));

        sext_ln132_1_fu_1506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln132_fu_1500_p2),64));

    sext_ln132_fu_1496_p0 <= reg_578;
        sext_ln132_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln132_fu_1496_p0),32));

        sext_ln133_1_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln133_fu_1520_p2),64));

        sext_ln134_1_fu_1546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln134_fu_1540_p2),64));

        sext_ln135_1_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln135_fu_1595_p2),64));

        sext_ln136_1_fu_1619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln136_fu_1614_p2),64));

        sext_ln137_1_fu_1672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln137_fu_1667_p2),64));

        sext_ln138_1_fu_1691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln138_fu_1686_p2),64));

        sext_ln139_1_fu_1724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln139_fu_1719_p2),64));

        sext_ln140_1_fu_1743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln140_fu_1738_p2),64));

        sext_ln84_1_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_578),32));

        sext_ln84_2_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln84_fu_1172_p2),64));

        sext_ln84_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_578),17));

    sext_ln86_2_fu_1102_p0 <= indata_q1;
        sext_ln86_2_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln86_2_fu_1102_p0),32));

    sext_ln86_fu_1094_p0 <= indata_q1;
        sext_ln86_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln86_fu_1094_p0),17));

        sext_ln89_1_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_583),32));

        sext_ln89_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_583),17));

        sext_ln91_1_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln91_reg_2384),64));

        sext_ln93_1_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_588),32));

        sext_ln93_fu_1069_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_588),33));

        sext_ln98_1_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_4_reg_2172),17));

        sext_ln98_2_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_4_reg_2172),32));

        sext_ln98_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sl_4_reg_2172),33));

    shl_ln146_fu_1802_p2 <= std_logic_vector(shift_left(unsigned(L_ACF_q1),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    smax_1_fu_868_p3 <= 
        temp_fu_854_p3 when (icmp_ln52_fu_862_p2(0) = '1') else 
        smax_fu_156;
    sub24_cast_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_1000_p1),15));
    sub_ln67_fu_840_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(indata_q0));
    temp_fu_854_p3 <= 
        select_ln67_fu_846_p3 when (tmp_31_fu_826_p3(0) = '1') else 
        indata_q0;
        tmp22_cast_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1938_p3),64));

    tmp_26_fu_653_p3 <= smax_fu_156(15 downto 15);
    tmp_27_fu_701_p4 <= xor_ln105_fu_689_p2(31 downto 16);
    tmp_28_fu_717_p4 <= xor_ln105_fu_689_p2(31 downto 24);
    tmp_29_fu_768_p4 <= xor_ln105_fu_689_p2(31 downto 8);
    tmp_30_fu_984_p4 <= add_ln62_fu_978_p2(5 downto 2);
    tmp_31_fu_826_p3 <= indata_q0(15 downto 15);
    tmp_32_fu_1023_p3 <= k_3_fu_164(4 downto 4);
    tmp_33_fu_1766_p3 <= k_4_fu_212(4 downto 4);
    trunc_ln105_4_fu_681_p3 <= (trunc_ln105_fu_677_p1 & ap_const_lv16_0);
    trunc_ln105_fu_677_p1 <= smax_fu_156(8 - 1 downto 0);
    trunc_ln_fu_742_p4 <= xor_ln70_fu_695_p2(23 downto 16);
    xor_ln105_fu_689_p2 <= (select_ln105_fu_661_p3 xor a_assign_s_fu_639_p3);
    xor_ln107_fu_762_p2 <= (icmp_ln107_fu_647_p2 xor ap_const_lv1_1);
    xor_ln112_fu_802_p2 <= (icmp_ln112_fu_711_p2 xor ap_const_lv1_1);
    xor_ln70_fu_695_p2 <= (trunc_ln105_4_fu_681_p3 xor select_ln105_4_fu_669_p3);
    zext_ln107_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_5_fu_935_p3),6));
    zext_ln112_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitoff_q2),5));
    zext_ln113_2_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_717_p4),64));
    zext_ln113_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_5_fu_897_p2),5));
    zext_ln114_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_fu_742_p4),64));
    zext_ln129_fu_1659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_load_reg_2455),64));
    zext_ln131_fu_1450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_fu_1444_p2),64));
    zext_ln134_fu_1491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_1486_p2),64));
    zext_ln135_fu_1561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_fu_1556_p2),64));
    zext_ln136_fu_1571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_1566_p2),64));
    zext_ln137_fu_1634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_fu_1629_p2),64));
    zext_ln138_fu_1644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_fu_1639_p2),64));
    zext_ln139_fu_1701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_reg_2469),64));
    zext_ln144_fu_1774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_4_fu_212),64));
    zext_ln152_1_fu_1824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx77_fu_216),64));
    zext_ln152_fu_1793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_90_fu_1790_p1),16));
    zext_ln39_fu_1481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_1476_p2),64));
    zext_ln49_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_160),64));
    zext_ln79_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_3_fu_164),64));
end behav;
