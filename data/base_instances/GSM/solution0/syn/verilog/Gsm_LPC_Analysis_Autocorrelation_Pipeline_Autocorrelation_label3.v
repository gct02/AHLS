// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_Autocorrelation_Pipeline_Autocorrelation_label3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        L_ACF_load_8,
        add_ln126,
        add_ln125,
        add_ln124,
        add_ln123,
        add_ln122,
        add_ln121,
        add_ln120,
        add_ln119,
        indata_address0,
        indata_ce0,
        indata_q0,
        indata_address1,
        indata_ce1,
        indata_q1,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] L_ACF_load_8;
input  [63:0] add_ln126;
input  [63:0] add_ln125;
input  [63:0] add_ln124;
input  [63:0] add_ln123;
input  [63:0] add_ln122;
input  [63:0] add_ln121;
input  [63:0] add_ln120;
input  [63:0] add_ln119;
output  [7:0] indata_address0;
output   indata_ce0;
input  [15:0] indata_q0;
output  [7:0] indata_address1;
output   indata_ce1;
input  [15:0] indata_q1;
output  [63:0] p_out;
output   p_out_ap_vld;
output  [63:0] p_out1;
output   p_out1_ap_vld;
output  [63:0] p_out2;
output   p_out2_ap_vld;
output  [63:0] p_out3;
output   p_out3_ap_vld;
output  [63:0] p_out4;
output   p_out4_ap_vld;
output  [63:0] p_out5;
output   p_out5_ap_vld;
output  [63:0] p_out6;
output   p_out6_ap_vld;
output  [63:0] p_out7;
output   p_out7_ap_vld;
output  [63:0] p_out8;
output   p_out8_ap_vld;

reg ap_idle;
reg[7:0] indata_address0;
reg indata_ce0;
reg[7:0] indata_address1;
reg indata_ce1;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln129_reg_875;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_subdone;
reg   [7:0] idx_load_reg_864;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln129_fu_389_p2;
wire  signed [31:0] sext_ln132_fu_434_p1;
reg  signed [31:0] sext_ln132_reg_889;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln131_fu_412_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln39_fu_401_p1;
wire   [63:0] zext_ln134_fu_479_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln135_fu_489_p1;
wire   [63:0] zext_ln136_fu_553_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln137_fu_563_p1;
wire   [63:0] zext_ln138_fu_632_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln139_fu_637_p1;
wire   [63:0] zext_ln129_fu_663_p1;
wire    ap_block_pp0_stage4;
reg   [7:0] idx_fu_86;
wire   [7:0] add_ln139_fu_578_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_idx_load;
reg   [7:0] i_fu_90;
wire   [7:0] i_11_fu_417_p2;
reg   [7:0] ap_sig_allocacmp_i_10;
reg   [63:0] empty_fu_94;
wire   [63:0] add_ln132_fu_448_p2;
reg   [63:0] empty_81_fu_98;
wire   [63:0] add_ln133_fu_468_p2;
reg   [63:0] empty_82_fu_102;
wire   [63:0] add_ln134_1_fu_523_p2;
reg   [63:0] empty_83_fu_106;
wire   [63:0] add_ln135_1_fu_542_p2;
reg   [63:0] empty_84_fu_110;
wire   [63:0] add_ln136_1_fu_602_p2;
reg   [63:0] empty_85_fu_114;
wire   [63:0] add_ln137_1_fu_621_p2;
reg   [63:0] empty_86_fu_118;
wire   [63:0] add_ln138_1_fu_680_p2;
reg   [63:0] empty_87_fu_122;
wire   [63:0] add_ln139_1_fu_699_p2;
reg   [63:0] empty_88_fu_126;
wire   [63:0] add_ln140_fu_731_p2;
wire    ap_block_pp0_stage3_01001;
wire   [7:0] add_ln43_fu_395_p2;
wire   [7:0] add_ln131_fu_406_p2;
wire  signed [15:0] mul_ln132_fu_438_p0;
wire  signed [15:0] mul_ln132_fu_438_p1;
wire   [31:0] mul_ln132_fu_438_p2;
wire  signed [63:0] sext_ln132_1_fu_444_p1;
wire  signed [15:0] mul_ln133_fu_458_p1;
wire   [31:0] mul_ln133_fu_458_p2;
wire  signed [63:0] sext_ln133_1_fu_464_p1;
wire   [7:0] add_ln134_fu_474_p2;
wire   [7:0] add_ln135_fu_484_p2;
wire  signed [15:0] mul_ln134_fu_514_p1;
wire   [31:0] mul_ln134_fu_514_p2;
wire  signed [63:0] sext_ln134_1_fu_519_p1;
wire  signed [15:0] mul_ln135_fu_533_p1;
wire   [31:0] mul_ln135_fu_533_p2;
wire  signed [63:0] sext_ln135_1_fu_538_p1;
wire   [7:0] add_ln136_fu_548_p2;
wire   [7:0] add_ln137_fu_558_p2;
wire  signed [15:0] mul_ln136_fu_593_p1;
wire   [31:0] mul_ln136_fu_593_p2;
wire  signed [63:0] sext_ln136_1_fu_598_p1;
wire  signed [15:0] mul_ln137_fu_612_p1;
wire   [31:0] mul_ln137_fu_612_p2;
wire  signed [63:0] sext_ln137_1_fu_617_p1;
wire   [7:0] add_ln138_fu_627_p2;
wire  signed [15:0] mul_ln138_fu_671_p1;
wire   [31:0] mul_ln138_fu_671_p2;
wire  signed [63:0] sext_ln138_1_fu_676_p1;
wire  signed [15:0] mul_ln139_fu_690_p1;
wire   [31:0] mul_ln139_fu_690_p2;
wire  signed [63:0] sext_ln139_1_fu_695_p1;
wire  signed [15:0] mul_ln140_fu_722_p1;
wire   [31:0] mul_ln140_fu_722_p2;
wire  signed [63:0] sext_ln140_1_fu_727_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 idx_fu_86 = 8'd0;
#0 i_fu_90 = 8'd0;
#0 empty_fu_94 = 64'd0;
#0 empty_81_fu_98 = 64'd0;
#0 empty_82_fu_102 = 64'd0;
#0 empty_83_fu_106 = 64'd0;
#0 empty_84_fu_110 = 64'd0;
#0 empty_85_fu_114 = 64'd0;
#0 empty_86_fu_118 = 64'd0;
#0 empty_87_fu_122 = 64'd0;
#0 empty_88_fu_126 = 64'd0;
#0 ap_done_reg = 1'b0;
end

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U8(
    .din0(mul_ln132_fu_438_p0),
    .din1(mul_ln132_fu_438_p1),
    .dout(mul_ln132_fu_438_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U9(
    .din0(indata_q0),
    .din1(mul_ln133_fu_458_p1),
    .dout(mul_ln133_fu_458_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U10(
    .din0(indata_q1),
    .din1(mul_ln134_fu_514_p1),
    .dout(mul_ln134_fu_514_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U11(
    .din0(indata_q0),
    .din1(mul_ln135_fu_533_p1),
    .dout(mul_ln135_fu_533_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U12(
    .din0(indata_q1),
    .din1(mul_ln136_fu_593_p1),
    .dout(mul_ln136_fu_593_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U13(
    .din0(indata_q0),
    .din1(mul_ln137_fu_612_p1),
    .dout(mul_ln137_fu_612_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U14(
    .din0(indata_q1),
    .din1(mul_ln138_fu_671_p1),
    .dout(mul_ln138_fu_671_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U15(
    .din0(indata_q0),
    .din1(mul_ln139_fu_690_p1),
    .dout(mul_ln139_fu_690_p2)
);

Gsm_LPC_Analysis_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_16s_16s_32_1_1_U16(
    .din0(indata_q0),
    .din1(mul_ln140_fu_722_p1),
    .dout(mul_ln140_fu_722_p2)
);

Gsm_LPC_Analysis_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_81_fu_98 <= add_ln120;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_81_fu_98 <= add_ln133_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_82_fu_102 <= add_ln121;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        empty_82_fu_102 <= add_ln134_1_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_83_fu_106 <= add_ln122;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        empty_83_fu_106 <= add_ln135_1_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_84_fu_110 <= add_ln123;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        empty_84_fu_110 <= add_ln136_1_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_85_fu_114 <= add_ln124;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        empty_85_fu_114 <= add_ln137_1_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_86_fu_118 <= add_ln125;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        empty_86_fu_118 <= add_ln138_1_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_87_fu_122 <= add_ln126;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        empty_87_fu_122 <= add_ln139_1_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_88_fu_126 <= L_ACF_load_8;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            empty_88_fu_126 <= add_ln140_fu_731_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_fu_94 <= add_ln119;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_fu_94 <= add_ln132_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln129_fu_389_p2 == 1'd0))) begin
            i_fu_90 <= i_11_fu_417_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_90 <= 8'd8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        idx_fu_86 <= 8'd0;
    end else if (((icmp_ln129_reg_875 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        idx_fu_86 <= add_ln139_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln129_reg_875 <= icmp_ln129_fu_389_p2;
        idx_load_reg_864 <= ap_sig_allocacmp_idx_load;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sext_ln132_reg_889 <= sext_ln132_fu_434_p1;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_10 = 8'd8;
    end else begin
        ap_sig_allocacmp_i_10 = i_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_idx_load = 8'd0;
    end else begin
        ap_sig_allocacmp_idx_load = idx_fu_86;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            indata_address0 = zext_ln129_fu_663_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            indata_address0 = zext_ln139_fu_637_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            indata_address0 = zext_ln137_fu_563_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            indata_address0 = zext_ln135_fu_489_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indata_address0 = zext_ln39_fu_401_p1;
        end else begin
            indata_address0 = 'bx;
        end
    end else begin
        indata_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            indata_address1 = zext_ln138_fu_632_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            indata_address1 = zext_ln136_fu_553_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            indata_address1 = zext_ln134_fu_479_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indata_address1 = zext_ln131_fu_412_p1;
        end else begin
            indata_address1 = 'bx;
        end
    end else begin
        indata_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        indata_ce0 = 1'b1;
    end else begin
        indata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        indata_ce1 = 1'b1;
    end else begin
        indata_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln129_reg_875 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_fu_406_p2 = (ap_sig_allocacmp_idx_load + 8'd8);

assign add_ln132_fu_448_p2 = ($signed(sext_ln132_1_fu_444_p1) + $signed(empty_fu_94));

assign add_ln133_fu_468_p2 = ($signed(sext_ln133_1_fu_464_p1) + $signed(empty_81_fu_98));

assign add_ln134_1_fu_523_p2 = ($signed(sext_ln134_1_fu_519_p1) + $signed(empty_82_fu_102));

assign add_ln134_fu_474_p2 = (idx_load_reg_864 + 8'd6);

assign add_ln135_1_fu_542_p2 = ($signed(sext_ln135_1_fu_538_p1) + $signed(empty_83_fu_106));

assign add_ln135_fu_484_p2 = (idx_load_reg_864 + 8'd5);

assign add_ln136_1_fu_602_p2 = ($signed(sext_ln136_1_fu_598_p1) + $signed(empty_84_fu_110));

assign add_ln136_fu_548_p2 = (idx_load_reg_864 + 8'd4);

assign add_ln137_1_fu_621_p2 = ($signed(sext_ln137_1_fu_617_p1) + $signed(empty_85_fu_114));

assign add_ln137_fu_558_p2 = (idx_load_reg_864 + 8'd3);

assign add_ln138_1_fu_680_p2 = ($signed(sext_ln138_1_fu_676_p1) + $signed(empty_86_fu_118));

assign add_ln138_fu_627_p2 = (idx_load_reg_864 + 8'd2);

assign add_ln139_1_fu_699_p2 = ($signed(sext_ln139_1_fu_695_p1) + $signed(empty_87_fu_122));

assign add_ln139_fu_578_p2 = (idx_load_reg_864 + 8'd1);

assign add_ln140_fu_731_p2 = ($signed(sext_ln140_1_fu_727_p1) + $signed(empty_88_fu_126));

assign add_ln43_fu_395_p2 = (ap_sig_allocacmp_idx_load + 8'd7);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign i_11_fu_417_p2 = (ap_sig_allocacmp_i_10 + 8'd1);

assign icmp_ln129_fu_389_p2 = ((ap_sig_allocacmp_i_10 == 8'd160) ? 1'b1 : 1'b0);

assign mul_ln132_fu_438_p0 = sext_ln132_fu_434_p1;

assign mul_ln132_fu_438_p1 = sext_ln132_fu_434_p1;

assign mul_ln133_fu_458_p1 = sext_ln132_fu_434_p1;

assign mul_ln134_fu_514_p1 = sext_ln132_reg_889;

assign mul_ln135_fu_533_p1 = sext_ln132_reg_889;

assign mul_ln136_fu_593_p1 = sext_ln132_reg_889;

assign mul_ln137_fu_612_p1 = sext_ln132_reg_889;

assign mul_ln138_fu_671_p1 = sext_ln132_reg_889;

assign mul_ln139_fu_690_p1 = sext_ln132_reg_889;

assign mul_ln140_fu_722_p1 = sext_ln132_reg_889;

assign p_out = empty_88_fu_126;

assign p_out1 = empty_87_fu_122;

assign p_out2 = empty_86_fu_118;

assign p_out3 = empty_85_fu_114;

assign p_out4 = empty_84_fu_110;

assign p_out5 = empty_83_fu_106;

assign p_out6 = empty_82_fu_102;

assign p_out7 = empty_81_fu_98;

assign p_out8 = empty_fu_94;

assign sext_ln132_1_fu_444_p1 = $signed(mul_ln132_fu_438_p2);

assign sext_ln132_fu_434_p1 = $signed(indata_q1);

assign sext_ln133_1_fu_464_p1 = $signed(mul_ln133_fu_458_p2);

assign sext_ln134_1_fu_519_p1 = $signed(mul_ln134_fu_514_p2);

assign sext_ln135_1_fu_538_p1 = $signed(mul_ln135_fu_533_p2);

assign sext_ln136_1_fu_598_p1 = $signed(mul_ln136_fu_593_p2);

assign sext_ln137_1_fu_617_p1 = $signed(mul_ln137_fu_612_p2);

assign sext_ln138_1_fu_676_p1 = $signed(mul_ln138_fu_671_p2);

assign sext_ln139_1_fu_695_p1 = $signed(mul_ln139_fu_690_p2);

assign sext_ln140_1_fu_727_p1 = $signed(mul_ln140_fu_722_p2);

assign zext_ln129_fu_663_p1 = idx_load_reg_864;

assign zext_ln131_fu_412_p1 = add_ln131_fu_406_p2;

assign zext_ln134_fu_479_p1 = add_ln134_fu_474_p2;

assign zext_ln135_fu_489_p1 = add_ln135_fu_484_p2;

assign zext_ln136_fu_553_p1 = add_ln136_fu_548_p2;

assign zext_ln137_fu_563_p1 = add_ln137_fu_558_p2;

assign zext_ln138_fu_632_p1 = add_ln138_fu_627_p2;

assign zext_ln139_fu_637_p1 = add_ln139_fu_578_p2;

assign zext_ln39_fu_401_p1 = add_ln43_fu_395_p2;

endmodule //Gsm_LPC_Analysis_Autocorrelation_Pipeline_Autocorrelation_label3
