-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_Autocorrelation_Pipeline_Autocorrelation_label3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    L_ACF_load_8 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln126 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln125 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln124 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln123 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln122 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln121 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln120 : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln119 : IN STD_LOGIC_VECTOR (63 downto 0);
    indata_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce1 : OUT STD_LOGIC;
    indata_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC;
    p_out3 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out3_ap_vld : OUT STD_LOGIC;
    p_out4 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out4_ap_vld : OUT STD_LOGIC;
    p_out5 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out5_ap_vld : OUT STD_LOGIC;
    p_out6 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out6_ap_vld : OUT STD_LOGIC;
    p_out7 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out7_ap_vld : OUT STD_LOGIC;
    p_out8 : OUT STD_LOGIC_VECTOR (63 downto 0);
    p_out8_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Gsm_LPC_Analysis_Autocorrelation_Pipeline_Autocorrelation_label3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln129_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal idx_load_reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln129_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln132_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln131_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln39_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln134_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln135_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln136_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln137_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln139_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal idx_fu_86 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln139_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_90 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_11_fu_417_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_94 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln132_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_81_fu_98 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln133_fu_468_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_82_fu_102 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln134_1_fu_523_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_83_fu_106 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln135_1_fu_542_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_84_fu_110 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln136_1_fu_602_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_85_fu_114 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln137_1_fu_621_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_86_fu_118 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln138_1_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_87_fu_122 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln139_1_fu_699_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_88_fu_126 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln140_fu_731_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal add_ln43_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln131_fu_406_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln132_fu_438_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln132_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln132_1_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln133_fu_458_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln133_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln133_1_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln134_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln135_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln134_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln134_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln134_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln135_fu_533_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln135_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln135_1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln136_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln137_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln136_fu_593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln136_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln136_1_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln137_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln137_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln137_1_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln138_fu_627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln138_fu_671_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln138_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln138_1_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln139_fu_690_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln139_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln139_1_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln140_fu_722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln140_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln140_1_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Gsm_LPC_Analysis_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Gsm_LPC_Analysis_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_32_1_1_U8 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln132_fu_438_p0,
        din1 => mul_ln132_fu_438_p1,
        dout => mul_ln132_fu_438_p2);

    mul_16s_16s_32_1_1_U9 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln133_fu_458_p1,
        dout => mul_ln133_fu_458_p2);

    mul_16s_16s_32_1_1_U10 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln134_fu_514_p1,
        dout => mul_ln134_fu_514_p2);

    mul_16s_16s_32_1_1_U11 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln135_fu_533_p1,
        dout => mul_ln135_fu_533_p2);

    mul_16s_16s_32_1_1_U12 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln136_fu_593_p1,
        dout => mul_ln136_fu_593_p2);

    mul_16s_16s_32_1_1_U13 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln137_fu_612_p1,
        dout => mul_ln137_fu_612_p2);

    mul_16s_16s_32_1_1_U14 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q1,
        din1 => mul_ln138_fu_671_p1,
        dout => mul_ln138_fu_671_p2);

    mul_16s_16s_32_1_1_U15 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln139_fu_690_p1,
        dout => mul_ln139_fu_690_p2);

    mul_16s_16s_32_1_1_U16 : component Gsm_LPC_Analysis_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => indata_q0,
        din1 => mul_ln140_fu_722_p1,
        dout => mul_ln140_fu_722_p2);

    flow_control_loop_pipe_sequential_init_U : component Gsm_LPC_Analysis_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    empty_81_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_81_fu_98 <= add_ln120;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                empty_81_fu_98 <= add_ln133_fu_468_p2;
            end if; 
        end if;
    end process;

    empty_82_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_82_fu_102 <= add_ln121;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                empty_82_fu_102 <= add_ln134_1_fu_523_p2;
            end if; 
        end if;
    end process;

    empty_83_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_83_fu_106 <= add_ln122;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                empty_83_fu_106 <= add_ln135_1_fu_542_p2;
            end if; 
        end if;
    end process;

    empty_84_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_84_fu_110 <= add_ln123;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                empty_84_fu_110 <= add_ln136_1_fu_602_p2;
            end if; 
        end if;
    end process;

    empty_85_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_85_fu_114 <= add_ln124;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                empty_85_fu_114 <= add_ln137_1_fu_621_p2;
            end if; 
        end if;
    end process;

    empty_86_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_86_fu_118 <= add_ln125;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                empty_86_fu_118 <= add_ln138_1_fu_680_p2;
            end if; 
        end if;
    end process;

    empty_87_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_87_fu_122 <= add_ln126;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                empty_87_fu_122 <= add_ln139_1_fu_699_p2;
            end if; 
        end if;
    end process;

    empty_88_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_88_fu_126 <= L_ACF_load_8;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    empty_88_fu_126 <= add_ln140_fu_731_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                empty_fu_94 <= add_ln119;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                empty_fu_94 <= add_ln132_fu_448_p2;
            end if; 
        end if;
    end process;

    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln129_fu_389_p2 = ap_const_lv1_0))) then 
                    i_fu_90 <= i_11_fu_417_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv8_8;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                idx_fu_86 <= ap_const_lv8_0;
            elsif (((icmp_ln129_reg_875 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                idx_fu_86 <= add_ln139_fu_578_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln129_reg_875 <= icmp_ln129_fu_389_p2;
                idx_load_reg_864 <= ap_sig_allocacmp_idx_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                sext_ln132_reg_889 <= sext_ln132_fu_434_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter0_stage3, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln131_fu_406_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx_load) + unsigned(ap_const_lv8_8));
    add_ln132_fu_448_p2 <= std_logic_vector(signed(sext_ln132_1_fu_444_p1) + signed(empty_fu_94));
    add_ln133_fu_468_p2 <= std_logic_vector(signed(sext_ln133_1_fu_464_p1) + signed(empty_81_fu_98));
    add_ln134_1_fu_523_p2 <= std_logic_vector(signed(sext_ln134_1_fu_519_p1) + signed(empty_82_fu_102));
    add_ln134_fu_474_p2 <= std_logic_vector(unsigned(idx_load_reg_864) + unsigned(ap_const_lv8_6));
    add_ln135_1_fu_542_p2 <= std_logic_vector(signed(sext_ln135_1_fu_538_p1) + signed(empty_83_fu_106));
    add_ln135_fu_484_p2 <= std_logic_vector(unsigned(idx_load_reg_864) + unsigned(ap_const_lv8_5));
    add_ln136_1_fu_602_p2 <= std_logic_vector(signed(sext_ln136_1_fu_598_p1) + signed(empty_84_fu_110));
    add_ln136_fu_548_p2 <= std_logic_vector(unsigned(idx_load_reg_864) + unsigned(ap_const_lv8_4));
    add_ln137_1_fu_621_p2 <= std_logic_vector(signed(sext_ln137_1_fu_617_p1) + signed(empty_85_fu_114));
    add_ln137_fu_558_p2 <= std_logic_vector(unsigned(idx_load_reg_864) + unsigned(ap_const_lv8_3));
    add_ln138_1_fu_680_p2 <= std_logic_vector(signed(sext_ln138_1_fu_676_p1) + signed(empty_86_fu_118));
    add_ln138_fu_627_p2 <= std_logic_vector(unsigned(idx_load_reg_864) + unsigned(ap_const_lv8_2));
    add_ln139_1_fu_699_p2 <= std_logic_vector(signed(sext_ln139_1_fu_695_p1) + signed(empty_87_fu_122));
    add_ln139_fu_578_p2 <= std_logic_vector(unsigned(idx_load_reg_864) + unsigned(ap_const_lv8_1));
    add_ln140_fu_731_p2 <= std_logic_vector(signed(sext_ln140_1_fu_727_p1) + signed(empty_88_fu_126));
    add_ln43_fu_395_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx_load) + unsigned(ap_const_lv8_7));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln129_reg_875)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_10 <= ap_const_lv8_8;
        else 
            ap_sig_allocacmp_i_10 <= i_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_idx_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, idx_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_idx_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_idx_load <= idx_fu_86;
        end if; 
    end process;

    i_11_fu_417_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_10) + unsigned(ap_const_lv8_1));
    icmp_ln129_fu_389_p2 <= "1" when (ap_sig_allocacmp_i_10 = ap_const_lv8_A0) else "0";

    indata_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln39_fu_401_p1, ap_block_pp0_stage1, zext_ln135_fu_489_p1, ap_block_pp0_stage2, zext_ln137_fu_563_p1, ap_block_pp0_stage3, zext_ln139_fu_637_p1, zext_ln129_fu_663_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                indata_address0 <= zext_ln129_fu_663_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                indata_address0 <= zext_ln139_fu_637_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                indata_address0 <= zext_ln137_fu_563_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indata_address0 <= zext_ln135_fu_489_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indata_address0 <= zext_ln39_fu_401_p1(8 - 1 downto 0);
            else 
                indata_address0 <= "XXXXXXXX";
            end if;
        else 
            indata_address0 <= "XXXXXXXX";
        end if; 
    end process;


    indata_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln131_fu_412_p1, ap_block_pp0_stage0, zext_ln134_fu_479_p1, ap_block_pp0_stage1, zext_ln136_fu_553_p1, ap_block_pp0_stage2, zext_ln138_fu_632_p1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                indata_address1 <= zext_ln138_fu_632_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                indata_address1 <= zext_ln136_fu_553_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indata_address1 <= zext_ln134_fu_479_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indata_address1 <= zext_ln131_fu_412_p1(8 - 1 downto 0);
            else 
                indata_address1 <= "XXXXXXXX";
            end if;
        else 
            indata_address1 <= "XXXXXXXX";
        end if; 
    end process;


    indata_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            indata_ce0 <= ap_const_logic_1;
        else 
            indata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            indata_ce1 <= ap_const_logic_1;
        else 
            indata_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln132_fu_438_p0 <= sext_ln132_fu_434_p1(16 - 1 downto 0);
    mul_ln132_fu_438_p1 <= sext_ln132_fu_434_p1(16 - 1 downto 0);
    mul_ln133_fu_458_p1 <= sext_ln132_fu_434_p1(16 - 1 downto 0);
    mul_ln134_fu_514_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    mul_ln135_fu_533_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    mul_ln136_fu_593_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    mul_ln137_fu_612_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    mul_ln138_fu_671_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    mul_ln139_fu_690_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    mul_ln140_fu_722_p1 <= sext_ln132_reg_889(16 - 1 downto 0);
    p_out <= empty_88_fu_126;
    p_out1 <= empty_87_fu_122;

    p_out1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= empty_86_fu_118;

    p_out2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out3 <= empty_85_fu_114;

    p_out3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out3_ap_vld <= ap_const_logic_1;
        else 
            p_out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out4 <= empty_84_fu_110;

    p_out4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out4_ap_vld <= ap_const_logic_1;
        else 
            p_out4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out5 <= empty_83_fu_106;

    p_out5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out5_ap_vld <= ap_const_logic_1;
        else 
            p_out5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out6 <= empty_82_fu_102;

    p_out6_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out6_ap_vld <= ap_const_logic_1;
        else 
            p_out6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out7 <= empty_81_fu_98;

    p_out7_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out7_ap_vld <= ap_const_logic_1;
        else 
            p_out7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out8 <= empty_fu_94;

    p_out8_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out8_ap_vld <= ap_const_logic_1;
        else 
            p_out8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln129_reg_875, ap_block_pp0_stage3_11001)
    begin
        if (((icmp_ln129_reg_875 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln132_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln132_fu_438_p2),64));

        sext_ln132_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indata_q1),32));

        sext_ln133_1_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln133_fu_458_p2),64));

        sext_ln134_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln134_fu_514_p2),64));

        sext_ln135_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln135_fu_533_p2),64));

        sext_ln136_1_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln136_fu_593_p2),64));

        sext_ln137_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln137_fu_612_p2),64));

        sext_ln138_1_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln138_fu_671_p2),64));

        sext_ln139_1_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln139_fu_690_p2),64));

        sext_ln140_1_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln140_fu_722_p2),64));

    zext_ln129_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_load_reg_864),64));
    zext_ln131_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln131_fu_406_p2),64));
    zext_ln134_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln134_fu_474_p2),64));
    zext_ln135_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln135_fu_484_p2),64));
    zext_ln136_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln136_fu_548_p2),64));
    zext_ln137_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln137_fu_558_p2),64));
    zext_ln138_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_fu_627_p2),64));
    zext_ln139_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln139_fu_578_p2),64));
    zext_ln39_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_fu_395_p2),64));
end behav;
