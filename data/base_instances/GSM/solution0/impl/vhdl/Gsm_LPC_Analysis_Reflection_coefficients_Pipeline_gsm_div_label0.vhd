-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis_Reflection_coefficients_Pipeline_gsm_div_label0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln120 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln126 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln121_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    div_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    div_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Gsm_LPC_Analysis_Reflection_coefficients_Pipeline_gsm_div_label0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv63_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln138_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sext_ln121_1_cast_fu_87_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln121_1_cast_reg_236 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln126_cast_fu_91_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln126_cast_reg_241 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_fu_50 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal trunc_ln144_fu_176_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal L_num_fu_54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal L_num_4_fu_180_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln120_cast_fu_95_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal k_fu_58 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal k_3_fu_188_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal div_6_fu_167_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal L_num_2_fu_131_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln144_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln120_fu_139_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal div_1_fu_123_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln144_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal div_5_fu_161_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_num_3_fu_156_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Gsm_LPC_Analysis_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Gsm_LPC_Analysis_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    L_num_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    L_num_fu_54 <= sext_ln120_cast_fu_95_p1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    L_num_fu_54 <= L_num_4_fu_180_p3;
                end if;
            end if; 
        end if;
    end process;

    div_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    div_fu_50 <= ap_const_lv15_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    div_fu_50 <= trunc_ln144_fu_176_p1;
                end if;
            end if; 
        end if;
    end process;

    k_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_58 <= ap_const_lv4_E;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_58 <= k_3_fu_188_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sext_ln121_1_cast_reg_236 <= sext_ln121_1_cast_fu_87_p1;
                sext_ln126_cast_reg_241 <= sext_ln126_cast_fu_91_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    L_num_2_fu_131_p3 <= (L_num_fu_54 & ap_const_lv1_0);
    L_num_3_fu_156_p2 <= std_logic_vector(unsigned(shl_ln120_fu_139_p2) - unsigned(sext_ln121_1_cast_reg_236));
    L_num_4_fu_180_p3 <= 
        L_num_3_fu_156_p2 when (xor_ln144_fu_150_p2(0) = '1') else 
        shl_ln120_fu_139_p2;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln138_fu_194_p2)
    begin
        if (((icmp_ln138_fu_194_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    div_1_fu_123_p3 <= (div_fu_50 & ap_const_lv1_0);
    div_3_out <= div_6_fu_167_p3;

    div_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln138_fu_194_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln138_fu_194_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            div_3_out_ap_vld <= ap_const_logic_1;
        else 
            div_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    div_5_fu_161_p2 <= (div_1_fu_123_p3 or ap_const_lv16_1);
    div_6_fu_167_p3 <= 
        div_5_fu_161_p2 when (xor_ln144_fu_150_p2(0) = '1') else 
        div_1_fu_123_p3;
    icmp_ln138_fu_194_p2 <= "1" when (k_fu_58 = ap_const_lv4_0) else "0";
    icmp_ln144_fu_145_p2 <= "1" when (signed(L_num_2_fu_131_p3) < signed(sext_ln126_cast_reg_241)) else "0";
    k_3_fu_188_p2 <= std_logic_vector(unsigned(k_fu_58) + unsigned(ap_const_lv4_F));
        sext_ln120_cast_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln120),63));

        sext_ln121_1_cast_fu_87_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln121_1),63));

        sext_ln126_cast_fu_91_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln126),64));

    shl_ln120_fu_139_p2 <= std_logic_vector(shift_left(unsigned(L_num_fu_54),to_integer(unsigned('0' & ap_const_lv63_1(31-1 downto 0)))));
    trunc_ln144_fu_176_p1 <= div_6_fu_167_p3(15 - 1 downto 0);
    xor_ln144_fu_150_p2 <= (icmp_ln144_fu_145_p2 xor ap_const_lv1_1);
end behav;
