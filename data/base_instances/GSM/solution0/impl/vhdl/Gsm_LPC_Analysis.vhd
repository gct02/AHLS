-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Gsm_LPC_Analysis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_we0 : OUT STD_LOGIC;
    indata_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    indata_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    indata_ce1 : OUT STD_LOGIC;
    indata_we1 : OUT STD_LOGIC;
    indata_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    indata_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    LARc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    LARc_ce0 : OUT STD_LOGIC;
    LARc_we0 : OUT STD_LOGIC;
    LARc_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    LARc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    LARc_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    LARc_ce1 : OUT STD_LOGIC;
    LARc_we1 : OUT STD_LOGIC;
    LARc_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    LARc_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of Gsm_LPC_Analysis is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Gsm_LPC_Analysis_Gsm_LPC_Analysis,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.672063,HLS_SYN_LAT=1691,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2514,HLS_SYN_LUT=7727,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bitoff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitoff_ce0 : STD_LOGIC;
    signal bitoff_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitoff_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitoff_ce1 : STD_LOGIC;
    signal bitoff_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitoff_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitoff_ce2 : STD_LOGIC;
    signal bitoff_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitoff_ce3 : STD_LOGIC;
    signal bitoff_q3 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_ACF_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_ACF_ce0 : STD_LOGIC;
    signal L_ACF_we0 : STD_LOGIC;
    signal L_ACF_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_ACF_ce1 : STD_LOGIC;
    signal L_ACF_we1 : STD_LOGIC;
    signal L_ACF_q1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Autocorrelation_fu_40_ap_start : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_ap_done : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_ap_idle : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_ap_ready : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_indata_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_fu_40_indata_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_indata_we0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_indata_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Autocorrelation_fu_40_indata_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_fu_40_indata_ce1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_indata_we1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_indata_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Autocorrelation_fu_40_L_ACF_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Autocorrelation_fu_40_L_ACF_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_L_ACF_we0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_L_ACF_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Autocorrelation_fu_40_L_ACF_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Autocorrelation_fu_40_L_ACF_ce1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_L_ACF_we1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_L_ACF_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Autocorrelation_fu_40_bitoff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_fu_40_bitoff_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_bitoff_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_fu_40_bitoff_ce1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_40_bitoff_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Autocorrelation_fu_40_bitoff_ce2 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_ap_start : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_ap_done : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_ap_idle : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_ap_ready : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_L_ACF_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Reflection_coefficients_fu_50_L_ACF_ce0 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_LARc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Reflection_coefficients_fu_50_LARc_ce0 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_LARc_we0 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_LARc_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Reflection_coefficients_fu_50_bitoff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Reflection_coefficients_fu_50_bitoff_ce0 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_bitoff_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Reflection_coefficients_fu_50_bitoff_ce1 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_bitoff_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Reflection_coefficients_fu_50_bitoff_ce2 : STD_LOGIC;
    signal grp_Reflection_coefficients_fu_50_bitoff_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Reflection_coefficients_fu_50_bitoff_ce3 : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_ap_done : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_ap_idle : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_ap_ready : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_ce0 : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_we0 : STD_LOGIC;
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Quantization_and_coding_fu_65_ap_start : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_ap_done : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_ap_idle : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_ap_ready : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_LARc_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Quantization_and_coding_fu_65_LARc_ce0 : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_LARc_we0 : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_LARc_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Quantization_and_coding_fu_65_LARc_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Quantization_and_coding_fu_65_LARc_ce1 : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_LARc_we1 : STD_LOGIC;
    signal grp_Quantization_and_coding_fu_65_LARc_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_Autocorrelation_fu_40_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_Reflection_coefficients_fu_50_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_Quantization_and_coding_fu_65_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Gsm_LPC_Analysis_Autocorrelation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indata_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        indata_ce0 : OUT STD_LOGIC;
        indata_we0 : OUT STD_LOGIC;
        indata_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        indata_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        indata_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        indata_ce1 : OUT STD_LOGIC;
        indata_we1 : OUT STD_LOGIC;
        indata_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        indata_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        L_ACF_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_ACF_ce0 : OUT STD_LOGIC;
        L_ACF_we0 : OUT STD_LOGIC;
        L_ACF_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        L_ACF_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        L_ACF_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_ACF_ce1 : OUT STD_LOGIC;
        L_ACF_we1 : OUT STD_LOGIC;
        L_ACF_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        L_ACF_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bitoff_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce0 : OUT STD_LOGIC;
        bitoff_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        bitoff_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce1 : OUT STD_LOGIC;
        bitoff_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
        bitoff_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce2 : OUT STD_LOGIC;
        bitoff_q2 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Gsm_LPC_Analysis_Reflection_coefficients IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        L_ACF_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_ACF_ce0 : OUT STD_LOGIC;
        L_ACF_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        LARc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        LARc_ce0 : OUT STD_LOGIC;
        LARc_we0 : OUT STD_LOGIC;
        LARc_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        bitoff_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce0 : OUT STD_LOGIC;
        bitoff_q0 : IN STD_LOGIC_VECTOR (3 downto 0);
        bitoff_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce1 : OUT STD_LOGIC;
        bitoff_q1 : IN STD_LOGIC_VECTOR (3 downto 0);
        bitoff_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce2 : OUT STD_LOGIC;
        bitoff_q2 : IN STD_LOGIC_VECTOR (3 downto 0);
        bitoff_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bitoff_ce3 : OUT STD_LOGIC;
        bitoff_q3 : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Gsm_LPC_Analysis_Transformation_to_Log_Area_Ratios IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LARc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        LARc_ce0 : OUT STD_LOGIC;
        LARc_we0 : OUT STD_LOGIC;
        LARc_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        LARc_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Gsm_LPC_Analysis_Quantization_and_coding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        LARc_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        LARc_ce0 : OUT STD_LOGIC;
        LARc_we0 : OUT STD_LOGIC;
        LARc_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        LARc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        LARc_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        LARc_ce1 : OUT STD_LOGIC;
        LARc_we1 : OUT STD_LOGIC;
        LARc_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        LARc_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Gsm_LPC_Analysis_bitoff_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component Gsm_LPC_Analysis_L_ACF_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    bitoff_U : component Gsm_LPC_Analysis_bitoff_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bitoff_address0,
        ce0 => bitoff_ce0,
        q0 => bitoff_q0,
        address1 => bitoff_address1,
        ce1 => bitoff_ce1,
        q1 => bitoff_q1,
        address2 => bitoff_address2,
        ce2 => bitoff_ce2,
        q2 => bitoff_q2,
        address3 => grp_Reflection_coefficients_fu_50_bitoff_address3,
        ce3 => bitoff_ce3,
        q3 => bitoff_q3);

    L_ACF_U : component Gsm_LPC_Analysis_L_ACF_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L_ACF_address0,
        ce0 => L_ACF_ce0,
        we0 => L_ACF_we0,
        d0 => grp_Autocorrelation_fu_40_L_ACF_d0,
        q0 => L_ACF_q0,
        address1 => grp_Autocorrelation_fu_40_L_ACF_address1,
        ce1 => L_ACF_ce1,
        we1 => L_ACF_we1,
        d1 => grp_Autocorrelation_fu_40_L_ACF_d1,
        q1 => L_ACF_q1);

    grp_Autocorrelation_fu_40 : component Gsm_LPC_Analysis_Autocorrelation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Autocorrelation_fu_40_ap_start,
        ap_done => grp_Autocorrelation_fu_40_ap_done,
        ap_idle => grp_Autocorrelation_fu_40_ap_idle,
        ap_ready => grp_Autocorrelation_fu_40_ap_ready,
        indata_address0 => grp_Autocorrelation_fu_40_indata_address0,
        indata_ce0 => grp_Autocorrelation_fu_40_indata_ce0,
        indata_we0 => grp_Autocorrelation_fu_40_indata_we0,
        indata_d0 => grp_Autocorrelation_fu_40_indata_d0,
        indata_q0 => indata_q0,
        indata_address1 => grp_Autocorrelation_fu_40_indata_address1,
        indata_ce1 => grp_Autocorrelation_fu_40_indata_ce1,
        indata_we1 => grp_Autocorrelation_fu_40_indata_we1,
        indata_d1 => grp_Autocorrelation_fu_40_indata_d1,
        indata_q1 => indata_q1,
        L_ACF_address0 => grp_Autocorrelation_fu_40_L_ACF_address0,
        L_ACF_ce0 => grp_Autocorrelation_fu_40_L_ACF_ce0,
        L_ACF_we0 => grp_Autocorrelation_fu_40_L_ACF_we0,
        L_ACF_d0 => grp_Autocorrelation_fu_40_L_ACF_d0,
        L_ACF_q0 => L_ACF_q0,
        L_ACF_address1 => grp_Autocorrelation_fu_40_L_ACF_address1,
        L_ACF_ce1 => grp_Autocorrelation_fu_40_L_ACF_ce1,
        L_ACF_we1 => grp_Autocorrelation_fu_40_L_ACF_we1,
        L_ACF_d1 => grp_Autocorrelation_fu_40_L_ACF_d1,
        L_ACF_q1 => L_ACF_q1,
        bitoff_address0 => grp_Autocorrelation_fu_40_bitoff_address0,
        bitoff_ce0 => grp_Autocorrelation_fu_40_bitoff_ce0,
        bitoff_q0 => bitoff_q0,
        bitoff_address1 => grp_Autocorrelation_fu_40_bitoff_address1,
        bitoff_ce1 => grp_Autocorrelation_fu_40_bitoff_ce1,
        bitoff_q1 => bitoff_q1,
        bitoff_address2 => grp_Autocorrelation_fu_40_bitoff_address2,
        bitoff_ce2 => grp_Autocorrelation_fu_40_bitoff_ce2,
        bitoff_q2 => bitoff_q2);

    grp_Reflection_coefficients_fu_50 : component Gsm_LPC_Analysis_Reflection_coefficients
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Reflection_coefficients_fu_50_ap_start,
        ap_done => grp_Reflection_coefficients_fu_50_ap_done,
        ap_idle => grp_Reflection_coefficients_fu_50_ap_idle,
        ap_ready => grp_Reflection_coefficients_fu_50_ap_ready,
        L_ACF_address0 => grp_Reflection_coefficients_fu_50_L_ACF_address0,
        L_ACF_ce0 => grp_Reflection_coefficients_fu_50_L_ACF_ce0,
        L_ACF_q0 => L_ACF_q0,
        LARc_address0 => grp_Reflection_coefficients_fu_50_LARc_address0,
        LARc_ce0 => grp_Reflection_coefficients_fu_50_LARc_ce0,
        LARc_we0 => grp_Reflection_coefficients_fu_50_LARc_we0,
        LARc_d0 => grp_Reflection_coefficients_fu_50_LARc_d0,
        bitoff_address0 => grp_Reflection_coefficients_fu_50_bitoff_address0,
        bitoff_ce0 => grp_Reflection_coefficients_fu_50_bitoff_ce0,
        bitoff_q0 => bitoff_q0,
        bitoff_address1 => grp_Reflection_coefficients_fu_50_bitoff_address1,
        bitoff_ce1 => grp_Reflection_coefficients_fu_50_bitoff_ce1,
        bitoff_q1 => bitoff_q1,
        bitoff_address2 => grp_Reflection_coefficients_fu_50_bitoff_address2,
        bitoff_ce2 => grp_Reflection_coefficients_fu_50_bitoff_ce2,
        bitoff_q2 => bitoff_q2,
        bitoff_address3 => grp_Reflection_coefficients_fu_50_bitoff_address3,
        bitoff_ce3 => grp_Reflection_coefficients_fu_50_bitoff_ce3,
        bitoff_q3 => bitoff_q3);

    grp_Transformation_to_Log_Area_Ratios_fu_59 : component Gsm_LPC_Analysis_Transformation_to_Log_Area_Ratios
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start,
        ap_done => grp_Transformation_to_Log_Area_Ratios_fu_59_ap_done,
        ap_idle => grp_Transformation_to_Log_Area_Ratios_fu_59_ap_idle,
        ap_ready => grp_Transformation_to_Log_Area_Ratios_fu_59_ap_ready,
        LARc_address0 => grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_address0,
        LARc_ce0 => grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_ce0,
        LARc_we0 => grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_we0,
        LARc_d0 => grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_d0,
        LARc_q0 => LARc_q0);

    grp_Quantization_and_coding_fu_65 : component Gsm_LPC_Analysis_Quantization_and_coding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Quantization_and_coding_fu_65_ap_start,
        ap_done => grp_Quantization_and_coding_fu_65_ap_done,
        ap_idle => grp_Quantization_and_coding_fu_65_ap_idle,
        ap_ready => grp_Quantization_and_coding_fu_65_ap_ready,
        LARc_address0 => grp_Quantization_and_coding_fu_65_LARc_address0,
        LARc_ce0 => grp_Quantization_and_coding_fu_65_LARc_ce0,
        LARc_we0 => grp_Quantization_and_coding_fu_65_LARc_we0,
        LARc_d0 => grp_Quantization_and_coding_fu_65_LARc_d0,
        LARc_q0 => LARc_q0,
        LARc_address1 => grp_Quantization_and_coding_fu_65_LARc_address1,
        LARc_ce1 => grp_Quantization_and_coding_fu_65_LARc_ce1,
        LARc_we1 => grp_Quantization_and_coding_fu_65_LARc_we1,
        LARc_d1 => grp_Quantization_and_coding_fu_65_LARc_d1,
        LARc_q1 => LARc_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Autocorrelation_fu_40_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Autocorrelation_fu_40_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_Autocorrelation_fu_40_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Autocorrelation_fu_40_ap_ready = ap_const_logic_1)) then 
                    grp_Autocorrelation_fu_40_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Quantization_and_coding_fu_65_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Quantization_and_coding_fu_65_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_Quantization_and_coding_fu_65_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Quantization_and_coding_fu_65_ap_ready = ap_const_logic_1)) then 
                    grp_Quantization_and_coding_fu_65_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Reflection_coefficients_fu_50_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Reflection_coefficients_fu_50_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Reflection_coefficients_fu_50_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Reflection_coefficients_fu_50_ap_ready = ap_const_logic_1)) then 
                    grp_Reflection_coefficients_fu_50_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Transformation_to_Log_Area_Ratios_fu_59_ap_ready = ap_const_logic_1)) then 
                    grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_Autocorrelation_fu_40_ap_done, grp_Reflection_coefficients_fu_50_ap_done, grp_Transformation_to_Log_Area_Ratios_fu_59_ap_done, grp_Quantization_and_coding_fu_65_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_Autocorrelation_fu_40_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_Reflection_coefficients_fu_50_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_Transformation_to_Log_Area_Ratios_fu_59_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_Quantization_and_coding_fu_65_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    LARc_address0_assign_proc : process(grp_Reflection_coefficients_fu_50_LARc_address0, grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_address0, grp_Quantization_and_coding_fu_65_LARc_address0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_address0 <= grp_Quantization_and_coding_fu_65_LARc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_address0 <= grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LARc_address0 <= grp_Reflection_coefficients_fu_50_LARc_address0;
        else 
            LARc_address0 <= "XXX";
        end if; 
    end process;

    LARc_address1 <= grp_Quantization_and_coding_fu_65_LARc_address1;

    LARc_ce0_assign_proc : process(grp_Reflection_coefficients_fu_50_LARc_ce0, grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_ce0, grp_Quantization_and_coding_fu_65_LARc_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_ce0 <= grp_Quantization_and_coding_fu_65_LARc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_ce0 <= grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LARc_ce0 <= grp_Reflection_coefficients_fu_50_LARc_ce0;
        else 
            LARc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LARc_ce1_assign_proc : process(grp_Quantization_and_coding_fu_65_LARc_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_ce1 <= grp_Quantization_and_coding_fu_65_LARc_ce1;
        else 
            LARc_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LARc_d0_assign_proc : process(grp_Reflection_coefficients_fu_50_LARc_d0, grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_d0, grp_Quantization_and_coding_fu_65_LARc_d0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_d0 <= grp_Quantization_and_coding_fu_65_LARc_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_d0 <= grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LARc_d0 <= grp_Reflection_coefficients_fu_50_LARc_d0;
        else 
            LARc_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    LARc_d1 <= grp_Quantization_and_coding_fu_65_LARc_d1;

    LARc_we0_assign_proc : process(grp_Reflection_coefficients_fu_50_LARc_we0, grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_we0, grp_Quantization_and_coding_fu_65_LARc_we0, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_we0 <= grp_Quantization_and_coding_fu_65_LARc_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            LARc_we0 <= grp_Transformation_to_Log_Area_Ratios_fu_59_LARc_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            LARc_we0 <= grp_Reflection_coefficients_fu_50_LARc_we0;
        else 
            LARc_we0 <= ap_const_logic_0;
        end if; 
    end process;


    LARc_we1_assign_proc : process(grp_Quantization_and_coding_fu_65_LARc_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            LARc_we1 <= grp_Quantization_and_coding_fu_65_LARc_we1;
        else 
            LARc_we1 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_address0_assign_proc : process(grp_Autocorrelation_fu_40_L_ACF_address0, grp_Reflection_coefficients_fu_50_L_ACF_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_ACF_address0 <= grp_Reflection_coefficients_fu_50_L_ACF_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_ACF_address0 <= grp_Autocorrelation_fu_40_L_ACF_address0;
        else 
            L_ACF_address0 <= "XXXX";
        end if; 
    end process;


    L_ACF_ce0_assign_proc : process(grp_Autocorrelation_fu_40_L_ACF_ce0, grp_Reflection_coefficients_fu_50_L_ACF_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            L_ACF_ce0 <= grp_Reflection_coefficients_fu_50_L_ACF_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_ACF_ce0 <= grp_Autocorrelation_fu_40_L_ACF_ce0;
        else 
            L_ACF_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_ce1_assign_proc : process(grp_Autocorrelation_fu_40_L_ACF_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_ACF_ce1 <= grp_Autocorrelation_fu_40_L_ACF_ce1;
        else 
            L_ACF_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_we0_assign_proc : process(grp_Autocorrelation_fu_40_L_ACF_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_ACF_we0 <= grp_Autocorrelation_fu_40_L_ACF_we0;
        else 
            L_ACF_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_ACF_we1_assign_proc : process(grp_Autocorrelation_fu_40_L_ACF_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            L_ACF_we1 <= grp_Autocorrelation_fu_40_L_ACF_we1;
        else 
            L_ACF_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_Autocorrelation_fu_40_ap_done)
    begin
        if ((grp_Autocorrelation_fu_40_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_Reflection_coefficients_fu_50_ap_done)
    begin
        if ((grp_Reflection_coefficients_fu_50_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_Transformation_to_Log_Area_Ratios_fu_59_ap_done)
    begin
        if ((grp_Transformation_to_Log_Area_Ratios_fu_59_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_Quantization_and_coding_fu_65_ap_done)
    begin
        if ((grp_Quantization_and_coding_fu_65_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_Quantization_and_coding_fu_65_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_Quantization_and_coding_fu_65_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_Quantization_and_coding_fu_65_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_Quantization_and_coding_fu_65_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_address0_assign_proc : process(grp_Autocorrelation_fu_40_bitoff_address0, grp_Reflection_coefficients_fu_50_bitoff_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_address0 <= grp_Reflection_coefficients_fu_50_bitoff_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_address0 <= grp_Autocorrelation_fu_40_bitoff_address0;
        else 
            bitoff_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bitoff_address1_assign_proc : process(grp_Autocorrelation_fu_40_bitoff_address1, grp_Reflection_coefficients_fu_50_bitoff_address1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_address1 <= grp_Reflection_coefficients_fu_50_bitoff_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_address1 <= grp_Autocorrelation_fu_40_bitoff_address1;
        else 
            bitoff_address1 <= "XXXXXXXX";
        end if; 
    end process;


    bitoff_address2_assign_proc : process(grp_Autocorrelation_fu_40_bitoff_address2, grp_Reflection_coefficients_fu_50_bitoff_address2, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_address2 <= grp_Reflection_coefficients_fu_50_bitoff_address2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_address2 <= grp_Autocorrelation_fu_40_bitoff_address2;
        else 
            bitoff_address2 <= "XXXXXXXX";
        end if; 
    end process;


    bitoff_ce0_assign_proc : process(grp_Autocorrelation_fu_40_bitoff_ce0, grp_Reflection_coefficients_fu_50_bitoff_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce0 <= grp_Reflection_coefficients_fu_50_bitoff_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce0 <= grp_Autocorrelation_fu_40_bitoff_ce0;
        else 
            bitoff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce1_assign_proc : process(grp_Autocorrelation_fu_40_bitoff_ce1, grp_Reflection_coefficients_fu_50_bitoff_ce1, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce1 <= grp_Reflection_coefficients_fu_50_bitoff_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce1 <= grp_Autocorrelation_fu_40_bitoff_ce1;
        else 
            bitoff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce2_assign_proc : process(grp_Autocorrelation_fu_40_bitoff_ce2, grp_Reflection_coefficients_fu_50_bitoff_ce2, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce2 <= grp_Reflection_coefficients_fu_50_bitoff_ce2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bitoff_ce2 <= grp_Autocorrelation_fu_40_bitoff_ce2;
        else 
            bitoff_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce3_assign_proc : process(grp_Reflection_coefficients_fu_50_bitoff_ce3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce3 <= grp_Reflection_coefficients_fu_50_bitoff_ce3;
        else 
            bitoff_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Autocorrelation_fu_40_ap_start <= grp_Autocorrelation_fu_40_ap_start_reg;
    grp_Quantization_and_coding_fu_65_ap_start <= grp_Quantization_and_coding_fu_65_ap_start_reg;
    grp_Reflection_coefficients_fu_50_ap_start <= grp_Reflection_coefficients_fu_50_ap_start_reg;
    grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start <= grp_Transformation_to_Log_Area_Ratios_fu_59_ap_start_reg;
    indata_address0 <= grp_Autocorrelation_fu_40_indata_address0;
    indata_address1 <= grp_Autocorrelation_fu_40_indata_address1;
    indata_ce0 <= grp_Autocorrelation_fu_40_indata_ce0;
    indata_ce1 <= grp_Autocorrelation_fu_40_indata_ce1;
    indata_d0 <= grp_Autocorrelation_fu_40_indata_d0;
    indata_d1 <= grp_Autocorrelation_fu_40_indata_d1;
    indata_we0 <= grp_Autocorrelation_fu_40_indata_we0;
    indata_we1 <= grp_Autocorrelation_fu_40_indata_we1;
end behav;
