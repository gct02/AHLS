// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_Transformation_to_Log_Area_Ratios (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        LARc_address0,
        LARc_ce0,
        LARc_we0,
        LARc_d0,
        LARc_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] LARc_address0;
output   LARc_ce0;
output   LARc_we0;
output  [15:0] LARc_d0;
input  [15:0] LARc_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] LARc_address0;
reg LARc_ce0;
reg LARc_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] LARc_addr_reg_266;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln248_fu_105_p1;
wire   [0:0] icmp_ln248_fu_93_p2;
reg   [3:0] idx_fu_56;
wire   [3:0] add_ln248_fu_99_p2;
reg   [3:0] i_fu_60;
wire   [3:0] i_3_fu_110_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln67_fu_134_p2;
wire   [15:0] sub_ln67_fu_140_p2;
wire   [0:0] tmp_fu_126_p3;
wire   [15:0] select_ln67_fu_146_p3;
wire   [15:0] temp_fu_154_p3;
wire   [14:0] temp_2_fu_168_p4;
wire   [15:0] shl_ln259_fu_194_p2;
wire   [0:0] icmp_ln253_fu_162_p2;
wire  signed [15:0] sext_ln254_fu_178_p1;
wire   [15:0] temp_4_fu_200_p2;
wire   [0:0] icmp_ln255_fu_182_p2;
wire   [0:0] xor_ln253_fu_214_p2;
wire   [0:0] and_ln255_fu_220_p2;
wire   [15:0] temp_3_fu_188_p2;
wire   [15:0] temp_5_fu_206_p3;
wire   [15:0] temp_6_fu_226_p3;
wire   [15:0] sub_ln262_fu_234_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 idx_fu_56 = 4'd0;
#0 i_fu_60 = 4'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_60 <= 4'd1;
    end else if (((icmp_ln248_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_60 <= i_3_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_fu_56 <= 4'd0;
    end else if (((icmp_ln248_fu_93_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_56 <= add_ln248_fu_99_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        LARc_addr_reg_266 <= zext_ln248_fu_105_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LARc_address0 = LARc_addr_reg_266;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        LARc_address0 = zext_ln248_fu_105_p1;
    end else begin
        LARc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        LARc_ce0 = 1'b1;
    end else begin
        LARc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        LARc_we0 = 1'b1;
    end else begin
        LARc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln248_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln248_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln248_fu_93_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LARc_d0 = ((tmp_fu_126_p3[0:0] == 1'b1) ? sub_ln262_fu_234_p2 : temp_6_fu_226_p3);

assign add_ln248_fu_99_p2 = (idx_fu_56 + 4'd1);

assign and_ln255_fu_220_p2 = (xor_ln253_fu_214_p2 & icmp_ln255_fu_182_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_3_fu_110_p2 = (i_fu_60 + 4'd1);

assign icmp_ln248_fu_93_p2 = ((i_fu_60 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln253_fu_162_p2 = (($signed(temp_fu_154_p3) < $signed(16'd22118)) ? 1'b1 : 1'b0);

assign icmp_ln255_fu_182_p2 = (($signed(temp_fu_154_p3) < $signed(16'd31130)) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_134_p2 = ((LARc_q0 == 16'd32768) ? 1'b1 : 1'b0);

assign select_ln67_fu_146_p3 = ((icmp_ln67_fu_134_p2[0:0] == 1'b1) ? 16'd32767 : sub_ln67_fu_140_p2);

assign sext_ln254_fu_178_p1 = $signed(temp_2_fu_168_p4);

assign shl_ln259_fu_194_p2 = temp_fu_154_p3 << 16'd2;

assign sub_ln262_fu_234_p2 = (16'd0 - temp_6_fu_226_p3);

assign sub_ln67_fu_140_p2 = (16'd0 - LARc_q0);

assign temp_2_fu_168_p4 = {{temp_fu_154_p3[15:1]}};

assign temp_3_fu_188_p2 = ($signed(temp_fu_154_p3) + $signed(16'd54477));

assign temp_4_fu_200_p2 = (shl_ln259_fu_194_p2 + 16'd26624);

assign temp_5_fu_206_p3 = ((icmp_ln253_fu_162_p2[0:0] == 1'b1) ? sext_ln254_fu_178_p1 : temp_4_fu_200_p2);

assign temp_6_fu_226_p3 = ((and_ln255_fu_220_p2[0:0] == 1'b1) ? temp_3_fu_188_p2 : temp_5_fu_206_p3);

assign temp_fu_154_p3 = ((tmp_fu_126_p3[0:0] == 1'b1) ? select_ln67_fu_146_p3 : LARc_q0);

assign tmp_fu_126_p3 = LARc_q0[32'd15];

assign xor_ln253_fu_214_p2 = (icmp_ln253_fu_162_p2 ^ 1'd1);

assign zext_ln248_fu_105_p1 = idx_fu_56;

endmodule //Gsm_LPC_Analysis_Transformation_to_Log_Area_Ratios
