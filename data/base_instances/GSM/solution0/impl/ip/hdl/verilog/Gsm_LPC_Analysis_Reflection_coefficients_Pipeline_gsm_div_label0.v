// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_Reflection_coefficients_Pipeline_gsm_div_label0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln120,
        sext_ln126,
        sext_ln121_1,
        div_3_out,
        div_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sext_ln120;
input  [15:0] sext_ln126;
input  [15:0] sext_ln121_1;
output  [15:0] div_3_out;
output   div_3_out_ap_vld;

reg ap_idle;
reg div_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln138_fu_194_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [62:0] sext_ln121_1_cast_fu_87_p1;
reg  signed [62:0] sext_ln121_1_cast_reg_236;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln126_cast_fu_91_p1;
reg  signed [63:0] sext_ln126_cast_reg_241;
reg   [14:0] div_fu_50;
wire   [14:0] trunc_ln144_fu_176_p1;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [62:0] L_num_fu_54;
wire   [62:0] L_num_4_fu_180_p3;
wire  signed [62:0] sext_ln120_cast_fu_95_p1;
reg   [3:0] k_fu_58;
wire   [3:0] k_3_fu_188_p2;
wire   [15:0] div_6_fu_167_p3;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] L_num_2_fu_131_p3;
wire   [0:0] icmp_ln144_fu_145_p2;
wire   [62:0] shl_ln120_fu_139_p2;
wire   [15:0] div_1_fu_123_p3;
wire   [0:0] xor_ln144_fu_150_p2;
wire   [15:0] div_5_fu_161_p2;
wire   [62:0] L_num_3_fu_156_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 div_fu_50 = 15'd0;
#0 L_num_fu_54 = 63'd0;
#0 k_fu_58 = 4'd0;
#0 ap_done_reg = 1'b0;
end

Gsm_LPC_Analysis_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            L_num_fu_54 <= sext_ln120_cast_fu_95_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            L_num_fu_54 <= L_num_4_fu_180_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            div_fu_50 <= 15'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            div_fu_50 <= trunc_ln144_fu_176_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_58 <= 4'd14;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_58 <= k_3_fu_188_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sext_ln121_1_cast_reg_236 <= sext_ln121_1_cast_fu_87_p1;
        sext_ln126_cast_reg_241 <= sext_ln126_cast_fu_91_p1;
    end
end

always @ (*) begin
    if (((icmp_ln138_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln138_fu_194_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        div_3_out_ap_vld = 1'b1;
    end else begin
        div_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign L_num_2_fu_131_p3 = {{L_num_fu_54}, {1'd0}};

assign L_num_3_fu_156_p2 = ($signed(shl_ln120_fu_139_p2) - $signed(sext_ln121_1_cast_reg_236));

assign L_num_4_fu_180_p3 = ((xor_ln144_fu_150_p2[0:0] == 1'b1) ? L_num_3_fu_156_p2 : shl_ln120_fu_139_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign div_1_fu_123_p3 = {{div_fu_50}, {1'd0}};

assign div_3_out = div_6_fu_167_p3;

assign div_5_fu_161_p2 = (div_1_fu_123_p3 | 16'd1);

assign div_6_fu_167_p3 = ((xor_ln144_fu_150_p2[0:0] == 1'b1) ? div_5_fu_161_p2 : div_1_fu_123_p3);

assign icmp_ln138_fu_194_p2 = ((k_fu_58 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln144_fu_145_p2 = (($signed(L_num_2_fu_131_p3) < $signed(sext_ln126_cast_reg_241)) ? 1'b1 : 1'b0);

assign k_3_fu_188_p2 = ($signed(k_fu_58) + $signed(4'd15));

assign sext_ln120_cast_fu_95_p1 = $signed(sext_ln120);

assign sext_ln121_1_cast_fu_87_p1 = $signed(sext_ln121_1);

assign sext_ln126_cast_fu_91_p1 = $signed(sext_ln126);

assign shl_ln120_fu_139_p2 = L_num_fu_54 << 63'd1;

assign trunc_ln144_fu_176_p1 = div_6_fu_167_p3[14:0];

assign xor_ln144_fu_150_p2 = (icmp_ln144_fu_145_p2 ^ 1'd1);

endmodule //Gsm_LPC_Analysis_Reflection_coefficients_Pipeline_gsm_div_label0
