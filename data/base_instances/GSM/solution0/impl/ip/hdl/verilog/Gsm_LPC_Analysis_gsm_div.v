// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module Gsm_LPC_Analysis_gsm_div (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        num,
        denum,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] num;
input  [15:0] denum;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln134_fu_50_p2;
reg   [0:0] icmp_ln134_reg_77;
wire    grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start;
wire    grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_done;
wire    grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_idle;
wire    grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_ready;
wire   [15:0] grp_gsm_div_Pipeline_gsm_div_label0_fu_39_div_3_out;
wire    grp_gsm_div_Pipeline_gsm_div_label0_fu_39_div_3_out_ap_vld;
reg   [15:0] ap_phi_mux_retval_0_phi_fu_32_p4;
reg   [15:0] retval_0_reg_28;
wire    ap_CS_fsm_state3;
reg    grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start_reg;
wire    ap_CS_fsm_state2;
reg   [15:0] div_3_loc_fu_12;
reg   [15:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start_reg = 1'b0;
#0 ap_return_preg = 16'd0;
end

Gsm_LPC_Analysis_gsm_div_Pipeline_gsm_div_label0 grp_gsm_div_Pipeline_gsm_div_label0_fu_39(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start),
    .ap_done(grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_done),
    .ap_idle(grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_idle),
    .ap_ready(grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_ready),
    .sext_ln120(num),
    .sext_ln126(denum),
    .sext_ln121(denum),
    .div_3_out(grp_gsm_div_Pipeline_gsm_div_label0_fu_39_div_3_out),
    .div_3_out_ap_vld(grp_gsm_div_Pipeline_gsm_div_label0_fu_39_div_3_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_return_preg <= ap_phi_mux_retval_0_phi_fu_32_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (icmp_ln134_fu_50_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start_reg <= 1'b1;
        end else if ((grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_ready == 1'b1)) begin
            grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln134_fu_50_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        retval_0_reg_28 <= 16'd0;
    end else if (((icmp_ln134_reg_77 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        retval_0_reg_28 <= div_3_loc_fu_12;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_gsm_div_Pipeline_gsm_div_label0_fu_39_div_3_out_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        div_3_loc_fu_12 <= grp_gsm_div_Pipeline_gsm_div_label0_fu_39_div_3_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln134_reg_77 <= icmp_ln134_fu_50_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln134_reg_77 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_retval_0_phi_fu_32_p4 = div_3_loc_fu_12;
    end else begin
        ap_phi_mux_retval_0_phi_fu_32_p4 = retval_0_reg_28;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_return = ap_phi_mux_retval_0_phi_fu_32_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (icmp_ln134_fu_50_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((ap_start == 1'b1) & (icmp_ln134_fu_50_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start = grp_gsm_div_Pipeline_gsm_div_label0_fu_39_ap_start_reg;

assign icmp_ln134_fu_50_p2 = ((num == 16'd0) ? 1'b1 : 1'b0);

endmodule //Gsm_LPC_Analysis_gsm_div
