// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_sha_stream_Pipeline_VITIS_LOOP_201_1_VITIS_LOOP_202_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        indata_address0,
        indata_ce0,
        indata_q0,
        local_indata_address0,
        local_indata_ce0,
        local_indata_we0,
        local_indata_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] indata_address0;
output   indata_ce0;
input  [7:0] indata_q0;
output  [13:0] local_indata_address0;
output   local_indata_ce0;
output   local_indata_we0;
output  [7:0] local_indata_d0;

reg ap_idle;
reg indata_ce0;
reg local_indata_ce0;
reg local_indata_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln201_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln203_fu_169_p1;
reg   [63:0] zext_ln203_reg_219;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [13:0] j_fu_48;
wire   [13:0] add_ln202_fu_174_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_j_load;
reg   [1:0] i_fu_52;
wire   [1:0] select_ln201_fu_143_p3;
reg   [1:0] ap_sig_allocacmp_i_load;
reg   [14:0] indvar_flatten_fu_56;
wire   [14:0] add_ln201_1_fu_111_p2;
reg   [14:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln202_fu_129_p2;
wire   [1:0] add_ln201_fu_123_p2;
wire   [0:0] trunc_ln203_fu_151_p1;
wire   [13:0] tmp_8_fu_155_p3;
wire   [13:0] select_ln198_fu_135_p3;
wire   [13:0] add_ln203_fu_163_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 j_fu_48 = 14'd0;
#0 i_fu_52 = 2'd0;
#0 indvar_flatten_fu_56 = 15'd0;
#0 ap_done_reg = 1'b0;
end

sha_stream_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln201_fu_105_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= select_ln201_fu_143_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln201_fu_105_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_56 <= add_ln201_1_fu_111_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_56 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln201_fu_105_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_48 <= add_ln202_fu_174_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_48 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln203_reg_219[13 : 0] <= zext_ln203_fu_169_p1[13 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln201_fu_105_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 2'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 15'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 14'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indata_ce0 = 1'b1;
    end else begin
        indata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_indata_ce0 = 1'b1;
    end else begin
        local_indata_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        local_indata_we0 = 1'b1;
    end else begin
        local_indata_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln201_1_fu_111_p2 = (ap_sig_allocacmp_indvar_flatten_load + 15'd1);

assign add_ln201_fu_123_p2 = (ap_sig_allocacmp_i_load + 2'd1);

assign add_ln202_fu_174_p2 = (select_ln198_fu_135_p3 + 14'd1);

assign add_ln203_fu_163_p2 = (tmp_8_fu_155_p3 + select_ln198_fu_135_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln201_fu_105_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_129_p2 = ((ap_sig_allocacmp_j_load == 14'd8192) ? 1'b1 : 1'b0);

assign indata_address0 = zext_ln203_fu_169_p1;

assign local_indata_address0 = zext_ln203_reg_219;

assign local_indata_d0 = indata_q0;

assign select_ln198_fu_135_p3 = ((icmp_ln202_fu_129_p2[0:0] == 1'b1) ? 14'd0 : ap_sig_allocacmp_j_load);

assign select_ln201_fu_143_p3 = ((icmp_ln202_fu_129_p2[0:0] == 1'b1) ? add_ln201_fu_123_p2 : ap_sig_allocacmp_i_load);

assign tmp_8_fu_155_p3 = {{trunc_ln203_fu_151_p1}, {13'd0}};

assign trunc_ln203_fu_151_p1 = select_ln201_fu_143_p3[0:0];

assign zext_ln203_fu_169_p1 = add_ln203_fu_163_p2;

always @ (posedge ap_clk) begin
    zext_ln203_reg_219[63:14] <= 50'b00000000000000000000000000000000000000000000000000;
end

endmodule //sha_stream_sha_stream_Pipeline_VITIS_LOOP_201_1_VITIS_LOOP_202_2
