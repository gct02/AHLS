-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    in_i_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_i_ce0 : OUT STD_LOGIC;
    in_i_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outdata_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    outdata_ce0 : OUT STD_LOGIC;
    outdata_we0 : OUT STD_LOGIC;
    outdata_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha_stream_sha_stream,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.339000,HLS_SYN_LAT=124779,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=2865,HLS_SYN_LUT=5973,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal local_indata_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal local_indata_ce0 : STD_LOGIC;
    signal local_indata_we0 : STD_LOGIC;
    signal local_indata_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_indata_ce1 : STD_LOGIC;
    signal local_indata_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sha_info_count_lo : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sha_info_count_hi : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sha_info_digest_ce0 : STD_LOGIC;
    signal sha_info_digest_we0 : STD_LOGIC;
    signal sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_digest_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sha_info_digest_ce1 : STD_LOGIC;
    signal sha_info_digest_we1 : STD_LOGIC;
    signal sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_digest_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sha_info_data_ce0 : STD_LOGIC;
    signal sha_info_data_we0 : STD_LOGIC;
    signal sha_info_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_data_ce1 : STD_LOGIC;
    signal sha_info_data_we1 : STD_LOGIC;
    signal tmp_fu_200_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_reg_288 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln217_fu_239_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln217_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_13_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln226_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_done : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_idle : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_ready : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_indata_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_indata_ce0 : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_ce0 : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_we0 : STD_LOGIC;
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha_init_fu_137_ap_start : STD_LOGIC;
    signal grp_sha_init_fu_137_ap_done : STD_LOGIC;
    signal grp_sha_init_fu_137_ap_idle : STD_LOGIC;
    signal grp_sha_init_fu_137_ap_ready : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_count_lo : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_init_fu_137_sha_info_count_lo_ap_vld : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_count_hi : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_init_fu_137_sha_info_count_hi_ap_vld : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_init_fu_137_sha_info_digest_ce0 : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_digest_we0 : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_init_fu_137_sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_init_fu_137_sha_info_digest_ce1 : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_digest_we1 : STD_LOGIC;
    signal grp_sha_init_fu_137_sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_final_fu_147_ap_start : STD_LOGIC;
    signal grp_sha_final_fu_147_ap_done : STD_LOGIC;
    signal grp_sha_final_fu_147_ap_idle : STD_LOGIC;
    signal grp_sha_final_fu_147_ap_ready : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha_final_fu_147_sha_info_data_ce0 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_data_we0 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_final_fu_147_sha_info_data_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha_final_fu_147_sha_info_data_ce1 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_data_we1 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_final_fu_147_sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_final_fu_147_sha_info_digest_ce0 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_digest_we0 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_final_fu_147_sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_final_fu_147_sha_info_digest_ce1 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_digest_we1 : STD_LOGIC;
    signal grp_sha_final_fu_147_sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_update_fu_159_ap_start : STD_LOGIC;
    signal grp_sha_update_fu_159_ap_done : STD_LOGIC;
    signal grp_sha_update_fu_159_ap_idle : STD_LOGIC;
    signal grp_sha_update_fu_159_ap_ready : STD_LOGIC;
    signal grp_sha_update_fu_159_buffer_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sha_update_fu_159_buffer_r_ce0 : STD_LOGIC;
    signal grp_sha_update_fu_159_buffer_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_sha_update_fu_159_buffer_r_ce1 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_count_lo_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_update_fu_159_sha_info_count_lo_o_ap_vld : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_count_hi_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_update_fu_159_sha_info_count_hi_o_ap_vld : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha_update_fu_159_sha_info_data_ce0 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_data_we0 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_update_fu_159_sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_update_fu_159_sha_info_digest_ce0 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_digest_we0 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_update_fu_159_sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_update_fu_159_sha_info_digest_ce1 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_digest_we1 : STD_LOGIC;
    signal grp_sha_update_fu_159_sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln206_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_sha_init_fu_137_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_sha_final_fu_147_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln217_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sha_update_fu_159_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln217_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln226_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_fu_76 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln206_fu_194_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_80 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln217_fu_228_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_7_fu_84 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln226_fu_262_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln206_fu_184_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha_stream_sha_stream_Pipeline_VITIS_LOOP_208_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln210 : IN STD_LOGIC_VECTOR (13 downto 0);
        indata_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        indata_ce0 : OUT STD_LOGIC;
        indata_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        local_indata_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        local_indata_ce0 : OUT STD_LOGIC;
        local_indata_we0 : OUT STD_LOGIC;
        local_indata_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha_stream_sha_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha_info_count_lo : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_lo_ap_vld : OUT STD_LOGIC;
        sha_info_count_hi : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_hi_ap_vld : OUT STD_LOGIC;
        sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce0 : OUT STD_LOGIC;
        sha_info_digest_we0 : OUT STD_LOGIC;
        sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce1 : OUT STD_LOGIC;
        sha_info_digest_we1 : OUT STD_LOGIC;
        sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_final IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha_info_count_lo : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_hi : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_we0 : OUT STD_LOGIC;
        sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_data_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce1 : OUT STD_LOGIC;
        sha_info_data_we1 : OUT STD_LOGIC;
        sha_info_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce0 : OUT STD_LOGIC;
        sha_info_digest_we0 : OUT STD_LOGIC;
        sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce1 : OUT STD_LOGIC;
        sha_info_digest_we1 : OUT STD_LOGIC;
        sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        buffer_r_ce1 : OUT STD_LOGIC;
        buffer_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        buffer_offset : IN STD_LOGIC_VECTOR (0 downto 0);
        count : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_lo_i : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_lo_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_lo_o_ap_vld : OUT STD_LOGIC;
        sha_info_count_hi_i : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_hi_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_count_hi_o_ap_vld : OUT STD_LOGIC;
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_we0 : OUT STD_LOGIC;
        sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce0 : OUT STD_LOGIC;
        sha_info_digest_we0 : OUT STD_LOGIC;
        sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce1 : OUT STD_LOGIC;
        sha_info_digest_we1 : OUT STD_LOGIC;
        sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_local_indata_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha_stream_sha_info_digest_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_info_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    local_indata_U : component sha_stream_local_indata_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_indata_address0,
        ce0 => local_indata_ce0,
        we0 => local_indata_we0,
        d0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_d0,
        q0 => local_indata_q0,
        address1 => grp_sha_update_fu_159_buffer_r_address1,
        ce1 => local_indata_ce1,
        q1 => local_indata_q1);

    sha_info_digest_U : component sha_stream_sha_info_digest_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sha_info_digest_address0,
        ce0 => sha_info_digest_ce0,
        we0 => sha_info_digest_we0,
        d0 => sha_info_digest_d0,
        q0 => sha_info_digest_q0,
        address1 => sha_info_digest_address1,
        ce1 => sha_info_digest_ce1,
        we1 => sha_info_digest_we1,
        d1 => sha_info_digest_d1,
        q1 => sha_info_digest_q1);

    sha_info_data_U : component sha_stream_sha_info_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sha_info_data_address0,
        ce0 => sha_info_data_ce0,
        we0 => sha_info_data_we0,
        d0 => sha_info_data_d0,
        q0 => sha_info_data_q0,
        address1 => grp_sha_final_fu_147_sha_info_data_address1,
        ce1 => sha_info_data_ce1,
        we1 => sha_info_data_we1,
        d1 => grp_sha_final_fu_147_sha_info_data_d1);

    grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128 : component sha_stream_sha_stream_Pipeline_VITIS_LOOP_208_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start,
        ap_done => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_done,
        ap_idle => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_idle,
        ap_ready => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_ready,
        zext_ln210 => tmp_reg_288,
        indata_address0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_indata_address0,
        indata_ce0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_indata_ce0,
        indata_q0 => indata_q0,
        local_indata_address0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_address0,
        local_indata_ce0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_ce0,
        local_indata_we0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_we0,
        local_indata_d0 => grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_d0);

    grp_sha_init_fu_137 : component sha_stream_sha_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_init_fu_137_ap_start,
        ap_done => grp_sha_init_fu_137_ap_done,
        ap_idle => grp_sha_init_fu_137_ap_idle,
        ap_ready => grp_sha_init_fu_137_ap_ready,
        sha_info_count_lo => grp_sha_init_fu_137_sha_info_count_lo,
        sha_info_count_lo_ap_vld => grp_sha_init_fu_137_sha_info_count_lo_ap_vld,
        sha_info_count_hi => grp_sha_init_fu_137_sha_info_count_hi,
        sha_info_count_hi_ap_vld => grp_sha_init_fu_137_sha_info_count_hi_ap_vld,
        sha_info_digest_address0 => grp_sha_init_fu_137_sha_info_digest_address0,
        sha_info_digest_ce0 => grp_sha_init_fu_137_sha_info_digest_ce0,
        sha_info_digest_we0 => grp_sha_init_fu_137_sha_info_digest_we0,
        sha_info_digest_d0 => grp_sha_init_fu_137_sha_info_digest_d0,
        sha_info_digest_address1 => grp_sha_init_fu_137_sha_info_digest_address1,
        sha_info_digest_ce1 => grp_sha_init_fu_137_sha_info_digest_ce1,
        sha_info_digest_we1 => grp_sha_init_fu_137_sha_info_digest_we1,
        sha_info_digest_d1 => grp_sha_init_fu_137_sha_info_digest_d1);

    grp_sha_final_fu_147 : component sha_stream_sha_final
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_final_fu_147_ap_start,
        ap_done => grp_sha_final_fu_147_ap_done,
        ap_idle => grp_sha_final_fu_147_ap_idle,
        ap_ready => grp_sha_final_fu_147_ap_ready,
        sha_info_count_lo => sha_info_count_lo,
        sha_info_count_hi => sha_info_count_hi,
        sha_info_data_address0 => grp_sha_final_fu_147_sha_info_data_address0,
        sha_info_data_ce0 => grp_sha_final_fu_147_sha_info_data_ce0,
        sha_info_data_we0 => grp_sha_final_fu_147_sha_info_data_we0,
        sha_info_data_d0 => grp_sha_final_fu_147_sha_info_data_d0,
        sha_info_data_q0 => sha_info_data_q0,
        sha_info_data_address1 => grp_sha_final_fu_147_sha_info_data_address1,
        sha_info_data_ce1 => grp_sha_final_fu_147_sha_info_data_ce1,
        sha_info_data_we1 => grp_sha_final_fu_147_sha_info_data_we1,
        sha_info_data_d1 => grp_sha_final_fu_147_sha_info_data_d1,
        sha_info_digest_address0 => grp_sha_final_fu_147_sha_info_digest_address0,
        sha_info_digest_ce0 => grp_sha_final_fu_147_sha_info_digest_ce0,
        sha_info_digest_we0 => grp_sha_final_fu_147_sha_info_digest_we0,
        sha_info_digest_d0 => grp_sha_final_fu_147_sha_info_digest_d0,
        sha_info_digest_q0 => sha_info_digest_q0,
        sha_info_digest_address1 => grp_sha_final_fu_147_sha_info_digest_address1,
        sha_info_digest_ce1 => grp_sha_final_fu_147_sha_info_digest_ce1,
        sha_info_digest_we1 => grp_sha_final_fu_147_sha_info_digest_we1,
        sha_info_digest_d1 => grp_sha_final_fu_147_sha_info_digest_d1,
        sha_info_digest_q1 => sha_info_digest_q1);

    grp_sha_update_fu_159 : component sha_stream_sha_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_update_fu_159_ap_start,
        ap_done => grp_sha_update_fu_159_ap_done,
        ap_idle => grp_sha_update_fu_159_ap_idle,
        ap_ready => grp_sha_update_fu_159_ap_ready,
        buffer_r_address0 => grp_sha_update_fu_159_buffer_r_address0,
        buffer_r_ce0 => grp_sha_update_fu_159_buffer_r_ce0,
        buffer_r_q0 => local_indata_q0,
        buffer_r_address1 => grp_sha_update_fu_159_buffer_r_address1,
        buffer_r_ce1 => grp_sha_update_fu_159_buffer_r_ce1,
        buffer_r_q1 => local_indata_q1,
        buffer_offset => trunc_ln217_reg_303,
        count => i_13_reg_320,
        sha_info_count_lo_i => sha_info_count_lo,
        sha_info_count_lo_o => grp_sha_update_fu_159_sha_info_count_lo_o,
        sha_info_count_lo_o_ap_vld => grp_sha_update_fu_159_sha_info_count_lo_o_ap_vld,
        sha_info_count_hi_i => sha_info_count_hi,
        sha_info_count_hi_o => grp_sha_update_fu_159_sha_info_count_hi_o,
        sha_info_count_hi_o_ap_vld => grp_sha_update_fu_159_sha_info_count_hi_o_ap_vld,
        sha_info_data_address0 => grp_sha_update_fu_159_sha_info_data_address0,
        sha_info_data_ce0 => grp_sha_update_fu_159_sha_info_data_ce0,
        sha_info_data_we0 => grp_sha_update_fu_159_sha_info_data_we0,
        sha_info_data_d0 => grp_sha_update_fu_159_sha_info_data_d0,
        sha_info_data_q0 => sha_info_data_q0,
        sha_info_digest_address0 => grp_sha_update_fu_159_sha_info_digest_address0,
        sha_info_digest_ce0 => grp_sha_update_fu_159_sha_info_digest_ce0,
        sha_info_digest_we0 => grp_sha_update_fu_159_sha_info_digest_we0,
        sha_info_digest_d0 => grp_sha_update_fu_159_sha_info_digest_d0,
        sha_info_digest_q0 => sha_info_digest_q0,
        sha_info_digest_address1 => grp_sha_update_fu_159_sha_info_digest_address1,
        sha_info_digest_ce1 => grp_sha_update_fu_159_sha_info_digest_ce1,
        sha_info_digest_we1 => grp_sha_update_fu_159_sha_info_digest_we1,
        sha_info_digest_d1 => grp_sha_update_fu_159_sha_info_digest_d1,
        sha_info_digest_q1 => sha_info_digest_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha_final_fu_147_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_final_fu_147_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln217_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_sha_final_fu_147_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_final_fu_147_ap_ready = ap_const_logic_1)) then 
                    grp_sha_final_fu_147_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha_init_fu_137_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_init_fu_137_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln206_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_sha_init_fu_137_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_init_fu_137_ap_ready = ap_const_logic_1)) then 
                    grp_sha_init_fu_137_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln206_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_ready = ap_const_logic_1)) then 
                    grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha_update_fu_159_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_update_fu_159_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sha_update_fu_159_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_update_fu_159_ap_ready = ap_const_logic_1)) then 
                    grp_sha_update_fu_159_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_7_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln217_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_7_fu_84 <= ap_const_lv3_0;
            elsif (((icmp_ln226_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_7_fu_84 <= add_ln226_fu_262_p2;
            end if; 
        end if;
    end process;

    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_76 <= ap_const_lv2_0;
            elsif (((icmp_ln206_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_76 <= add_ln206_fu_194_p2;
            end if; 
        end if;
    end process;

    j_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln206_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_fu_80 <= ap_const_lv2_0;
            elsif (((icmp_ln217_fu_222_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_fu_80 <= add_ln217_fu_228_p2;
            end if; 
        end if;
    end process;

    sha_info_count_hi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sha_update_fu_159_sha_info_count_hi_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                sha_info_count_hi <= grp_sha_update_fu_159_sha_info_count_hi_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha_init_fu_137_sha_info_count_hi_ap_vld = ap_const_logic_1))) then 
                sha_info_count_hi <= grp_sha_init_fu_137_sha_info_count_hi;
            end if; 
        end if;
    end process;

    sha_info_count_lo_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_sha_update_fu_159_sha_info_count_lo_o_ap_vld = ap_const_logic_1))) then 
                sha_info_count_lo <= grp_sha_update_fu_159_sha_info_count_lo_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha_init_fu_137_sha_info_count_lo_ap_vld = ap_const_logic_1))) then 
                sha_info_count_lo <= grp_sha_init_fu_137_sha_info_count_lo;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_13_reg_320 <= in_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_reg_288(13) <= tmp_fu_200_p3(13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln217_reg_303 <= trunc_ln217_fu_239_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    zext_ln226_reg_328(2 downto 0) <= zext_ln226_fu_268_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_288(12 downto 0) <= "0000000000000";
    zext_ln226_reg_328(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state9, grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_done, grp_sha_init_fu_137_ap_done, grp_sha_final_fu_147_ap_done, grp_sha_update_fu_159_ap_done, icmp_ln206_fu_188_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln217_fu_222_p2, ap_CS_fsm_state8, ap_CS_fsm_state7, icmp_ln226_fu_256_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln206_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_sha_init_fu_137_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln217_fu_222_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_sha_update_fu_159_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_sha_final_fu_147_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln226_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln206_fu_194_p2 <= std_logic_vector(unsigned(i_fu_76) + unsigned(ap_const_lv2_1));
    add_ln217_fu_228_p2 <= std_logic_vector(unsigned(j_fu_80) + unsigned(ap_const_lv2_1));
    add_ln226_fu_262_p2 <= std_logic_vector(unsigned(i_7_fu_84) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_done)
    begin
        if ((grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_sha_init_fu_137_ap_done)
    begin
        if ((grp_sha_init_fu_137_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_sha_update_fu_159_ap_done)
    begin
        if ((grp_sha_update_fu_159_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(grp_sha_final_fu_147_ap_done)
    begin
        if ((grp_sha_final_fu_147_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state9, icmp_ln226_fu_256_p2)
    begin
        if (((icmp_ln226_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, icmp_ln226_fu_256_p2)
    begin
        if (((icmp_ln226_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha_final_fu_147_ap_start <= grp_sha_final_fu_147_ap_start_reg;
    grp_sha_init_fu_137_ap_start <= grp_sha_init_fu_137_ap_start_reg;
    grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start <= grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_ap_start_reg;
    grp_sha_update_fu_159_ap_start <= grp_sha_update_fu_159_ap_start_reg;
    icmp_ln206_fu_188_p2 <= "1" when (i_fu_76 = ap_const_lv2_2) else "0";
    icmp_ln217_fu_222_p2 <= "1" when (j_fu_80 = ap_const_lv2_2) else "0";
    icmp_ln226_fu_256_p2 <= "1" when (i_7_fu_84 = ap_const_lv3_5) else "0";
    in_i_address0 <= zext_ln217_fu_234_p1(1 - 1 downto 0);

    in_i_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_i_ce0 <= ap_const_logic_1;
        else 
            in_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indata_address0 <= grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_indata_address0;
    indata_ce0 <= grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_indata_ce0;

    local_indata_address0_assign_proc : process(grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_address0, grp_sha_update_fu_159_buffer_r_address0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_indata_address0 <= grp_sha_update_fu_159_buffer_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_indata_address0 <= grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_address0;
        else 
            local_indata_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    local_indata_ce0_assign_proc : process(grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_ce0, grp_sha_update_fu_159_buffer_r_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_indata_ce0 <= grp_sha_update_fu_159_buffer_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_indata_ce0 <= grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_ce0;
        else 
            local_indata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    local_indata_ce1_assign_proc : process(grp_sha_update_fu_159_buffer_r_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_indata_ce1 <= grp_sha_update_fu_159_buffer_r_ce1;
        else 
            local_indata_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    local_indata_we0_assign_proc : process(grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_indata_we0 <= grp_sha_stream_Pipeline_VITIS_LOOP_208_1_fu_128_local_indata_we0;
        else 
            local_indata_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_address0 <= zext_ln226_reg_328(3 - 1 downto 0);

    outdata_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outdata_ce0 <= ap_const_logic_1;
        else 
            outdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_d0 <= sha_info_digest_q0;

    outdata_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            outdata_we0 <= ap_const_logic_1;
        else 
            outdata_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_address0_assign_proc : process(grp_sha_final_fu_147_sha_info_data_address0, grp_sha_update_fu_159_sha_info_data_address0, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_data_address0 <= grp_sha_update_fu_159_sha_info_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_data_address0 <= grp_sha_final_fu_147_sha_info_data_address0;
        else 
            sha_info_data_address0 <= "XXXX";
        end if; 
    end process;


    sha_info_data_ce0_assign_proc : process(grp_sha_final_fu_147_sha_info_data_ce0, grp_sha_update_fu_159_sha_info_data_ce0, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_data_ce0 <= grp_sha_update_fu_159_sha_info_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_data_ce0 <= grp_sha_final_fu_147_sha_info_data_ce0;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_ce1_assign_proc : process(grp_sha_final_fu_147_sha_info_data_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_data_ce1 <= grp_sha_final_fu_147_sha_info_data_ce1;
        else 
            sha_info_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_d0_assign_proc : process(grp_sha_final_fu_147_sha_info_data_d0, grp_sha_update_fu_159_sha_info_data_d0, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_data_d0 <= grp_sha_update_fu_159_sha_info_data_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_data_d0 <= grp_sha_final_fu_147_sha_info_data_d0;
        else 
            sha_info_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_data_we0_assign_proc : process(grp_sha_final_fu_147_sha_info_data_we0, grp_sha_update_fu_159_sha_info_data_we0, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_data_we0 <= grp_sha_update_fu_159_sha_info_data_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_data_we0 <= grp_sha_final_fu_147_sha_info_data_we0;
        else 
            sha_info_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_we1_assign_proc : process(grp_sha_final_fu_147_sha_info_data_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_data_we1 <= grp_sha_final_fu_147_sha_info_data_we1;
        else 
            sha_info_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_address0_assign_proc : process(zext_ln226_fu_268_p1, ap_CS_fsm_state9, grp_sha_init_fu_137_sha_info_digest_address0, grp_sha_final_fu_147_sha_info_digest_address0, grp_sha_update_fu_159_sha_info_digest_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha_info_digest_address0 <= zext_ln226_fu_268_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_address0 <= grp_sha_update_fu_159_sha_info_digest_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_address0 <= grp_sha_final_fu_147_sha_info_digest_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_address0 <= grp_sha_init_fu_137_sha_info_digest_address0;
        else 
            sha_info_digest_address0 <= "XXX";
        end if; 
    end process;


    sha_info_digest_address1_assign_proc : process(grp_sha_init_fu_137_sha_info_digest_address1, grp_sha_final_fu_147_sha_info_digest_address1, grp_sha_update_fu_159_sha_info_digest_address1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_address1 <= grp_sha_update_fu_159_sha_info_digest_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_address1 <= grp_sha_final_fu_147_sha_info_digest_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_address1 <= grp_sha_init_fu_137_sha_info_digest_address1;
        else 
            sha_info_digest_address1 <= "XXX";
        end if; 
    end process;


    sha_info_digest_ce0_assign_proc : process(ap_CS_fsm_state9, grp_sha_init_fu_137_sha_info_digest_ce0, grp_sha_final_fu_147_sha_info_digest_ce0, grp_sha_update_fu_159_sha_info_digest_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha_info_digest_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_ce0 <= grp_sha_update_fu_159_sha_info_digest_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_ce0 <= grp_sha_final_fu_147_sha_info_digest_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_ce0 <= grp_sha_init_fu_137_sha_info_digest_ce0;
        else 
            sha_info_digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_ce1_assign_proc : process(grp_sha_init_fu_137_sha_info_digest_ce1, grp_sha_final_fu_147_sha_info_digest_ce1, grp_sha_update_fu_159_sha_info_digest_ce1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_ce1 <= grp_sha_update_fu_159_sha_info_digest_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_ce1 <= grp_sha_final_fu_147_sha_info_digest_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_ce1 <= grp_sha_init_fu_137_sha_info_digest_ce1;
        else 
            sha_info_digest_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_d0_assign_proc : process(grp_sha_init_fu_137_sha_info_digest_d0, grp_sha_final_fu_147_sha_info_digest_d0, grp_sha_update_fu_159_sha_info_digest_d0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_d0 <= grp_sha_update_fu_159_sha_info_digest_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_d0 <= grp_sha_final_fu_147_sha_info_digest_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_d0 <= grp_sha_init_fu_137_sha_info_digest_d0;
        else 
            sha_info_digest_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_d1_assign_proc : process(grp_sha_init_fu_137_sha_info_digest_d1, grp_sha_final_fu_147_sha_info_digest_d1, grp_sha_update_fu_159_sha_info_digest_d1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_d1 <= grp_sha_update_fu_159_sha_info_digest_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_d1 <= grp_sha_final_fu_147_sha_info_digest_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_d1 <= grp_sha_init_fu_137_sha_info_digest_d1;
        else 
            sha_info_digest_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_we0_assign_proc : process(grp_sha_init_fu_137_sha_info_digest_we0, grp_sha_final_fu_147_sha_info_digest_we0, grp_sha_update_fu_159_sha_info_digest_we0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_we0 <= grp_sha_update_fu_159_sha_info_digest_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_we0 <= grp_sha_final_fu_147_sha_info_digest_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_we0 <= grp_sha_init_fu_137_sha_info_digest_we0;
        else 
            sha_info_digest_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_we1_assign_proc : process(grp_sha_init_fu_137_sha_info_digest_we1, grp_sha_final_fu_147_sha_info_digest_we1, grp_sha_update_fu_159_sha_info_digest_we1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_we1 <= grp_sha_update_fu_159_sha_info_digest_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_we1 <= grp_sha_final_fu_147_sha_info_digest_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_we1 <= grp_sha_init_fu_137_sha_info_digest_we1;
        else 
            sha_info_digest_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_200_p3 <= (trunc_ln206_fu_184_p1 & ap_const_lv13_0);
    trunc_ln206_fu_184_p1 <= i_fu_76(1 - 1 downto 0);
    trunc_ln217_fu_239_p1 <= j_fu_80(1 - 1 downto 0);
    zext_ln217_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_80),64));
    zext_ln226_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_fu_84),64));
end behav;
