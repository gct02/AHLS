-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream_local_memset is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (6 downto 0);
    e : IN STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce0 : OUT STD_LOGIC;
    sha_info_data_we0 : OUT STD_LOGIC;
    sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_stream_local_memset is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_fu_132_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal m_reg_194 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln57_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln66_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_fu_46 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    signal add_ln66_fu_157_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln58_fu_84_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln58_1_fu_90_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln58_fu_100_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln58_fu_104_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln58_2_fu_114_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln58_1_fu_124_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_76_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln58_1_fu_108_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln58_1_fu_128_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln66_fu_148_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln66_fu_163_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln57_fu_167_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_46 <= ap_const_lv30_0;
            elsif (((icmp_ln66_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_fu_46 <= add_ln66_fu_157_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                m_reg_194 <= m_fu_132_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_152_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln66_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln57_fu_167_p2 <= std_logic_vector(unsigned(trunc_ln66_fu_163_p1) + unsigned(e));
    add_ln66_fu_157_p2 <= std_logic_vector(unsigned(idx_fu_46) + unsigned(ap_const_lv30_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln66_fu_152_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln66_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_fu_152_p2)
    begin
        if (((icmp_ln66_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln66_fu_152_p2 <= "1" when (signed(zext_ln66_fu_148_p1) < signed(m_reg_194)) else "0";
    m_fu_132_p3 <= 
        sub_ln58_1_fu_108_p2 when (tmp_fu_76_p3(0) = '1') else 
        zext_ln58_1_fu_128_p1;
        sext_ln58_1_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln58_2_fu_114_p4),30));

        sext_ln58_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln58_1_fu_90_p4),30));

    sha_info_data_address0 <= zext_ln57_fu_172_p1(4 - 1 downto 0);

    sha_info_data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_data_ce0 <= ap_const_logic_1;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_data_d0 <= ap_const_lv32_0;

    sha_info_data_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln66_fu_152_p2)
    begin
        if (((icmp_ln66_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sha_info_data_we0 <= ap_const_logic_1;
        else 
            sha_info_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln58_1_fu_108_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln58_fu_104_p1));
    sub_ln58_fu_84_p2 <= std_logic_vector(unsigned(ap_const_lv7_0) - unsigned(n));
    tmp_fu_76_p3 <= n(6 downto 6);
    trunc_ln58_1_fu_90_p4 <= sub_ln58_fu_84_p2(6 downto 2);
    trunc_ln58_2_fu_114_p4 <= n(6 downto 2);
    trunc_ln66_fu_163_p1 <= idx_fu_46(4 - 1 downto 0);
    zext_ln57_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln57_fu_167_p2),64));
    zext_ln58_1_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln58_1_fu_124_p1),31));
    zext_ln58_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln58_fu_100_p1),31));
    zext_ln66_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_46),31));
end behav;
