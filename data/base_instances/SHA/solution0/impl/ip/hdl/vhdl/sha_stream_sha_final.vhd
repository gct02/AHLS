-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream_sha_final is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sha_info_count_lo : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_count_hi : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce0 : OUT STD_LOGIC;
    sha_info_data_we0 : OUT STD_LOGIC;
    sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_data_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce1 : OUT STD_LOGIC;
    sha_info_data_we1 : OUT STD_LOGIC;
    sha_info_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce0 : OUT STD_LOGIC;
    sha_info_digest_we0 : OUT STD_LOGIC;
    sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce1 : OUT STD_LOGIC;
    sha_info_digest_we1 : OUT STD_LOGIC;
    sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_stream_sha_final is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_37 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal count_fu_86_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal count_reg_145 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln175_fu_114_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln175_reg_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln182_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln182_reg_159 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln187_fu_125_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln187_reg_163 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln183_fu_137_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln183_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_local_memset_fu_64_ap_start : STD_LOGIC;
    signal grp_local_memset_fu_64_ap_done : STD_LOGIC;
    signal grp_local_memset_fu_64_ap_idle : STD_LOGIC;
    signal grp_local_memset_fu_64_ap_ready : STD_LOGIC;
    signal grp_local_memset_fu_64_n : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_local_memset_fu_64_e : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_local_memset_fu_64_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_local_memset_fu_64_sha_info_data_ce0 : STD_LOGIC;
    signal grp_local_memset_fu_64_sha_info_data_we0 : STD_LOGIC;
    signal grp_local_memset_fu_64_sha_info_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_transform_fu_74_ap_start : STD_LOGIC;
    signal grp_sha_transform_fu_74_ap_done : STD_LOGIC;
    signal grp_sha_transform_fu_74_ap_idle : STD_LOGIC;
    signal grp_sha_transform_fu_74_ap_ready : STD_LOGIC;
    signal grp_sha_transform_fu_74_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha_transform_fu_74_sha_info_data_ce0 : STD_LOGIC;
    signal grp_sha_transform_fu_74_sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_transform_fu_74_sha_info_digest_ce0 : STD_LOGIC;
    signal grp_sha_transform_fu_74_sha_info_digest_we0 : STD_LOGIC;
    signal grp_sha_transform_fu_74_sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_transform_fu_74_sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_transform_fu_74_sha_info_digest_ce1 : STD_LOGIC;
    signal grp_sha_transform_fu_74_sha_info_digest_we1 : STD_LOGIC;
    signal grp_sha_transform_fu_74_sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_local_memset_fu_64_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_sha_transform_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln180_fu_96_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln175_fu_105_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal count_1_fu_108_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln183_fu_132_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_block_state8_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha_stream_local_memset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (6 downto 0);
        e : IN STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_we0 : OUT STD_LOGIC;
        sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce0 : OUT STD_LOGIC;
        sha_info_digest_we0 : OUT STD_LOGIC;
        sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce1 : OUT STD_LOGIC;
        sha_info_digest_we1 : OUT STD_LOGIC;
        sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_local_memset_fu_64 : component sha_stream_local_memset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_local_memset_fu_64_ap_start,
        ap_done => grp_local_memset_fu_64_ap_done,
        ap_idle => grp_local_memset_fu_64_ap_idle,
        ap_ready => grp_local_memset_fu_64_ap_ready,
        n => grp_local_memset_fu_64_n,
        e => grp_local_memset_fu_64_e,
        sha_info_data_address0 => grp_local_memset_fu_64_sha_info_data_address0,
        sha_info_data_ce0 => grp_local_memset_fu_64_sha_info_data_ce0,
        sha_info_data_we0 => grp_local_memset_fu_64_sha_info_data_we0,
        sha_info_data_d0 => grp_local_memset_fu_64_sha_info_data_d0);

    grp_sha_transform_fu_74 : component sha_stream_sha_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_transform_fu_74_ap_start,
        ap_done => grp_sha_transform_fu_74_ap_done,
        ap_idle => grp_sha_transform_fu_74_ap_idle,
        ap_ready => grp_sha_transform_fu_74_ap_ready,
        sha_info_data_address0 => grp_sha_transform_fu_74_sha_info_data_address0,
        sha_info_data_ce0 => grp_sha_transform_fu_74_sha_info_data_ce0,
        sha_info_data_q0 => sha_info_data_q0,
        sha_info_digest_address0 => grp_sha_transform_fu_74_sha_info_digest_address0,
        sha_info_digest_ce0 => grp_sha_transform_fu_74_sha_info_digest_ce0,
        sha_info_digest_we0 => grp_sha_transform_fu_74_sha_info_digest_we0,
        sha_info_digest_d0 => grp_sha_transform_fu_74_sha_info_digest_d0,
        sha_info_digest_q0 => sha_info_digest_q0,
        sha_info_digest_address1 => grp_sha_transform_fu_74_sha_info_digest_address1,
        sha_info_digest_ce1 => grp_sha_transform_fu_74_sha_info_digest_ce1,
        sha_info_digest_we1 => grp_sha_transform_fu_74_sha_info_digest_we1,
        sha_info_digest_d1 => grp_sha_transform_fu_74_sha_info_digest_d1,
        sha_info_digest_q1 => sha_info_digest_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_local_memset_fu_64_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_local_memset_fu_64_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln182_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln182_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_local_memset_fu_64_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_local_memset_fu_64_ap_ready = ap_const_logic_1)) then 
                    grp_local_memset_fu_64_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha_transform_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_transform_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_sha_transform_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_transform_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_sha_transform_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                count_reg_145 <= sha_info_count_lo(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln182_reg_159 <= icmp_ln182_fu_119_p2;
                sub_ln187_reg_163 <= sub_ln187_fu_125_p2;
                trunc_ln175_reg_154 <= trunc_ln175_fu_114_p1;
                    zext_ln183_reg_168(5 downto 0) <= zext_ln183_fu_137_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln183_reg_168(6) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln182_fu_119_p2, grp_local_memset_fu_64_ap_done, grp_sha_transform_fu_74_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln182_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_local_memset_fu_64_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((grp_local_memset_fu_64_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_sha_transform_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_sha_transform_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_sha_transform_fu_74_ap_done)
    begin
        if ((grp_sha_transform_fu_74_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_local_memset_fu_64_ap_done)
    begin
        if ((grp_local_memset_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_local_memset_fu_64_ap_done)
    begin
        if ((grp_local_memset_fu_64_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_sha_transform_fu_74_ap_done)
    begin
        if ((grp_sha_transform_fu_74_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(ap_block_state8_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state8_on_subcall_done)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state8_on_subcall_done_assign_proc : process(icmp_ln182_reg_159, grp_local_memset_fu_64_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_local_memset_fu_64_ap_done = ap_const_logic_0) and (icmp_ln182_reg_159 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha_transform_fu_74_ap_done, ap_CS_fsm_state11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_sha_transform_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha_transform_fu_74_ap_done, ap_CS_fsm_state11)
    begin
        if (((grp_sha_transform_fu_74_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_108_p2 <= std_logic_vector(unsigned(zext_ln175_fu_105_p1) + unsigned(ap_const_lv7_1));
    count_fu_86_p4 <= sha_info_count_lo(8 downto 3);
    grp_local_memset_fu_64_ap_start <= grp_local_memset_fu_64_ap_start_reg;

    grp_local_memset_fu_64_e_assign_proc : process(trunc_ln175_reg_154, icmp_ln182_reg_159, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((icmp_ln182_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_local_memset_fu_64_e <= ap_const_lv4_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_local_memset_fu_64_e <= trunc_ln175_reg_154;
        else 
            grp_local_memset_fu_64_e <= "XXXX";
        end if; 
    end process;


    grp_local_memset_fu_64_n_assign_proc : process(icmp_ln182_reg_159, sub_ln187_reg_163, zext_ln183_reg_168, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((icmp_ln182_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_local_memset_fu_64_n <= ap_const_lv7_38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_local_memset_fu_64_n <= zext_ln183_reg_168;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_local_memset_fu_64_n <= sub_ln187_reg_163;
        else 
            grp_local_memset_fu_64_n <= "XXXXXXX";
        end if; 
    end process;

    grp_sha_transform_fu_74_ap_start <= grp_sha_transform_fu_74_ap_start_reg;
    icmp_ln182_fu_119_p2 <= "1" when (unsigned(count_1_fu_108_p2) > unsigned(ap_const_lv7_38)) else "0";

    sha_info_data_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln182_reg_159, grp_local_memset_fu_64_sha_info_data_address0, grp_sha_transform_fu_74_sha_info_data_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state11, zext_ln180_fu_96_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha_info_data_address0 <= ap_const_lv4_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha_info_data_address0 <= zext_ln180_fu_96_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sha_info_data_address0 <= grp_sha_transform_fu_74_sha_info_data_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln182_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            sha_info_data_address0 <= grp_local_memset_fu_64_sha_info_data_address0;
        else 
            sha_info_data_address0 <= "XXXX";
        end if; 
    end process;

    sha_info_data_address1 <= ap_const_lv4_E;

    sha_info_data_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln182_reg_159, grp_local_memset_fu_64_sha_info_data_ce0, grp_sha_transform_fu_74_sha_info_data_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            sha_info_data_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sha_info_data_ce0 <= grp_sha_transform_fu_74_sha_info_data_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln182_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            sha_info_data_ce0 <= grp_local_memset_fu_64_sha_info_data_ce0;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_ce1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha_info_data_ce1 <= ap_const_logic_1;
        else 
            sha_info_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_d0_assign_proc : process(ap_CS_fsm_state1, sha_info_count_lo, icmp_ln182_reg_159, grp_local_memset_fu_64_sha_info_data_d0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha_info_data_d0 <= sha_info_count_lo;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha_info_data_d0 <= ap_const_lv32_80;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln182_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            sha_info_data_d0 <= grp_local_memset_fu_64_sha_info_data_d0;
        else 
            sha_info_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    sha_info_data_d1 <= sha_info_count_hi;

    sha_info_data_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln182_reg_159, grp_local_memset_fu_64_sha_info_data_we0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            sha_info_data_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln182_reg_159 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            sha_info_data_we0 <= grp_local_memset_fu_64_sha_info_data_we0;
        else 
            sha_info_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sha_info_data_we1 <= ap_const_logic_1;
        else 
            sha_info_data_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_digest_address0 <= grp_sha_transform_fu_74_sha_info_digest_address0;
    sha_info_digest_address1 <= grp_sha_transform_fu_74_sha_info_digest_address1;

    sha_info_digest_ce0_assign_proc : process(grp_sha_transform_fu_74_sha_info_digest_ce0, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sha_info_digest_ce0 <= grp_sha_transform_fu_74_sha_info_digest_ce0;
        else 
            sha_info_digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_ce1_assign_proc : process(grp_sha_transform_fu_74_sha_info_digest_ce1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sha_info_digest_ce1 <= grp_sha_transform_fu_74_sha_info_digest_ce1;
        else 
            sha_info_digest_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_digest_d0 <= grp_sha_transform_fu_74_sha_info_digest_d0;
    sha_info_digest_d1 <= grp_sha_transform_fu_74_sha_info_digest_d1;

    sha_info_digest_we0_assign_proc : process(grp_sha_transform_fu_74_sha_info_digest_we0, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sha_info_digest_we0 <= grp_sha_transform_fu_74_sha_info_digest_we0;
        else 
            sha_info_digest_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_we1_assign_proc : process(grp_sha_transform_fu_74_sha_info_digest_we1, ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            sha_info_digest_we1 <= grp_sha_transform_fu_74_sha_info_digest_we1;
        else 
            sha_info_digest_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln187_fu_125_p2 <= std_logic_vector(unsigned(ap_const_lv7_37) - unsigned(zext_ln175_fu_105_p1));
    trunc_ln175_fu_114_p1 <= count_1_fu_108_p2(4 - 1 downto 0);
    xor_ln183_fu_132_p2 <= (count_reg_145 xor ap_const_lv6_3F);
    zext_ln175_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_reg_145),7));
    zext_ln180_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(count_fu_86_p4),64));
    zext_ln183_fu_137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln183_fu_132_p2),7));
end behav;
