-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream_local_memcpy is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s2_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    s2_ce0 : OUT STD_LOGIC;
    s2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    s2_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    s2_ce1 : OUT STD_LOGIC;
    s2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    s2_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    idx1 : IN STD_LOGIC_VECTOR (13 downto 0);
    sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce0 : OUT STD_LOGIC;
    sha_info_data_we0 : OUT STD_LOGIC;
    sha_info_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_stream_local_memcpy is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_9_fu_140_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_reg_350 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_fu_196_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal m_reg_358 : STD_LOGIC_VECTOR (30 downto 0);
    signal idx9_load_reg_363 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln73_fu_239_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln73_reg_371 : STD_LOGIC_VECTOR (13 downto 0);
    signal p2_load_reg_387 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p2_1_load_reg_397 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln73_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln79_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln82_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln83_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal idx9_fu_60 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln79_1_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx_fu_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln79_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln76_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_162_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln76_fu_172_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_182_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_148_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln76_1_fu_176_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_1_fu_192_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln79_1_fu_217_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln79_fu_235_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln73_1_fu_244_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln82_fu_254_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln82_1_fu_260_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln83_fu_286_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln83_1_fu_291_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln84_fu_301_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln84_1_fu_306_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx9_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx9_fu_60 <= ap_const_lv5_0;
            elsif (((icmp_ln79_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx9_fu_60 <= add_ln79_1_fu_226_p2;
            end if; 
        end if;
    end process;

    idx_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_64 <= ap_const_lv32_0;
            elsif (((icmp_ln79_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                idx_fu_64 <= add_ln79_fu_270_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln73_reg_371 <= add_ln73_fu_239_p2;
                idx9_load_reg_363 <= idx9_fu_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                m_reg_358 <= m_fu_196_p3;
                    tmp_9_reg_350(13) <= tmp_9_fu_140_p3(13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p2_1_load_reg_397 <= s2_q0;
                p2_load_reg_387 <= s2_q1;
            end if;
        end if;
    end process;
    tmp_9_reg_350(12 downto 0) <= "0000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln79_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln79_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln73_1_fu_244_p2 <= std_logic_vector(unsigned(tmp_9_reg_350) + unsigned(add_ln73_fu_239_p2));
    add_ln73_fu_239_p2 <= std_logic_vector(unsigned(trunc_ln79_fu_235_p1) + unsigned(idx1));
    add_ln79_1_fu_226_p2 <= std_logic_vector(unsigned(idx9_fu_60) + unsigned(ap_const_lv5_1));
    add_ln79_fu_270_p2 <= std_logic_vector(unsigned(idx_fu_64) + unsigned(ap_const_lv32_4));
    add_ln82_1_fu_260_p2 <= std_logic_vector(unsigned(tmp_9_reg_350) + unsigned(add_ln82_fu_254_p2));
    add_ln82_fu_254_p2 <= std_logic_vector(unsigned(add_ln73_fu_239_p2) + unsigned(ap_const_lv14_1));
    add_ln83_1_fu_291_p2 <= std_logic_vector(unsigned(tmp_9_reg_350) + unsigned(add_ln83_fu_286_p2));
    add_ln83_fu_286_p2 <= std_logic_vector(unsigned(add_ln73_reg_371) + unsigned(ap_const_lv14_2));
    add_ln84_1_fu_306_p2 <= std_logic_vector(unsigned(tmp_9_reg_350) + unsigned(add_ln84_fu_301_p2));
    add_ln84_fu_301_p2 <= std_logic_vector(unsigned(add_ln73_reg_371) + unsigned(ap_const_lv14_3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln79_fu_221_p2)
    begin
        if ((((icmp_ln79_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln79_fu_221_p2)
    begin
        if (((icmp_ln79_fu_221_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln79_fu_221_p2 <= "1" when (signed(zext_ln79_1_fu_217_p1) < signed(m_reg_358)) else "0";
    m_fu_196_p3 <= 
        sub_ln76_1_fu_176_p2 when (tmp_3_fu_148_p3(0) = '1') else 
        zext_ln76_1_fu_192_p1;

    s2_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln82_fu_265_p1, zext_ln84_fu_311_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s2_address0 <= zext_ln84_fu_311_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_address0 <= zext_ln82_fu_265_p1(14 - 1 downto 0);
        else 
            s2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    s2_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, zext_ln73_fu_249_p1, zext_ln83_fu_296_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s2_address1 <= zext_ln83_fu_296_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s2_address1 <= zext_ln73_fu_249_p1(14 - 1 downto 0);
        else 
            s2_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    s2_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s2_ce0 <= ap_const_logic_1;
        else 
            s2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s2_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s2_ce1 <= ap_const_logic_1;
        else 
            s2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_data_address0 <= zext_ln79_fu_316_p1(4 - 1 downto 0);

    sha_info_data_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_data_ce0 <= ap_const_logic_1;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sha_info_data_d0 <= (((s2_q0 & s2_q1) & p2_1_load_reg_397) & p2_load_reg_387);

    sha_info_data_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_data_we0 <= ap_const_logic_1;
        else 
            sha_info_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln76_1_fu_176_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(zext_ln76_fu_172_p1));
    sub_ln76_fu_156_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(n));
    tmp_1_fu_182_p4 <= n(31 downto 2);
    tmp_3_fu_148_p3 <= n(31 downto 31);
    tmp_9_fu_140_p3 <= (s2_offset & ap_const_lv13_0);
    tmp_s_fu_162_p4 <= sub_ln76_fu_156_p2(31 downto 2);
    trunc_ln79_fu_235_p1 <= idx_fu_64(14 - 1 downto 0);
    zext_ln73_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln73_1_fu_244_p2),64));
    zext_ln76_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_182_p4),31));
    zext_ln76_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_162_p4),31));
    zext_ln79_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx9_fu_60),31));
    zext_ln79_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx9_load_reg_363),64));
    zext_ln82_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln82_1_fu_260_p2),64));
    zext_ln83_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln83_1_fu_291_p2),64));
    zext_ln84_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_1_fu_306_p2),64));
end behav;
