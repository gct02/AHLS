// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_sha_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha_info_data_address0,
        sha_info_data_ce0,
        sha_info_data_q0,
        sha_info_digest_address0,
        sha_info_digest_ce0,
        sha_info_digest_we0,
        sha_info_digest_d0,
        sha_info_digest_q0,
        sha_info_digest_address1,
        sha_info_digest_ce1,
        sha_info_digest_we1,
        sha_info_digest_d1,
        sha_info_digest_q1
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] sha_info_data_address0;
output   sha_info_data_ce0;
input  [31:0] sha_info_data_q0;
output  [2:0] sha_info_digest_address0;
output   sha_info_digest_ce0;
output   sha_info_digest_we0;
output  [31:0] sha_info_digest_d0;
input  [31:0] sha_info_digest_q0;
output  [2:0] sha_info_digest_address1;
output   sha_info_digest_ce1;
output   sha_info_digest_we1;
output  [31:0] sha_info_digest_d1;
input  [31:0] sha_info_digest_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sha_info_data_ce0;
reg[2:0] sha_info_digest_address0;
reg sha_info_digest_ce0;
reg sha_info_digest_we0;
reg[31:0] sha_info_digest_d0;
reg[2:0] sha_info_digest_address1;
reg sha_info_digest_ce1;
reg sha_info_digest_we1;
reg[31:0] sha_info_digest_d1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln99_fu_382_p1;
reg   [63:0] zext_ln99_reg_1152;
wire    ap_CS_fsm_state2;
reg   [6:0] i_7_reg_1169;
wire    ap_CS_fsm_state4;
wire   [31:0] W_q1;
reg   [31:0] W_load_reg_1217;
wire    ap_CS_fsm_state5;
wire   [31:0] W_q0;
reg   [31:0] W_load_1_reg_1222;
reg   [31:0] A_reg_1237;
wire    ap_CS_fsm_state7;
reg   [31:0] B_reg_1243;
wire    ap_CS_fsm_state8;
reg   [31:0] C_reg_1249;
reg   [31:0] D_reg_1254;
wire    ap_CS_fsm_state9;
reg   [31:0] E_reg_1259;
wire    ap_CS_fsm_state10;
wire   [31:0] add_ln119_2_fu_559_p2;
reg   [31:0] add_ln119_2_reg_1272;
wire   [31:0] A_9_fu_655_p2;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [31:0] add_ln122_2_fu_701_p2;
reg   [31:0] add_ln122_2_reg_1318;
wire   [31:0] A_10_fu_803_p2;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [31:0] add_ln125_2_fu_861_p2;
reg   [31:0] add_ln125_2_reg_1364;
wire   [31:0] A_11_fu_973_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire   [31:0] add_ln128_2_fu_1019_p2;
reg   [31:0] add_ln128_2_reg_1427;
wire   [31:0] add_ln134_fu_1090_p2;
reg   [31:0] add_ln134_reg_1432;
wire   [31:0] add_ln135_fu_1095_p2;
reg   [31:0] add_ln135_reg_1437;
reg   [6:0] W_address0;
reg    W_ce0;
reg    W_we0;
reg   [6:0] W_address1;
reg    W_ce1;
reg    W_we1;
wire   [31:0] W_d1;
reg   [31:0] B_10_reg_290;
reg   [31:0] B_2_reg_300;
reg   [31:0] B_11_reg_311;
wire   [0:0] icmp_ln118_fu_512_p2;
reg   [31:0] B_4_reg_322;
reg   [31:0] B_12_reg_334;
wire   [0:0] icmp_ln121_fu_672_p2;
reg   [31:0] B_6_reg_345;
wire   [0:0] icmp_ln99_fu_370_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln107_fu_412_p1;
wire   [0:0] icmp_ln105_fu_400_p2;
wire   [63:0] zext_ln107_1_fu_423_p1;
wire   [63:0] zext_ln107_2_fu_449_p1;
wire   [63:0] zext_ln107_3_fu_459_p1;
wire   [63:0] zext_ln105_fu_464_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln95_fu_524_p1;
wire   [63:0] zext_ln95_1_fu_678_p1;
wire   [63:0] zext_ln95_2_fu_826_p1;
wire   [0:0] icmp_ln124_fu_820_p2;
wire   [63:0] zext_ln127_fu_996_p1;
wire   [0:0] icmp_ln127_fu_990_p2;
reg   [4:0] i_fu_98;
wire   [4:0] add_ln99_fu_376_p2;
reg   [6:0] i_1_fu_106;
wire   [6:0] add_ln105_fu_428_p2;
reg   [4:0] i_2_fu_110;
wire   [4:0] add_ln118_fu_518_p2;
reg   [31:0] C_1_fu_114;
wire   [31:0] C_2_fu_579_p3;
reg   [31:0] D_1_fu_118;
reg   [31:0] E_1_fu_122;
reg   [5:0] i_3_fu_126;
wire   [5:0] add_ln121_fu_729_p2;
reg   [31:0] C_3_fu_130;
wire   [31:0] C_4_fu_721_p3;
reg   [31:0] D_2_fu_134;
reg   [31:0] E_2_fu_138;
reg   [5:0] i_4_fu_142;
wire   [5:0] add_ln124_fu_889_p2;
reg   [31:0] C_7_fu_146;
wire   [31:0] C_6_fu_881_p3;
reg   [31:0] D_5_fu_150;
reg   [31:0] E_5_fu_154;
reg   [31:0] E_7_fu_158;
wire    ap_CS_fsm_state19;
reg   [31:0] B_5_fu_162;
reg   [6:0] i_5_fu_166;
wire   [6:0] add_ln127_fu_1047_p2;
reg   [31:0] E_9_fu_170;
reg   [31:0] D_8_fu_174;
wire   [31:0] C_8_fu_1039_p3;
reg   [31:0] B_7_fu_178;
wire   [31:0] temp_fu_1126_p2;
wire    ap_CS_fsm_state17;
wire   [31:0] add_ln132_fu_1078_p2;
wire   [31:0] add_ln133_fu_1084_p2;
wire    ap_CS_fsm_state18;
wire   [31:0] add_ln136_fu_1136_p2;
wire   [6:0] add_ln107_fu_406_p2;
wire   [6:0] add_ln107_1_fu_417_p2;
wire   [6:0] add_ln107_2_fu_444_p2;
wire   [6:0] add_ln107_3_fu_454_p2;
wire   [31:0] xor_ln107_1_fu_472_p2;
wire   [31:0] xor_ln107_fu_468_p2;
wire   [31:0] xor_ln119_fu_529_p2;
wire   [31:0] and_ln119_1_fu_541_p2;
wire   [31:0] and_ln119_fu_535_p2;
wire   [31:0] or_ln119_fu_547_p2;
wire   [31:0] add_ln119_1_fu_553_p2;
wire   [1:0] trunc_ln119_1_fu_565_p1;
wire   [29:0] lshr_ln119_1_fu_569_p4;
wire   [26:0] trunc_ln119_fu_627_p1;
wire   [4:0] lshr_ln_fu_631_p4;
wire   [31:0] or_ln119_1_fu_641_p3;
wire   [31:0] add_ln119_fu_649_p2;
wire   [31:0] xor_ln122_fu_683_p2;
wire   [31:0] xor_ln122_1_fu_689_p2;
wire   [31:0] add_ln122_1_fu_695_p2;
wire   [1:0] trunc_ln122_1_fu_707_p1;
wire   [29:0] lshr_ln122_1_fu_711_p4;
wire   [26:0] trunc_ln122_fu_775_p1;
wire   [4:0] lshr_ln1_fu_779_p4;
wire   [31:0] or_ln_fu_789_p3;
wire   [31:0] add_ln122_fu_797_p2;
wire   [31:0] or_ln125_fu_831_p2;
wire   [31:0] and_ln125_fu_837_p2;
wire   [31:0] and_ln125_1_fu_843_p2;
wire   [31:0] or_ln125_1_fu_849_p2;
wire   [31:0] add_ln125_1_fu_855_p2;
wire   [1:0] trunc_ln125_1_fu_867_p1;
wire   [29:0] lshr_ln125_1_fu_871_p4;
wire   [26:0] trunc_ln125_fu_945_p1;
wire   [4:0] lshr_ln2_fu_949_p4;
wire   [31:0] or_ln125_2_fu_959_p3;
wire   [31:0] add_ln125_fu_967_p2;
wire   [31:0] xor_ln128_fu_1001_p2;
wire   [31:0] xor_ln128_1_fu_1007_p2;
wire   [31:0] add_ln128_1_fu_1013_p2;
wire   [1:0] trunc_ln128_1_fu_1025_p1;
wire   [29:0] lshr_ln128_1_fu_1029_p4;
wire   [26:0] trunc_ln128_fu_1100_p1;
wire   [4:0] lshr_ln3_fu_1103_p4;
wire   [31:0] or_ln1_fu_1112_p3;
wire   [31:0] add_ln128_fu_1120_p2;
reg   [18:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 i_fu_98 = 5'd0;
#0 i_1_fu_106 = 7'd0;
#0 i_2_fu_110 = 5'd0;
#0 C_1_fu_114 = 32'd0;
#0 D_1_fu_118 = 32'd0;
#0 E_1_fu_122 = 32'd0;
#0 i_3_fu_126 = 6'd0;
#0 C_3_fu_130 = 32'd0;
#0 D_2_fu_134 = 32'd0;
#0 E_2_fu_138 = 32'd0;
#0 i_4_fu_142 = 6'd0;
#0 C_7_fu_146 = 32'd0;
#0 D_5_fu_150 = 32'd0;
#0 E_5_fu_154 = 32'd0;
#0 E_7_fu_158 = 32'd0;
#0 B_5_fu_162 = 32'd0;
#0 i_5_fu_166 = 7'd0;
#0 E_9_fu_170 = 32'd0;
#0 D_8_fu_174 = 32'd0;
#0 B_7_fu_178 = 32'd0;
end

sha_stream_sha_transform_W_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
W_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_address0),
    .ce0(W_ce0),
    .we0(W_we0),
    .d0(sha_info_data_q0),
    .q0(W_q0),
    .address1(W_address1),
    .ce1(W_ce1),
    .we1(W_we1),
    .d1(W_d1),
    .q1(W_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_10_reg_290 <= A_reg_1237;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        B_10_reg_290 <= A_9_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
        B_11_reg_311 <= B_10_reg_290;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        B_11_reg_311 <= A_10_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
        B_12_reg_334 <= B_11_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        B_12_reg_334 <= A_11_fu_973_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        B_2_reg_300 <= B_reg_1243;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        B_2_reg_300 <= B_10_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
        B_4_reg_322 <= B_2_reg_300;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        B_4_reg_322 <= B_11_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        B_5_fu_162 <= B_6_reg_345;
    end else if (((icmp_ln127_fu_990_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        B_5_fu_162 <= B_7_fu_178;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
        B_6_reg_345 <= B_4_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        B_6_reg_345 <= B_12_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        B_7_fu_178 <= B_12_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        B_7_fu_178 <= temp_fu_1126_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C_1_fu_114 <= sha_info_digest_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd0))) begin
        C_1_fu_114 <= C_2_fu_579_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
        C_3_fu_130 <= C_1_fu_114;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd0))) begin
        C_3_fu_130 <= C_4_fu_721_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
        C_7_fu_146 <= C_3_fu_130;
    end else if (((icmp_ln124_fu_820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        C_7_fu_146 <= C_6_fu_881_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        D_1_fu_118 <= sha_info_digest_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd0))) begin
        D_1_fu_118 <= C_1_fu_114;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
        D_2_fu_134 <= D_1_fu_118;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd0))) begin
        D_2_fu_134 <= C_3_fu_130;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
        D_5_fu_150 <= D_2_fu_134;
    end else if (((icmp_ln124_fu_820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        D_5_fu_150 <= C_7_fu_146;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        D_8_fu_174 <= C_7_fu_146;
    end else if (((icmp_ln127_fu_990_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        D_8_fu_174 <= C_8_fu_1039_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        E_1_fu_122 <= sha_info_digest_q1;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd0))) begin
        E_1_fu_122 <= D_1_fu_118;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
        E_2_fu_138 <= E_1_fu_122;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd0))) begin
        E_2_fu_138 <= D_2_fu_134;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
        E_5_fu_154 <= E_2_fu_138;
    end else if (((icmp_ln124_fu_820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        E_5_fu_154 <= D_5_fu_150;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        E_7_fu_158 <= E_5_fu_154;
    end else if (((icmp_ln127_fu_990_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        E_7_fu_158 <= E_9_fu_170;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        E_9_fu_170 <= D_5_fu_150;
    end else if (((icmp_ln127_fu_990_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        E_9_fu_170 <= D_8_fu_174;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln99_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_fu_106 <= 7'd16;
    end else if (((icmp_ln105_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_fu_106 <= add_ln105_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln105_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_2_fu_110 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd0))) begin
        i_2_fu_110 <= add_ln118_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
        i_3_fu_126 <= 6'd20;
    end else if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd0))) begin
        i_3_fu_126 <= add_ln121_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
        i_4_fu_142 <= 6'd40;
    end else if (((icmp_ln124_fu_820_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_4_fu_142 <= add_ln124_fu_889_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        i_5_fu_166 <= 7'd60;
    end else if (((icmp_ln127_fu_990_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        i_5_fu_166 <= add_ln127_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_98 <= 5'd0;
    end else if (((icmp_ln99_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_98 <= add_ln99_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_reg_1237 <= sha_info_digest_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_reg_1243 <= sha_info_digest_q1;
        C_reg_1249 <= sha_info_digest_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        D_reg_1254 <= sha_info_digest_q0;
        E_reg_1259 <= sha_info_digest_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        W_load_1_reg_1222 <= W_q0;
        W_load_reg_1217 <= W_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln119_2_reg_1272 <= add_ln119_2_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln122_2_reg_1318 <= add_ln122_2_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln125_2_reg_1364 <= add_ln125_2_fu_861_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln128_2_reg_1427 <= add_ln128_2_fu_1019_p2;
        add_ln134_reg_1432 <= add_ln134_fu_1090_p2;
        add_ln135_reg_1437 <= add_ln135_fu_1095_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_7_reg_1169 <= i_1_fu_106;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln99_reg_1152[4 : 0] <= zext_ln99_fu_382_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        W_address0 = zext_ln95_2_fu_826_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        W_address0 = zext_ln95_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        W_address0 = zext_ln107_2_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W_address0 = zext_ln107_1_fu_423_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W_address0 = zext_ln99_reg_1152;
    end else begin
        W_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        W_address1 = zext_ln127_fu_996_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        W_address1 = zext_ln95_1_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        W_address1 = zext_ln105_fu_464_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        W_address1 = zext_ln107_3_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W_address1 = zext_ln107_fu_412_p1;
    end else begin
        W_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12))) begin
        W_ce1 = 1'b1;
    end else begin
        W_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        W_we0 = 1'b1;
    end else begin
        W_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        W_we1 = 1'b1;
    end else begin
        W_we1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_data_ce0 = 1'b1;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sha_info_digest_address0 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state18))) begin
        sha_info_digest_address0 = 3'd2;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state16))) begin
        sha_info_digest_address0 = 3'd0;
    end else begin
        sha_info_digest_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sha_info_digest_address1 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state8))) begin
        sha_info_digest_address1 = 3'd4;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state16))) begin
        sha_info_digest_address1 = 3'd1;
    end else begin
        sha_info_digest_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        sha_info_digest_ce0 = 1'b1;
    end else begin
        sha_info_digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        sha_info_digest_ce1 = 1'b1;
    end else begin
        sha_info_digest_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sha_info_digest_d0 = add_ln134_reg_1432;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sha_info_digest_d0 = add_ln132_fu_1078_p2;
    end else begin
        sha_info_digest_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sha_info_digest_d1 = add_ln136_fu_1136_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sha_info_digest_d1 = add_ln135_reg_1437;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sha_info_digest_d1 = add_ln133_fu_1084_p2;
    end else begin
        sha_info_digest_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((icmp_ln127_fu_990_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        sha_info_digest_we0 = 1'b1;
    end else begin
        sha_info_digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | ((icmp_ln127_fu_990_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16)))) begin
        sha_info_digest_we1 = 1'b1;
    end else begin
        sha_info_digest_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln99_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln105_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln118_fu_512_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln121_fu_672_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln124_fu_820_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln127_fu_990_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_10_fu_803_p2 = (add_ln122_2_reg_1318 + add_ln122_fu_797_p2);

assign A_11_fu_973_p2 = (add_ln125_2_reg_1364 + add_ln125_fu_967_p2);

assign A_9_fu_655_p2 = (add_ln119_2_reg_1272 + add_ln119_fu_649_p2);

assign C_2_fu_579_p3 = {{trunc_ln119_1_fu_565_p1}, {lshr_ln119_1_fu_569_p4}};

assign C_4_fu_721_p3 = {{trunc_ln122_1_fu_707_p1}, {lshr_ln122_1_fu_711_p4}};

assign C_6_fu_881_p3 = {{trunc_ln125_1_fu_867_p1}, {lshr_ln125_1_fu_871_p4}};

assign C_8_fu_1039_p3 = {{trunc_ln128_1_fu_1025_p1}, {lshr_ln128_1_fu_1029_p4}};

assign W_d1 = (xor_ln107_fu_468_p2 ^ xor_ln107_1_fu_472_p2);

assign add_ln105_fu_428_p2 = (i_1_fu_106 + 7'd1);

assign add_ln107_1_fu_417_p2 = ($signed(i_1_fu_106) + $signed(7'd120));

assign add_ln107_2_fu_444_p2 = ($signed(i_7_reg_1169) + $signed(7'd114));

assign add_ln107_3_fu_454_p2 = ($signed(i_7_reg_1169) + $signed(7'd112));

assign add_ln107_fu_406_p2 = ($signed(i_1_fu_106) + $signed(7'd125));

assign add_ln118_fu_518_p2 = (i_2_fu_110 + 5'd1);

assign add_ln119_1_fu_553_p2 = (or_ln119_fu_547_p2 + 32'd1518500249);

assign add_ln119_2_fu_559_p2 = (add_ln119_1_fu_553_p2 + E_1_fu_122);

assign add_ln119_fu_649_p2 = (W_q0 + or_ln119_1_fu_641_p3);

assign add_ln121_fu_729_p2 = (i_3_fu_126 + 6'd1);

assign add_ln122_1_fu_695_p2 = (xor_ln122_1_fu_689_p2 + 32'd1859775393);

assign add_ln122_2_fu_701_p2 = (add_ln122_1_fu_695_p2 + E_2_fu_138);

assign add_ln122_fu_797_p2 = (W_q1 + or_ln_fu_789_p3);

assign add_ln124_fu_889_p2 = (i_4_fu_142 + 6'd1);

assign add_ln125_1_fu_855_p2 = (E_5_fu_154 + or_ln125_1_fu_849_p2);

assign add_ln125_2_fu_861_p2 = ($signed(add_ln125_1_fu_855_p2) + $signed(32'd2400959708));

assign add_ln125_fu_967_p2 = (W_q0 + or_ln125_2_fu_959_p3);

assign add_ln127_fu_1047_p2 = (i_5_fu_166 + 7'd1);

assign add_ln128_1_fu_1013_p2 = ($signed(xor_ln128_1_fu_1007_p2) + $signed(32'd3395469782));

assign add_ln128_2_fu_1019_p2 = (add_ln128_1_fu_1013_p2 + E_7_fu_158);

assign add_ln128_fu_1120_p2 = (W_q1 + or_ln1_fu_1112_p3);

assign add_ln132_fu_1078_p2 = (A_reg_1237 + B_7_fu_178);

assign add_ln133_fu_1084_p2 = (B_reg_1243 + B_5_fu_162);

assign add_ln134_fu_1090_p2 = (C_reg_1249 + D_8_fu_174);

assign add_ln135_fu_1095_p2 = (D_reg_1254 + E_9_fu_170);

assign add_ln136_fu_1136_p2 = (E_reg_1259 + E_7_fu_158);

assign add_ln99_fu_376_p2 = (i_fu_98 + 5'd1);

assign and_ln119_1_fu_541_p2 = (xor_ln119_fu_529_p2 & D_1_fu_118);

assign and_ln119_fu_535_p2 = (C_1_fu_114 & B_2_reg_300);

assign and_ln125_1_fu_843_p2 = (D_5_fu_150 & C_7_fu_146);

assign and_ln125_fu_837_p2 = (or_ln125_fu_831_p2 & B_6_reg_345);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln105_fu_400_p2 = ((i_1_fu_106 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln118_fu_512_p2 = ((i_2_fu_110 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_672_p2 = ((i_3_fu_126 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_820_p2 = ((i_4_fu_142 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_990_p2 = ((i_5_fu_166 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln99_fu_370_p2 = ((i_fu_98 == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln119_1_fu_569_p4 = {{B_2_reg_300[31:2]}};

assign lshr_ln122_1_fu_711_p4 = {{B_4_reg_322[31:2]}};

assign lshr_ln125_1_fu_871_p4 = {{B_6_reg_345[31:2]}};

assign lshr_ln128_1_fu_1029_p4 = {{B_5_fu_162[31:2]}};

assign lshr_ln1_fu_779_p4 = {{B_11_reg_311[31:27]}};

assign lshr_ln2_fu_949_p4 = {{B_12_reg_334[31:27]}};

assign lshr_ln3_fu_1103_p4 = {{B_7_fu_178[31:27]}};

assign lshr_ln_fu_631_p4 = {{B_10_reg_290[31:27]}};

assign or_ln119_1_fu_641_p3 = {{trunc_ln119_fu_627_p1}, {lshr_ln_fu_631_p4}};

assign or_ln119_fu_547_p2 = (and_ln119_fu_535_p2 | and_ln119_1_fu_541_p2);

assign or_ln125_1_fu_849_p2 = (and_ln125_fu_837_p2 | and_ln125_1_fu_843_p2);

assign or_ln125_2_fu_959_p3 = {{trunc_ln125_fu_945_p1}, {lshr_ln2_fu_949_p4}};

assign or_ln125_fu_831_p2 = (D_5_fu_150 | C_7_fu_146);

assign or_ln1_fu_1112_p3 = {{trunc_ln128_fu_1100_p1}, {lshr_ln3_fu_1103_p4}};

assign or_ln_fu_789_p3 = {{trunc_ln122_fu_775_p1}, {lshr_ln1_fu_779_p4}};

assign sha_info_data_address0 = zext_ln99_fu_382_p1;

assign temp_fu_1126_p2 = (add_ln128_2_reg_1427 + add_ln128_fu_1120_p2);

assign trunc_ln119_1_fu_565_p1 = B_2_reg_300[1:0];

assign trunc_ln119_fu_627_p1 = B_10_reg_290[26:0];

assign trunc_ln122_1_fu_707_p1 = B_4_reg_322[1:0];

assign trunc_ln122_fu_775_p1 = B_11_reg_311[26:0];

assign trunc_ln125_1_fu_867_p1 = B_6_reg_345[1:0];

assign trunc_ln125_fu_945_p1 = B_12_reg_334[26:0];

assign trunc_ln128_1_fu_1025_p1 = B_5_fu_162[1:0];

assign trunc_ln128_fu_1100_p1 = B_7_fu_178[26:0];

assign xor_ln107_1_fu_472_p2 = (W_q1 ^ W_q0);

assign xor_ln107_fu_468_p2 = (W_load_reg_1217 ^ W_load_1_reg_1222);

assign xor_ln119_fu_529_p2 = (32'd4294967295 ^ B_2_reg_300);

assign xor_ln122_1_fu_689_p2 = (xor_ln122_fu_683_p2 ^ C_3_fu_130);

assign xor_ln122_fu_683_p2 = (D_2_fu_134 ^ B_4_reg_322);

assign xor_ln128_1_fu_1007_p2 = (xor_ln128_fu_1001_p2 ^ D_8_fu_174);

assign xor_ln128_fu_1001_p2 = (E_9_fu_170 ^ B_5_fu_162);

assign zext_ln105_fu_464_p1 = i_7_reg_1169;

assign zext_ln107_1_fu_423_p1 = add_ln107_1_fu_417_p2;

assign zext_ln107_2_fu_449_p1 = add_ln107_2_fu_444_p2;

assign zext_ln107_3_fu_459_p1 = add_ln107_3_fu_454_p2;

assign zext_ln107_fu_412_p1 = add_ln107_fu_406_p2;

assign zext_ln127_fu_996_p1 = i_5_fu_166;

assign zext_ln95_1_fu_678_p1 = i_3_fu_126;

assign zext_ln95_2_fu_826_p1 = i_4_fu_142;

assign zext_ln95_fu_524_p1 = i_2_fu_110;

assign zext_ln99_fu_382_p1 = i_fu_98;

always @ (posedge ap_clk) begin
    zext_ln99_reg_1152[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha_stream_sha_transform
