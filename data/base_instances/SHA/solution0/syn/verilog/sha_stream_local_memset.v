// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module sha_stream_local_memset (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        n,
        e,
        sha_info_data_address0,
        sha_info_data_ce0,
        sha_info_data_we0,
        sha_info_data_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] n;
input  [3:0] e;
output  [3:0] sha_info_data_address0;
output   sha_info_data_ce0;
output   sha_info_data_we0;
output  [31:0] sha_info_data_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sha_info_data_ce0;
reg sha_info_data_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [30:0] m_fu_132_p3;
reg   [30:0] m_reg_194;
wire   [63:0] zext_ln57_fu_172_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln66_fu_152_p2;
reg   [29:0] idx_fu_46;
wire   [29:0] add_ln66_fu_157_p2;
wire   [6:0] sub_ln58_fu_84_p2;
wire   [4:0] trunc_ln58_1_fu_90_p4;
wire  signed [29:0] sext_ln58_fu_100_p1;
wire   [30:0] zext_ln58_fu_104_p1;
wire   [4:0] trunc_ln58_2_fu_114_p4;
wire  signed [29:0] sext_ln58_1_fu_124_p1;
wire   [0:0] tmp_fu_76_p3;
wire   [30:0] sub_ln58_1_fu_108_p2;
wire   [30:0] zext_ln58_1_fu_128_p1;
wire   [30:0] zext_ln66_fu_148_p1;
wire   [3:0] trunc_ln66_fu_163_p1;
wire   [3:0] add_ln57_fu_167_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 idx_fu_46 = 30'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        idx_fu_46 <= 30'd0;
    end else if (((icmp_ln66_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        idx_fu_46 <= add_ln66_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        m_reg_194 <= m_fu_132_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln66_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_data_ce0 = 1'b1;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln66_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sha_info_data_we0 = 1'b1;
    end else begin
        sha_info_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln66_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_fu_167_p2 = (trunc_ln66_fu_163_p1 + e);

assign add_ln66_fu_157_p2 = (idx_fu_46 + 30'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln66_fu_152_p2 = (($signed(zext_ln66_fu_148_p1) < $signed(m_reg_194)) ? 1'b1 : 1'b0);

assign m_fu_132_p3 = ((tmp_fu_76_p3[0:0] == 1'b1) ? sub_ln58_1_fu_108_p2 : zext_ln58_1_fu_128_p1);

assign sext_ln58_1_fu_124_p1 = $signed(trunc_ln58_2_fu_114_p4);

assign sext_ln58_fu_100_p1 = $signed(trunc_ln58_1_fu_90_p4);

assign sha_info_data_address0 = zext_ln57_fu_172_p1;

assign sha_info_data_d0 = 32'd0;

assign sub_ln58_1_fu_108_p2 = (31'd0 - zext_ln58_fu_104_p1);

assign sub_ln58_fu_84_p2 = (7'd0 - n);

assign tmp_fu_76_p3 = n[32'd6];

assign trunc_ln58_1_fu_90_p4 = {{sub_ln58_fu_84_p2[6:2]}};

assign trunc_ln58_2_fu_114_p4 = {{n[6:2]}};

assign trunc_ln66_fu_163_p1 = idx_fu_46[3:0];

assign zext_ln57_fu_172_p1 = add_ln57_fu_167_p2;

assign zext_ln58_1_fu_128_p1 = $unsigned(sext_ln58_1_fu_124_p1);

assign zext_ln58_fu_104_p1 = $unsigned(sext_ln58_fu_100_p1);

assign zext_ln66_fu_148_p1 = idx_fu_46;

endmodule //sha_stream_local_memset
