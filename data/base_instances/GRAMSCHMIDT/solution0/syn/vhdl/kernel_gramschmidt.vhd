-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_gramschmidt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ni : IN STD_LOGIC_VECTOR (31 downto 0);
    nj : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    R_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    R_ce0 : OUT STD_LOGIC;
    R_we0 : OUT STD_LOGIC;
    R_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    Q_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    Q_ce0 : OUT STD_LOGIC;
    Q_we0 : OUT STD_LOGIC;
    Q_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    Q_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of kernel_gramschmidt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kernel_gramschmidt_kernel_gramschmidt,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.473000,HLS_SYN_LAT=1416765441,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1787,HLS_SYN_LUT=1985,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_293 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_297 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal add_ln100_fu_332_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln100_reg_654 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln94_fu_338_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln94_reg_659 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_342_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_667 : STD_LOGIC_VECTOR (17 downto 0);
    signal R_addr_reg_672 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln100_1_fu_361_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln100_1_reg_677 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln89_fu_378_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln89_reg_685 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bitcast_ln92_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_706 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln95_fu_425_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln95_reg_715 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal zext_ln98_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_reg_720 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_735 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal trunc_ln103_fu_467_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln103_reg_743 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal R_addr_1_reg_749 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln104_fu_509_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln104_reg_757 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal bitcast_ln107_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal bitcast_ln107_1_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal bitcast_ln107_2_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln109_fu_570_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln109_reg_795 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal add_ln112_fu_584_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln112_reg_800 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln100_1_fu_599_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal bitcast_ln112_1_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal A_addr_3_reg_820 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal bitcast_ln112_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal sub_reg_830 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal i_reg_179 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln100_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal nrm_reg_190 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_202 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal j_reg_213 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln109_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_223 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln100_1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_235 : STD_LOGIC_VECTOR (18 downto 0);
    signal empty_reg_246 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_reg_258 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln104_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln94_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln89_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln103_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_1_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_1_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal indvars_iv40_fu_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln85_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_fu_78 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal bitcast_ln94_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_269_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln100_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln100_fu_319_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln94_fu_350_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln89_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln89_fu_365_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_384_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln92_fu_392_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln95_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln95_fu_412_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_431_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln98_fu_439_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln100_1_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln103_fu_471_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln104_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln104_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_515_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln107_fu_523_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln107_1_fu_533_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln109_fu_561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln109_fu_557_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_576_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln112_1_fu_589_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_269_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_gramschmidt_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gramschmidt_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gramschmidt_ddiv_64ns_64ns_64_14_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kernel_gramschmidt_dsqrt_64ns_64ns_64_12_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dadddsub_64ns_64ns_64_4_full_dsp_1_U1 : component kernel_gramschmidt_dadddsub_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_269_p0,
        din1 => reg_297,
        opcode => grp_fu_269_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U2 : component kernel_gramschmidt_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    ddiv_64ns_64ns_64_14_no_dsp_1_U3 : component kernel_gramschmidt_ddiv_64ns_64ns_64_14_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_280_p0,
        din1 => tmp_reg_706,
        ce => ap_const_logic_1,
        dout => grp_fu_280_p2);

    dsqrt_64ns_64ns_64_12_no_dsp_1_U4 : component kernel_gramschmidt_dsqrt_64ns_64ns_64_12_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => nrm_reg_190,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                empty_reg_246 <= grp_fu_269_p2;
            elsif (((icmp_ln100_1_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                empty_reg_246 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_1_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_1_reg_202 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                i_1_reg_202 <= add_ln95_reg_715;
            end if; 
        end if;
    end process;

    i_2_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                i_2_reg_235 <= add_ln104_reg_757;
            elsif (((icmp_ln100_1_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_2_reg_235 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    i_3_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                i_3_reg_258 <= ap_const_lv19_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                i_3_reg_258 <= add_ln109_reg_795;
            end if; 
        end if;
    end process;

    i_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_179 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_reg_179 <= add_ln89_reg_685;
            end if; 
        end if;
    end process;

    indvars_iv40_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvars_iv40_fu_74 <= ap_const_lv32_1;
            elsif (((icmp_ln100_1_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                indvars_iv40_fu_74 <= add_ln85_fu_481_p2;
            end if; 
        end if;
    end process;

    j_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                j_reg_213 <= trunc_ln100_1_reg_677;
            elsif (((icmp_ln109_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                j_reg_213 <= add_ln100_1_fu_599_p2;
            end if; 
        end if;
    end process;

    k_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_fu_78 <= ap_const_lv19_0;
            elsif (((icmp_ln100_1_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                k_fu_78 <= add_ln100_reg_654;
            end if; 
        end if;
    end process;

    nrm_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln100_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                nrm_reg_190 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                nrm_reg_190 <= grp_fu_269_p2;
            end if; 
        end if;
    end process;

    storemerge_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
                storemerge_reg_223 <= bitcast_ln107_2_fu_553_p1;
            elsif (((icmp_ln100_1_fu_462_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                storemerge_reg_223 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                A_addr_3_reg_820 <= zext_ln112_fu_610_p1(18 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                R_addr_1_reg_749 <= zext_ln103_fu_476_p1(18 - 1 downto 0);
                trunc_ln103_reg_743 <= trunc_ln103_fu_467_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                R_addr_reg_672 <= zext_ln94_fu_356_p1(18 - 1 downto 0);
                add_ln100_reg_654 <= add_ln100_fu_332_p2;
                    tmp_1_reg_667(17 downto 9) <= tmp_1_fu_342_p3(17 downto 9);
                trunc_ln100_1_reg_677 <= trunc_ln100_1_fu_361_p1;
                trunc_ln94_reg_659 <= trunc_ln94_fu_338_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                add_ln104_reg_757 <= add_ln104_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                add_ln109_reg_795 <= add_ln109_fu_570_p2;
                add_ln112_reg_800 <= add_ln112_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln89_reg_685 <= add_ln89_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln95_reg_715 <= add_ln95_fu_425_p2;
                    zext_ln98_reg_720(17 downto 0) <= zext_ln98_fu_444_p1(17 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                div_reg_735 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_293 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state58))) then
                reg_297 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state44))) then
                reg_302 <= Q_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                sub_reg_830 <= grp_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_reg_706 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    tmp_1_reg_667(8 downto 0) <= "000000000";
    zext_ln98_reg_720(63 downto 18) <= "0000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state53, icmp_ln100_fu_327_p2, icmp_ln109_fu_565_p2, icmp_ln95_fu_420_p2, icmp_ln100_1_fu_462_p2, icmp_ln104_fu_504_p2, icmp_ln89_fu_373_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln100_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln89_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln95_fu_420_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state42 => 
                if (((icmp_ln100_1_fu_462_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln104_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state53 => 
                if (((icmp_ln109_fu_565_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, zext_ln98_fu_444_p1, ap_CS_fsm_state43, A_addr_3_reg_820, ap_CS_fsm_state57, ap_CS_fsm_state63, zext_ln92_fu_397_p1, zext_ln107_fu_528_p1, zext_ln112_fu_610_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            A_address0 <= A_addr_3_reg_820;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            A_address0 <= zext_ln112_fu_610_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            A_address0 <= zext_ln107_fu_528_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            A_address0 <= zext_ln98_fu_444_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_address0 <= zext_ln92_fu_397_p1(18 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state43, ap_CS_fsm_state57, ap_CS_fsm_state63)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= sub_reg_830;

    A_we0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Q_address0_assign_proc : process(zext_ln98_reg_720, ap_CS_fsm_state43, ap_CS_fsm_state53, ap_CS_fsm_state41, zext_ln107_1_fu_538_p1, zext_ln112_1_fu_594_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            Q_address0 <= zext_ln112_1_fu_594_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            Q_address0 <= zext_ln107_1_fu_538_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            Q_address0 <= zext_ln98_reg_720(18 - 1 downto 0);
        else 
            Q_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Q_ce0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state53, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            Q_ce0 <= ap_const_logic_1;
        else 
            Q_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Q_d0 <= div_reg_735;

    Q_we0_assign_proc : process(ap_CS_fsm_state41)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            Q_we0 <= ap_const_logic_1;
        else 
            Q_we0 <= ap_const_logic_0;
        end if; 
    end process;


    R_address0_assign_proc : process(R_addr_reg_672, R_addr_1_reg_749, ap_CS_fsm_state43, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            R_address0 <= R_addr_1_reg_749;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            R_address0 <= R_addr_reg_672;
        else 
            R_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    R_ce0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            R_ce0 <= ap_const_logic_1;
        else 
            R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    R_d0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state24, storemerge_reg_223, bitcast_ln94_fu_408_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            R_d0 <= storemerge_reg_223;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            R_d0 <= bitcast_ln94_fu_408_p1;
        else 
            R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    R_we0_assign_proc : process(ap_CS_fsm_state43, ap_CS_fsm_state24, icmp_ln104_fu_504_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((icmp_ln104_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43)))) then 
            R_we0 <= ap_const_logic_1;
        else 
            R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_1_fu_599_p2 <= std_logic_vector(unsigned(j_reg_213) + unsigned(ap_const_lv31_1));
    add_ln100_fu_332_p2 <= std_logic_vector(unsigned(k_fu_78) + unsigned(ap_const_lv19_1));
    add_ln103_fu_471_p2 <= std_logic_vector(unsigned(tmp_1_reg_667) + unsigned(trunc_ln103_fu_467_p1));
    add_ln104_fu_509_p2 <= std_logic_vector(unsigned(i_2_reg_235) + unsigned(ap_const_lv19_1));
    add_ln107_1_fu_533_p2 <= std_logic_vector(unsigned(tmp_4_fu_515_p3) + unsigned(trunc_ln94_reg_659));
    add_ln107_fu_523_p2 <= std_logic_vector(unsigned(tmp_4_fu_515_p3) + unsigned(trunc_ln103_reg_743));
    add_ln109_fu_570_p2 <= std_logic_vector(unsigned(i_3_reg_258) + unsigned(ap_const_lv19_1));
    add_ln112_1_fu_589_p2 <= std_logic_vector(unsigned(tmp_5_fu_576_p3) + unsigned(trunc_ln94_reg_659));
    add_ln112_fu_584_p2 <= std_logic_vector(unsigned(tmp_5_fu_576_p3) + unsigned(trunc_ln103_reg_743));
    add_ln85_fu_481_p2 <= std_logic_vector(unsigned(indvars_iv40_fu_74) + unsigned(ap_const_lv32_1));
    add_ln89_fu_378_p2 <= std_logic_vector(unsigned(i_reg_179) + unsigned(ap_const_lv31_1));
    add_ln92_fu_392_p2 <= std_logic_vector(unsigned(tmp_2_fu_384_p3) + unsigned(trunc_ln94_reg_659));
    add_ln94_fu_350_p2 <= std_logic_vector(unsigned(tmp_1_fu_342_p3) + unsigned(trunc_ln94_fu_338_p1));
    add_ln95_fu_425_p2 <= std_logic_vector(unsigned(i_1_reg_202) + unsigned(ap_const_lv19_1));
    add_ln98_fu_439_p2 <= std_logic_vector(unsigned(tmp_3_fu_431_p3) + unsigned(trunc_ln94_reg_659));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln100_fu_327_p2)
    begin
        if (((icmp_ln100_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln100_fu_327_p2)
    begin
        if (((icmp_ln100_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln107_1_fu_548_p1 <= reg_293;
    bitcast_ln107_2_fu_553_p1 <= grp_fu_269_p2;
    bitcast_ln107_fu_543_p1 <= reg_302;
    bitcast_ln112_1_fu_605_p1 <= reg_302;
    bitcast_ln112_fu_614_p1 <= reg_293;
    bitcast_ln92_fu_402_p1 <= reg_293;
    bitcast_ln94_fu_408_p1 <= tmp_reg_706;

    grp_fu_269_opcode_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state9, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_269_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_269_opcode <= ap_const_lv2_0;
        else 
            grp_fu_269_opcode <= "XX";
        end if; 
    end process;


    grp_fu_269_p0_assign_proc : process(bitcast_ln112_fu_614_p1, ap_CS_fsm_state59, nrm_reg_190, empty_reg_246, ap_CS_fsm_state9, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_269_p0 <= bitcast_ln112_fu_614_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_269_p0 <= empty_reg_246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_269_p0 <= nrm_reg_190;
        else 
            grp_fu_269_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_275_p0_assign_proc : process(bitcast_ln92_fu_402_p1, ap_CS_fsm_state5, bitcast_ln107_fu_543_p1, ap_CS_fsm_state45, bitcast_ln112_1_fu_605_p1, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_275_p0 <= bitcast_ln112_1_fu_605_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_275_p0 <= bitcast_ln107_fu_543_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_275_p0 <= bitcast_ln92_fu_402_p1;
        else 
            grp_fu_275_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_275_p1_assign_proc : process(bitcast_ln92_fu_402_p1, ap_CS_fsm_state5, ap_CS_fsm_state45, bitcast_ln107_1_fu_548_p1, ap_CS_fsm_state55, empty_reg_246)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_275_p1 <= empty_reg_246;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_275_p1 <= bitcast_ln107_1_fu_548_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_275_p1 <= bitcast_ln92_fu_402_p1;
        else 
            grp_fu_275_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_280_p0 <= reg_293;
    icmp_ln100_1_fu_462_p2 <= "1" when (zext_ln100_1_fu_458_p1 = nj) else "0";
    icmp_ln100_fu_327_p2 <= "1" when (signed(zext_ln100_fu_323_p1) < signed(nj)) else "0";
    icmp_ln104_fu_504_p2 <= "1" when (signed(zext_ln104_fu_500_p1) < signed(ni)) else "0";
    icmp_ln109_fu_565_p2 <= "1" when (signed(zext_ln109_fu_561_p1) < signed(ni)) else "0";
    icmp_ln89_fu_373_p2 <= "1" when (signed(zext_ln89_fu_369_p1) < signed(ni)) else "0";
    icmp_ln95_fu_420_p2 <= "1" when (signed(zext_ln95_fu_416_p1) < signed(ni)) else "0";
    tmp_1_fu_342_p3 <= (trunc_ln100_fu_319_p1 & ap_const_lv9_0);
    tmp_2_fu_384_p3 <= (trunc_ln89_fu_365_p1 & ap_const_lv9_0);
    tmp_3_fu_431_p3 <= (trunc_ln95_fu_412_p1 & ap_const_lv9_0);
    tmp_4_fu_515_p3 <= (trunc_ln104_fu_496_p1 & ap_const_lv9_0);
    tmp_5_fu_576_p3 <= (trunc_ln109_fu_557_p1 & ap_const_lv9_0);
    trunc_ln100_1_fu_361_p1 <= indvars_iv40_fu_74(31 - 1 downto 0);
    trunc_ln100_fu_319_p1 <= k_fu_78(9 - 1 downto 0);
    trunc_ln103_fu_467_p1 <= j_reg_213(18 - 1 downto 0);
    trunc_ln104_fu_496_p1 <= i_2_reg_235(9 - 1 downto 0);
    trunc_ln109_fu_557_p1 <= i_3_reg_258(9 - 1 downto 0);
    trunc_ln89_fu_365_p1 <= i_reg_179(9 - 1 downto 0);
    trunc_ln94_fu_338_p1 <= k_fu_78(18 - 1 downto 0);
    trunc_ln95_fu_412_p1 <= i_1_reg_202(9 - 1 downto 0);
    zext_ln100_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_213),32));
    zext_ln100_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_fu_78),32));
    zext_ln103_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_fu_471_p2),64));
    zext_ln104_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_235),32));
    zext_ln107_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_1_fu_533_p2),64));
    zext_ln107_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_fu_523_p2),64));
    zext_ln109_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_258),32));
    zext_ln112_1_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_1_fu_589_p2),64));
    zext_ln112_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_reg_800),64));
    zext_ln89_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_179),32));
    zext_ln92_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_fu_392_p2),64));
    zext_ln94_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_350_p2),64));
    zext_ln95_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_202),32));
    zext_ln98_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln98_fu_439_p2),64));
end behav;
