-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft1D_512_twiddles8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_x_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_x_ce0 : OUT STD_LOGIC;
    a_x_we0 : OUT STD_LOGIC;
    a_x_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_x_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_x_ce1 : OUT STD_LOGIC;
    a_x_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    a_y_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_y_ce0 : OUT STD_LOGIC;
    a_y_we0 : OUT STD_LOGIC;
    a_y_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_y_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_y_ce1 : OUT STD_LOGIC;
    a_y_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    i : IN STD_LOGIC_VECTOR (5 downto 0);
    n : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of fft1D_512_twiddles8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_C01921FB54411744 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010000010001011101000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal twiddles8_reversed8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal twiddles8_reversed8_ce0 : STD_LOGIC;
    signal twiddles8_reversed8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cast_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_reg_266 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv2_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln28_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln28_reg_276_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_276_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal a_x_addr_reg_285 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter36_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter37_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter38_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter39_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_x_addr_reg_285_pp0_iter40_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291 : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter22_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter23_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter24_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter25_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter26_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter27_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter28_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter29_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter30_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter31_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter32_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter33_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter34_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter35_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter36_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter37_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter38_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter39_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal a_y_addr_reg_291_pp0_iter40_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_307 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_312 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_reg_317 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_119_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_x_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_sin_or_cos_double_s_fu_138_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_y_reg_329 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul8_reg_347 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul1_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul3_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_119_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_119_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_119_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_119_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_138_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_138_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_138_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_138_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_119_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_sin_or_cos_double_s_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln28_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_58 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln28_fu_238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_203_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft1D_512_sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_dsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_dadd_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_ddiv_64ns_64ns_64_14_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_sitodp_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft1D_512_twiddles8_twiddles8_reversed8_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    twiddles8_reversed8_U : component fft1D_512_twiddles8_twiddles8_reversed8_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => twiddles8_reversed8_address0,
        ce0 => twiddles8_reversed8_ce0,
        q0 => twiddles8_reversed8_q0);

    grp_sin_or_cos_double_s_fu_119 : component fft1D_512_sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_119_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_119_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_119_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_119_ap_ready,
        t_in => phi_reg_317,
        do_cos => ap_const_lv1_1,
        ap_return => grp_sin_or_cos_double_s_fu_119_ap_return);

    grp_sin_or_cos_double_s_fu_138 : component fft1D_512_sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_138_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_138_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_138_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_138_ap_ready,
        t_in => phi_reg_317,
        do_cos => ap_const_lv1_0,
        ap_return => grp_sin_or_cos_double_s_fu_138_ap_return);

    dsub_64ns_64ns_64_4_full_dsp_1_U31 : component fft1D_512_dsub_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul8_reg_347,
        din1 => mul1_reg_352,
        ce => ap_const_logic_1,
        dout => grp_fu_157_p2);

    dadd_64ns_64ns_64_4_full_dsp_1_U32 : component fft1D_512_dadd_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul2_reg_357,
        din1 => mul3_reg_362,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U33 : component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_302,
        din1 => ap_const_lv64_C01921FB54411744,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U34 : component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_312,
        din1 => conv2_reg_271,
        ce => ap_const_logic_1,
        dout => grp_fu_172_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U35 : component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_x_q1,
        din1 => phi_x_reg_323,
        ce => ap_const_logic_1,
        dout => grp_fu_176_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U36 : component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_y_q1,
        din1 => phi_y_reg_329,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U37 : component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_x_q1,
        din1 => phi_y_reg_329,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U38 : component fft1D_512_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_y_q1,
        din1 => phi_x_reg_323,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);

    ddiv_64ns_64ns_64_14_no_dsp_1_U39 : component fft1D_512_ddiv_64ns_64ns_64_14_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_307,
        din1 => conv1_reg_266,
        ce => ap_const_logic_1,
        dout => grp_fu_196_p2);

    sitodp_32ns_64_2_no_dsp_1_U40 : component fft1D_512_sitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_200_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_200_p1);

    sitodp_32ns_64_2_no_dsp_1_U41 : component fft1D_512_sitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_203_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_119_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_119_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln28_reg_276_pp0_iter23_reg = ap_const_lv1_0))) then 
                    grp_sin_or_cos_double_s_fu_119_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_119_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_119_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln28_reg_276_pp0_iter23_reg = ap_const_lv1_0))) then 
                    grp_sin_or_cos_double_s_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_58 <= ap_const_lv4_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln28_fu_225_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_58 <= add_ln28_fu_238_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_x_addr_reg_285 <= zext_ln28_fu_231_p1(3 - 1 downto 0);
                a_x_addr_reg_285_pp0_iter1_reg <= a_x_addr_reg_285;
                a_y_addr_reg_291 <= zext_ln28_fu_231_p1(3 - 1 downto 0);
                a_y_addr_reg_291_pp0_iter1_reg <= a_y_addr_reg_291;
                icmp_ln28_reg_276 <= icmp_ln28_fu_225_p2;
                icmp_ln28_reg_276_pp0_iter1_reg <= icmp_ln28_reg_276;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_x_addr_reg_285_pp0_iter10_reg <= a_x_addr_reg_285_pp0_iter9_reg;
                a_x_addr_reg_285_pp0_iter11_reg <= a_x_addr_reg_285_pp0_iter10_reg;
                a_x_addr_reg_285_pp0_iter12_reg <= a_x_addr_reg_285_pp0_iter11_reg;
                a_x_addr_reg_285_pp0_iter13_reg <= a_x_addr_reg_285_pp0_iter12_reg;
                a_x_addr_reg_285_pp0_iter14_reg <= a_x_addr_reg_285_pp0_iter13_reg;
                a_x_addr_reg_285_pp0_iter15_reg <= a_x_addr_reg_285_pp0_iter14_reg;
                a_x_addr_reg_285_pp0_iter16_reg <= a_x_addr_reg_285_pp0_iter15_reg;
                a_x_addr_reg_285_pp0_iter17_reg <= a_x_addr_reg_285_pp0_iter16_reg;
                a_x_addr_reg_285_pp0_iter18_reg <= a_x_addr_reg_285_pp0_iter17_reg;
                a_x_addr_reg_285_pp0_iter19_reg <= a_x_addr_reg_285_pp0_iter18_reg;
                a_x_addr_reg_285_pp0_iter20_reg <= a_x_addr_reg_285_pp0_iter19_reg;
                a_x_addr_reg_285_pp0_iter21_reg <= a_x_addr_reg_285_pp0_iter20_reg;
                a_x_addr_reg_285_pp0_iter22_reg <= a_x_addr_reg_285_pp0_iter21_reg;
                a_x_addr_reg_285_pp0_iter23_reg <= a_x_addr_reg_285_pp0_iter22_reg;
                a_x_addr_reg_285_pp0_iter24_reg <= a_x_addr_reg_285_pp0_iter23_reg;
                a_x_addr_reg_285_pp0_iter25_reg <= a_x_addr_reg_285_pp0_iter24_reg;
                a_x_addr_reg_285_pp0_iter26_reg <= a_x_addr_reg_285_pp0_iter25_reg;
                a_x_addr_reg_285_pp0_iter27_reg <= a_x_addr_reg_285_pp0_iter26_reg;
                a_x_addr_reg_285_pp0_iter28_reg <= a_x_addr_reg_285_pp0_iter27_reg;
                a_x_addr_reg_285_pp0_iter29_reg <= a_x_addr_reg_285_pp0_iter28_reg;
                a_x_addr_reg_285_pp0_iter2_reg <= a_x_addr_reg_285_pp0_iter1_reg;
                a_x_addr_reg_285_pp0_iter30_reg <= a_x_addr_reg_285_pp0_iter29_reg;
                a_x_addr_reg_285_pp0_iter31_reg <= a_x_addr_reg_285_pp0_iter30_reg;
                a_x_addr_reg_285_pp0_iter32_reg <= a_x_addr_reg_285_pp0_iter31_reg;
                a_x_addr_reg_285_pp0_iter33_reg <= a_x_addr_reg_285_pp0_iter32_reg;
                a_x_addr_reg_285_pp0_iter34_reg <= a_x_addr_reg_285_pp0_iter33_reg;
                a_x_addr_reg_285_pp0_iter35_reg <= a_x_addr_reg_285_pp0_iter34_reg;
                a_x_addr_reg_285_pp0_iter36_reg <= a_x_addr_reg_285_pp0_iter35_reg;
                a_x_addr_reg_285_pp0_iter37_reg <= a_x_addr_reg_285_pp0_iter36_reg;
                a_x_addr_reg_285_pp0_iter38_reg <= a_x_addr_reg_285_pp0_iter37_reg;
                a_x_addr_reg_285_pp0_iter39_reg <= a_x_addr_reg_285_pp0_iter38_reg;
                a_x_addr_reg_285_pp0_iter3_reg <= a_x_addr_reg_285_pp0_iter2_reg;
                a_x_addr_reg_285_pp0_iter40_reg <= a_x_addr_reg_285_pp0_iter39_reg;
                a_x_addr_reg_285_pp0_iter4_reg <= a_x_addr_reg_285_pp0_iter3_reg;
                a_x_addr_reg_285_pp0_iter5_reg <= a_x_addr_reg_285_pp0_iter4_reg;
                a_x_addr_reg_285_pp0_iter6_reg <= a_x_addr_reg_285_pp0_iter5_reg;
                a_x_addr_reg_285_pp0_iter7_reg <= a_x_addr_reg_285_pp0_iter6_reg;
                a_x_addr_reg_285_pp0_iter8_reg <= a_x_addr_reg_285_pp0_iter7_reg;
                a_x_addr_reg_285_pp0_iter9_reg <= a_x_addr_reg_285_pp0_iter8_reg;
                a_y_addr_reg_291_pp0_iter10_reg <= a_y_addr_reg_291_pp0_iter9_reg;
                a_y_addr_reg_291_pp0_iter11_reg <= a_y_addr_reg_291_pp0_iter10_reg;
                a_y_addr_reg_291_pp0_iter12_reg <= a_y_addr_reg_291_pp0_iter11_reg;
                a_y_addr_reg_291_pp0_iter13_reg <= a_y_addr_reg_291_pp0_iter12_reg;
                a_y_addr_reg_291_pp0_iter14_reg <= a_y_addr_reg_291_pp0_iter13_reg;
                a_y_addr_reg_291_pp0_iter15_reg <= a_y_addr_reg_291_pp0_iter14_reg;
                a_y_addr_reg_291_pp0_iter16_reg <= a_y_addr_reg_291_pp0_iter15_reg;
                a_y_addr_reg_291_pp0_iter17_reg <= a_y_addr_reg_291_pp0_iter16_reg;
                a_y_addr_reg_291_pp0_iter18_reg <= a_y_addr_reg_291_pp0_iter17_reg;
                a_y_addr_reg_291_pp0_iter19_reg <= a_y_addr_reg_291_pp0_iter18_reg;
                a_y_addr_reg_291_pp0_iter20_reg <= a_y_addr_reg_291_pp0_iter19_reg;
                a_y_addr_reg_291_pp0_iter21_reg <= a_y_addr_reg_291_pp0_iter20_reg;
                a_y_addr_reg_291_pp0_iter22_reg <= a_y_addr_reg_291_pp0_iter21_reg;
                a_y_addr_reg_291_pp0_iter23_reg <= a_y_addr_reg_291_pp0_iter22_reg;
                a_y_addr_reg_291_pp0_iter24_reg <= a_y_addr_reg_291_pp0_iter23_reg;
                a_y_addr_reg_291_pp0_iter25_reg <= a_y_addr_reg_291_pp0_iter24_reg;
                a_y_addr_reg_291_pp0_iter26_reg <= a_y_addr_reg_291_pp0_iter25_reg;
                a_y_addr_reg_291_pp0_iter27_reg <= a_y_addr_reg_291_pp0_iter26_reg;
                a_y_addr_reg_291_pp0_iter28_reg <= a_y_addr_reg_291_pp0_iter27_reg;
                a_y_addr_reg_291_pp0_iter29_reg <= a_y_addr_reg_291_pp0_iter28_reg;
                a_y_addr_reg_291_pp0_iter2_reg <= a_y_addr_reg_291_pp0_iter1_reg;
                a_y_addr_reg_291_pp0_iter30_reg <= a_y_addr_reg_291_pp0_iter29_reg;
                a_y_addr_reg_291_pp0_iter31_reg <= a_y_addr_reg_291_pp0_iter30_reg;
                a_y_addr_reg_291_pp0_iter32_reg <= a_y_addr_reg_291_pp0_iter31_reg;
                a_y_addr_reg_291_pp0_iter33_reg <= a_y_addr_reg_291_pp0_iter32_reg;
                a_y_addr_reg_291_pp0_iter34_reg <= a_y_addr_reg_291_pp0_iter33_reg;
                a_y_addr_reg_291_pp0_iter35_reg <= a_y_addr_reg_291_pp0_iter34_reg;
                a_y_addr_reg_291_pp0_iter36_reg <= a_y_addr_reg_291_pp0_iter35_reg;
                a_y_addr_reg_291_pp0_iter37_reg <= a_y_addr_reg_291_pp0_iter36_reg;
                a_y_addr_reg_291_pp0_iter38_reg <= a_y_addr_reg_291_pp0_iter37_reg;
                a_y_addr_reg_291_pp0_iter39_reg <= a_y_addr_reg_291_pp0_iter38_reg;
                a_y_addr_reg_291_pp0_iter3_reg <= a_y_addr_reg_291_pp0_iter2_reg;
                a_y_addr_reg_291_pp0_iter40_reg <= a_y_addr_reg_291_pp0_iter39_reg;
                a_y_addr_reg_291_pp0_iter4_reg <= a_y_addr_reg_291_pp0_iter3_reg;
                a_y_addr_reg_291_pp0_iter5_reg <= a_y_addr_reg_291_pp0_iter4_reg;
                a_y_addr_reg_291_pp0_iter6_reg <= a_y_addr_reg_291_pp0_iter5_reg;
                a_y_addr_reg_291_pp0_iter7_reg <= a_y_addr_reg_291_pp0_iter6_reg;
                a_y_addr_reg_291_pp0_iter8_reg <= a_y_addr_reg_291_pp0_iter7_reg;
                a_y_addr_reg_291_pp0_iter9_reg <= a_y_addr_reg_291_pp0_iter8_reg;
                div_reg_312 <= grp_fu_196_p2;
                icmp_ln28_reg_276_pp0_iter10_reg <= icmp_ln28_reg_276_pp0_iter9_reg;
                icmp_ln28_reg_276_pp0_iter11_reg <= icmp_ln28_reg_276_pp0_iter10_reg;
                icmp_ln28_reg_276_pp0_iter12_reg <= icmp_ln28_reg_276_pp0_iter11_reg;
                icmp_ln28_reg_276_pp0_iter13_reg <= icmp_ln28_reg_276_pp0_iter12_reg;
                icmp_ln28_reg_276_pp0_iter14_reg <= icmp_ln28_reg_276_pp0_iter13_reg;
                icmp_ln28_reg_276_pp0_iter15_reg <= icmp_ln28_reg_276_pp0_iter14_reg;
                icmp_ln28_reg_276_pp0_iter16_reg <= icmp_ln28_reg_276_pp0_iter15_reg;
                icmp_ln28_reg_276_pp0_iter17_reg <= icmp_ln28_reg_276_pp0_iter16_reg;
                icmp_ln28_reg_276_pp0_iter18_reg <= icmp_ln28_reg_276_pp0_iter17_reg;
                icmp_ln28_reg_276_pp0_iter19_reg <= icmp_ln28_reg_276_pp0_iter18_reg;
                icmp_ln28_reg_276_pp0_iter20_reg <= icmp_ln28_reg_276_pp0_iter19_reg;
                icmp_ln28_reg_276_pp0_iter21_reg <= icmp_ln28_reg_276_pp0_iter20_reg;
                icmp_ln28_reg_276_pp0_iter22_reg <= icmp_ln28_reg_276_pp0_iter21_reg;
                icmp_ln28_reg_276_pp0_iter23_reg <= icmp_ln28_reg_276_pp0_iter22_reg;
                icmp_ln28_reg_276_pp0_iter24_reg <= icmp_ln28_reg_276_pp0_iter23_reg;
                icmp_ln28_reg_276_pp0_iter2_reg <= icmp_ln28_reg_276_pp0_iter1_reg;
                icmp_ln28_reg_276_pp0_iter3_reg <= icmp_ln28_reg_276_pp0_iter2_reg;
                icmp_ln28_reg_276_pp0_iter4_reg <= icmp_ln28_reg_276_pp0_iter3_reg;
                icmp_ln28_reg_276_pp0_iter5_reg <= icmp_ln28_reg_276_pp0_iter4_reg;
                icmp_ln28_reg_276_pp0_iter6_reg <= icmp_ln28_reg_276_pp0_iter5_reg;
                icmp_ln28_reg_276_pp0_iter7_reg <= icmp_ln28_reg_276_pp0_iter6_reg;
                icmp_ln28_reg_276_pp0_iter8_reg <= icmp_ln28_reg_276_pp0_iter7_reg;
                icmp_ln28_reg_276_pp0_iter9_reg <= icmp_ln28_reg_276_pp0_iter8_reg;
                mul1_reg_352 <= grp_fu_181_p2;
                mul2_reg_357 <= grp_fu_186_p2;
                mul3_reg_362 <= grp_fu_191_p2;
                mul8_reg_347 <= grp_fu_176_p2;
                mul_reg_307 <= grp_fu_167_p2;
                phi_reg_317 <= grp_fu_172_p2;
                phi_x_reg_323 <= grp_sin_or_cos_double_s_fu_119_ap_return;
                phi_y_reg_329 <= grp_sin_or_cos_double_s_fu_138_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                conv1_reg_266 <= grp_fu_200_p1;
                conv2_reg_271 <= grp_fu_203_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                conv_reg_302 <= grp_fu_200_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln28_fu_225_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_225_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln28_fu_225_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    a_x_address0 <= a_x_addr_reg_285_pp0_iter40_reg;
    a_x_address1 <= a_x_addr_reg_285_pp0_iter32_reg;

    a_x_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            a_x_ce0 <= ap_const_logic_1;
        else 
            a_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_x_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then 
            a_x_ce1 <= ap_const_logic_1;
        else 
            a_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_x_d0 <= grp_fu_157_p2;

    a_x_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            a_x_we0 <= ap_const_logic_1;
        else 
            a_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    a_y_address0 <= a_y_addr_reg_291_pp0_iter40_reg;
    a_y_address1 <= a_y_addr_reg_291_pp0_iter32_reg;

    a_y_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            a_y_ce0 <= ap_const_logic_1;
        else 
            a_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_y_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))) then 
            a_y_ce1 <= ap_const_logic_1;
        else 
            a_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_y_d0 <= grp_fu_162_p2;

    a_y_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter41 = ap_const_logic_1))) then 
            a_y_we0 <= ap_const_logic_1;
        else 
            a_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln28_fu_238_p2 <= std_logic_vector(unsigned(j_fu_58) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state45 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln28_fu_225_p2)
    begin
        if ((icmp_ln28_fu_225_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41)
    begin
        if (((ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 
    = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_200_p0_assign_proc : process(ap_CS_fsm_state1, twiddles8_reversed8_q0, n_cast_fu_207_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_200_p0 <= twiddles8_reversed8_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_200_p0 <= n_cast_fu_207_p1;
        else 
            grp_fu_200_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_203_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),32));
    grp_sin_or_cos_double_s_fu_119_ap_start <= grp_sin_or_cos_double_s_fu_119_ap_start_reg;
    grp_sin_or_cos_double_s_fu_138_ap_start <= grp_sin_or_cos_double_s_fu_138_ap_start_reg;
    icmp_ln28_fu_225_p2 <= "1" when (j_fu_58 = ap_const_lv4_8) else "0";
    n_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n),32));
    twiddles8_reversed8_address0 <= zext_ln28_fu_231_p1(3 - 1 downto 0);

    twiddles8_reversed8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            twiddles8_reversed8_ce0 <= ap_const_logic_1;
        else 
            twiddles8_reversed8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln28_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_58),64));
end behav;
