-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weights1_ce0 : OUT STD_LOGIC;
    weights1_we0 : OUT STD_LOGIC;
    weights1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    weights1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights2_ce0 : OUT STD_LOGIC;
    weights2_we0 : OUT STD_LOGIC;
    weights2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    weights2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    weights3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    weights3_ce0 : OUT STD_LOGIC;
    weights3_we0 : OUT STD_LOGIC;
    weights3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    weights3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    biases1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    biases1_ce0 : OUT STD_LOGIC;
    biases1_we0 : OUT STD_LOGIC;
    biases1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    biases1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    biases2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    biases2_ce0 : OUT STD_LOGIC;
    biases2_we0 : OUT STD_LOGIC;
    biases2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    biases2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    biases3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    biases3_ce0 : OUT STD_LOGIC;
    biases3_we0 : OUT STD_LOGIC;
    biases3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    biases3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    training_data_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    training_data_ce0 : OUT STD_LOGIC;
    training_data_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    training_targets_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    training_targets_ce0 : OUT STD_LOGIC;
    training_targets_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of backprop is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "backprop_backprop,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.014057,HLS_SYN_LAT=50997648,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=7662,HLS_SYN_LUT=10426,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state174 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state175 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state176 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state177 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state178 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state179 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state180 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state181 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state182 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state183 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state184 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state185 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state186 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state187 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state188 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state189 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state190 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state191 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state192 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state193 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state194 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state195 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state196 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state197 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state198 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state199 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state200 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state201 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state202 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state203 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state204 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state205 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state206 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state207 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state208 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state209 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state210 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state211 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state212 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state213 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state214 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state215 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state216 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state217 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state218 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state219 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state220 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state221 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state222 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state223 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state224 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state225 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state226 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state227 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state228 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state229 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state230 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state231 : STD_LOGIC_VECTOR (242 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state232 : STD_LOGIC_VECTOR (242 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state233 : STD_LOGIC_VECTOR (242 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state234 : STD_LOGIC_VECTOR (242 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state235 : STD_LOGIC_VECTOR (242 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state236 : STD_LOGIC_VECTOR (242 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state237 : STD_LOGIC_VECTOR (242 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state238 : STD_LOGIC_VECTOR (242 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state239 : STD_LOGIC_VECTOR (242 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state240 : STD_LOGIC_VECTOR (242 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state241 : STD_LOGIC_VECTOR (242 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state242 : STD_LOGIC_VECTOR (242 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state243 : STD_LOGIC_VECTOR (242 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011010";
    constant ap_const_lv32_E2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_C1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000001";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111100";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000010";
    constant ap_const_lv32_C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000110";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_D6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010110";
    constant ap_const_lv32_DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011100";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100110";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_EB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101011";
    constant ap_const_lv32_EC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101100";
    constant ap_const_lv32_ED : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101101";
    constant ap_const_lv32_EE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000101";
    constant ap_const_lv32_D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010011";
    constant ap_const_lv32_DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011011";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_F1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110001";
    constant ap_const_lv32_F2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv8_A3 : STD_LOGIC_VECTOR (7 downto 0) := "10100011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv10_D : STD_LOGIC_VECTOR (9 downto 0) := "0000001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (242 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_1276_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1321 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_CS_fsm_state204 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state204 : signal is "none";
    signal ap_CS_fsm_state219 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state219 : signal is "none";
    signal ap_CS_fsm_state227 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state227 : signal is "none";
    signal activations1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1327 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state214 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state214 : signal is "none";
    signal grp_fu_1258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1335 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state188 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state188 : signal is "none";
    signal grp_fu_1304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1341 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal ap_CS_fsm_state169 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state169 : signal is "none";
    signal grp_fu_1295_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1348 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal reg_1354 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state223 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state223 : signal is "none";
    signal activations2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1358 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state194 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state194 : signal is "none";
    signal oracle_activations2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state216 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state216 : signal is "none";
    signal ap_CS_fsm_state224 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state224 : signal is "none";
    signal add_ln356_1_fu_1397_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln356_1_reg_2591 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln356_fu_1409_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln356_reg_2599 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln356_fu_1415_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln356_reg_2604 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln359_fu_1425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln363_fu_1489_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln363_1_fu_1497_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln363_2_fu_1505_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln60_1_fu_1513_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln60_1_reg_2632 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln60_fu_1525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln60_reg_2640 : STD_LOGIC_VECTOR (6 downto 0);
    signal activations1_addr_1_reg_2645 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln64_fu_1542_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln64_reg_2653 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln66_fu_1556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln66_reg_2658 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal training_data_load_reg_2673 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln66_fu_1576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bitcast_ln66_1_fu_1581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln48_fu_1591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_reg_2696 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal activations1_addr_2_reg_2701 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln50_fu_1603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_fu_1614_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_reg_2719 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal zext_ln36_fu_1620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_2724 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations1_addr_3_reg_2729 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln39_1_fu_1635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln78_fu_1646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln78_reg_2742 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal activations2_addr_1_reg_2747 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_1661_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_reg_2752 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln82_fu_1675_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln82_reg_2760 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal bitcast_ln84_fu_1700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal add_ln48_1_fu_1711_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln48_1_reg_2788 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal activations2_addr_2_reg_2793 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln50_1_fu_1723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_1_fu_1734_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_1_reg_2811 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal zext_ln36_1_fu_1740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_reg_2816 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations2_addr_3_reg_2821 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln39_3_fu_1755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal add_ln96_fu_1766_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln96_reg_2834 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal tmp_13_fu_1772_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_2839 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln100_fu_1786_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln100_reg_2847 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal bitcast_ln102_fu_1811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal add_ln48_2_fu_1822_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln48_2_reg_2875 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal tmp_5_fu_1833_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal bitcast_ln50_2_fu_1846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal add_ln36_2_fu_1857_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln36_2_reg_2905 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal tmp_6_fu_1863_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_2910 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln39_5_fu_1884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal sub_i2_reg_2922 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal add_ln22_fu_1910_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln22_reg_2930 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal tmp_7_fu_1916_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_2935 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln24_1_fu_1937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal ap_CS_fsm_state158 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state158 : signal is "none";
    signal add_ln27_fu_1948_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln27_reg_2953 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal tmp_8_fu_1954_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_2958 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln374_fu_1977_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln374_reg_2963 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln29_1_fu_1991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal add_ln114_fu_2017_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln114_reg_2976 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state184 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state184 : signal is "none";
    signal tmp_9_fu_2046_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state185 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state185 : signal is "none";
    signal bitcast_ln116_fu_2059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln116_2_fu_2083_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state189 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state189 : signal is "none";
    signal tmp_s_fu_2088_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln125_fu_2122_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln125_reg_3009 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state193 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state193 : signal is "none";
    signal empty_52_fu_2149_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_52_reg_3019 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln128_fu_2161_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln128_reg_3027 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state195 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state195 : signal is "none";
    signal tmp_10_fu_2171_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln130_fu_2184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln130_reg_3037 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln141_fu_2199_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln141_reg_3045 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state199 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state199 : signal is "none";
    signal zext_ln141_fu_2205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_reg_3050 : STD_LOGIC_VECTOR (63 downto 0);
    signal oracle_activations2_addr_reg_3055 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_54_fu_2226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_54_reg_3060 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln145_fu_2238_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln145_reg_3068 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state200 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state200 : signal is "none";
    signal tmp_11_fu_2258_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state201 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state201 : signal is "none";
    signal bitcast_ln147_fu_2271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state208 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state208 : signal is "none";
    signal dactivations2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state209 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state209 : signal is "none";
    signal add_ln158_fu_2282_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln158_reg_3106 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state213 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state213 : signal is "none";
    signal empty_55_fu_2293_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_55_reg_3116 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_2297_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_reg_3121 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln161_fu_2310_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln161_reg_3129 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state215 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state215 : signal is "none";
    signal add_ln163_fu_2325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln163_reg_3139 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln174_fu_2340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln174_reg_3147 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state221 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state221 : signal is "none";
    signal zext_ln174_fu_2346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_reg_3152 : STD_LOGIC_VECTOR (63 downto 0);
    signal oracle_activations1_addr_reg_3157 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_2355_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_reg_3162 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln178_fu_2369_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln178_reg_3170 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state222 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state222 : signal is "none";
    signal bitcast_ln180_fu_2394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state231 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state231 : signal is "none";
    signal dactivations1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state232 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state232 : signal is "none";
    signal add_ln191_fu_2405_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln191_reg_3208 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state236 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state236 : signal is "none";
    signal output_difference_0_023_load_2_reg_3218 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_difference_1_024_load_2_reg_3223 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_difference_2_025_load31_reg_3228 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_57_fu_2448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_57_reg_3233 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state237 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state237 : signal is "none";
    signal tmp_16_fu_2452_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_reg_3238 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln194_fu_2466_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln194_reg_3246 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state238 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state238 : signal is "none";
    signal add_ln196_fu_2481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln196_reg_3256 : STD_LOGIC_VECTOR (9 downto 0);
    signal oracle_activations1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state239 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state239 : signal is "none";
    signal activations1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal activations1_ce0 : STD_LOGIC;
    signal activations1_we0 : STD_LOGIC;
    signal activations1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal activations2_ce0 : STD_LOGIC;
    signal activations2_we0 : STD_LOGIC;
    signal activations2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dactivations1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dactivations1_ce0 : STD_LOGIC;
    signal dactivations1_we0 : STD_LOGIC;
    signal dactivations2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dactivations2_ce0 : STD_LOGIC;
    signal dactivations2_we0 : STD_LOGIC;
    signal delta_weights1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal delta_weights1_ce0 : STD_LOGIC;
    signal delta_weights1_we0 : STD_LOGIC;
    signal delta_weights1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal delta_weights2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal delta_weights2_ce0 : STD_LOGIC;
    signal delta_weights2_we0 : STD_LOGIC;
    signal delta_weights2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal delta_weights3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal delta_weights3_ce0 : STD_LOGIC;
    signal delta_weights3_we0 : STD_LOGIC;
    signal delta_weights3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal oracle_activations1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal oracle_activations1_ce0 : STD_LOGIC;
    signal oracle_activations1_we0 : STD_LOGIC;
    signal oracle_activations2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal oracle_activations2_ce0 : STD_LOGIC;
    signal oracle_activations2_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_ap_start : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_ap_done : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_ap_idle : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_ap_ready : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_update_weights_1_fu_1234_weights1_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights1_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_weights2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_update_weights_1_fu_1234_weights2_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights2_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_weights3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_weights_1_fu_1234_weights3_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights3_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_weights3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_d_weights1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_update_weights_1_fu_1234_d_weights1_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_d_weights2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_update_weights_1_fu_1234_d_weights2_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_d_weights3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_weights_1_fu_1234_d_weights3_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_weights_1_fu_1234_biases1_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases1_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_biases2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_weights_1_fu_1234_biases2_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases2_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_biases3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_update_weights_1_fu_1234_biases3_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases3_we0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_biases3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_d_biases1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_weights_1_fu_1234_d_biases1_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_d_biases2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_update_weights_1_fu_1234_d_biases2_ce0 : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_grp_fu_1258_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1258_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1258_p_ce : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_grp_fu_1276_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1276_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1276_p_ce : STD_LOGIC;
    signal grp_update_weights_1_fu_1234_grp_fu_1295_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1295_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_weights_1_fu_1234_grp_fu_1295_p_ce : STD_LOGIC;
    signal activations3_2_1_reg_585 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln356_fu_1403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln359_fu_1419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activations3_1_1_reg_595 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_0_1_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_615 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_6_reg_626 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln64_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_637 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_13_reg_649 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln60_fu_1519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_i_reg_660 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_12_reg_673 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_14_reg_684 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal icmp_ln48_fu_1585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_15_reg_695 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln82_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_1608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_reg_706 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln78_fu_1640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_i16_reg_718 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_16_reg_731 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal i_17_reg_742 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal icmp_ln48_1_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activations3_2_4_reg_753 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal icmp_ln36_1_fu_1728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activations3_1_4_reg_764 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_0_41_reg_775 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_8_reg_786 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_19_reg_798 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln96_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activations3_0_reg_809 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_2_5_reg_821 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln100_fu_1780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal activations3_1_5_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_0_52_reg_853 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_2_6_reg_869 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal activations3_1_6_reg_880 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_0_63_reg_891 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_30_reg_902 : STD_LOGIC_VECTOR (1 downto 0);
    signal activations3_2_7_reg_914 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_1_7_reg_929 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_0_7_reg_944 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_activations3_2_9_phi_fu_1008_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_2_8_reg_959 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal icmp_ln48_2_fu_1816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_activations3_1_9_phi_fu_1023_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_1_8_reg_970 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_activations3_0_9_phi_fu_1038_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal activations3_0_8_reg_981 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_31_reg_992 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_32_reg_1049 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln36_2_fu_1851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_1060 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_33_reg_1072 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state183 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state183 : signal is "none";
    signal icmp_ln22_fu_1904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_reg_1084 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln27_fu_1942_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state192 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state192 : signal is "none";
    signal i_24_reg_1096 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln128_fu_2155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_fu_2011_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_9_reg_1108 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state198 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state198 : signal is "none";
    signal i_25_reg_1119 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state212 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state212 : signal is "none";
    signal icmp_ln125_fu_2116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_10_reg_1130 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln141_fu_2193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_i113_reg_1142 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_26_reg_1154 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln161_fu_2304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_11_reg_1165 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state220 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state220 : signal is "none";
    signal i_27_reg_1176 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state235 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state235 : signal is "none";
    signal icmp_ln158_fu_2276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_12_reg_1187 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln174_fu_2334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_i138_reg_1199 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_28_reg_1211 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln194_fu_2460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_13_reg_1223 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state242 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state242 : signal is "none";
    signal grp_update_weights_1_fu_1234_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln191_fu_2399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state243 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state243 : signal is "none";
    signal zext_ln359_fu_1431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_1531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_1_fu_1567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_1572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_1597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln78_fu_1652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_fu_1690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln82_fu_1695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_1717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal zext_ln102_2_fu_1806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_fu_1792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_2_fu_1828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_2032_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_fu_2128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln130_fu_2189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln147_fu_2253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln145_fu_2232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln158_fu_2288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_2316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_fu_2330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_fu_2384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln178_fu_2363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln178_fu_2389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal arrayidx10_sum197_cast_fu_2420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_fu_2472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln196_fu_2486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul1_fu_154 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal i_fu_158 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal activations3_0_0_fu_162 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations3_1_0_fu_166 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations3_2_0_fu_170 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dactivations3_0_04_fu_174 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dactivations3_1_05_fu_178 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dactivations3_2_06_fu_182 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal net_outputs_0_07_fu_186 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal net_outputs_1_08_fu_190 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal net_outputs_2_09_fu_194 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal output_difference_0_023_fu_198 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal output_difference_1_024_fu_202 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal output_difference_2_025_fu_206 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal grp_fu_1258_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal ap_CS_fsm_state155 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state155 : signal is "none";
    signal ap_CS_fsm_state205 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state205 : signal is "none";
    signal ap_CS_fsm_state228 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state228 : signal is "none";
    signal grp_fu_1276_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal grp_fu_1295_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal grp_fu_1304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln364_fu_1443_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln364_fu_1447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln364_1_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln364_fu_1459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln363_fu_1437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln364_fu_1465_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln364_1_fu_1473_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln364_2_fu_1481_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_1_fu_1552_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln64_fu_1548_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln66_1_fu_1562_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln39_fu_1625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_fu_1629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_1657_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln82_1_fu_1681_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln84_fu_1685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln39_2_fu_1745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_1_fu_1749_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_1_fu_1797_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_fu_1801_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln39_4_fu_1875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_2_fu_1878_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln24_fu_1928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln24_fu_1931_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln374_fu_1966_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_1969_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln29_fu_1982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln29_fu_1985_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_2023_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln116_fu_2027_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln116_1_fu_2073_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln116_fu_2077_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_51_fu_2137_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_fu_2141_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln125_1_fu_2133_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln128_fu_2167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_53_fu_2214_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_fu_2218_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln141_1_fu_2210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln145_fu_2244_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln147_fu_2248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln161_1_fu_2321_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_56_fu_2351_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln178_1_fu_2375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln180_fu_2379_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln191_fu_2411_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal arrayidx10_sum197_fu_2415_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln194_1_fu_2477_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1258_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1258_ce : STD_LOGIC;
    signal grp_fu_1276_ce : STD_LOGIC;
    signal grp_fu_1295_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (242 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ST_fsm_state95_blk : STD_LOGIC;
    signal ap_ST_fsm_state96_blk : STD_LOGIC;
    signal ap_ST_fsm_state97_blk : STD_LOGIC;
    signal ap_ST_fsm_state98_blk : STD_LOGIC;
    signal ap_ST_fsm_state99_blk : STD_LOGIC;
    signal ap_ST_fsm_state100_blk : STD_LOGIC;
    signal ap_ST_fsm_state101_blk : STD_LOGIC;
    signal ap_ST_fsm_state102_blk : STD_LOGIC;
    signal ap_ST_fsm_state103_blk : STD_LOGIC;
    signal ap_ST_fsm_state104_blk : STD_LOGIC;
    signal ap_ST_fsm_state105_blk : STD_LOGIC;
    signal ap_ST_fsm_state106_blk : STD_LOGIC;
    signal ap_ST_fsm_state107_blk : STD_LOGIC;
    signal ap_ST_fsm_state108_blk : STD_LOGIC;
    signal ap_ST_fsm_state109_blk : STD_LOGIC;
    signal ap_ST_fsm_state110_blk : STD_LOGIC;
    signal ap_ST_fsm_state111_blk : STD_LOGIC;
    signal ap_ST_fsm_state112_blk : STD_LOGIC;
    signal ap_ST_fsm_state113_blk : STD_LOGIC;
    signal ap_ST_fsm_state114_blk : STD_LOGIC;
    signal ap_ST_fsm_state115_blk : STD_LOGIC;
    signal ap_ST_fsm_state116_blk : STD_LOGIC;
    signal ap_ST_fsm_state117_blk : STD_LOGIC;
    signal ap_ST_fsm_state118_blk : STD_LOGIC;
    signal ap_ST_fsm_state119_blk : STD_LOGIC;
    signal ap_ST_fsm_state120_blk : STD_LOGIC;
    signal ap_ST_fsm_state121_blk : STD_LOGIC;
    signal ap_ST_fsm_state122_blk : STD_LOGIC;
    signal ap_ST_fsm_state123_blk : STD_LOGIC;
    signal ap_ST_fsm_state124_blk : STD_LOGIC;
    signal ap_ST_fsm_state125_blk : STD_LOGIC;
    signal ap_ST_fsm_state126_blk : STD_LOGIC;
    signal ap_ST_fsm_state127_blk : STD_LOGIC;
    signal ap_ST_fsm_state128_blk : STD_LOGIC;
    signal ap_ST_fsm_state129_blk : STD_LOGIC;
    signal ap_ST_fsm_state130_blk : STD_LOGIC;
    signal ap_ST_fsm_state131_blk : STD_LOGIC;
    signal ap_ST_fsm_state132_blk : STD_LOGIC;
    signal ap_ST_fsm_state133_blk : STD_LOGIC;
    signal ap_ST_fsm_state134_blk : STD_LOGIC;
    signal ap_ST_fsm_state135_blk : STD_LOGIC;
    signal ap_ST_fsm_state136_blk : STD_LOGIC;
    signal ap_ST_fsm_state137_blk : STD_LOGIC;
    signal ap_ST_fsm_state138_blk : STD_LOGIC;
    signal ap_ST_fsm_state139_blk : STD_LOGIC;
    signal ap_ST_fsm_state140_blk : STD_LOGIC;
    signal ap_ST_fsm_state141_blk : STD_LOGIC;
    signal ap_ST_fsm_state142_blk : STD_LOGIC;
    signal ap_ST_fsm_state143_blk : STD_LOGIC;
    signal ap_ST_fsm_state144_blk : STD_LOGIC;
    signal ap_ST_fsm_state145_blk : STD_LOGIC;
    signal ap_ST_fsm_state146_blk : STD_LOGIC;
    signal ap_ST_fsm_state147_blk : STD_LOGIC;
    signal ap_ST_fsm_state148_blk : STD_LOGIC;
    signal ap_ST_fsm_state149_blk : STD_LOGIC;
    signal ap_ST_fsm_state150_blk : STD_LOGIC;
    signal ap_ST_fsm_state151_blk : STD_LOGIC;
    signal ap_ST_fsm_state152_blk : STD_LOGIC;
    signal ap_ST_fsm_state153_blk : STD_LOGIC;
    signal ap_ST_fsm_state154_blk : STD_LOGIC;
    signal ap_ST_fsm_state155_blk : STD_LOGIC;
    signal ap_ST_fsm_state156_blk : STD_LOGIC;
    signal ap_ST_fsm_state157_blk : STD_LOGIC;
    signal ap_ST_fsm_state158_blk : STD_LOGIC;
    signal ap_ST_fsm_state159_blk : STD_LOGIC;
    signal ap_ST_fsm_state160_blk : STD_LOGIC;
    signal ap_ST_fsm_state161_blk : STD_LOGIC;
    signal ap_ST_fsm_state162_blk : STD_LOGIC;
    signal ap_ST_fsm_state163_blk : STD_LOGIC;
    signal ap_ST_fsm_state164_blk : STD_LOGIC;
    signal ap_ST_fsm_state165_blk : STD_LOGIC;
    signal ap_ST_fsm_state166_blk : STD_LOGIC;
    signal ap_ST_fsm_state167_blk : STD_LOGIC;
    signal ap_ST_fsm_state168_blk : STD_LOGIC;
    signal ap_ST_fsm_state169_blk : STD_LOGIC;
    signal ap_ST_fsm_state170_blk : STD_LOGIC;
    signal ap_ST_fsm_state171_blk : STD_LOGIC;
    signal ap_ST_fsm_state172_blk : STD_LOGIC;
    signal ap_ST_fsm_state173_blk : STD_LOGIC;
    signal ap_ST_fsm_state174_blk : STD_LOGIC;
    signal ap_ST_fsm_state175_blk : STD_LOGIC;
    signal ap_ST_fsm_state176_blk : STD_LOGIC;
    signal ap_ST_fsm_state177_blk : STD_LOGIC;
    signal ap_ST_fsm_state178_blk : STD_LOGIC;
    signal ap_ST_fsm_state179_blk : STD_LOGIC;
    signal ap_ST_fsm_state180_blk : STD_LOGIC;
    signal ap_ST_fsm_state181_blk : STD_LOGIC;
    signal ap_ST_fsm_state182_blk : STD_LOGIC;
    signal ap_ST_fsm_state183_blk : STD_LOGIC;
    signal ap_ST_fsm_state184_blk : STD_LOGIC;
    signal ap_ST_fsm_state185_blk : STD_LOGIC;
    signal ap_ST_fsm_state186_blk : STD_LOGIC;
    signal ap_ST_fsm_state187_blk : STD_LOGIC;
    signal ap_ST_fsm_state188_blk : STD_LOGIC;
    signal ap_ST_fsm_state189_blk : STD_LOGIC;
    signal ap_ST_fsm_state190_blk : STD_LOGIC;
    signal ap_ST_fsm_state191_blk : STD_LOGIC;
    signal ap_ST_fsm_state192_blk : STD_LOGIC;
    signal ap_ST_fsm_state193_blk : STD_LOGIC;
    signal ap_ST_fsm_state194_blk : STD_LOGIC;
    signal ap_ST_fsm_state195_blk : STD_LOGIC;
    signal ap_ST_fsm_state196_blk : STD_LOGIC;
    signal ap_ST_fsm_state197_blk : STD_LOGIC;
    signal ap_ST_fsm_state198_blk : STD_LOGIC;
    signal ap_ST_fsm_state199_blk : STD_LOGIC;
    signal ap_ST_fsm_state200_blk : STD_LOGIC;
    signal ap_ST_fsm_state201_blk : STD_LOGIC;
    signal ap_ST_fsm_state202_blk : STD_LOGIC;
    signal ap_ST_fsm_state203_blk : STD_LOGIC;
    signal ap_ST_fsm_state204_blk : STD_LOGIC;
    signal ap_ST_fsm_state205_blk : STD_LOGIC;
    signal ap_ST_fsm_state206_blk : STD_LOGIC;
    signal ap_ST_fsm_state207_blk : STD_LOGIC;
    signal ap_ST_fsm_state208_blk : STD_LOGIC;
    signal ap_ST_fsm_state209_blk : STD_LOGIC;
    signal ap_ST_fsm_state210_blk : STD_LOGIC;
    signal ap_ST_fsm_state211_blk : STD_LOGIC;
    signal ap_ST_fsm_state212_blk : STD_LOGIC;
    signal ap_ST_fsm_state213_blk : STD_LOGIC;
    signal ap_ST_fsm_state214_blk : STD_LOGIC;
    signal ap_ST_fsm_state215_blk : STD_LOGIC;
    signal ap_ST_fsm_state216_blk : STD_LOGIC;
    signal ap_ST_fsm_state217_blk : STD_LOGIC;
    signal ap_ST_fsm_state218_blk : STD_LOGIC;
    signal ap_ST_fsm_state219_blk : STD_LOGIC;
    signal ap_ST_fsm_state220_blk : STD_LOGIC;
    signal ap_ST_fsm_state221_blk : STD_LOGIC;
    signal ap_ST_fsm_state222_blk : STD_LOGIC;
    signal ap_ST_fsm_state223_blk : STD_LOGIC;
    signal ap_ST_fsm_state224_blk : STD_LOGIC;
    signal ap_ST_fsm_state225_blk : STD_LOGIC;
    signal ap_ST_fsm_state226_blk : STD_LOGIC;
    signal ap_ST_fsm_state227_blk : STD_LOGIC;
    signal ap_ST_fsm_state228_blk : STD_LOGIC;
    signal ap_ST_fsm_state229_blk : STD_LOGIC;
    signal ap_ST_fsm_state230_blk : STD_LOGIC;
    signal ap_ST_fsm_state231_blk : STD_LOGIC;
    signal ap_ST_fsm_state232_blk : STD_LOGIC;
    signal ap_ST_fsm_state233_blk : STD_LOGIC;
    signal ap_ST_fsm_state234_blk : STD_LOGIC;
    signal ap_ST_fsm_state235_blk : STD_LOGIC;
    signal ap_ST_fsm_state236_blk : STD_LOGIC;
    signal ap_ST_fsm_state237_blk : STD_LOGIC;
    signal ap_ST_fsm_state238_blk : STD_LOGIC;
    signal ap_ST_fsm_state239_blk : STD_LOGIC;
    signal ap_ST_fsm_state240_blk : STD_LOGIC;
    signal ap_ST_fsm_state241_blk : STD_LOGIC;
    signal ap_ST_fsm_state242_blk : STD_LOGIC;
    signal ap_ST_fsm_state243_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_update_weights_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        weights1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        weights1_ce0 : OUT STD_LOGIC;
        weights1_we0 : OUT STD_LOGIC;
        weights1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        weights1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        weights2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights2_ce0 : OUT STD_LOGIC;
        weights2_we0 : OUT STD_LOGIC;
        weights2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        weights2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        weights3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights3_ce0 : OUT STD_LOGIC;
        weights3_we0 : OUT STD_LOGIC;
        weights3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        weights3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_weights1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        d_weights1_ce0 : OUT STD_LOGIC;
        d_weights1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_weights2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        d_weights2_ce0 : OUT STD_LOGIC;
        d_weights2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_weights3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        d_weights3_ce0 : OUT STD_LOGIC;
        d_weights3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        biases1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        biases1_ce0 : OUT STD_LOGIC;
        biases1_we0 : OUT STD_LOGIC;
        biases1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        biases1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        biases2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        biases2_ce0 : OUT STD_LOGIC;
        biases2_we0 : OUT STD_LOGIC;
        biases2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        biases2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        biases3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        biases3_ce0 : OUT STD_LOGIC;
        biases3_we0 : OUT STD_LOGIC;
        biases3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        biases3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_biases1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        d_biases1_ce0 : OUT STD_LOGIC;
        d_biases1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_biases2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        d_biases2_ce0 : OUT STD_LOGIC;
        d_biases2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1258_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1258_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1258_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_1258_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1258_p_ce : OUT STD_LOGIC;
        grp_fu_1276_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1276_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1276_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1276_p_ce : OUT STD_LOGIC;
        grp_fu_1295_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1295_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1295_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_1295_p_ce : OUT STD_LOGIC );
    end component;


    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_ddiv_64ns_64ns_64_14_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dexp_64ns_64ns_64_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_mux_3_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_activations1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_delta_weights1_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_delta_weights2_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_delta_weights3_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    activations1_U : component backprop_activations1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => activations1_address0,
        ce0 => activations1_ce0,
        we0 => activations1_we0,
        d0 => activations1_d0,
        q0 => activations1_q0);

    activations2_U : component backprop_activations1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => activations2_address0,
        ce0 => activations2_ce0,
        we0 => activations2_we0,
        d0 => activations2_d0,
        q0 => activations2_q0);

    dactivations1_U : component backprop_activations1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dactivations1_address0,
        ce0 => dactivations1_ce0,
        we0 => dactivations1_we0,
        d0 => grp_fu_1276_p2,
        q0 => dactivations1_q0);

    dactivations2_U : component backprop_activations1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dactivations2_address0,
        ce0 => dactivations2_ce0,
        we0 => dactivations2_we0,
        d0 => grp_fu_1276_p2,
        q0 => dactivations2_q0);

    delta_weights1_U : component backprop_delta_weights1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 832,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delta_weights1_address0,
        ce0 => delta_weights1_ce0,
        we0 => delta_weights1_we0,
        d0 => grp_fu_1276_p2,
        q0 => delta_weights1_q0);

    delta_weights2_U : component backprop_delta_weights2_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delta_weights2_address0,
        ce0 => delta_weights2_ce0,
        we0 => delta_weights2_we0,
        d0 => reg_1321,
        q0 => delta_weights2_q0);

    delta_weights3_U : component backprop_delta_weights3_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 192,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => delta_weights3_address0,
        ce0 => delta_weights3_ce0,
        we0 => delta_weights3_we0,
        d0 => grp_fu_1276_p2,
        q0 => delta_weights3_q0);

    oracle_activations1_U : component backprop_activations1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => oracle_activations1_address0,
        ce0 => oracle_activations1_ce0,
        we0 => oracle_activations1_we0,
        d0 => grp_fu_1276_p2,
        q0 => oracle_activations1_q0);

    oracle_activations2_U : component backprop_activations1_RAM_AUTO_1R1W
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => oracle_activations2_address0,
        ce0 => oracle_activations2_ce0,
        we0 => oracle_activations2_we0,
        d0 => grp_fu_1276_p2,
        q0 => oracle_activations2_q0);

    grp_update_weights_1_fu_1234 : component backprop_update_weights_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_weights_1_fu_1234_ap_start,
        ap_done => grp_update_weights_1_fu_1234_ap_done,
        ap_idle => grp_update_weights_1_fu_1234_ap_idle,
        ap_ready => grp_update_weights_1_fu_1234_ap_ready,
        weights1_address0 => grp_update_weights_1_fu_1234_weights1_address0,
        weights1_ce0 => grp_update_weights_1_fu_1234_weights1_ce0,
        weights1_we0 => grp_update_weights_1_fu_1234_weights1_we0,
        weights1_d0 => grp_update_weights_1_fu_1234_weights1_d0,
        weights1_q0 => weights1_q0,
        weights2_address0 => grp_update_weights_1_fu_1234_weights2_address0,
        weights2_ce0 => grp_update_weights_1_fu_1234_weights2_ce0,
        weights2_we0 => grp_update_weights_1_fu_1234_weights2_we0,
        weights2_d0 => grp_update_weights_1_fu_1234_weights2_d0,
        weights2_q0 => weights2_q0,
        weights3_address0 => grp_update_weights_1_fu_1234_weights3_address0,
        weights3_ce0 => grp_update_weights_1_fu_1234_weights3_ce0,
        weights3_we0 => grp_update_weights_1_fu_1234_weights3_we0,
        weights3_d0 => grp_update_weights_1_fu_1234_weights3_d0,
        weights3_q0 => weights3_q0,
        d_weights1_address0 => grp_update_weights_1_fu_1234_d_weights1_address0,
        d_weights1_ce0 => grp_update_weights_1_fu_1234_d_weights1_ce0,
        d_weights1_q0 => delta_weights1_q0,
        d_weights2_address0 => grp_update_weights_1_fu_1234_d_weights2_address0,
        d_weights2_ce0 => grp_update_weights_1_fu_1234_d_weights2_ce0,
        d_weights2_q0 => delta_weights2_q0,
        d_weights3_address0 => grp_update_weights_1_fu_1234_d_weights3_address0,
        d_weights3_ce0 => grp_update_weights_1_fu_1234_d_weights3_ce0,
        d_weights3_q0 => delta_weights3_q0,
        biases1_address0 => grp_update_weights_1_fu_1234_biases1_address0,
        biases1_ce0 => grp_update_weights_1_fu_1234_biases1_ce0,
        biases1_we0 => grp_update_weights_1_fu_1234_biases1_we0,
        biases1_d0 => grp_update_weights_1_fu_1234_biases1_d0,
        biases1_q0 => biases1_q0,
        biases2_address0 => grp_update_weights_1_fu_1234_biases2_address0,
        biases2_ce0 => grp_update_weights_1_fu_1234_biases2_ce0,
        biases2_we0 => grp_update_weights_1_fu_1234_biases2_we0,
        biases2_d0 => grp_update_weights_1_fu_1234_biases2_d0,
        biases2_q0 => biases2_q0,
        biases3_address0 => grp_update_weights_1_fu_1234_biases3_address0,
        biases3_ce0 => grp_update_weights_1_fu_1234_biases3_ce0,
        biases3_we0 => grp_update_weights_1_fu_1234_biases3_we0,
        biases3_d0 => grp_update_weights_1_fu_1234_biases3_d0,
        biases3_q0 => biases3_q0,
        d_biases1_address0 => grp_update_weights_1_fu_1234_d_biases1_address0,
        d_biases1_ce0 => grp_update_weights_1_fu_1234_d_biases1_ce0,
        d_biases1_q0 => oracle_activations1_q0,
        d_biases2_address0 => grp_update_weights_1_fu_1234_d_biases2_address0,
        d_biases2_ce0 => grp_update_weights_1_fu_1234_d_biases2_ce0,
        d_biases2_q0 => oracle_activations2_q0,
        p_read => output_difference_0_023_load_2_reg_3218,
        p_read1 => output_difference_1_024_load_2_reg_3223,
        p_read2 => output_difference_2_025_load31_reg_3228,
        grp_fu_1258_p_din0 => grp_update_weights_1_fu_1234_grp_fu_1258_p_din0,
        grp_fu_1258_p_din1 => grp_update_weights_1_fu_1234_grp_fu_1258_p_din1,
        grp_fu_1258_p_opcode => grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode,
        grp_fu_1258_p_dout0 => grp_fu_1258_p2,
        grp_fu_1258_p_ce => grp_update_weights_1_fu_1234_grp_fu_1258_p_ce,
        grp_fu_1276_p_din0 => grp_update_weights_1_fu_1234_grp_fu_1276_p_din0,
        grp_fu_1276_p_din1 => grp_update_weights_1_fu_1234_grp_fu_1276_p_din1,
        grp_fu_1276_p_dout0 => grp_fu_1276_p2,
        grp_fu_1276_p_ce => grp_update_weights_1_fu_1234_grp_fu_1276_p_ce,
        grp_fu_1295_p_din0 => grp_update_weights_1_fu_1234_grp_fu_1295_p_din0,
        grp_fu_1295_p_din1 => grp_update_weights_1_fu_1234_grp_fu_1295_p_din1,
        grp_fu_1295_p_dout0 => grp_fu_1295_p2,
        grp_fu_1295_p_ce => grp_update_weights_1_fu_1234_grp_fu_1295_p_ce);

    dadddsub_64ns_64ns_64_4_full_dsp_1_U22 : component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1258_p0,
        din1 => grp_fu_1258_p1,
        opcode => grp_fu_1258_opcode,
        ce => grp_fu_1258_ce,
        dout => grp_fu_1258_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U23 : component backprop_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1276_p0,
        din1 => grp_fu_1276_p1,
        ce => grp_fu_1276_ce,
        dout => grp_fu_1276_p2);

    ddiv_64ns_64ns_64_14_no_dsp_1_U24 : component backprop_ddiv_64ns_64ns_64_14_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1295_p0,
        din1 => grp_fu_1295_p1,
        ce => grp_fu_1295_ce,
        dout => grp_fu_1295_p2);

    dexp_64ns_64ns_64_10_full_dsp_1_U25 : component backprop_dexp_64ns_64ns_64_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_1304_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1304_p2);

    mux_3_2_64_1_1_U26 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => activations3_0_63_reg_891,
        din1 => activations3_1_6_reg_880,
        din2 => activations3_2_6_reg_869,
        din3 => i_30_reg_902,
        dout => tmp_5_fu_1833_p5);

    mux_3_2_64_1_1_U27 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => activations3_0_8_reg_981,
        din1 => activations3_1_8_reg_970,
        din2 => activations3_2_8_reg_959,
        din3 => i_31_reg_992,
        dout => tmp_6_fu_1863_p5);

    mux_3_2_64_1_1_U28 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => activations3_0_8_reg_981,
        din1 => activations3_1_8_reg_970,
        din2 => activations3_2_8_reg_959,
        din3 => i_32_reg_1049,
        dout => tmp_7_fu_1916_p5);

    mux_3_2_64_1_1_U29 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => activations3_0_8_reg_981,
        din1 => activations3_1_8_reg_970,
        din2 => activations3_2_8_reg_959,
        din3 => i_33_reg_1072,
        dout => tmp_8_fu_1954_p5);

    mux_3_2_64_1_1_U30 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => net_outputs_0_07_fu_186,
        din1 => net_outputs_1_08_fu_190,
        din2 => net_outputs_2_09_fu_194,
        din3 => i_34_reg_1084,
        dout => tmp_9_fu_2046_p5);

    mux_3_2_64_1_1_U31 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => dactivations3_0_04_fu_174,
        din1 => dactivations3_1_05_fu_178,
        din2 => dactivations3_2_06_fu_182,
        din3 => i_34_reg_1084,
        dout => tmp_s_fu_2088_p5);

    mux_3_2_64_1_1_U32 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => output_difference_0_023_fu_198,
        din1 => output_difference_1_024_fu_202,
        din2 => output_difference_2_025_fu_206,
        din3 => j_9_reg_1108,
        dout => tmp_10_fu_2171_p5);

    mux_3_2_64_1_1_U33 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => output_difference_0_023_fu_198,
        din1 => output_difference_1_024_fu_202,
        din2 => output_difference_2_025_fu_206,
        din3 => j_10_reg_1130,
        dout => tmp_11_fu_2258_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_update_weights_1_fu_1234_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_weights_1_fu_1234_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state236) and (icmp_ln191_fu_2399_p2 = ap_const_lv1_1))) then 
                    grp_update_weights_1_fu_1234_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_weights_1_fu_1234_ap_ready = ap_const_logic_1)) then 
                    grp_update_weights_1_fu_1234_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    activations3_0_1_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_0))) then 
                activations3_0_1_reg_605 <= select_ln363_2_fu_1505_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_0))) then 
                activations3_0_1_reg_605 <= activations3_0_0_fu_162;
            end if; 
        end if;
    end process;

    activations3_0_41_reg_775_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (icmp_ln36_1_fu_1728_p2 = ap_const_lv1_1))) then 
                activations3_0_41_reg_775 <= activations3_0_1_reg_605;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                activations3_0_41_reg_775 <= activations3_0_52_reg_853;
            end if; 
        end if;
    end process;

    activations3_0_52_reg_853_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1) and (j_8_reg_786 = ap_const_lv2_0))) then 
                activations3_0_52_reg_853 <= activations3_0_reg_809;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1) and (j_8_reg_786 = ap_const_lv2_1)) or (not((j_8_reg_786 = ap_const_lv2_1)) and not((j_8_reg_786 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1)))) then 
                activations3_0_52_reg_853 <= activations3_0_41_reg_775;
            end if; 
        end if;
    end process;

    activations3_0_63_reg_891_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_1))) then 
                activations3_0_63_reg_891 <= activations3_0_41_reg_775;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
                activations3_0_63_reg_891 <= activations3_0_7_reg_944;
            end if; 
        end if;
    end process;

    activations3_0_7_reg_944_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state113) and (i_30_reg_902 = ap_const_lv2_0))) then 
                activations3_0_7_reg_944 <= grp_fu_1258_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state113) and (i_30_reg_902 = ap_const_lv2_1)) or (not((i_30_reg_902 = ap_const_lv2_1)) and not((i_30_reg_902 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state113)))) then 
                activations3_0_7_reg_944 <= activations3_0_63_reg_891;
            end if; 
        end if;
    end process;

    activations3_0_8_reg_981_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) and (icmp_ln48_2_fu_1816_p2 = ap_const_lv1_1))) then 
                activations3_0_8_reg_981 <= activations3_0_63_reg_891;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
                activations3_0_8_reg_981 <= ap_phi_mux_activations3_0_9_phi_fu_1038_p6;
            end if; 
        end if;
    end process;

    activations3_0_reg_809_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_0))) then 
                activations3_0_reg_809 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                activations3_0_reg_809 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;

    activations3_1_1_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_0))) then 
                activations3_1_1_reg_595 <= select_ln363_1_fu_1497_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_0))) then 
                activations3_1_1_reg_595 <= activations3_1_0_fu_166;
            end if; 
        end if;
    end process;

    activations3_1_4_reg_764_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (icmp_ln36_1_fu_1728_p2 = ap_const_lv1_1))) then 
                activations3_1_4_reg_764 <= activations3_1_1_reg_595;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                activations3_1_4_reg_764 <= activations3_1_5_reg_837;
            end if; 
        end if;
    end process;

    activations3_1_5_reg_837_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1) and (j_8_reg_786 = ap_const_lv2_1))) then 
                activations3_1_5_reg_837 <= activations3_0_reg_809;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1) and (j_8_reg_786 = ap_const_lv2_0)) or (not((j_8_reg_786 = ap_const_lv2_1)) and not((j_8_reg_786 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1)))) then 
                activations3_1_5_reg_837 <= activations3_1_4_reg_764;
            end if; 
        end if;
    end process;

    activations3_1_6_reg_880_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_1))) then 
                activations3_1_6_reg_880 <= activations3_1_4_reg_764;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
                activations3_1_6_reg_880 <= activations3_1_7_reg_929;
            end if; 
        end if;
    end process;

    activations3_1_7_reg_929_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state113) and (i_30_reg_902 = ap_const_lv2_1))) then 
                activations3_1_7_reg_929 <= grp_fu_1258_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state113) and (i_30_reg_902 = ap_const_lv2_0)) or (not((i_30_reg_902 = ap_const_lv2_1)) and not((i_30_reg_902 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state113)))) then 
                activations3_1_7_reg_929 <= activations3_1_6_reg_880;
            end if; 
        end if;
    end process;

    activations3_1_8_reg_970_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) and (icmp_ln48_2_fu_1816_p2 = ap_const_lv1_1))) then 
                activations3_1_8_reg_970 <= activations3_1_6_reg_880;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
                activations3_1_8_reg_970 <= ap_phi_mux_activations3_1_9_phi_fu_1023_p6;
            end if; 
        end if;
    end process;

    activations3_2_1_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_0))) then 
                activations3_2_1_reg_585 <= select_ln363_fu_1489_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_0))) then 
                activations3_2_1_reg_585 <= activations3_2_0_fu_170;
            end if; 
        end if;
    end process;

    activations3_2_4_reg_753_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (icmp_ln36_1_fu_1728_p2 = ap_const_lv1_1))) then 
                activations3_2_4_reg_753 <= activations3_2_1_reg_585;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                activations3_2_4_reg_753 <= activations3_2_5_reg_821;
            end if; 
        end if;
    end process;

    activations3_2_5_reg_821_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1) and (j_8_reg_786 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1) and (j_8_reg_786 = ap_const_lv2_0)))) then 
                activations3_2_5_reg_821 <= activations3_2_4_reg_753;
            elsif ((not((j_8_reg_786 = ap_const_lv2_1)) and not((j_8_reg_786 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1))) then 
                activations3_2_5_reg_821 <= activations3_0_reg_809;
            end if; 
        end if;
    end process;

    activations3_2_6_reg_869_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_1))) then 
                activations3_2_6_reg_869 <= activations3_2_4_reg_753;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
                activations3_2_6_reg_869 <= activations3_2_7_reg_914;
            end if; 
        end if;
    end process;

    activations3_2_7_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state113) and (i_30_reg_902 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state113) and (i_30_reg_902 = ap_const_lv2_0)))) then 
                activations3_2_7_reg_914 <= activations3_2_6_reg_869;
            elsif ((not((i_30_reg_902 = ap_const_lv2_1)) and not((i_30_reg_902 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state113))) then 
                activations3_2_7_reg_914 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;

    activations3_2_8_reg_959_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) and (icmp_ln48_2_fu_1816_p2 = ap_const_lv1_1))) then 
                activations3_2_8_reg_959 <= activations3_2_6_reg_869;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
                activations3_2_8_reg_959 <= ap_phi_mux_activations3_2_9_phi_fu_1008_p6;
            end if; 
        end if;
    end process;

    add113_i113_reg_1142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln141_fu_2193_p2 = ap_const_lv1_0))) then 
                add113_i113_reg_1142 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state208)) then 
                add113_i113_reg_1142 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;

    add113_i138_reg_1199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state221) and (icmp_ln174_fu_2334_p2 = ap_const_lv1_0))) then 
                add113_i138_reg_1199 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state231)) then 
                add113_i138_reg_1199 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;

    add113_i16_reg_718_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln78_fu_1640_p2 = ap_const_lv1_0))) then 
                add113_i16_reg_718 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                add113_i16_reg_718 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;

    add113_i_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_1519_p2 = ap_const_lv1_0))) then 
                add113_i_reg_660 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                add113_i_reg_660 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;

    i_12_reg_673_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_1519_p2 = ap_const_lv1_1))) then 
                i_12_reg_673 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_12_reg_673 <= add_ln48_reg_2696;
            end if; 
        end if;
    end process;

    i_13_reg_649_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_1519_p2 = ap_const_lv1_0))) then 
                i_13_reg_649 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_13_reg_649 <= add_ln64_reg_2653;
            end if; 
        end if;
    end process;

    i_14_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln48_fu_1585_p2 = ap_const_lv1_1))) then 
                i_14_reg_684 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                i_14_reg_684 <= add_ln36_reg_2719;
            end if; 
        end if;
    end process;

    i_15_reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln36_fu_1608_p2 = ap_const_lv1_1))) then 
                i_15_reg_695 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln82_fu_1669_p2 = ap_const_lv1_1))) then 
                i_15_reg_695 <= add_ln78_reg_2742;
            end if; 
        end if;
    end process;

    i_16_reg_731_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln78_fu_1640_p2 = ap_const_lv1_1))) then 
                i_16_reg_731 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
                i_16_reg_731 <= add_ln48_1_reg_2788;
            end if; 
        end if;
    end process;

    i_17_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state62) and (icmp_ln48_1_fu_1705_p2 = ap_const_lv1_1))) then 
                i_17_reg_742 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
                i_17_reg_742 <= add_ln36_1_reg_2811;
            end if; 
        end if;
    end process;

    i_19_reg_798_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_0))) then 
                i_19_reg_798 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                i_19_reg_798 <= add_ln100_reg_2847;
            end if; 
        end if;
    end process;

    i_24_reg_1096_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state184) and (icmp_ln114_fu_2011_p2 = ap_const_lv1_1))) then 
                i_24_reg_1096 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state195) and (icmp_ln128_fu_2155_p2 = ap_const_lv1_1))) then 
                i_24_reg_1096 <= add_ln125_reg_3009;
            end if; 
        end if;
    end process;

    i_25_reg_1119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state193) and (icmp_ln125_fu_2116_p2 = ap_const_lv1_1))) then 
                i_25_reg_1119 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state212)) then 
                i_25_reg_1119 <= add_ln141_reg_3045;
            end if; 
        end if;
    end process;

    i_26_reg_1154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln141_fu_2193_p2 = ap_const_lv1_1))) then 
                i_26_reg_1154 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state215) and (icmp_ln161_fu_2304_p2 = ap_const_lv1_1))) then 
                i_26_reg_1154 <= add_ln158_reg_3106;
            end if; 
        end if;
    end process;

    i_27_reg_1176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state213) and (icmp_ln158_fu_2276_p2 = ap_const_lv1_1))) then 
                i_27_reg_1176 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state235)) then 
                i_27_reg_1176 <= add_ln174_reg_3147;
            end if; 
        end if;
    end process;

    i_28_reg_1211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state221) and (icmp_ln174_fu_2334_p2 = ap_const_lv1_1))) then 
                i_28_reg_1211 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state238) and (icmp_ln194_fu_2460_p2 = ap_const_lv1_1))) then 
                i_28_reg_1211 <= add_ln191_reg_3208;
            end if; 
        end if;
    end process;

    i_30_reg_902_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_1))) then 
                i_30_reg_902 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
                i_30_reg_902 <= add_ln48_2_reg_2875;
            end if; 
        end if;
    end process;

    i_31_reg_992_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state109) and (icmp_ln48_2_fu_1816_p2 = ap_const_lv1_1))) then 
                i_31_reg_992 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
                i_31_reg_992 <= add_ln36_2_reg_2905;
            end if; 
        end if;
    end process;

    i_32_reg_1049_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln36_2_fu_1851_p2 = ap_const_lv1_1))) then 
                i_32_reg_1049 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state158)) then 
                i_32_reg_1049 <= add_ln22_reg_2930;
            end if; 
        end if;
    end process;

    i_33_reg_1072_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state144) and (icmp_ln22_fu_1904_p2 = ap_const_lv1_1))) then 
                i_33_reg_1072 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state183)) then 
                i_33_reg_1072 <= add_ln27_reg_2953;
            end if; 
        end if;
    end process;

    i_34_reg_1084_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state192)) then 
                i_34_reg_1084 <= add_ln114_reg_2976;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state159) and (icmp_ln27_fu_1942_p2 = ap_const_lv1_1))) then 
                i_34_reg_1084 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_158 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state236) and (icmp_ln191_fu_2399_p2 = ap_const_lv1_1))) then 
                i_fu_158 <= add_ln356_reg_2599;
            end if; 
        end if;
    end process;

    j_10_reg_1130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln141_fu_2193_p2 = ap_const_lv1_0))) then 
                j_10_reg_1130 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state208)) then 
                j_10_reg_1130 <= add_ln145_reg_3068;
            end if; 
        end if;
    end process;

    j_11_reg_1165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state214)) then 
                j_11_reg_1165 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state220)) then 
                j_11_reg_1165 <= add_ln161_reg_3129;
            end if; 
        end if;
    end process;

    j_12_reg_1187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state221) and (icmp_ln174_fu_2334_p2 = ap_const_lv1_0))) then 
                j_12_reg_1187 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state231)) then 
                j_12_reg_1187 <= add_ln178_reg_3170;
            end if; 
        end if;
    end process;

    j_13_reg_1223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state237)) then 
                j_13_reg_1223 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state242)) then 
                j_13_reg_1223 <= add_ln194_reg_3246;
            end if; 
        end if;
    end process;

    j_6_reg_626_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_1))) then 
                j_6_reg_626 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_1536_p2 = ap_const_lv1_1))) then 
                j_6_reg_626 <= add_ln60_reg_2640;
            end if; 
        end if;
    end process;

    j_7_reg_706_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln78_fu_1640_p2 = ap_const_lv1_0))) then 
                j_7_reg_706 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                j_7_reg_706 <= add_ln82_reg_2760;
            end if; 
        end if;
    end process;

    j_8_reg_786_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (icmp_ln36_1_fu_1728_p2 = ap_const_lv1_1))) then 
                j_8_reg_786 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
                j_8_reg_786 <= add_ln96_reg_2834;
            end if; 
        end if;
    end process;

    j_9_reg_1108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state194)) then 
                j_9_reg_1108 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
                j_9_reg_1108 <= add_ln128_reg_3027;
            end if; 
        end if;
    end process;

    j_reg_615_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_0))) then 
                j_reg_615 <= add_ln359_fu_1425_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_0))) then 
                j_reg_615 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul1_fu_154 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state236) and (icmp_ln191_fu_2399_p2 = ap_const_lv1_1))) then 
                phi_mul1_fu_154 <= add_ln356_1_reg_2591;
            end if; 
        end if;
    end process;

    phi_mul_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_637 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_1536_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_637 <= add_ln60_1_reg_2632;
            end if; 
        end if;
    end process;

    sum_reg_1060_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln36_2_fu_1851_p2 = ap_const_lv1_1))) then 
                sum_reg_1060 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state158)) then 
                sum_reg_1060 <= grp_fu_1258_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                activations1_addr_1_reg_2645 <= zext_ln60_fu_1531_p1(6 - 1 downto 0);
                add_ln60_1_reg_2632 <= add_ln60_1_fu_1513_p2;
                add_ln60_reg_2640 <= add_ln60_fu_1525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                activations1_addr_2_reg_2701 <= zext_ln48_fu_1597_p1(6 - 1 downto 0);
                add_ln48_reg_2696 <= add_ln48_fu_1591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                activations1_addr_3_reg_2729 <= zext_ln36_fu_1620_p1(6 - 1 downto 0);
                add_ln36_reg_2719 <= add_ln36_fu_1614_p2;
                    zext_ln36_reg_2724(6 downto 0) <= zext_ln36_fu_1620_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                activations2_addr_1_reg_2747 <= zext_ln78_fu_1652_p1(6 - 1 downto 0);
                add_ln78_reg_2742 <= add_ln78_fu_1646_p2;
                    tmp_12_reg_2752(11 downto 6) <= tmp_12_fu_1661_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                activations2_addr_2_reg_2793 <= zext_ln48_1_fu_1717_p1(6 - 1 downto 0);
                add_ln48_1_reg_2788 <= add_ln48_1_fu_1711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                activations2_addr_3_reg_2821 <= zext_ln36_1_fu_1740_p1(6 - 1 downto 0);
                add_ln36_1_reg_2811 <= add_ln36_1_fu_1734_p2;
                    zext_ln36_1_reg_2816(6 downto 0) <= zext_ln36_1_fu_1740_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state236) and (icmp_ln191_fu_2399_p2 = ap_const_lv1_1))) then
                activations3_0_0_fu_162 <= activations3_0_8_reg_981;
                activations3_1_0_fu_166 <= activations3_1_8_reg_970;
                activations3_2_0_fu_170 <= activations3_2_8_reg_959;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                add_ln100_reg_2847 <= add_ln100_fu_1786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state184)) then
                add_ln114_reg_2976 <= add_ln114_fu_2017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state193)) then
                add_ln125_reg_3009 <= add_ln125_fu_2122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state195)) then
                add_ln128_reg_3027 <= add_ln128_fu_2161_p2;
                add_ln130_reg_3037 <= add_ln130_fu_2184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state199)) then
                add_ln141_reg_3045 <= add_ln141_fu_2199_p2;
                empty_54_reg_3060 <= empty_54_fu_2226_p2;
                oracle_activations2_addr_reg_3055 <= zext_ln141_fu_2205_p1(6 - 1 downto 0);
                    zext_ln141_reg_3050(6 downto 0) <= zext_ln141_fu_2205_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state200)) then
                add_ln145_reg_3068 <= add_ln145_fu_2238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state213)) then
                add_ln158_reg_3106 <= add_ln158_fu_2282_p2;
                empty_55_reg_3116 <= empty_55_fu_2293_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state215)) then
                add_ln161_reg_3129 <= add_ln161_fu_2310_p2;
                add_ln163_reg_3139 <= add_ln163_fu_2325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state221)) then
                add_ln174_reg_3147 <= add_ln174_fu_2340_p2;
                oracle_activations1_addr_reg_3157 <= zext_ln174_fu_2346_p1(6 - 1 downto 0);
                    tmp_15_reg_3162(11 downto 6) <= tmp_15_fu_2355_p3(11 downto 6);
                    zext_ln174_reg_3152(6 downto 0) <= zext_ln174_fu_2346_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state222)) then
                add_ln178_reg_3170 <= add_ln178_fu_2369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state236)) then
                add_ln191_reg_3208 <= add_ln191_fu_2405_p2;
                output_difference_0_023_load_2_reg_3218 <= output_difference_0_023_fu_198;
                output_difference_1_024_load_2_reg_3223 <= output_difference_1_024_fu_202;
                output_difference_2_025_load31_reg_3228 <= output_difference_2_025_fu_206;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state238)) then
                add_ln194_reg_3246 <= add_ln194_fu_2466_p2;
                add_ln196_reg_3256 <= add_ln196_fu_2481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state144)) then
                add_ln22_reg_2930 <= add_ln22_fu_1910_p2;
                tmp_7_reg_2935 <= tmp_7_fu_1916_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state159)) then
                add_ln27_reg_2953 <= add_ln27_fu_1948_p2;
                sub_ln374_reg_2963 <= sub_ln374_fu_1977_p2;
                tmp_8_reg_2958 <= tmp_8_fu_1954_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln356_1_reg_2591 <= add_ln356_1_fu_1397_p2;
                add_ln356_reg_2599 <= add_ln356_fu_1409_p2;
                    zext_ln356_reg_2604(7 downto 0) <= zext_ln356_fu_1415_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state115)) then
                add_ln36_2_reg_2905 <= add_ln36_2_fu_1857_p2;
                tmp_6_reg_2910 <= tmp_6_fu_1863_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                add_ln48_2_reg_2875 <= add_ln48_2_fu_1822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln64_reg_2653 <= add_ln64_fu_1542_p2;
                add_ln66_reg_2658 <= add_ln66_fu_1556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                add_ln82_reg_2760 <= add_ln82_fu_1675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                add_ln96_reg_2834 <= add_ln96_fu_1766_p2;
                    tmp_13_reg_2839(7 downto 6) <= tmp_13_fu_1772_p3(7 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_0))) then
                dactivations3_0_04_fu_174 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_1))) then
                dactivations3_1_05_fu_178 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_31_reg_992 = ap_const_lv2_1)) and not((i_31_reg_992 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state143))) then
                dactivations3_2_06_fu_182 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state194)) then
                empty_52_reg_3019 <= empty_52_fu_2149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state237)) then
                empty_57_reg_3233 <= empty_57_fu_2448_p1;
                    tmp_16_reg_3238(9 downto 6) <= tmp_16_fu_2452_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state183) and (i_33_reg_1072 = ap_const_lv2_0))) then
                net_outputs_0_07_fu_186 <= grp_fu_1295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state183) and (i_33_reg_1072 = ap_const_lv2_1))) then
                net_outputs_1_08_fu_190 <= grp_fu_1295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_33_reg_1072 = ap_const_lv2_1)) and not((i_33_reg_1072 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state183))) then
                net_outputs_2_09_fu_194 <= grp_fu_1295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state192) and (i_34_reg_1084 = ap_const_lv2_0))) then
                output_difference_0_023_fu_198 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state192) and (i_34_reg_1084 = ap_const_lv2_1))) then
                output_difference_1_024_fu_202 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_34_reg_1084 = ap_const_lv2_1)) and not((i_34_reg_1084 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state192))) then
                output_difference_2_025_fu_206 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state227) or (ap_const_logic_1 = ap_CS_fsm_state219) or (ap_const_logic_1 = ap_CS_fsm_state204) or (ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_1321 <= grp_fu_1276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state214) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_1327 <= activations1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state188) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_1335 <= grp_fu_1258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state169) or (ap_const_logic_1 = ap_CS_fsm_state154) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state31))) then
                reg_1341 <= grp_fu_1304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
                reg_1348 <= grp_fu_1295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state223) or (ap_const_logic_1 = ap_CS_fsm_state53))) then
                reg_1354 <= weights2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state194) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state63))) then
                reg_1358 <= activations2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state139)) then
                sub_i2_reg_2922 <= grp_fu_1258_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state214)) then
                    tmp_14_reg_3121(11 downto 6) <= tmp_14_fu_2297_p3(11 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                training_data_load_reg_2673 <= training_data_q0;
            end if;
        end if;
    end process;
    zext_ln356_reg_2604(8) <= '0';
    zext_ln36_reg_2724(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_12_reg_2752(5 downto 0) <= "000000";
    zext_ln36_1_reg_2816(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_13_reg_2839(5 downto 0) <= "000000";
    zext_ln141_reg_3050(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_14_reg_3121(5 downto 0) <= "000000";
    zext_ln174_reg_3152(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_15_reg_3162(5 downto 0) <= "000000";
    tmp_16_reg_3238(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state109, ap_CS_fsm_state115, ap_CS_fsm_state144, ap_CS_fsm_state159, ap_CS_fsm_state184, ap_CS_fsm_state193, ap_CS_fsm_state195, ap_CS_fsm_state199, ap_CS_fsm_state200, ap_CS_fsm_state213, ap_CS_fsm_state215, ap_CS_fsm_state221, ap_CS_fsm_state222, ap_CS_fsm_state236, ap_CS_fsm_state238, grp_update_weights_1_fu_1234_ap_done, icmp_ln356_fu_1403_p2, icmp_ln359_fu_1419_p2, icmp_ln64_fu_1536_p2, icmp_ln60_fu_1519_p2, icmp_ln48_fu_1585_p2, icmp_ln82_fu_1669_p2, icmp_ln36_fu_1608_p2, icmp_ln78_fu_1640_p2, icmp_ln48_1_fu_1705_p2, icmp_ln36_1_fu_1728_p2, icmp_ln96_fu_1760_p2, icmp_ln100_fu_1780_p2, icmp_ln48_2_fu_1816_p2, icmp_ln36_2_fu_1851_p2, icmp_ln22_fu_1904_p2, icmp_ln27_fu_1942_p2, icmp_ln128_fu_2155_p2, icmp_ln114_fu_2011_p2, icmp_ln125_fu_2116_p2, icmp_ln141_fu_2193_p2, icmp_ln161_fu_2304_p2, icmp_ln158_fu_2276_p2, icmp_ln174_fu_2334_p2, icmp_ln194_fu_2460_p2, icmp_ln191_fu_2399_p2, ap_CS_fsm_state243, icmp_ln145_fu_2232_p2, icmp_ln178_fu_2363_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_1519_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_1536_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln48_fu_1585_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln36_fu_1608_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state51 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state51) and (icmp_ln78_fu_1640_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state52 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln82_fu_1669_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state62 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state62) and (icmp_ln48_1_fu_1705_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (icmp_ln36_1_fu_1728_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state68;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state98 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state98) and (icmp_ln96_fu_1760_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state109;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state99 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state99) and (icmp_ln100_fu_1780_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state109 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state109) and (icmp_ln48_2_fu_1816_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state115 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state115) and (icmp_ln36_2_fu_1851_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state144;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state144 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state144) and (icmp_ln22_fu_1904_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state159;
                else
                    ap_NS_fsm <= ap_ST_fsm_state145;
                end if;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                ap_NS_fsm <= ap_ST_fsm_state150;
            when ap_ST_fsm_state150 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state159 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state159) and (icmp_ln27_fu_1942_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state184;
                else
                    ap_NS_fsm <= ap_ST_fsm_state160;
                end if;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when ap_ST_fsm_state167 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state168 => 
                ap_NS_fsm <= ap_ST_fsm_state169;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state172;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                ap_NS_fsm <= ap_ST_fsm_state174;
            when ap_ST_fsm_state174 => 
                ap_NS_fsm <= ap_ST_fsm_state175;
            when ap_ST_fsm_state175 => 
                ap_NS_fsm <= ap_ST_fsm_state176;
            when ap_ST_fsm_state176 => 
                ap_NS_fsm <= ap_ST_fsm_state177;
            when ap_ST_fsm_state177 => 
                ap_NS_fsm <= ap_ST_fsm_state178;
            when ap_ST_fsm_state178 => 
                ap_NS_fsm <= ap_ST_fsm_state179;
            when ap_ST_fsm_state179 => 
                ap_NS_fsm <= ap_ST_fsm_state180;
            when ap_ST_fsm_state180 => 
                ap_NS_fsm <= ap_ST_fsm_state181;
            when ap_ST_fsm_state181 => 
                ap_NS_fsm <= ap_ST_fsm_state182;
            when ap_ST_fsm_state182 => 
                ap_NS_fsm <= ap_ST_fsm_state183;
            when ap_ST_fsm_state183 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state184 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state184) and (icmp_ln114_fu_2011_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state193;
                else
                    ap_NS_fsm <= ap_ST_fsm_state185;
                end if;
            when ap_ST_fsm_state185 => 
                ap_NS_fsm <= ap_ST_fsm_state186;
            when ap_ST_fsm_state186 => 
                ap_NS_fsm <= ap_ST_fsm_state187;
            when ap_ST_fsm_state187 => 
                ap_NS_fsm <= ap_ST_fsm_state188;
            when ap_ST_fsm_state188 => 
                ap_NS_fsm <= ap_ST_fsm_state189;
            when ap_ST_fsm_state189 => 
                ap_NS_fsm <= ap_ST_fsm_state190;
            when ap_ST_fsm_state190 => 
                ap_NS_fsm <= ap_ST_fsm_state191;
            when ap_ST_fsm_state191 => 
                ap_NS_fsm <= ap_ST_fsm_state192;
            when ap_ST_fsm_state192 => 
                ap_NS_fsm <= ap_ST_fsm_state184;
            when ap_ST_fsm_state193 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state193) and (icmp_ln125_fu_2116_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state199;
                else
                    ap_NS_fsm <= ap_ST_fsm_state194;
                end if;
            when ap_ST_fsm_state194 => 
                ap_NS_fsm <= ap_ST_fsm_state195;
            when ap_ST_fsm_state195 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state195) and (icmp_ln128_fu_2155_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state193;
                else
                    ap_NS_fsm <= ap_ST_fsm_state196;
                end if;
            when ap_ST_fsm_state196 => 
                ap_NS_fsm <= ap_ST_fsm_state197;
            when ap_ST_fsm_state197 => 
                ap_NS_fsm <= ap_ST_fsm_state198;
            when ap_ST_fsm_state198 => 
                ap_NS_fsm <= ap_ST_fsm_state195;
            when ap_ST_fsm_state199 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state199) and (icmp_ln141_fu_2193_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state213;
                else
                    ap_NS_fsm <= ap_ST_fsm_state200;
                end if;
            when ap_ST_fsm_state200 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state200) and (icmp_ln145_fu_2232_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state209;
                else
                    ap_NS_fsm <= ap_ST_fsm_state201;
                end if;
            when ap_ST_fsm_state201 => 
                ap_NS_fsm <= ap_ST_fsm_state202;
            when ap_ST_fsm_state202 => 
                ap_NS_fsm <= ap_ST_fsm_state203;
            when ap_ST_fsm_state203 => 
                ap_NS_fsm <= ap_ST_fsm_state204;
            when ap_ST_fsm_state204 => 
                ap_NS_fsm <= ap_ST_fsm_state205;
            when ap_ST_fsm_state205 => 
                ap_NS_fsm <= ap_ST_fsm_state206;
            when ap_ST_fsm_state206 => 
                ap_NS_fsm <= ap_ST_fsm_state207;
            when ap_ST_fsm_state207 => 
                ap_NS_fsm <= ap_ST_fsm_state208;
            when ap_ST_fsm_state208 => 
                ap_NS_fsm <= ap_ST_fsm_state200;
            when ap_ST_fsm_state209 => 
                ap_NS_fsm <= ap_ST_fsm_state210;
            when ap_ST_fsm_state210 => 
                ap_NS_fsm <= ap_ST_fsm_state211;
            when ap_ST_fsm_state211 => 
                ap_NS_fsm <= ap_ST_fsm_state212;
            when ap_ST_fsm_state212 => 
                ap_NS_fsm <= ap_ST_fsm_state199;
            when ap_ST_fsm_state213 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state213) and (icmp_ln158_fu_2276_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state221;
                else
                    ap_NS_fsm <= ap_ST_fsm_state214;
                end if;
            when ap_ST_fsm_state214 => 
                ap_NS_fsm <= ap_ST_fsm_state215;
            when ap_ST_fsm_state215 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state215) and (icmp_ln161_fu_2304_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state213;
                else
                    ap_NS_fsm <= ap_ST_fsm_state216;
                end if;
            when ap_ST_fsm_state216 => 
                ap_NS_fsm <= ap_ST_fsm_state217;
            when ap_ST_fsm_state217 => 
                ap_NS_fsm <= ap_ST_fsm_state218;
            when ap_ST_fsm_state218 => 
                ap_NS_fsm <= ap_ST_fsm_state219;
            when ap_ST_fsm_state219 => 
                ap_NS_fsm <= ap_ST_fsm_state220;
            when ap_ST_fsm_state220 => 
                ap_NS_fsm <= ap_ST_fsm_state215;
            when ap_ST_fsm_state221 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state221) and (icmp_ln174_fu_2334_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state236;
                else
                    ap_NS_fsm <= ap_ST_fsm_state222;
                end if;
            when ap_ST_fsm_state222 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state222) and (icmp_ln178_fu_2363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state232;
                else
                    ap_NS_fsm <= ap_ST_fsm_state223;
                end if;
            when ap_ST_fsm_state223 => 
                ap_NS_fsm <= ap_ST_fsm_state224;
            when ap_ST_fsm_state224 => 
                ap_NS_fsm <= ap_ST_fsm_state225;
            when ap_ST_fsm_state225 => 
                ap_NS_fsm <= ap_ST_fsm_state226;
            when ap_ST_fsm_state226 => 
                ap_NS_fsm <= ap_ST_fsm_state227;
            when ap_ST_fsm_state227 => 
                ap_NS_fsm <= ap_ST_fsm_state228;
            when ap_ST_fsm_state228 => 
                ap_NS_fsm <= ap_ST_fsm_state229;
            when ap_ST_fsm_state229 => 
                ap_NS_fsm <= ap_ST_fsm_state230;
            when ap_ST_fsm_state230 => 
                ap_NS_fsm <= ap_ST_fsm_state231;
            when ap_ST_fsm_state231 => 
                ap_NS_fsm <= ap_ST_fsm_state222;
            when ap_ST_fsm_state232 => 
                ap_NS_fsm <= ap_ST_fsm_state233;
            when ap_ST_fsm_state233 => 
                ap_NS_fsm <= ap_ST_fsm_state234;
            when ap_ST_fsm_state234 => 
                ap_NS_fsm <= ap_ST_fsm_state235;
            when ap_ST_fsm_state235 => 
                ap_NS_fsm <= ap_ST_fsm_state221;
            when ap_ST_fsm_state236 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state236) and (icmp_ln191_fu_2399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state243;
                else
                    ap_NS_fsm <= ap_ST_fsm_state237;
                end if;
            when ap_ST_fsm_state237 => 
                ap_NS_fsm <= ap_ST_fsm_state238;
            when ap_ST_fsm_state238 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state238) and (icmp_ln194_fu_2460_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state236;
                else
                    ap_NS_fsm <= ap_ST_fsm_state239;
                end if;
            when ap_ST_fsm_state239 => 
                ap_NS_fsm <= ap_ST_fsm_state240;
            when ap_ST_fsm_state240 => 
                ap_NS_fsm <= ap_ST_fsm_state241;
            when ap_ST_fsm_state241 => 
                ap_NS_fsm <= ap_ST_fsm_state242;
            when ap_ST_fsm_state242 => 
                ap_NS_fsm <= ap_ST_fsm_state238;
            when ap_ST_fsm_state243 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state243) and (grp_update_weights_1_fu_1234_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state243;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    activations1_address0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state3, activations1_addr_1_reg_2645, ap_CS_fsm_state5, ap_CS_fsm_state15, activations1_addr_2_reg_2701, ap_CS_fsm_state20, zext_ln36_fu_1620_p1, activations1_addr_3_reg_2729, ap_CS_fsm_state213, ap_CS_fsm_state19, ap_CS_fsm_state50, zext_ln359_fu_1431_p1, zext_ln48_fu_1597_p1, zext_ln82_fu_1695_p1, zext_ln158_fu_2288_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state213)) then 
            activations1_address0 <= zext_ln158_fu_2288_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            activations1_address0 <= zext_ln82_fu_1695_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            activations1_address0 <= activations1_addr_3_reg_2729;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            activations1_address0 <= zext_ln36_fu_1620_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            activations1_address0 <= activations1_addr_2_reg_2701;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            activations1_address0 <= zext_ln48_fu_1597_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            activations1_address0 <= activations1_addr_1_reg_2645;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations1_address0 <= zext_ln359_fu_1431_p1(6 - 1 downto 0);
        else 
            activations1_address0 <= "XXXXXX";
        end if; 
    end process;


    activations1_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state15, ap_CS_fsm_state20, ap_CS_fsm_state213, ap_CS_fsm_state19, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state213) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            activations1_ce0 <= ap_const_logic_1;
        else 
            activations1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activations1_d0_assign_proc : process(grp_fu_1258_p2, reg_1348, ap_CS_fsm_state3, ap_CS_fsm_state5, add113_i_reg_660, ap_CS_fsm_state19, ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            activations1_d0 <= reg_1348;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            activations1_d0 <= grp_fu_1258_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            activations1_d0 <= add113_i_reg_660;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations1_d0 <= ap_const_lv64_0;
        else 
            activations1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    activations1_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln359_fu_1419_p2, icmp_ln64_fu_1536_p2, ap_CS_fsm_state19, ap_CS_fsm_state50)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_1536_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_0)))) then 
            activations1_we0 <= ap_const_logic_1;
        else 
            activations1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    activations2_address0_assign_proc : process(ap_CS_fsm_state3, activations2_addr_1_reg_2747, ap_CS_fsm_state52, ap_CS_fsm_state62, activations2_addr_2_reg_2793, ap_CS_fsm_state67, zext_ln36_1_fu_1740_p1, activations2_addr_3_reg_2821, ap_CS_fsm_state99, ap_CS_fsm_state193, ap_CS_fsm_state66, ap_CS_fsm_state97, zext_ln359_fu_1431_p1, zext_ln48_1_fu_1717_p1, zext_ln102_fu_1792_p1, zext_ln125_fu_2128_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state193)) then 
            activations2_address0 <= zext_ln125_fu_2128_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            activations2_address0 <= zext_ln102_fu_1792_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            activations2_address0 <= activations2_addr_3_reg_2821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            activations2_address0 <= zext_ln36_1_fu_1740_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            activations2_address0 <= activations2_addr_2_reg_2793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            activations2_address0 <= zext_ln48_1_fu_1717_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            activations2_address0 <= activations2_addr_1_reg_2747;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations2_address0 <= zext_ln359_fu_1431_p1(6 - 1 downto 0);
        else 
            activations2_address0 <= "XXXXXX";
        end if; 
    end process;


    activations2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state52, ap_CS_fsm_state62, ap_CS_fsm_state67, ap_CS_fsm_state99, ap_CS_fsm_state193, ap_CS_fsm_state66, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state193) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state66))) then 
            activations2_ce0 <= ap_const_logic_1;
        else 
            activations2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activations2_d0_assign_proc : process(grp_fu_1258_p2, reg_1348, ap_CS_fsm_state3, ap_CS_fsm_state52, add113_i16_reg_718, ap_CS_fsm_state66, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            activations2_d0 <= reg_1348;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            activations2_d0 <= grp_fu_1258_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            activations2_d0 <= add113_i16_reg_718;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            activations2_d0 <= ap_const_lv64_0;
        else 
            activations2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    activations2_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state52, icmp_ln359_fu_1419_p2, icmp_ln82_fu_1669_p2, ap_CS_fsm_state66, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state66) or ((ap_const_logic_1 = ap_CS_fsm_state52) and (icmp_ln82_fu_1669_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln359_fu_1419_p2 = ap_const_lv1_0)))) then 
            activations2_we0 <= ap_const_logic_1;
        else 
            activations2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln100_fu_1786_p2 <= std_logic_vector(unsigned(i_19_reg_798) + unsigned(ap_const_lv7_1));
    add_ln102_fu_1801_p2 <= std_logic_vector(unsigned(zext_ln102_1_fu_1797_p1) + unsigned(tmp_13_reg_2839));
    add_ln114_fu_2017_p2 <= std_logic_vector(unsigned(i_34_reg_1084) + unsigned(ap_const_lv2_1));
    add_ln116_fu_2027_p2 <= std_logic_vector(unsigned(zext_ln114_fu_2023_p1) + unsigned(sub_ln374_reg_2963));
    add_ln125_fu_2122_p2 <= std_logic_vector(unsigned(i_24_reg_1096) + unsigned(ap_const_lv7_1));
    add_ln128_fu_2161_p2 <= std_logic_vector(unsigned(j_9_reg_1108) + unsigned(ap_const_lv2_1));
    add_ln130_fu_2184_p2 <= std_logic_vector(unsigned(zext_ln128_fu_2167_p1) + unsigned(empty_52_reg_3019));
    add_ln141_fu_2199_p2 <= std_logic_vector(unsigned(i_25_reg_1119) + unsigned(ap_const_lv7_1));
    add_ln145_fu_2238_p2 <= std_logic_vector(unsigned(j_10_reg_1130) + unsigned(ap_const_lv2_1));
    add_ln147_fu_2248_p2 <= std_logic_vector(unsigned(zext_ln145_fu_2244_p1) + unsigned(empty_54_reg_3060));
    add_ln158_fu_2282_p2 <= std_logic_vector(unsigned(i_26_reg_1154) + unsigned(ap_const_lv7_1));
    add_ln161_fu_2310_p2 <= std_logic_vector(unsigned(j_11_reg_1165) + unsigned(ap_const_lv7_1));
    add_ln163_fu_2325_p2 <= std_logic_vector(unsigned(zext_ln161_1_fu_2321_p1) + unsigned(tmp_14_reg_3121));
    add_ln174_fu_2340_p2 <= std_logic_vector(unsigned(i_27_reg_1176) + unsigned(ap_const_lv7_1));
    add_ln178_fu_2369_p2 <= std_logic_vector(unsigned(j_12_reg_1187) + unsigned(ap_const_lv7_1));
    add_ln180_fu_2379_p2 <= std_logic_vector(unsigned(zext_ln178_1_fu_2375_p1) + unsigned(tmp_15_reg_3162));
    add_ln191_fu_2405_p2 <= std_logic_vector(unsigned(i_28_reg_1211) + unsigned(ap_const_lv4_1));
    add_ln194_fu_2466_p2 <= std_logic_vector(unsigned(j_13_reg_1223) + unsigned(ap_const_lv7_1));
    add_ln196_fu_2481_p2 <= std_logic_vector(unsigned(zext_ln194_1_fu_2477_p1) + unsigned(tmp_16_reg_3238));
    add_ln22_fu_1910_p2 <= std_logic_vector(unsigned(i_32_reg_1049) + unsigned(ap_const_lv2_1));
    add_ln27_fu_1948_p2 <= std_logic_vector(unsigned(i_33_reg_1072) + unsigned(ap_const_lv2_1));
    add_ln356_1_fu_1397_p2 <= std_logic_vector(unsigned(phi_mul1_fu_154) + unsigned(ap_const_lv12_D));
    add_ln356_fu_1409_p2 <= std_logic_vector(unsigned(i_fu_158) + unsigned(ap_const_lv8_1));
    add_ln359_fu_1425_p2 <= std_logic_vector(unsigned(j_reg_615) + unsigned(ap_const_lv7_1));
    add_ln36_1_fu_1734_p2 <= std_logic_vector(unsigned(i_17_reg_742) + unsigned(ap_const_lv7_1));
    add_ln36_2_fu_1857_p2 <= std_logic_vector(unsigned(i_31_reg_992) + unsigned(ap_const_lv2_1));
    add_ln36_fu_1614_p2 <= std_logic_vector(unsigned(i_14_reg_684) + unsigned(ap_const_lv7_1));
    add_ln48_1_fu_1711_p2 <= std_logic_vector(unsigned(i_16_reg_731) + unsigned(ap_const_lv7_1));
    add_ln48_2_fu_1822_p2 <= std_logic_vector(unsigned(i_30_reg_902) + unsigned(ap_const_lv2_1));
    add_ln48_fu_1591_p2 <= std_logic_vector(unsigned(i_12_reg_673) + unsigned(ap_const_lv7_1));
    add_ln60_1_fu_1513_p2 <= std_logic_vector(unsigned(phi_mul_reg_637) + unsigned(ap_const_lv10_D));
    add_ln60_fu_1525_p2 <= std_logic_vector(unsigned(j_6_reg_626) + unsigned(ap_const_lv7_1));
    add_ln64_fu_1542_p2 <= std_logic_vector(unsigned(i_13_reg_649) + unsigned(ap_const_lv4_1));
    add_ln66_1_fu_1562_p2 <= std_logic_vector(unsigned(zext_ln64_fu_1548_p1) + unsigned(phi_mul1_fu_154));
    add_ln66_fu_1556_p2 <= std_logic_vector(unsigned(zext_ln64_1_fu_1552_p1) + unsigned(phi_mul_reg_637));
    add_ln78_fu_1646_p2 <= std_logic_vector(unsigned(i_15_reg_695) + unsigned(ap_const_lv7_1));
    add_ln82_fu_1675_p2 <= std_logic_vector(unsigned(j_7_reg_706) + unsigned(ap_const_lv7_1));
    add_ln84_fu_1685_p2 <= std_logic_vector(unsigned(zext_ln82_1_fu_1681_p1) + unsigned(tmp_12_reg_2752));
    add_ln96_fu_1766_p2 <= std_logic_vector(unsigned(j_8_reg_786) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state154 <= ap_CS_fsm(153);
    ap_CS_fsm_state155 <= ap_CS_fsm(154);
    ap_CS_fsm_state158 <= ap_CS_fsm(157);
    ap_CS_fsm_state159 <= ap_CS_fsm(158);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state169 <= ap_CS_fsm(168);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state183 <= ap_CS_fsm(182);
    ap_CS_fsm_state184 <= ap_CS_fsm(183);
    ap_CS_fsm_state185 <= ap_CS_fsm(184);
    ap_CS_fsm_state188 <= ap_CS_fsm(187);
    ap_CS_fsm_state189 <= ap_CS_fsm(188);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state192 <= ap_CS_fsm(191);
    ap_CS_fsm_state193 <= ap_CS_fsm(192);
    ap_CS_fsm_state194 <= ap_CS_fsm(193);
    ap_CS_fsm_state195 <= ap_CS_fsm(194);
    ap_CS_fsm_state198 <= ap_CS_fsm(197);
    ap_CS_fsm_state199 <= ap_CS_fsm(198);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state200 <= ap_CS_fsm(199);
    ap_CS_fsm_state201 <= ap_CS_fsm(200);
    ap_CS_fsm_state204 <= ap_CS_fsm(203);
    ap_CS_fsm_state205 <= ap_CS_fsm(204);
    ap_CS_fsm_state208 <= ap_CS_fsm(207);
    ap_CS_fsm_state209 <= ap_CS_fsm(208);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state212 <= ap_CS_fsm(211);
    ap_CS_fsm_state213 <= ap_CS_fsm(212);
    ap_CS_fsm_state214 <= ap_CS_fsm(213);
    ap_CS_fsm_state215 <= ap_CS_fsm(214);
    ap_CS_fsm_state216 <= ap_CS_fsm(215);
    ap_CS_fsm_state219 <= ap_CS_fsm(218);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state220 <= ap_CS_fsm(219);
    ap_CS_fsm_state221 <= ap_CS_fsm(220);
    ap_CS_fsm_state222 <= ap_CS_fsm(221);
    ap_CS_fsm_state223 <= ap_CS_fsm(222);
    ap_CS_fsm_state224 <= ap_CS_fsm(223);
    ap_CS_fsm_state227 <= ap_CS_fsm(226);
    ap_CS_fsm_state228 <= ap_CS_fsm(227);
    ap_CS_fsm_state231 <= ap_CS_fsm(230);
    ap_CS_fsm_state232 <= ap_CS_fsm(231);
    ap_CS_fsm_state235 <= ap_CS_fsm(234);
    ap_CS_fsm_state236 <= ap_CS_fsm(235);
    ap_CS_fsm_state237 <= ap_CS_fsm(236);
    ap_CS_fsm_state238 <= ap_CS_fsm(237);
    ap_CS_fsm_state239 <= ap_CS_fsm(238);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state242 <= ap_CS_fsm(241);
    ap_CS_fsm_state243 <= ap_CS_fsm(242);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_ST_fsm_state100_blk <= ap_const_logic_0;
    ap_ST_fsm_state101_blk <= ap_const_logic_0;
    ap_ST_fsm_state102_blk <= ap_const_logic_0;
    ap_ST_fsm_state103_blk <= ap_const_logic_0;
    ap_ST_fsm_state104_blk <= ap_const_logic_0;
    ap_ST_fsm_state105_blk <= ap_const_logic_0;
    ap_ST_fsm_state106_blk <= ap_const_logic_0;
    ap_ST_fsm_state107_blk <= ap_const_logic_0;
    ap_ST_fsm_state108_blk <= ap_const_logic_0;
    ap_ST_fsm_state109_blk <= ap_const_logic_0;
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state110_blk <= ap_const_logic_0;
    ap_ST_fsm_state111_blk <= ap_const_logic_0;
    ap_ST_fsm_state112_blk <= ap_const_logic_0;
    ap_ST_fsm_state113_blk <= ap_const_logic_0;
    ap_ST_fsm_state114_blk <= ap_const_logic_0;
    ap_ST_fsm_state115_blk <= ap_const_logic_0;
    ap_ST_fsm_state116_blk <= ap_const_logic_0;
    ap_ST_fsm_state117_blk <= ap_const_logic_0;
    ap_ST_fsm_state118_blk <= ap_const_logic_0;
    ap_ST_fsm_state119_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state120_blk <= ap_const_logic_0;
    ap_ST_fsm_state121_blk <= ap_const_logic_0;
    ap_ST_fsm_state122_blk <= ap_const_logic_0;
    ap_ST_fsm_state123_blk <= ap_const_logic_0;
    ap_ST_fsm_state124_blk <= ap_const_logic_0;
    ap_ST_fsm_state125_blk <= ap_const_logic_0;
    ap_ST_fsm_state126_blk <= ap_const_logic_0;
    ap_ST_fsm_state127_blk <= ap_const_logic_0;
    ap_ST_fsm_state128_blk <= ap_const_logic_0;
    ap_ST_fsm_state129_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state130_blk <= ap_const_logic_0;
    ap_ST_fsm_state131_blk <= ap_const_logic_0;
    ap_ST_fsm_state132_blk <= ap_const_logic_0;
    ap_ST_fsm_state133_blk <= ap_const_logic_0;
    ap_ST_fsm_state134_blk <= ap_const_logic_0;
    ap_ST_fsm_state135_blk <= ap_const_logic_0;
    ap_ST_fsm_state136_blk <= ap_const_logic_0;
    ap_ST_fsm_state137_blk <= ap_const_logic_0;
    ap_ST_fsm_state138_blk <= ap_const_logic_0;
    ap_ST_fsm_state139_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state140_blk <= ap_const_logic_0;
    ap_ST_fsm_state141_blk <= ap_const_logic_0;
    ap_ST_fsm_state142_blk <= ap_const_logic_0;
    ap_ST_fsm_state143_blk <= ap_const_logic_0;
    ap_ST_fsm_state144_blk <= ap_const_logic_0;
    ap_ST_fsm_state145_blk <= ap_const_logic_0;
    ap_ST_fsm_state146_blk <= ap_const_logic_0;
    ap_ST_fsm_state147_blk <= ap_const_logic_0;
    ap_ST_fsm_state148_blk <= ap_const_logic_0;
    ap_ST_fsm_state149_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state150_blk <= ap_const_logic_0;
    ap_ST_fsm_state151_blk <= ap_const_logic_0;
    ap_ST_fsm_state152_blk <= ap_const_logic_0;
    ap_ST_fsm_state153_blk <= ap_const_logic_0;
    ap_ST_fsm_state154_blk <= ap_const_logic_0;
    ap_ST_fsm_state155_blk <= ap_const_logic_0;
    ap_ST_fsm_state156_blk <= ap_const_logic_0;
    ap_ST_fsm_state157_blk <= ap_const_logic_0;
    ap_ST_fsm_state158_blk <= ap_const_logic_0;
    ap_ST_fsm_state159_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state160_blk <= ap_const_logic_0;
    ap_ST_fsm_state161_blk <= ap_const_logic_0;
    ap_ST_fsm_state162_blk <= ap_const_logic_0;
    ap_ST_fsm_state163_blk <= ap_const_logic_0;
    ap_ST_fsm_state164_blk <= ap_const_logic_0;
    ap_ST_fsm_state165_blk <= ap_const_logic_0;
    ap_ST_fsm_state166_blk <= ap_const_logic_0;
    ap_ST_fsm_state167_blk <= ap_const_logic_0;
    ap_ST_fsm_state168_blk <= ap_const_logic_0;
    ap_ST_fsm_state169_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state170_blk <= ap_const_logic_0;
    ap_ST_fsm_state171_blk <= ap_const_logic_0;
    ap_ST_fsm_state172_blk <= ap_const_logic_0;
    ap_ST_fsm_state173_blk <= ap_const_logic_0;
    ap_ST_fsm_state174_blk <= ap_const_logic_0;
    ap_ST_fsm_state175_blk <= ap_const_logic_0;
    ap_ST_fsm_state176_blk <= ap_const_logic_0;
    ap_ST_fsm_state177_blk <= ap_const_logic_0;
    ap_ST_fsm_state178_blk <= ap_const_logic_0;
    ap_ST_fsm_state179_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state180_blk <= ap_const_logic_0;
    ap_ST_fsm_state181_blk <= ap_const_logic_0;
    ap_ST_fsm_state182_blk <= ap_const_logic_0;
    ap_ST_fsm_state183_blk <= ap_const_logic_0;
    ap_ST_fsm_state184_blk <= ap_const_logic_0;
    ap_ST_fsm_state185_blk <= ap_const_logic_0;
    ap_ST_fsm_state186_blk <= ap_const_logic_0;
    ap_ST_fsm_state187_blk <= ap_const_logic_0;
    ap_ST_fsm_state188_blk <= ap_const_logic_0;
    ap_ST_fsm_state189_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state190_blk <= ap_const_logic_0;
    ap_ST_fsm_state191_blk <= ap_const_logic_0;
    ap_ST_fsm_state192_blk <= ap_const_logic_0;
    ap_ST_fsm_state193_blk <= ap_const_logic_0;
    ap_ST_fsm_state194_blk <= ap_const_logic_0;
    ap_ST_fsm_state195_blk <= ap_const_logic_0;
    ap_ST_fsm_state196_blk <= ap_const_logic_0;
    ap_ST_fsm_state197_blk <= ap_const_logic_0;
    ap_ST_fsm_state198_blk <= ap_const_logic_0;
    ap_ST_fsm_state199_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state200_blk <= ap_const_logic_0;
    ap_ST_fsm_state201_blk <= ap_const_logic_0;
    ap_ST_fsm_state202_blk <= ap_const_logic_0;
    ap_ST_fsm_state203_blk <= ap_const_logic_0;
    ap_ST_fsm_state204_blk <= ap_const_logic_0;
    ap_ST_fsm_state205_blk <= ap_const_logic_0;
    ap_ST_fsm_state206_blk <= ap_const_logic_0;
    ap_ST_fsm_state207_blk <= ap_const_logic_0;
    ap_ST_fsm_state208_blk <= ap_const_logic_0;
    ap_ST_fsm_state209_blk <= ap_const_logic_0;
    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state210_blk <= ap_const_logic_0;
    ap_ST_fsm_state211_blk <= ap_const_logic_0;
    ap_ST_fsm_state212_blk <= ap_const_logic_0;
    ap_ST_fsm_state213_blk <= ap_const_logic_0;
    ap_ST_fsm_state214_blk <= ap_const_logic_0;
    ap_ST_fsm_state215_blk <= ap_const_logic_0;
    ap_ST_fsm_state216_blk <= ap_const_logic_0;
    ap_ST_fsm_state217_blk <= ap_const_logic_0;
    ap_ST_fsm_state218_blk <= ap_const_logic_0;
    ap_ST_fsm_state219_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state220_blk <= ap_const_logic_0;
    ap_ST_fsm_state221_blk <= ap_const_logic_0;
    ap_ST_fsm_state222_blk <= ap_const_logic_0;
    ap_ST_fsm_state223_blk <= ap_const_logic_0;
    ap_ST_fsm_state224_blk <= ap_const_logic_0;
    ap_ST_fsm_state225_blk <= ap_const_logic_0;
    ap_ST_fsm_state226_blk <= ap_const_logic_0;
    ap_ST_fsm_state227_blk <= ap_const_logic_0;
    ap_ST_fsm_state228_blk <= ap_const_logic_0;
    ap_ST_fsm_state229_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state230_blk <= ap_const_logic_0;
    ap_ST_fsm_state231_blk <= ap_const_logic_0;
    ap_ST_fsm_state232_blk <= ap_const_logic_0;
    ap_ST_fsm_state233_blk <= ap_const_logic_0;
    ap_ST_fsm_state234_blk <= ap_const_logic_0;
    ap_ST_fsm_state235_blk <= ap_const_logic_0;
    ap_ST_fsm_state236_blk <= ap_const_logic_0;
    ap_ST_fsm_state237_blk <= ap_const_logic_0;
    ap_ST_fsm_state238_blk <= ap_const_logic_0;
    ap_ST_fsm_state239_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state240_blk <= ap_const_logic_0;
    ap_ST_fsm_state241_blk <= ap_const_logic_0;
    ap_ST_fsm_state242_blk <= ap_const_logic_0;

    ap_ST_fsm_state243_blk_assign_proc : process(grp_update_weights_1_fu_1234_ap_done)
    begin
        if ((grp_update_weights_1_fu_1234_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state243_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state243_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state95_blk <= ap_const_logic_0;
    ap_ST_fsm_state96_blk <= ap_const_logic_0;
    ap_ST_fsm_state97_blk <= ap_const_logic_0;
    ap_ST_fsm_state98_blk <= ap_const_logic_0;
    ap_ST_fsm_state99_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln356_fu_1403_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_activations3_0_9_phi_fu_1038_p6_assign_proc : process(grp_fu_1295_p2, ap_CS_fsm_state143, activations3_0_8_reg_981, i_31_reg_992)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_0))) then 
            ap_phi_mux_activations3_0_9_phi_fu_1038_p6 <= grp_fu_1295_p2;
        elsif (((not((i_31_reg_992 = ap_const_lv2_1)) and not((i_31_reg_992 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state143)) or ((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_1)))) then 
            ap_phi_mux_activations3_0_9_phi_fu_1038_p6 <= activations3_0_8_reg_981;
        else 
            ap_phi_mux_activations3_0_9_phi_fu_1038_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_activations3_1_9_phi_fu_1023_p6_assign_proc : process(grp_fu_1295_p2, ap_CS_fsm_state143, activations3_1_8_reg_970, i_31_reg_992)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_1))) then 
            ap_phi_mux_activations3_1_9_phi_fu_1023_p6 <= grp_fu_1295_p2;
        elsif (((not((i_31_reg_992 = ap_const_lv2_1)) and not((i_31_reg_992 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state143)) or ((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_0)))) then 
            ap_phi_mux_activations3_1_9_phi_fu_1023_p6 <= activations3_1_8_reg_970;
        else 
            ap_phi_mux_activations3_1_9_phi_fu_1023_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_activations3_2_9_phi_fu_1008_p6_assign_proc : process(grp_fu_1295_p2, activations3_2_8_reg_959, ap_CS_fsm_state143, i_31_reg_992)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state143) and (i_31_reg_992 = ap_const_lv2_0)))) then 
            ap_phi_mux_activations3_2_9_phi_fu_1008_p6 <= activations3_2_8_reg_959;
        elsif ((not((i_31_reg_992 = ap_const_lv2_1)) and not((i_31_reg_992 = ap_const_lv2_0)) and (ap_const_logic_1 = ap_CS_fsm_state143))) then 
            ap_phi_mux_activations3_2_9_phi_fu_1008_p6 <= grp_fu_1295_p2;
        else 
            ap_phi_mux_activations3_2_9_phi_fu_1008_p6 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln356_fu_1403_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln356_fu_1403_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    arrayidx10_sum197_cast_fu_2420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayidx10_sum197_fu_2415_p2),64));
    arrayidx10_sum197_fu_2415_p2 <= std_logic_vector(unsigned(zext_ln191_fu_2411_p1) + unsigned(phi_mul1_fu_154));

    biases1_address0_assign_proc : process(ap_CS_fsm_state15, grp_update_weights_1_fu_1234_biases1_address0, ap_CS_fsm_state243, zext_ln48_fu_1597_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            biases1_address0 <= zext_ln48_fu_1597_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases1_address0 <= grp_update_weights_1_fu_1234_biases1_address0;
        else 
            biases1_address0 <= "XXXXXX";
        end if; 
    end process;


    biases1_ce0_assign_proc : process(ap_CS_fsm_state15, grp_update_weights_1_fu_1234_biases1_ce0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            biases1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases1_ce0 <= grp_update_weights_1_fu_1234_biases1_ce0;
        else 
            biases1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biases1_d0 <= grp_update_weights_1_fu_1234_biases1_d0;

    biases1_we0_assign_proc : process(grp_update_weights_1_fu_1234_biases1_we0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases1_we0 <= grp_update_weights_1_fu_1234_biases1_we0;
        else 
            biases1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    biases2_address0_assign_proc : process(ap_CS_fsm_state62, grp_update_weights_1_fu_1234_biases2_address0, ap_CS_fsm_state243, zext_ln48_1_fu_1717_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            biases2_address0 <= zext_ln48_1_fu_1717_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases2_address0 <= grp_update_weights_1_fu_1234_biases2_address0;
        else 
            biases2_address0 <= "XXXXXX";
        end if; 
    end process;


    biases2_ce0_assign_proc : process(ap_CS_fsm_state62, grp_update_weights_1_fu_1234_biases2_ce0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            biases2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases2_ce0 <= grp_update_weights_1_fu_1234_biases2_ce0;
        else 
            biases2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biases2_d0 <= grp_update_weights_1_fu_1234_biases2_d0;

    biases2_we0_assign_proc : process(grp_update_weights_1_fu_1234_biases2_we0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases2_we0 <= grp_update_weights_1_fu_1234_biases2_we0;
        else 
            biases2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    biases3_address0_assign_proc : process(ap_CS_fsm_state109, grp_update_weights_1_fu_1234_biases3_address0, ap_CS_fsm_state243, zext_ln48_2_fu_1828_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            biases3_address0 <= zext_ln48_2_fu_1828_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases3_address0 <= grp_update_weights_1_fu_1234_biases3_address0;
        else 
            biases3_address0 <= "XX";
        end if; 
    end process;


    biases3_ce0_assign_proc : process(ap_CS_fsm_state109, grp_update_weights_1_fu_1234_biases3_ce0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            biases3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases3_ce0 <= grp_update_weights_1_fu_1234_biases3_ce0;
        else 
            biases3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    biases3_d0 <= grp_update_weights_1_fu_1234_biases3_d0;

    biases3_we0_assign_proc : process(grp_update_weights_1_fu_1234_biases3_we0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            biases3_we0 <= grp_update_weights_1_fu_1234_biases3_we0;
        else 
            biases3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln102_fu_1811_p1 <= weights3_q0;
    bitcast_ln116_1_fu_2073_p1 <= reg_1335;
    bitcast_ln116_2_fu_2083_p1 <= xor_ln116_fu_2077_p2;
    bitcast_ln116_fu_2059_p1 <= training_targets_q0;
    bitcast_ln147_fu_2271_p1 <= weights3_q0;
    bitcast_ln180_fu_2394_p1 <= reg_1354;
    bitcast_ln24_1_fu_1937_p1 <= xor_ln24_fu_1931_p2;
    bitcast_ln24_fu_1928_p1 <= tmp_7_reg_2935;
    bitcast_ln29_1_fu_1991_p1 <= xor_ln29_fu_1985_p2;
    bitcast_ln29_fu_1982_p1 <= tmp_8_reg_2958;
    bitcast_ln39_1_fu_1635_p1 <= xor_ln39_fu_1629_p2;
    bitcast_ln39_2_fu_1745_p1 <= reg_1358;
    bitcast_ln39_3_fu_1755_p1 <= xor_ln39_1_fu_1749_p2;
    bitcast_ln39_4_fu_1875_p1 <= tmp_6_reg_2910;
    bitcast_ln39_5_fu_1884_p1 <= xor_ln39_2_fu_1878_p2;
    bitcast_ln39_fu_1625_p1 <= reg_1327;
    bitcast_ln50_1_fu_1723_p1 <= biases2_q0;
    bitcast_ln50_2_fu_1846_p1 <= biases3_q0;
    bitcast_ln50_fu_1603_p1 <= biases1_q0;
    bitcast_ln66_1_fu_1581_p1 <= training_data_load_reg_2673;
    bitcast_ln66_fu_1576_p1 <= weights1_q0;
    bitcast_ln84_fu_1700_p1 <= reg_1354;

    dactivations1_address0_assign_proc : process(zext_ln36_reg_2724, zext_ln174_reg_3152, ap_CS_fsm_state222, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state222)) then 
            dactivations1_address0 <= zext_ln174_reg_3152(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dactivations1_address0 <= zext_ln36_reg_2724(6 - 1 downto 0);
        else 
            dactivations1_address0 <= "XXXXXX";
        end if; 
    end process;


    dactivations1_ce0_assign_proc : process(ap_CS_fsm_state222, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state222) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            dactivations1_ce0 <= ap_const_logic_1;
        else 
            dactivations1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dactivations1_we0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dactivations1_we0 <= ap_const_logic_1;
        else 
            dactivations1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dactivations2_address0_assign_proc : process(zext_ln36_1_reg_2816, zext_ln141_reg_3050, ap_CS_fsm_state200, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
            dactivations2_address0 <= zext_ln141_reg_3050(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            dactivations2_address0 <= zext_ln36_1_reg_2816(6 - 1 downto 0);
        else 
            dactivations2_address0 <= "XXXXXX";
        end if; 
    end process;


    dactivations2_ce0_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            dactivations2_ce0 <= ap_const_logic_1;
        else 
            dactivations2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dactivations2_we0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            dactivations2_we0 <= ap_const_logic_1;
        else 
            dactivations2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_weights1_address0_assign_proc : process(grp_update_weights_1_fu_1234_d_weights1_address0, ap_CS_fsm_state242, ap_CS_fsm_state243, zext_ln196_fu_2486_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state242)) then 
            delta_weights1_address0 <= zext_ln196_fu_2486_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            delta_weights1_address0 <= grp_update_weights_1_fu_1234_d_weights1_address0;
        else 
            delta_weights1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    delta_weights1_ce0_assign_proc : process(grp_update_weights_1_fu_1234_d_weights1_ce0, ap_CS_fsm_state242, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state242)) then 
            delta_weights1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            delta_weights1_ce0 <= grp_update_weights_1_fu_1234_d_weights1_ce0;
        else 
            delta_weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_weights1_we0_assign_proc : process(ap_CS_fsm_state242)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state242)) then 
            delta_weights1_we0 <= ap_const_logic_1;
        else 
            delta_weights1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_weights2_address0_assign_proc : process(grp_update_weights_1_fu_1234_d_weights2_address0, ap_CS_fsm_state220, ap_CS_fsm_state243, zext_ln163_fu_2330_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state220)) then 
            delta_weights2_address0 <= zext_ln163_fu_2330_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            delta_weights2_address0 <= grp_update_weights_1_fu_1234_d_weights2_address0;
        else 
            delta_weights2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    delta_weights2_ce0_assign_proc : process(grp_update_weights_1_fu_1234_d_weights2_ce0, ap_CS_fsm_state220, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state220)) then 
            delta_weights2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            delta_weights2_ce0 <= grp_update_weights_1_fu_1234_d_weights2_ce0;
        else 
            delta_weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_weights2_we0_assign_proc : process(ap_CS_fsm_state220)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state220)) then 
            delta_weights2_we0 <= ap_const_logic_1;
        else 
            delta_weights2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_weights3_address0_assign_proc : process(grp_update_weights_1_fu_1234_d_weights3_address0, ap_CS_fsm_state198, ap_CS_fsm_state243, zext_ln130_fu_2189_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            delta_weights3_address0 <= zext_ln130_fu_2189_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            delta_weights3_address0 <= grp_update_weights_1_fu_1234_d_weights3_address0;
        else 
            delta_weights3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    delta_weights3_ce0_assign_proc : process(grp_update_weights_1_fu_1234_d_weights3_ce0, ap_CS_fsm_state198, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            delta_weights3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            delta_weights3_ce0 <= grp_update_weights_1_fu_1234_d_weights3_ce0;
        else 
            delta_weights3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delta_weights3_we0_assign_proc : process(ap_CS_fsm_state198)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            delta_weights3_we0 <= ap_const_logic_1;
        else 
            delta_weights3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_51_fu_2137_p1 <= i_24_reg_1096(6 - 1 downto 0);
    empty_52_fu_2149_p2 <= std_logic_vector(unsigned(p_shl1_fu_2141_p3) - unsigned(zext_ln125_1_fu_2133_p1));
    empty_53_fu_2214_p1 <= i_25_reg_1119(6 - 1 downto 0);
    empty_54_fu_2226_p2 <= std_logic_vector(unsigned(p_shl2_fu_2218_p3) - unsigned(zext_ln141_1_fu_2210_p1));
    empty_55_fu_2293_p1 <= i_26_reg_1154(6 - 1 downto 0);
    empty_56_fu_2351_p1 <= i_27_reg_1176(6 - 1 downto 0);
    empty_57_fu_2448_p1 <= training_data_q0;
    empty_fu_1657_p1 <= i_15_reg_695(6 - 1 downto 0);

    grp_fu_1258_ce_assign_proc : process(grp_update_weights_1_fu_1234_grp_fu_1258_p_ce, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1258_ce <= grp_update_weights_1_fu_1234_grp_fu_1258_p_ce;
        else 
            grp_fu_1258_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1258_opcode_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state63, ap_CS_fsm_state68, ap_CS_fsm_state110, ap_CS_fsm_state185, grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode, ap_CS_fsm_state243, ap_CS_fsm_state11, ap_CS_fsm_state32, ap_CS_fsm_state58, ap_CS_fsm_state79, ap_CS_fsm_state104, ap_CS_fsm_state126, ap_CS_fsm_state136, ap_CS_fsm_state155, ap_CS_fsm_state205, ap_CS_fsm_state228)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1258_opcode <= grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state185) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state136))) then 
            grp_fu_1258_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state228) or (ap_const_logic_1 = ap_CS_fsm_state205) or (ap_const_logic_1 = ap_CS_fsm_state155) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1258_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1258_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1258_p0_assign_proc : process(activations1_q0, ap_CS_fsm_state16, ap_CS_fsm_state21, reg_1341, activations2_q0, ap_CS_fsm_state63, ap_CS_fsm_state68, tmp_5_fu_1833_p5, ap_CS_fsm_state110, tmp_9_fu_2046_p5, ap_CS_fsm_state185, grp_update_weights_1_fu_1234_grp_fu_1258_p_din0, add113_i_reg_660, add113_i16_reg_718, activations3_0_reg_809, sum_reg_1060, add113_i113_reg_1142, add113_i138_reg_1199, ap_CS_fsm_state243, ap_CS_fsm_state11, ap_CS_fsm_state32, ap_CS_fsm_state58, ap_CS_fsm_state79, ap_CS_fsm_state104, ap_CS_fsm_state126, ap_CS_fsm_state136, ap_CS_fsm_state155, ap_CS_fsm_state205, ap_CS_fsm_state228)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1258_p0 <= grp_update_weights_1_fu_1234_grp_fu_1258_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state228)) then 
            grp_fu_1258_p0 <= add113_i138_reg_1199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state205)) then 
            grp_fu_1258_p0 <= add113_i113_reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state185)) then 
            grp_fu_1258_p0 <= tmp_9_fu_2046_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            grp_fu_1258_p0 <= sum_reg_1060;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_fu_1258_p0 <= tmp_5_fu_1833_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_1258_p0 <= activations3_0_reg_809;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_1258_p0 <= activations2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            grp_fu_1258_p0 <= add113_i16_reg_718;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_1258_p0 <= reg_1341;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state136))) then 
            grp_fu_1258_p0 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_1258_p0 <= activations1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_1258_p0 <= add113_i_reg_660;
        else 
            grp_fu_1258_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1258_p1_assign_proc : process(reg_1321, activations1_q0, ap_CS_fsm_state16, ap_CS_fsm_state21, reg_1341, activations2_q0, ap_CS_fsm_state63, ap_CS_fsm_state68, bitcast_ln50_fu_1603_p1, bitcast_ln50_1_fu_1723_p1, ap_CS_fsm_state110, bitcast_ln50_2_fu_1846_p1, tmp_6_reg_2910, ap_CS_fsm_state185, bitcast_ln116_fu_2059_p1, grp_update_weights_1_fu_1234_grp_fu_1258_p_din1, ap_CS_fsm_state243, ap_CS_fsm_state11, ap_CS_fsm_state32, ap_CS_fsm_state58, ap_CS_fsm_state79, ap_CS_fsm_state104, ap_CS_fsm_state126, ap_CS_fsm_state136, ap_CS_fsm_state155, ap_CS_fsm_state205, ap_CS_fsm_state228)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1258_p1 <= grp_update_weights_1_fu_1234_grp_fu_1258_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state185)) then 
            grp_fu_1258_p1 <= bitcast_ln116_fu_2059_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            grp_fu_1258_p1 <= reg_1341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_fu_1258_p1 <= tmp_6_reg_2910;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            grp_fu_1258_p1 <= bitcast_ln50_2_fu_1846_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            grp_fu_1258_p1 <= activations2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            grp_fu_1258_p1 <= bitcast_ln50_1_fu_1723_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_1258_p1 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_1258_p1 <= activations1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_1258_p1 <= bitcast_ln50_fu_1603_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state228) or (ap_const_logic_1 = ap_CS_fsm_state205) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            grp_fu_1258_p1 <= reg_1321;
        else 
            grp_fu_1258_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1276_ce_assign_proc : process(grp_update_weights_1_fu_1234_grp_fu_1276_p_ce, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1276_ce <= grp_update_weights_1_fu_1234_grp_fu_1276_p_ce;
        else 
            grp_fu_1276_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1276_p0_assign_proc : process(reg_1327, ap_CS_fsm_state54, reg_1358, ap_CS_fsm_state100, oracle_activations2_q0, ap_CS_fsm_state216, ap_CS_fsm_state224, bitcast_ln66_fu_1576_p1, ap_CS_fsm_state7, bitcast_ln84_fu_1700_p1, bitcast_ln102_fu_1811_p1, tmp_6_reg_2910, bitcast_ln116_2_fu_2083_p1, ap_CS_fsm_state189, ap_CS_fsm_state195, tmp_11_fu_2258_p5, ap_CS_fsm_state201, ap_CS_fsm_state209, ap_CS_fsm_state232, empty_57_reg_3233, ap_CS_fsm_state239, grp_update_weights_1_fu_1234_grp_fu_1276_p_din0, add113_i113_reg_1142, add113_i138_reg_1199, ap_CS_fsm_state243, ap_CS_fsm_state25, ap_CS_fsm_state72, ap_CS_fsm_state140)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1276_p0 <= grp_update_weights_1_fu_1234_grp_fu_1276_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state239)) then 
            grp_fu_1276_p0 <= empty_57_reg_3233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state232)) then 
            grp_fu_1276_p0 <= add113_i138_reg_1199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state224)) then 
            grp_fu_1276_p0 <= oracle_activations2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state209)) then 
            grp_fu_1276_p0 <= add113_i113_reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state201)) then 
            grp_fu_1276_p0 <= tmp_11_fu_2258_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state189)) then 
            grp_fu_1276_p0 <= bitcast_ln116_2_fu_2083_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_fu_1276_p0 <= tmp_6_reg_2910;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_1276_p0 <= bitcast_ln102_fu_1811_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state195) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            grp_fu_1276_p0 <= reg_1358;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1276_p0 <= bitcast_ln84_fu_1700_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state216) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_1276_p0 <= reg_1327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_1276_p0 <= bitcast_ln66_fu_1576_p1;
        else 
            grp_fu_1276_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1276_p1_assign_proc : process(activations1_q0, ap_CS_fsm_state54, reg_1335, activations2_q0, ap_CS_fsm_state100, oracle_activations2_q0, ap_CS_fsm_state216, ap_CS_fsm_state224, ap_CS_fsm_state7, bitcast_ln66_1_fu_1581_p1, sub_i2_reg_2922, ap_CS_fsm_state189, tmp_s_fu_2088_p5, ap_CS_fsm_state195, tmp_10_fu_2171_p5, ap_CS_fsm_state201, bitcast_ln147_fu_2271_p1, dactivations2_q0, ap_CS_fsm_state209, bitcast_ln180_fu_2394_p1, dactivations1_q0, ap_CS_fsm_state232, oracle_activations1_q0, ap_CS_fsm_state239, grp_update_weights_1_fu_1234_grp_fu_1276_p_din1, ap_CS_fsm_state243, ap_CS_fsm_state25, ap_CS_fsm_state72, ap_CS_fsm_state140)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1276_p1 <= grp_update_weights_1_fu_1234_grp_fu_1276_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state239)) then 
            grp_fu_1276_p1 <= oracle_activations1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state232)) then 
            grp_fu_1276_p1 <= dactivations1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state224)) then 
            grp_fu_1276_p1 <= bitcast_ln180_fu_2394_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state216)) then 
            grp_fu_1276_p1 <= oracle_activations2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state209)) then 
            grp_fu_1276_p1 <= dactivations2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state201)) then 
            grp_fu_1276_p1 <= bitcast_ln147_fu_2271_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state195)) then 
            grp_fu_1276_p1 <= tmp_10_fu_2171_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state189)) then 
            grp_fu_1276_p1 <= tmp_s_fu_2088_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_fu_1276_p1 <= sub_i2_reg_2922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            grp_fu_1276_p1 <= activations2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            grp_fu_1276_p1 <= activations1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_fu_1276_p1 <= reg_1335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_1276_p1 <= bitcast_ln66_1_fu_1581_p1;
        else 
            grp_fu_1276_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1295_ce_assign_proc : process(grp_update_weights_1_fu_1234_grp_fu_1295_p_ce, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1295_ce <= grp_update_weights_1_fu_1234_grp_fu_1295_p_ce;
        else 
            grp_fu_1295_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1295_p0_assign_proc : process(reg_1341, grp_update_weights_1_fu_1234_grp_fu_1295_p_din0, ap_CS_fsm_state243, ap_CS_fsm_state36, ap_CS_fsm_state83, ap_CS_fsm_state130, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1295_p0 <= grp_update_weights_1_fu_1234_grp_fu_1295_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1295_p0 <= reg_1341;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1295_p0 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_1295_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1295_p1_assign_proc : process(reg_1335, grp_update_weights_1_fu_1234_grp_fu_1295_p_din1, sum_reg_1060, ap_CS_fsm_state243, ap_CS_fsm_state36, ap_CS_fsm_state83, ap_CS_fsm_state130, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            grp_fu_1295_p1 <= grp_update_weights_1_fu_1234_grp_fu_1295_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1295_p1 <= sum_reg_1060;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_1295_p1 <= reg_1335;
        else 
            grp_fu_1295_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1304_p1_assign_proc : process(bitcast_ln39_1_fu_1635_p1, ap_CS_fsm_state22, bitcast_ln39_3_fu_1755_p1, ap_CS_fsm_state69, bitcast_ln39_5_fu_1884_p1, ap_CS_fsm_state116, bitcast_ln24_1_fu_1937_p1, ap_CS_fsm_state145, bitcast_ln29_1_fu_1991_p1, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            grp_fu_1304_p1 <= bitcast_ln29_1_fu_1991_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            grp_fu_1304_p1 <= bitcast_ln24_1_fu_1937_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            grp_fu_1304_p1 <= bitcast_ln39_5_fu_1884_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            grp_fu_1304_p1 <= bitcast_ln39_3_fu_1755_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_1304_p1 <= bitcast_ln39_1_fu_1635_p1;
        else 
            grp_fu_1304_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_update_weights_1_fu_1234_ap_start <= grp_update_weights_1_fu_1234_ap_start_reg;
    icmp_ln100_fu_1780_p2 <= "1" when (i_19_reg_798 = ap_const_lv7_40) else "0";
    icmp_ln114_fu_2011_p2 <= "1" when (i_34_reg_1084 = ap_const_lv2_3) else "0";
    icmp_ln125_fu_2116_p2 <= "1" when (i_24_reg_1096 = ap_const_lv7_40) else "0";
    icmp_ln128_fu_2155_p2 <= "1" when (j_9_reg_1108 = ap_const_lv2_3) else "0";
    icmp_ln141_fu_2193_p2 <= "1" when (i_25_reg_1119 = ap_const_lv7_40) else "0";
    icmp_ln145_fu_2232_p2 <= "1" when (j_10_reg_1130 = ap_const_lv2_3) else "0";
    icmp_ln158_fu_2276_p2 <= "1" when (i_26_reg_1154 = ap_const_lv7_40) else "0";
    icmp_ln161_fu_2304_p2 <= "1" when (j_11_reg_1165 = ap_const_lv7_40) else "0";
    icmp_ln174_fu_2334_p2 <= "1" when (i_27_reg_1176 = ap_const_lv7_40) else "0";
    icmp_ln178_fu_2363_p2 <= "1" when (j_12_reg_1187 = ap_const_lv7_40) else "0";
    icmp_ln191_fu_2399_p2 <= "1" when (i_28_reg_1211 = ap_const_lv4_D) else "0";
    icmp_ln194_fu_2460_p2 <= "1" when (j_13_reg_1223 = ap_const_lv7_40) else "0";
    icmp_ln22_fu_1904_p2 <= "1" when (i_32_reg_1049 = ap_const_lv2_3) else "0";
    icmp_ln27_fu_1942_p2 <= "1" when (i_33_reg_1072 = ap_const_lv2_3) else "0";
    icmp_ln356_fu_1403_p2 <= "1" when (i_fu_158 = ap_const_lv8_A3) else "0";
    icmp_ln359_fu_1419_p2 <= "1" when (j_reg_615 = ap_const_lv7_40) else "0";
    icmp_ln363_fu_1437_p2 <= "1" when (unsigned(j_reg_615) < unsigned(ap_const_lv7_3)) else "0";
    icmp_ln364_1_fu_1453_p2 <= "1" when (trunc_ln364_fu_1443_p1 = ap_const_lv2_1) else "0";
    icmp_ln364_fu_1447_p2 <= "1" when (trunc_ln364_fu_1443_p1 = ap_const_lv2_0) else "0";
    icmp_ln36_1_fu_1728_p2 <= "1" when (i_17_reg_742 = ap_const_lv7_40) else "0";
    icmp_ln36_2_fu_1851_p2 <= "1" when (i_31_reg_992 = ap_const_lv2_3) else "0";
    icmp_ln36_fu_1608_p2 <= "1" when (i_14_reg_684 = ap_const_lv7_40) else "0";
    icmp_ln48_1_fu_1705_p2 <= "1" when (i_16_reg_731 = ap_const_lv7_40) else "0";
    icmp_ln48_2_fu_1816_p2 <= "1" when (i_30_reg_902 = ap_const_lv2_3) else "0";
    icmp_ln48_fu_1585_p2 <= "1" when (i_12_reg_673 = ap_const_lv7_40) else "0";
    icmp_ln60_fu_1519_p2 <= "1" when (j_6_reg_626 = ap_const_lv7_40) else "0";
    icmp_ln64_fu_1536_p2 <= "1" when (i_13_reg_649 = ap_const_lv4_D) else "0";
    icmp_ln78_fu_1640_p2 <= "1" when (i_15_reg_695 = ap_const_lv7_40) else "0";
    icmp_ln82_fu_1669_p2 <= "1" when (j_7_reg_706 = ap_const_lv7_40) else "0";
    icmp_ln96_fu_1760_p2 <= "1" when (j_8_reg_786 = ap_const_lv2_3) else "0";
    or_ln364_fu_1459_p2 <= (icmp_ln364_fu_1447_p2 or icmp_ln364_1_fu_1453_p2);

    oracle_activations1_address0_assign_proc : process(oracle_activations1_addr_reg_3157, ap_CS_fsm_state238, grp_update_weights_1_fu_1234_d_biases1_address0, ap_CS_fsm_state235, ap_CS_fsm_state243, zext_ln194_fu_2472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state238)) then 
            oracle_activations1_address0 <= zext_ln194_fu_2472_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state235)) then 
            oracle_activations1_address0 <= oracle_activations1_addr_reg_3157;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            oracle_activations1_address0 <= grp_update_weights_1_fu_1234_d_biases1_address0;
        else 
            oracle_activations1_address0 <= "XXXXXX";
        end if; 
    end process;


    oracle_activations1_ce0_assign_proc : process(ap_CS_fsm_state238, grp_update_weights_1_fu_1234_d_biases1_ce0, ap_CS_fsm_state235, ap_CS_fsm_state243)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state238) or (ap_const_logic_1 = ap_CS_fsm_state235))) then 
            oracle_activations1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            oracle_activations1_ce0 <= grp_update_weights_1_fu_1234_d_biases1_ce0;
        else 
            oracle_activations1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oracle_activations1_we0_assign_proc : process(ap_CS_fsm_state235)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state235)) then 
            oracle_activations1_we0 <= ap_const_logic_1;
        else 
            oracle_activations1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    oracle_activations2_address0_assign_proc : process(ap_CS_fsm_state223, oracle_activations2_addr_reg_3055, ap_CS_fsm_state215, grp_update_weights_1_fu_1234_d_biases2_address0, ap_CS_fsm_state212, ap_CS_fsm_state243, zext_ln161_fu_2316_p1, zext_ln178_fu_2389_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state223)) then 
            oracle_activations2_address0 <= zext_ln178_fu_2389_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state215)) then 
            oracle_activations2_address0 <= zext_ln161_fu_2316_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state212)) then 
            oracle_activations2_address0 <= oracle_activations2_addr_reg_3055;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            oracle_activations2_address0 <= grp_update_weights_1_fu_1234_d_biases2_address0;
        else 
            oracle_activations2_address0 <= "XXXXXX";
        end if; 
    end process;


    oracle_activations2_ce0_assign_proc : process(ap_CS_fsm_state223, ap_CS_fsm_state215, grp_update_weights_1_fu_1234_d_biases2_ce0, ap_CS_fsm_state212, ap_CS_fsm_state243)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state215) or (ap_const_logic_1 = ap_CS_fsm_state223) or (ap_const_logic_1 = ap_CS_fsm_state212))) then 
            oracle_activations2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            oracle_activations2_ce0 <= grp_update_weights_1_fu_1234_d_biases2_ce0;
        else 
            oracle_activations2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    oracle_activations2_we0_assign_proc : process(ap_CS_fsm_state212)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state212)) then 
            oracle_activations2_we0 <= ap_const_logic_1;
        else 
            oracle_activations2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_fu_2141_p3 <= (empty_51_fu_2137_p1 & ap_const_lv2_0);
    p_shl2_fu_2218_p3 <= (empty_53_fu_2214_p1 & ap_const_lv2_0);
    select_ln363_1_fu_1497_p3 <= 
        select_ln364_1_fu_1473_p3 when (icmp_ln363_fu_1437_p2(0) = '1') else 
        activations3_1_1_reg_595;
    select_ln363_2_fu_1505_p3 <= 
        select_ln364_2_fu_1481_p3 when (icmp_ln363_fu_1437_p2(0) = '1') else 
        activations3_0_1_reg_605;
    select_ln363_fu_1489_p3 <= 
        select_ln364_fu_1465_p3 when (icmp_ln363_fu_1437_p2(0) = '1') else 
        activations3_2_1_reg_585;
    select_ln364_1_fu_1473_p3 <= 
        ap_const_lv64_0 when (icmp_ln364_1_fu_1453_p2(0) = '1') else 
        activations3_1_1_reg_595;
    select_ln364_2_fu_1481_p3 <= 
        ap_const_lv64_0 when (icmp_ln364_fu_1447_p2(0) = '1') else 
        activations3_0_1_reg_605;
    select_ln364_fu_1465_p3 <= 
        activations3_2_1_reg_585 when (or_ln364_fu_1459_p2(0) = '1') else 
        ap_const_lv64_0;
    shl_ln_fu_1969_p3 <= (trunc_ln374_fu_1966_p1 & ap_const_lv2_0);
    sub_ln374_fu_1977_p2 <= std_logic_vector(unsigned(shl_ln_fu_1969_p3) - unsigned(zext_ln356_reg_2604));
    tmp_12_fu_1661_p3 <= (empty_fu_1657_p1 & ap_const_lv6_0);
    tmp_13_fu_1772_p3 <= (j_8_reg_786 & ap_const_lv6_0);
    tmp_14_fu_2297_p3 <= (empty_55_reg_3116 & ap_const_lv6_0);
    tmp_15_fu_2355_p3 <= (empty_56_fu_2351_p1 & ap_const_lv6_0);
    tmp_16_fu_2452_p3 <= (i_28_reg_1211 & ap_const_lv6_0);

    training_data_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state236, zext_ln66_1_fu_1567_p1, arrayidx10_sum197_cast_fu_2420_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state236)) then 
            training_data_address0 <= arrayidx10_sum197_cast_fu_2420_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_data_address0 <= zext_ln66_1_fu_1567_p1(12 - 1 downto 0);
        else 
            training_data_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    training_data_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state236)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state236) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            training_data_ce0 <= ap_const_logic_1;
        else 
            training_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_targets_address0 <= zext_ln116_fu_2032_p1(9 - 1 downto 0);

    training_targets_ce0_assign_proc : process(ap_CS_fsm_state184)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state184)) then 
            training_targets_ce0 <= ap_const_logic_1;
        else 
            training_targets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln364_fu_1443_p1 <= j_reg_615(2 - 1 downto 0);
    trunc_ln374_fu_1966_p1 <= i_fu_158(7 - 1 downto 0);

    weights1_address0_assign_proc : process(ap_CS_fsm_state6, grp_update_weights_1_fu_1234_weights1_address0, ap_CS_fsm_state243, zext_ln66_fu_1572_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights1_address0 <= zext_ln66_fu_1572_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights1_address0 <= grp_update_weights_1_fu_1234_weights1_address0;
        else 
            weights1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    weights1_ce0_assign_proc : process(ap_CS_fsm_state6, grp_update_weights_1_fu_1234_weights1_ce0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights1_ce0 <= grp_update_weights_1_fu_1234_weights1_ce0;
        else 
            weights1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights1_d0 <= grp_update_weights_1_fu_1234_weights1_d0;

    weights1_we0_assign_proc : process(grp_update_weights_1_fu_1234_weights1_we0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights1_we0 <= grp_update_weights_1_fu_1234_weights1_we0;
        else 
            weights1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights2_address0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state222, grp_update_weights_1_fu_1234_weights2_address0, ap_CS_fsm_state243, zext_ln84_fu_1690_p1, zext_ln180_fu_2384_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state222)) then 
            weights2_address0 <= zext_ln180_fu_2384_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            weights2_address0 <= zext_ln84_fu_1690_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights2_address0 <= grp_update_weights_1_fu_1234_weights2_address0;
        else 
            weights2_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights2_ce0_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state222, grp_update_weights_1_fu_1234_weights2_ce0, ap_CS_fsm_state243)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state222) or (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            weights2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights2_ce0 <= grp_update_weights_1_fu_1234_weights2_ce0;
        else 
            weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights2_d0 <= grp_update_weights_1_fu_1234_weights2_d0;

    weights2_we0_assign_proc : process(grp_update_weights_1_fu_1234_weights2_we0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights2_we0 <= grp_update_weights_1_fu_1234_weights2_we0;
        else 
            weights2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    weights3_address0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state200, grp_update_weights_1_fu_1234_weights3_address0, ap_CS_fsm_state243, zext_ln102_2_fu_1806_p1, zext_ln147_fu_2253_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
            weights3_address0 <= zext_ln147_fu_2253_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            weights3_address0 <= zext_ln102_2_fu_1806_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights3_address0 <= grp_update_weights_1_fu_1234_weights3_address0;
        else 
            weights3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    weights3_ce0_assign_proc : process(ap_CS_fsm_state99, ap_CS_fsm_state200, grp_update_weights_1_fu_1234_weights3_ce0, ap_CS_fsm_state243)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state99))) then 
            weights3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights3_ce0 <= grp_update_weights_1_fu_1234_weights3_ce0;
        else 
            weights3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights3_d0 <= grp_update_weights_1_fu_1234_weights3_d0;

    weights3_we0_assign_proc : process(grp_update_weights_1_fu_1234_weights3_we0, ap_CS_fsm_state243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state243)) then 
            weights3_we0 <= grp_update_weights_1_fu_1234_weights3_we0;
        else 
            weights3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln116_fu_2077_p2 <= (bitcast_ln116_1_fu_2073_p1 xor ap_const_lv64_8000000000000000);
    xor_ln24_fu_1931_p2 <= (bitcast_ln24_fu_1928_p1 xor ap_const_lv64_8000000000000000);
    xor_ln29_fu_1985_p2 <= (bitcast_ln29_fu_1982_p1 xor ap_const_lv64_8000000000000000);
    xor_ln39_1_fu_1749_p2 <= (bitcast_ln39_2_fu_1745_p1 xor ap_const_lv64_8000000000000000);
    xor_ln39_2_fu_1878_p2 <= (bitcast_ln39_4_fu_1875_p1 xor ap_const_lv64_8000000000000000);
    xor_ln39_fu_1629_p2 <= (bitcast_ln39_fu_1625_p1 xor ap_const_lv64_8000000000000000);
    zext_ln102_1_fu_1797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_19_reg_798),8));
    zext_ln102_2_fu_1806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln102_fu_1801_p2),64));
    zext_ln102_fu_1792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_19_reg_798),64));
    zext_ln114_fu_2023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_34_reg_1084),9));
    zext_ln116_fu_2032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_2027_p2),64));
    zext_ln125_1_fu_2133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_24_reg_1096),8));
    zext_ln125_fu_2128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_24_reg_1096),64));
    zext_ln128_fu_2167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_9_reg_1108),8));
    zext_ln130_fu_2189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_reg_3037),64));
    zext_ln141_1_fu_2210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_25_reg_1119),8));
    zext_ln141_fu_2205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_25_reg_1119),64));
    zext_ln145_fu_2244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_10_reg_1130),8));
    zext_ln147_fu_2253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln147_fu_2248_p2),64));
    zext_ln158_fu_2288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_26_reg_1154),64));
    zext_ln161_1_fu_2321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_11_reg_1165),12));
    zext_ln161_fu_2316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_11_reg_1165),64));
    zext_ln163_fu_2330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_reg_3139),64));
    zext_ln174_fu_2346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_27_reg_1176),64));
    zext_ln178_1_fu_2375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_12_reg_1187),12));
    zext_ln178_fu_2389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_12_reg_1187),64));
    zext_ln180_fu_2384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_2379_p2),64));
    zext_ln191_fu_2411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_28_reg_1211),12));
    zext_ln194_1_fu_2477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_13_reg_1223),10));
    zext_ln194_fu_2472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_13_reg_1223),64));
    zext_ln196_fu_2486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_reg_3256),64));
    zext_ln356_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_158),9));
    zext_ln359_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_615),64));
    zext_ln36_1_fu_1740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_17_reg_742),64));
    zext_ln36_fu_1620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_14_reg_684),64));
    zext_ln48_1_fu_1717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_16_reg_731),64));
    zext_ln48_2_fu_1828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_30_reg_902),64));
    zext_ln48_fu_1597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_12_reg_673),64));
    zext_ln60_fu_1531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_6_reg_626),64));
    zext_ln64_1_fu_1552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_13_reg_649),10));
    zext_ln64_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_13_reg_649),12));
    zext_ln66_1_fu_1567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_1_fu_1562_p2),64));
    zext_ln66_fu_1572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_reg_2658),64));
    zext_ln78_fu_1652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_15_reg_695),64));
    zext_ln82_1_fu_1681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_7_reg_706),12));
    zext_ln82_fu_1695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_7_reg_706),64));
    zext_ln84_fu_1690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_1685_p2),64));
end behav;
