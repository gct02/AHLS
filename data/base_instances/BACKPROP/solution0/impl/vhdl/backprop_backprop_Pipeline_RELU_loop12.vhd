-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_backprop_Pipeline_RELU_loop12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    activations3_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    activations3_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    activations3_0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_2_03 : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_1_02 : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_0_01 : IN STD_LOGIC_VECTOR (63 downto 0);
    activations3_2_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    activations3_2_4_out_ap_vld : OUT STD_LOGIC;
    activations3_1_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    activations3_1_4_out_ap_vld : OUT STD_LOGIC;
    activations3_0_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    activations3_0_4_out_ap_vld : OUT STD_LOGIC;
    dactivations3_2_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_2_1_out_ap_vld : OUT STD_LOGIC;
    dactivations3_1_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_1_1_out_ap_vld : OUT STD_LOGIC;
    dactivations3_0_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_0_1_out_ap_vld : OUT STD_LOGIC;
    grp_fu_986_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_986_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_ce : OUT STD_LOGIC;
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC;
    grp_fu_998_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_998_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_998_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_998_p_ce : OUT STD_LOGIC;
    grp_fu_1002_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1002_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1002_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1002_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_backprop_Pipeline_RELU_loop12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln36_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage28 : signal is "none";
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal i_reg_385 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln36_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln36_reg_392 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_251_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_397 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_fu_268_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln39_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln39_1_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal dactivations3_1_reg_413 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_2_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal i_17_fu_60 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal dactivations3_0_1_fu_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dactivations3_1_1_fu_68 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dactivations3_2_1_fu_72 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations3_0_4_fu_76 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations3_1_4_fu_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal activations3_2_4_fu_84 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal bitcast_ln39_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_166_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage12_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_510 : BOOLEAN;
    signal ap_condition_515 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_ddiv_64ns_64ns_64_14_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dexp_64ns_64ns_64_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_mux_3_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_64_1_1_U64 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => activations3_0_4_fu_76,
        din1 => activations3_1_4_fu_80,
        din2 => activations3_2_4_fu_84,
        din3 => i_17_fu_60,
        dout => tmp_5_fu_251_p5);

    flow_control_loop_pipe_sequential_init_U : component backprop_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage28_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    activations3_0_4_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    activations3_0_4_fu_76 <= activations3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_reg_385 = ap_const_lv2_0))) then 
                    activations3_0_4_fu_76 <= grp_fu_998_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    activations3_1_4_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    activations3_1_4_fu_80 <= activations3_1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_reg_385 = ap_const_lv2_1))) then 
                    activations3_1_4_fu_80 <= grp_fu_998_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    activations3_2_4_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    activations3_2_4_fu_84 <= activations3_2;
                elsif ((ap_const_boolean_1 = ap_condition_510)) then 
                    activations3_2_4_fu_84 <= grp_fu_998_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    dactivations3_0_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    dactivations3_0_1_fu_64 <= dactivations3_0_01;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_reg_385 = ap_const_lv2_0))) then 
                    dactivations3_0_1_fu_64 <= dactivations3_1_reg_413;
                end if;
            end if; 
        end if;
    end process;

    dactivations3_1_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    dactivations3_1_1_fu_68 <= dactivations3_1_02;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (i_reg_385 = ap_const_lv2_1))) then 
                    dactivations3_1_1_fu_68 <= dactivations3_1_reg_413;
                end if;
            end if; 
        end if;
    end process;

    dactivations3_2_1_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    dactivations3_2_1_fu_72 <= dactivations3_2_03;
                elsif ((ap_const_boolean_1 = ap_condition_510)) then 
                    dactivations3_2_1_fu_72 <= dactivations3_1_reg_413;
                end if;
            end if; 
        end if;
    end process;

    i_17_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_17_fu_60 <= ap_const_lv2_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_17_fu_60 <= add_ln36_reg_392;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln36_reg_392 <= add_ln36_fu_236_p2;
                i_reg_385 <= i_17_fu_60;
                tmp_5_reg_397 <= tmp_5_fu_251_p5;
                xor_ln39_reg_403 <= xor_ln39_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                dactivations3_1_reg_413 <= grp_fu_990_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_186 <= grp_fu_986_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                tmp_2_reg_420 <= grp_fu_1002_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage28_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    activations3_0_4_out <= activations3_0_4_fu_76;

    activations3_0_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            activations3_0_4_out_ap_vld <= ap_const_logic_1;
        else 
            activations3_0_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    activations3_1_4_out <= activations3_1_4_fu_80;

    activations3_1_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            activations3_1_4_out_ap_vld <= ap_const_logic_1;
        else 
            activations3_1_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    activations3_2_4_out <= activations3_2_4_fu_84;

    activations3_2_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            activations3_2_4_out_ap_vld <= ap_const_logic_1;
        else 
            activations3_2_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln36_fu_236_p2 <= std_logic_vector(unsigned(i_17_fu_60) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage28 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_510_assign_proc : process(ap_enable_reg_pp0_iter1, i_reg_385)
    begin
                ap_condition_510 <= (not((i_reg_385 = ap_const_lv2_1)) and not((i_reg_385 = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_515_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_00001)
    begin
                ap_condition_515 <= ((icmp_ln36_fu_230_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln36_fu_230_p2)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage28_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln39_1_fu_274_p1 <= xor_ln39_reg_403;
    bitcast_ln39_fu_264_p1 <= tmp_5_fu_251_p5;
    dactivations3_0_1_out <= dactivations3_0_1_fu_64;

    dactivations3_0_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dactivations3_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            dactivations3_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dactivations3_1_1_out <= dactivations3_1_1_fu_68;

    dactivations3_1_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dactivations3_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            dactivations3_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dactivations3_2_1_out <= dactivations3_2_1_fu_72;

    dactivations3_2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln36_fu_230_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln36_fu_230_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dactivations3_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            dactivations3_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1002_p_ce <= ap_const_logic_1;
    grp_fu_1002_p_din0 <= ap_const_lv64_0;
    grp_fu_1002_p_din1 <= bitcast_ln39_1_fu_274_p1;

    grp_fu_166_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_00001, ap_condition_515)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_515)) then 
                grp_fu_166_opcode <= ap_const_lv2_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage12_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                grp_fu_166_opcode <= ap_const_lv2_0;
            else 
                grp_fu_166_opcode <= "XX";
            end if;
        else 
            grp_fu_166_opcode <= "XX";
        end if; 
    end process;


    grp_fu_166_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_2_reg_420, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                grp_fu_166_p0 <= tmp_2_reg_420;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_166_p0 <= ap_const_lv64_3FF0000000000000;
            else 
                grp_fu_166_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_166_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, tmp_5_fu_251_p5, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                grp_fu_166_p1 <= ap_const_lv64_3FF0000000000000;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_166_p1 <= tmp_5_fu_251_p5;
            else 
                grp_fu_166_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_166_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_986_p_ce <= ap_const_logic_1;
    grp_fu_986_p_din0 <= grp_fu_166_p0;
    grp_fu_986_p_din1 <= grp_fu_166_p1;
    grp_fu_986_p_opcode <= grp_fu_166_opcode;
    grp_fu_990_p_ce <= ap_const_logic_1;
    grp_fu_990_p_din0 <= tmp_5_reg_397;
    grp_fu_990_p_din1 <= reg_186;
    grp_fu_998_p_ce <= ap_const_logic_1;
    grp_fu_998_p_din0 <= ap_const_lv64_3FF0000000000000;
    grp_fu_998_p_din1 <= reg_186;
    icmp_ln36_fu_230_p2 <= "1" when (i_17_fu_60 = ap_const_lv2_3) else "0";
    xor_ln39_fu_268_p2 <= (bitcast_ln39_fu_264_p1 xor ap_const_lv64_8000000000000000);
end behav;
