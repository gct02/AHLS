// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="backprop_backprop,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.014057,HLS_SYN_LAT=50997648,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=7662,HLS_SYN_LUT=10426,HLS_VERSION=2023_2}" *)

module backprop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights1_address0,
        weights1_ce0,
        weights1_we0,
        weights1_d0,
        weights1_q0,
        weights2_address0,
        weights2_ce0,
        weights2_we0,
        weights2_d0,
        weights2_q0,
        weights3_address0,
        weights3_ce0,
        weights3_we0,
        weights3_d0,
        weights3_q0,
        biases1_address0,
        biases1_ce0,
        biases1_we0,
        biases1_d0,
        biases1_q0,
        biases2_address0,
        biases2_ce0,
        biases2_we0,
        biases2_d0,
        biases2_q0,
        biases3_address0,
        biases3_ce0,
        biases3_we0,
        biases3_d0,
        biases3_q0,
        training_data_address0,
        training_data_ce0,
        training_data_q0,
        training_targets_address0,
        training_targets_ce0,
        training_targets_q0
);

parameter    ap_ST_fsm_state1 = 243'd1;
parameter    ap_ST_fsm_state2 = 243'd2;
parameter    ap_ST_fsm_state3 = 243'd4;
parameter    ap_ST_fsm_state4 = 243'd8;
parameter    ap_ST_fsm_state5 = 243'd16;
parameter    ap_ST_fsm_state6 = 243'd32;
parameter    ap_ST_fsm_state7 = 243'd64;
parameter    ap_ST_fsm_state8 = 243'd128;
parameter    ap_ST_fsm_state9 = 243'd256;
parameter    ap_ST_fsm_state10 = 243'd512;
parameter    ap_ST_fsm_state11 = 243'd1024;
parameter    ap_ST_fsm_state12 = 243'd2048;
parameter    ap_ST_fsm_state13 = 243'd4096;
parameter    ap_ST_fsm_state14 = 243'd8192;
parameter    ap_ST_fsm_state15 = 243'd16384;
parameter    ap_ST_fsm_state16 = 243'd32768;
parameter    ap_ST_fsm_state17 = 243'd65536;
parameter    ap_ST_fsm_state18 = 243'd131072;
parameter    ap_ST_fsm_state19 = 243'd262144;
parameter    ap_ST_fsm_state20 = 243'd524288;
parameter    ap_ST_fsm_state21 = 243'd1048576;
parameter    ap_ST_fsm_state22 = 243'd2097152;
parameter    ap_ST_fsm_state23 = 243'd4194304;
parameter    ap_ST_fsm_state24 = 243'd8388608;
parameter    ap_ST_fsm_state25 = 243'd16777216;
parameter    ap_ST_fsm_state26 = 243'd33554432;
parameter    ap_ST_fsm_state27 = 243'd67108864;
parameter    ap_ST_fsm_state28 = 243'd134217728;
parameter    ap_ST_fsm_state29 = 243'd268435456;
parameter    ap_ST_fsm_state30 = 243'd536870912;
parameter    ap_ST_fsm_state31 = 243'd1073741824;
parameter    ap_ST_fsm_state32 = 243'd2147483648;
parameter    ap_ST_fsm_state33 = 243'd4294967296;
parameter    ap_ST_fsm_state34 = 243'd8589934592;
parameter    ap_ST_fsm_state35 = 243'd17179869184;
parameter    ap_ST_fsm_state36 = 243'd34359738368;
parameter    ap_ST_fsm_state37 = 243'd68719476736;
parameter    ap_ST_fsm_state38 = 243'd137438953472;
parameter    ap_ST_fsm_state39 = 243'd274877906944;
parameter    ap_ST_fsm_state40 = 243'd549755813888;
parameter    ap_ST_fsm_state41 = 243'd1099511627776;
parameter    ap_ST_fsm_state42 = 243'd2199023255552;
parameter    ap_ST_fsm_state43 = 243'd4398046511104;
parameter    ap_ST_fsm_state44 = 243'd8796093022208;
parameter    ap_ST_fsm_state45 = 243'd17592186044416;
parameter    ap_ST_fsm_state46 = 243'd35184372088832;
parameter    ap_ST_fsm_state47 = 243'd70368744177664;
parameter    ap_ST_fsm_state48 = 243'd140737488355328;
parameter    ap_ST_fsm_state49 = 243'd281474976710656;
parameter    ap_ST_fsm_state50 = 243'd562949953421312;
parameter    ap_ST_fsm_state51 = 243'd1125899906842624;
parameter    ap_ST_fsm_state52 = 243'd2251799813685248;
parameter    ap_ST_fsm_state53 = 243'd4503599627370496;
parameter    ap_ST_fsm_state54 = 243'd9007199254740992;
parameter    ap_ST_fsm_state55 = 243'd18014398509481984;
parameter    ap_ST_fsm_state56 = 243'd36028797018963968;
parameter    ap_ST_fsm_state57 = 243'd72057594037927936;
parameter    ap_ST_fsm_state58 = 243'd144115188075855872;
parameter    ap_ST_fsm_state59 = 243'd288230376151711744;
parameter    ap_ST_fsm_state60 = 243'd576460752303423488;
parameter    ap_ST_fsm_state61 = 243'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 243'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 243'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 243'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 243'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 243'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 243'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 243'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 243'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 243'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 243'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 243'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 243'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 243'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 243'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 243'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 243'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 243'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 243'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 243'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 243'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 243'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 243'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 243'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 243'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 243'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 243'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 243'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 243'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 243'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 243'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 243'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 243'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 243'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 243'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 243'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 243'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 243'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 243'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 243'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 243'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 243'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 243'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 243'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 243'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 243'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 243'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 243'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 243'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 243'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 243'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 243'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 243'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 243'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 243'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 243'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 243'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 243'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 243'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 243'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 243'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 243'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 243'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 243'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 243'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 243'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 243'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 243'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 243'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 243'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 243'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 243'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 243'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 243'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 243'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 243'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 243'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 243'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 243'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 243'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 243'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 243'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 243'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 243'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 243'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 243'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 243'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 243'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 243'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 243'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 243'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 243'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 243'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 243'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 243'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 243'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 243'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 243'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 243'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 243'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 243'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 243'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 243'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 243'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 243'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 243'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 243'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 243'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 243'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 243'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 243'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 243'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 243'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 243'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 243'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 243'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 243'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 243'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 243'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 243'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 243'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 243'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 243'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 243'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 243'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 243'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 243'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 243'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 243'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 243'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 243'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 243'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 243'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 243'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 243'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 243'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 243'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 243'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 243'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 243'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 243'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 243'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 243'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 243'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 243'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 243'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 243'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 243'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 243'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 243'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 243'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 243'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 243'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 243'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 243'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 243'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 243'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 243'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 243'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 243'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 243'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 243'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 243'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 243'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 243'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 243'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 243'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 243'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 243'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 243'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 243'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 243'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 243'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 243'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 243'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 243'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 243'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 243'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 243'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 243'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 243'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 243'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 243'd7067388259113537318333190002971674063309935587502475832486424805170479104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] weights1_address0;
output   weights1_ce0;
output   weights1_we0;
output  [63:0] weights1_d0;
input  [63:0] weights1_q0;
output  [11:0] weights2_address0;
output   weights2_ce0;
output   weights2_we0;
output  [63:0] weights2_d0;
input  [63:0] weights2_q0;
output  [7:0] weights3_address0;
output   weights3_ce0;
output   weights3_we0;
output  [63:0] weights3_d0;
input  [63:0] weights3_q0;
output  [5:0] biases1_address0;
output   biases1_ce0;
output   biases1_we0;
output  [63:0] biases1_d0;
input  [63:0] biases1_q0;
output  [5:0] biases2_address0;
output   biases2_ce0;
output   biases2_we0;
output  [63:0] biases2_d0;
input  [63:0] biases2_q0;
output  [1:0] biases3_address0;
output   biases3_ce0;
output   biases3_we0;
output  [63:0] biases3_d0;
input  [63:0] biases3_q0;
output  [11:0] training_data_address0;
output   training_data_ce0;
input  [63:0] training_data_q0;
output  [8:0] training_targets_address0;
output   training_targets_ce0;
input  [63:0] training_targets_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] weights1_address0;
reg weights1_ce0;
reg weights1_we0;
reg[11:0] weights2_address0;
reg weights2_ce0;
reg weights2_we0;
reg[7:0] weights3_address0;
reg weights3_ce0;
reg weights3_we0;
reg[5:0] biases1_address0;
reg biases1_ce0;
reg biases1_we0;
reg[5:0] biases2_address0;
reg biases2_ce0;
reg biases2_we0;
reg[1:0] biases3_address0;
reg biases3_ce0;
reg biases3_we0;
reg[11:0] training_data_address0;
reg training_data_ce0;
reg training_targets_ce0;

(* fsm_encoding = "none" *) reg   [242:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_1276_p2;
reg   [63:0] reg_1321;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state204;
wire    ap_CS_fsm_state219;
wire    ap_CS_fsm_state227;
wire   [63:0] activations1_q0;
reg   [63:0] reg_1327;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state214;
wire   [63:0] grp_fu_1258_p2;
reg   [63:0] reg_1335;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state188;
wire   [63:0] grp_fu_1304_p2;
reg   [63:0] reg_1341;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state154;
wire    ap_CS_fsm_state169;
wire   [63:0] grp_fu_1295_p2;
reg   [63:0] reg_1348;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state96;
reg   [63:0] reg_1354;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state223;
wire   [63:0] activations2_q0;
reg   [63:0] reg_1358;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state194;
wire   [63:0] oracle_activations2_q0;
wire    ap_CS_fsm_state216;
wire    ap_CS_fsm_state224;
wire   [11:0] add_ln356_1_fu_1397_p2;
reg   [11:0] add_ln356_1_reg_2591;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln356_fu_1409_p2;
reg   [7:0] add_ln356_reg_2599;
wire   [8:0] zext_ln356_fu_1415_p1;
reg   [8:0] zext_ln356_reg_2604;
wire   [6:0] add_ln359_fu_1425_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] select_ln363_fu_1489_p3;
wire   [63:0] select_ln363_1_fu_1497_p3;
wire   [63:0] select_ln363_2_fu_1505_p3;
wire   [9:0] add_ln60_1_fu_1513_p2;
reg   [9:0] add_ln60_1_reg_2632;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln60_fu_1525_p2;
reg   [6:0] add_ln60_reg_2640;
reg   [5:0] activations1_addr_1_reg_2645;
wire   [3:0] add_ln64_fu_1542_p2;
reg   [3:0] add_ln64_reg_2653;
wire    ap_CS_fsm_state5;
wire   [9:0] add_ln66_fu_1556_p2;
reg   [9:0] add_ln66_reg_2658;
wire    ap_CS_fsm_state6;
reg   [63:0] training_data_load_reg_2673;
wire   [63:0] bitcast_ln66_fu_1576_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] bitcast_ln66_1_fu_1581_p1;
wire    ap_CS_fsm_state14;
wire   [6:0] add_ln48_fu_1591_p2;
reg   [6:0] add_ln48_reg_2696;
wire    ap_CS_fsm_state15;
reg   [5:0] activations1_addr_2_reg_2701;
wire   [63:0] bitcast_ln50_fu_1603_p1;
wire   [6:0] add_ln36_fu_1614_p2;
reg   [6:0] add_ln36_reg_2719;
wire    ap_CS_fsm_state20;
wire   [63:0] zext_ln36_fu_1620_p1;
reg   [63:0] zext_ln36_reg_2724;
reg   [5:0] activations1_addr_3_reg_2729;
wire   [63:0] bitcast_ln39_1_fu_1635_p1;
wire    ap_CS_fsm_state22;
wire   [6:0] add_ln78_fu_1646_p2;
reg   [6:0] add_ln78_reg_2742;
wire    ap_CS_fsm_state51;
reg   [5:0] activations2_addr_1_reg_2747;
wire   [11:0] tmp_12_fu_1661_p3;
reg   [11:0] tmp_12_reg_2752;
wire   [6:0] add_ln82_fu_1675_p2;
reg   [6:0] add_ln82_reg_2760;
wire    ap_CS_fsm_state52;
wire   [63:0] bitcast_ln84_fu_1700_p1;
wire    ap_CS_fsm_state61;
wire   [6:0] add_ln48_1_fu_1711_p2;
reg   [6:0] add_ln48_1_reg_2788;
wire    ap_CS_fsm_state62;
reg   [5:0] activations2_addr_2_reg_2793;
wire   [63:0] bitcast_ln50_1_fu_1723_p1;
wire   [6:0] add_ln36_1_fu_1734_p2;
reg   [6:0] add_ln36_1_reg_2811;
wire    ap_CS_fsm_state67;
wire   [63:0] zext_ln36_1_fu_1740_p1;
reg   [63:0] zext_ln36_1_reg_2816;
reg   [5:0] activations2_addr_3_reg_2821;
wire   [63:0] bitcast_ln39_3_fu_1755_p1;
wire    ap_CS_fsm_state69;
wire   [1:0] add_ln96_fu_1766_p2;
reg   [1:0] add_ln96_reg_2834;
wire    ap_CS_fsm_state98;
wire   [7:0] tmp_13_fu_1772_p3;
reg   [7:0] tmp_13_reg_2839;
wire   [6:0] add_ln100_fu_1786_p2;
reg   [6:0] add_ln100_reg_2847;
wire    ap_CS_fsm_state99;
wire   [63:0] bitcast_ln102_fu_1811_p1;
wire    ap_CS_fsm_state107;
wire   [1:0] add_ln48_2_fu_1822_p2;
reg   [1:0] add_ln48_2_reg_2875;
wire    ap_CS_fsm_state109;
wire   [63:0] tmp_5_fu_1833_p5;
wire    ap_CS_fsm_state110;
wire   [63:0] bitcast_ln50_2_fu_1846_p1;
wire    ap_CS_fsm_state113;
wire   [1:0] add_ln36_2_fu_1857_p2;
reg   [1:0] add_ln36_2_reg_2905;
wire    ap_CS_fsm_state115;
wire   [63:0] tmp_6_fu_1863_p5;
reg   [63:0] tmp_6_reg_2910;
wire   [63:0] bitcast_ln39_5_fu_1884_p1;
wire    ap_CS_fsm_state116;
reg   [63:0] sub_i2_reg_2922;
wire    ap_CS_fsm_state139;
wire   [1:0] add_ln22_fu_1910_p2;
reg   [1:0] add_ln22_reg_2930;
wire    ap_CS_fsm_state144;
wire   [63:0] tmp_7_fu_1916_p5;
reg   [63:0] tmp_7_reg_2935;
wire   [63:0] bitcast_ln24_1_fu_1937_p1;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state158;
wire   [1:0] add_ln27_fu_1948_p2;
reg   [1:0] add_ln27_reg_2953;
wire    ap_CS_fsm_state159;
wire   [63:0] tmp_8_fu_1954_p5;
reg   [63:0] tmp_8_reg_2958;
wire   [8:0] sub_ln374_fu_1977_p2;
reg   [8:0] sub_ln374_reg_2963;
wire   [63:0] bitcast_ln29_1_fu_1991_p1;
wire    ap_CS_fsm_state160;
wire   [1:0] add_ln114_fu_2017_p2;
reg   [1:0] add_ln114_reg_2976;
wire    ap_CS_fsm_state184;
wire   [63:0] tmp_9_fu_2046_p5;
wire    ap_CS_fsm_state185;
wire   [63:0] bitcast_ln116_fu_2059_p1;
wire   [63:0] bitcast_ln116_2_fu_2083_p1;
wire    ap_CS_fsm_state189;
wire   [63:0] tmp_s_fu_2088_p5;
wire   [6:0] add_ln125_fu_2122_p2;
reg   [6:0] add_ln125_reg_3009;
wire    ap_CS_fsm_state193;
wire   [7:0] empty_52_fu_2149_p2;
reg   [7:0] empty_52_reg_3019;
wire   [1:0] add_ln128_fu_2161_p2;
reg   [1:0] add_ln128_reg_3027;
wire    ap_CS_fsm_state195;
wire   [63:0] tmp_10_fu_2171_p5;
wire   [7:0] add_ln130_fu_2184_p2;
reg   [7:0] add_ln130_reg_3037;
wire   [6:0] add_ln141_fu_2199_p2;
reg   [6:0] add_ln141_reg_3045;
wire    ap_CS_fsm_state199;
wire   [63:0] zext_ln141_fu_2205_p1;
reg   [63:0] zext_ln141_reg_3050;
reg   [5:0] oracle_activations2_addr_reg_3055;
wire   [7:0] empty_54_fu_2226_p2;
reg   [7:0] empty_54_reg_3060;
wire   [1:0] add_ln145_fu_2238_p2;
reg   [1:0] add_ln145_reg_3068;
wire    ap_CS_fsm_state200;
wire   [63:0] tmp_11_fu_2258_p5;
wire    ap_CS_fsm_state201;
wire   [63:0] bitcast_ln147_fu_2271_p1;
wire    ap_CS_fsm_state208;
wire   [63:0] dactivations2_q0;
wire    ap_CS_fsm_state209;
wire   [6:0] add_ln158_fu_2282_p2;
reg   [6:0] add_ln158_reg_3106;
wire    ap_CS_fsm_state213;
wire   [5:0] empty_55_fu_2293_p1;
reg   [5:0] empty_55_reg_3116;
wire   [11:0] tmp_14_fu_2297_p3;
reg   [11:0] tmp_14_reg_3121;
wire   [6:0] add_ln161_fu_2310_p2;
reg   [6:0] add_ln161_reg_3129;
wire    ap_CS_fsm_state215;
wire   [11:0] add_ln163_fu_2325_p2;
reg   [11:0] add_ln163_reg_3139;
wire   [6:0] add_ln174_fu_2340_p2;
reg   [6:0] add_ln174_reg_3147;
wire    ap_CS_fsm_state221;
wire   [63:0] zext_ln174_fu_2346_p1;
reg   [63:0] zext_ln174_reg_3152;
reg   [5:0] oracle_activations1_addr_reg_3157;
wire   [11:0] tmp_15_fu_2355_p3;
reg   [11:0] tmp_15_reg_3162;
wire   [6:0] add_ln178_fu_2369_p2;
reg   [6:0] add_ln178_reg_3170;
wire    ap_CS_fsm_state222;
wire   [63:0] bitcast_ln180_fu_2394_p1;
wire    ap_CS_fsm_state231;
wire   [63:0] dactivations1_q0;
wire    ap_CS_fsm_state232;
wire   [3:0] add_ln191_fu_2405_p2;
reg   [3:0] add_ln191_reg_3208;
wire    ap_CS_fsm_state236;
reg   [63:0] output_difference_0_023_load_2_reg_3218;
reg   [63:0] output_difference_1_024_load_2_reg_3223;
reg   [63:0] output_difference_2_025_load31_reg_3228;
wire   [63:0] empty_57_fu_2448_p1;
reg   [63:0] empty_57_reg_3233;
wire    ap_CS_fsm_state237;
wire   [9:0] tmp_16_fu_2452_p3;
reg   [9:0] tmp_16_reg_3238;
wire   [6:0] add_ln194_fu_2466_p2;
reg   [6:0] add_ln194_reg_3246;
wire    ap_CS_fsm_state238;
wire   [9:0] add_ln196_fu_2481_p2;
reg   [9:0] add_ln196_reg_3256;
wire   [63:0] oracle_activations1_q0;
wire    ap_CS_fsm_state239;
reg   [5:0] activations1_address0;
reg    activations1_ce0;
reg    activations1_we0;
reg   [63:0] activations1_d0;
reg   [5:0] activations2_address0;
reg    activations2_ce0;
reg    activations2_we0;
reg   [63:0] activations2_d0;
reg   [5:0] dactivations1_address0;
reg    dactivations1_ce0;
reg    dactivations1_we0;
reg   [5:0] dactivations2_address0;
reg    dactivations2_ce0;
reg    dactivations2_we0;
reg   [9:0] delta_weights1_address0;
reg    delta_weights1_ce0;
reg    delta_weights1_we0;
wire   [63:0] delta_weights1_q0;
reg   [11:0] delta_weights2_address0;
reg    delta_weights2_ce0;
reg    delta_weights2_we0;
wire   [63:0] delta_weights2_q0;
reg   [7:0] delta_weights3_address0;
reg    delta_weights3_ce0;
reg    delta_weights3_we0;
wire   [63:0] delta_weights3_q0;
reg   [5:0] oracle_activations1_address0;
reg    oracle_activations1_ce0;
reg    oracle_activations1_we0;
reg   [5:0] oracle_activations2_address0;
reg    oracle_activations2_ce0;
reg    oracle_activations2_we0;
wire    grp_update_weights_1_fu_1234_ap_start;
wire    grp_update_weights_1_fu_1234_ap_done;
wire    grp_update_weights_1_fu_1234_ap_idle;
wire    grp_update_weights_1_fu_1234_ap_ready;
wire   [9:0] grp_update_weights_1_fu_1234_weights1_address0;
wire    grp_update_weights_1_fu_1234_weights1_ce0;
wire    grp_update_weights_1_fu_1234_weights1_we0;
wire   [63:0] grp_update_weights_1_fu_1234_weights1_d0;
wire   [11:0] grp_update_weights_1_fu_1234_weights2_address0;
wire    grp_update_weights_1_fu_1234_weights2_ce0;
wire    grp_update_weights_1_fu_1234_weights2_we0;
wire   [63:0] grp_update_weights_1_fu_1234_weights2_d0;
wire   [7:0] grp_update_weights_1_fu_1234_weights3_address0;
wire    grp_update_weights_1_fu_1234_weights3_ce0;
wire    grp_update_weights_1_fu_1234_weights3_we0;
wire   [63:0] grp_update_weights_1_fu_1234_weights3_d0;
wire   [9:0] grp_update_weights_1_fu_1234_d_weights1_address0;
wire    grp_update_weights_1_fu_1234_d_weights1_ce0;
wire   [11:0] grp_update_weights_1_fu_1234_d_weights2_address0;
wire    grp_update_weights_1_fu_1234_d_weights2_ce0;
wire   [7:0] grp_update_weights_1_fu_1234_d_weights3_address0;
wire    grp_update_weights_1_fu_1234_d_weights3_ce0;
wire   [5:0] grp_update_weights_1_fu_1234_biases1_address0;
wire    grp_update_weights_1_fu_1234_biases1_ce0;
wire    grp_update_weights_1_fu_1234_biases1_we0;
wire   [63:0] grp_update_weights_1_fu_1234_biases1_d0;
wire   [5:0] grp_update_weights_1_fu_1234_biases2_address0;
wire    grp_update_weights_1_fu_1234_biases2_ce0;
wire    grp_update_weights_1_fu_1234_biases2_we0;
wire   [63:0] grp_update_weights_1_fu_1234_biases2_d0;
wire   [1:0] grp_update_weights_1_fu_1234_biases3_address0;
wire    grp_update_weights_1_fu_1234_biases3_ce0;
wire    grp_update_weights_1_fu_1234_biases3_we0;
wire   [63:0] grp_update_weights_1_fu_1234_biases3_d0;
wire   [5:0] grp_update_weights_1_fu_1234_d_biases1_address0;
wire    grp_update_weights_1_fu_1234_d_biases1_ce0;
wire   [5:0] grp_update_weights_1_fu_1234_d_biases2_address0;
wire    grp_update_weights_1_fu_1234_d_biases2_ce0;
wire   [63:0] grp_update_weights_1_fu_1234_grp_fu_1258_p_din0;
wire   [63:0] grp_update_weights_1_fu_1234_grp_fu_1258_p_din1;
wire   [1:0] grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode;
wire    grp_update_weights_1_fu_1234_grp_fu_1258_p_ce;
wire   [63:0] grp_update_weights_1_fu_1234_grp_fu_1276_p_din0;
wire   [63:0] grp_update_weights_1_fu_1234_grp_fu_1276_p_din1;
wire    grp_update_weights_1_fu_1234_grp_fu_1276_p_ce;
wire   [63:0] grp_update_weights_1_fu_1234_grp_fu_1295_p_din0;
wire   [63:0] grp_update_weights_1_fu_1234_grp_fu_1295_p_din1;
wire    grp_update_weights_1_fu_1234_grp_fu_1295_p_ce;
reg   [63:0] activations3_2_1_reg_585;
wire   [0:0] icmp_ln356_fu_1403_p2;
wire   [0:0] icmp_ln359_fu_1419_p2;
reg   [63:0] activations3_1_1_reg_595;
reg   [63:0] activations3_0_1_reg_605;
reg   [6:0] j_reg_615;
reg   [6:0] j_6_reg_626;
wire   [0:0] icmp_ln64_fu_1536_p2;
reg   [9:0] phi_mul_reg_637;
reg   [3:0] i_13_reg_649;
wire   [0:0] icmp_ln60_fu_1519_p2;
reg   [63:0] add113_i_reg_660;
reg   [6:0] i_12_reg_673;
wire    ap_CS_fsm_state19;
reg   [6:0] i_14_reg_684;
wire    ap_CS_fsm_state50;
wire   [0:0] icmp_ln48_fu_1585_p2;
reg   [6:0] i_15_reg_695;
wire   [0:0] icmp_ln82_fu_1669_p2;
wire   [0:0] icmp_ln36_fu_1608_p2;
reg   [6:0] j_7_reg_706;
wire   [0:0] icmp_ln78_fu_1640_p2;
reg   [63:0] add113_i16_reg_718;
reg   [6:0] i_16_reg_731;
wire    ap_CS_fsm_state66;
reg   [6:0] i_17_reg_742;
wire    ap_CS_fsm_state97;
wire   [0:0] icmp_ln48_1_fu_1705_p2;
reg   [63:0] activations3_2_4_reg_753;
wire    ap_CS_fsm_state108;
wire   [0:0] icmp_ln36_1_fu_1728_p2;
reg   [63:0] activations3_1_4_reg_764;
reg   [63:0] activations3_0_41_reg_775;
reg   [1:0] j_8_reg_786;
reg   [6:0] i_19_reg_798;
wire   [0:0] icmp_ln96_fu_1760_p2;
reg   [63:0] activations3_0_reg_809;
reg   [63:0] activations3_2_5_reg_821;
wire   [0:0] icmp_ln100_fu_1780_p2;
reg   [63:0] activations3_1_5_reg_837;
reg   [63:0] activations3_0_52_reg_853;
reg   [63:0] activations3_2_6_reg_869;
wire    ap_CS_fsm_state114;
reg   [63:0] activations3_1_6_reg_880;
reg   [63:0] activations3_0_63_reg_891;
reg   [1:0] i_30_reg_902;
reg   [63:0] activations3_2_7_reg_914;
reg   [63:0] activations3_1_7_reg_929;
reg   [63:0] activations3_0_7_reg_944;
reg   [63:0] ap_phi_mux_activations3_2_9_phi_fu_1008_p6;
reg   [63:0] activations3_2_8_reg_959;
wire    ap_CS_fsm_state143;
wire   [0:0] icmp_ln48_2_fu_1816_p2;
reg   [63:0] ap_phi_mux_activations3_1_9_phi_fu_1023_p6;
reg   [63:0] activations3_1_8_reg_970;
reg   [63:0] ap_phi_mux_activations3_0_9_phi_fu_1038_p6;
reg   [63:0] activations3_0_8_reg_981;
reg   [1:0] i_31_reg_992;
reg   [1:0] i_32_reg_1049;
wire   [0:0] icmp_ln36_2_fu_1851_p2;
reg   [63:0] sum_reg_1060;
reg   [1:0] i_33_reg_1072;
wire    ap_CS_fsm_state183;
wire   [0:0] icmp_ln22_fu_1904_p2;
reg   [1:0] i_34_reg_1084;
wire   [0:0] icmp_ln27_fu_1942_p2;
wire    ap_CS_fsm_state192;
reg   [6:0] i_24_reg_1096;
wire   [0:0] icmp_ln128_fu_2155_p2;
wire   [0:0] icmp_ln114_fu_2011_p2;
reg   [1:0] j_9_reg_1108;
wire    ap_CS_fsm_state198;
reg   [6:0] i_25_reg_1119;
wire    ap_CS_fsm_state212;
wire   [0:0] icmp_ln125_fu_2116_p2;
reg   [1:0] j_10_reg_1130;
wire   [0:0] icmp_ln141_fu_2193_p2;
reg   [63:0] add113_i113_reg_1142;
reg   [6:0] i_26_reg_1154;
wire   [0:0] icmp_ln161_fu_2304_p2;
reg   [6:0] j_11_reg_1165;
wire    ap_CS_fsm_state220;
reg   [6:0] i_27_reg_1176;
wire    ap_CS_fsm_state235;
wire   [0:0] icmp_ln158_fu_2276_p2;
reg   [6:0] j_12_reg_1187;
wire   [0:0] icmp_ln174_fu_2334_p2;
reg   [63:0] add113_i138_reg_1199;
reg   [3:0] i_28_reg_1211;
wire   [0:0] icmp_ln194_fu_2460_p2;
reg   [6:0] j_13_reg_1223;
wire    ap_CS_fsm_state242;
reg    grp_update_weights_1_fu_1234_ap_start_reg;
wire   [0:0] icmp_ln191_fu_2399_p2;
wire    ap_CS_fsm_state243;
wire   [63:0] zext_ln359_fu_1431_p1;
wire   [63:0] zext_ln60_fu_1531_p1;
wire   [63:0] zext_ln66_1_fu_1567_p1;
wire   [63:0] zext_ln66_fu_1572_p1;
wire   [63:0] zext_ln48_fu_1597_p1;
wire    ap_CS_fsm_state28;
wire   [63:0] zext_ln78_fu_1652_p1;
wire   [63:0] zext_ln84_fu_1690_p1;
wire   [63:0] zext_ln82_fu_1695_p1;
wire   [63:0] zext_ln48_1_fu_1717_p1;
wire    ap_CS_fsm_state75;
wire   [63:0] zext_ln102_2_fu_1806_p1;
wire   [63:0] zext_ln102_fu_1792_p1;
wire   [63:0] zext_ln48_2_fu_1828_p1;
wire   [63:0] zext_ln116_fu_2032_p1;
wire   [63:0] zext_ln125_fu_2128_p1;
wire   [63:0] zext_ln130_fu_2189_p1;
wire   [63:0] zext_ln147_fu_2253_p1;
wire   [0:0] icmp_ln145_fu_2232_p2;
wire   [63:0] zext_ln158_fu_2288_p1;
wire   [63:0] zext_ln161_fu_2316_p1;
wire   [63:0] zext_ln163_fu_2330_p1;
wire   [63:0] zext_ln180_fu_2384_p1;
wire   [0:0] icmp_ln178_fu_2363_p2;
wire   [63:0] zext_ln178_fu_2389_p1;
wire   [63:0] arrayidx10_sum197_cast_fu_2420_p1;
wire   [63:0] zext_ln194_fu_2472_p1;
wire   [63:0] zext_ln196_fu_2486_p1;
reg   [11:0] phi_mul1_fu_154;
reg   [7:0] i_fu_158;
reg   [63:0] activations3_0_0_fu_162;
reg   [63:0] activations3_1_0_fu_166;
reg   [63:0] activations3_2_0_fu_170;
reg   [63:0] dactivations3_0_04_fu_174;
reg   [63:0] dactivations3_1_05_fu_178;
reg   [63:0] dactivations3_2_06_fu_182;
reg   [63:0] net_outputs_0_07_fu_186;
reg   [63:0] net_outputs_1_08_fu_190;
reg   [63:0] net_outputs_2_09_fu_194;
reg   [63:0] output_difference_0_023_fu_198;
reg   [63:0] output_difference_1_024_fu_202;
reg   [63:0] output_difference_2_025_fu_206;
reg   [63:0] grp_fu_1258_p0;
reg   [63:0] grp_fu_1258_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state155;
wire    ap_CS_fsm_state205;
wire    ap_CS_fsm_state228;
reg   [63:0] grp_fu_1276_p0;
reg   [63:0] grp_fu_1276_p1;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state140;
reg   [63:0] grp_fu_1295_p0;
reg   [63:0] grp_fu_1295_p1;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state170;
reg   [63:0] grp_fu_1304_p1;
wire   [1:0] trunc_ln364_fu_1443_p1;
wire   [0:0] icmp_ln364_fu_1447_p2;
wire   [0:0] icmp_ln364_1_fu_1453_p2;
wire   [0:0] or_ln364_fu_1459_p2;
wire   [0:0] icmp_ln363_fu_1437_p2;
wire   [63:0] select_ln364_fu_1465_p3;
wire   [63:0] select_ln364_1_fu_1473_p3;
wire   [63:0] select_ln364_2_fu_1481_p3;
wire   [9:0] zext_ln64_1_fu_1552_p1;
wire   [11:0] zext_ln64_fu_1548_p1;
wire   [11:0] add_ln66_1_fu_1562_p2;
wire   [63:0] bitcast_ln39_fu_1625_p1;
wire   [63:0] xor_ln39_fu_1629_p2;
wire   [5:0] empty_fu_1657_p1;
wire   [11:0] zext_ln82_1_fu_1681_p1;
wire   [11:0] add_ln84_fu_1685_p2;
wire   [63:0] bitcast_ln39_2_fu_1745_p1;
wire   [63:0] xor_ln39_1_fu_1749_p2;
wire   [7:0] zext_ln102_1_fu_1797_p1;
wire   [7:0] add_ln102_fu_1801_p2;
wire   [63:0] bitcast_ln39_4_fu_1875_p1;
wire   [63:0] xor_ln39_2_fu_1878_p2;
wire   [63:0] bitcast_ln24_fu_1928_p1;
wire   [63:0] xor_ln24_fu_1931_p2;
wire   [6:0] trunc_ln374_fu_1966_p1;
wire   [8:0] shl_ln_fu_1969_p3;
wire   [63:0] bitcast_ln29_fu_1982_p1;
wire   [63:0] xor_ln29_fu_1985_p2;
wire   [8:0] zext_ln114_fu_2023_p1;
wire   [8:0] add_ln116_fu_2027_p2;
wire   [63:0] bitcast_ln116_1_fu_2073_p1;
wire   [63:0] xor_ln116_fu_2077_p2;
wire   [5:0] empty_51_fu_2137_p1;
wire   [7:0] p_shl1_fu_2141_p3;
wire   [7:0] zext_ln125_1_fu_2133_p1;
wire   [7:0] zext_ln128_fu_2167_p1;
wire   [5:0] empty_53_fu_2214_p1;
wire   [7:0] p_shl2_fu_2218_p3;
wire   [7:0] zext_ln141_1_fu_2210_p1;
wire   [7:0] zext_ln145_fu_2244_p1;
wire   [7:0] add_ln147_fu_2248_p2;
wire   [11:0] zext_ln161_1_fu_2321_p1;
wire   [5:0] empty_56_fu_2351_p1;
wire   [11:0] zext_ln178_1_fu_2375_p1;
wire   [11:0] add_ln180_fu_2379_p2;
wire   [11:0] zext_ln191_fu_2411_p1;
wire   [11:0] arrayidx10_sum197_fu_2415_p2;
wire   [9:0] zext_ln194_1_fu_2477_p1;
reg   [1:0] grp_fu_1258_opcode;
reg    grp_fu_1258_ce;
reg    grp_fu_1276_ce;
reg    grp_fu_1295_ce;
reg   [242:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
wire    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
wire    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
wire    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
wire    ap_ST_fsm_state152_blk;
wire    ap_ST_fsm_state153_blk;
wire    ap_ST_fsm_state154_blk;
wire    ap_ST_fsm_state155_blk;
wire    ap_ST_fsm_state156_blk;
wire    ap_ST_fsm_state157_blk;
wire    ap_ST_fsm_state158_blk;
wire    ap_ST_fsm_state159_blk;
wire    ap_ST_fsm_state160_blk;
wire    ap_ST_fsm_state161_blk;
wire    ap_ST_fsm_state162_blk;
wire    ap_ST_fsm_state163_blk;
wire    ap_ST_fsm_state164_blk;
wire    ap_ST_fsm_state165_blk;
wire    ap_ST_fsm_state166_blk;
wire    ap_ST_fsm_state167_blk;
wire    ap_ST_fsm_state168_blk;
wire    ap_ST_fsm_state169_blk;
wire    ap_ST_fsm_state170_blk;
wire    ap_ST_fsm_state171_blk;
wire    ap_ST_fsm_state172_blk;
wire    ap_ST_fsm_state173_blk;
wire    ap_ST_fsm_state174_blk;
wire    ap_ST_fsm_state175_blk;
wire    ap_ST_fsm_state176_blk;
wire    ap_ST_fsm_state177_blk;
wire    ap_ST_fsm_state178_blk;
wire    ap_ST_fsm_state179_blk;
wire    ap_ST_fsm_state180_blk;
wire    ap_ST_fsm_state181_blk;
wire    ap_ST_fsm_state182_blk;
wire    ap_ST_fsm_state183_blk;
wire    ap_ST_fsm_state184_blk;
wire    ap_ST_fsm_state185_blk;
wire    ap_ST_fsm_state186_blk;
wire    ap_ST_fsm_state187_blk;
wire    ap_ST_fsm_state188_blk;
wire    ap_ST_fsm_state189_blk;
wire    ap_ST_fsm_state190_blk;
wire    ap_ST_fsm_state191_blk;
wire    ap_ST_fsm_state192_blk;
wire    ap_ST_fsm_state193_blk;
wire    ap_ST_fsm_state194_blk;
wire    ap_ST_fsm_state195_blk;
wire    ap_ST_fsm_state196_blk;
wire    ap_ST_fsm_state197_blk;
wire    ap_ST_fsm_state198_blk;
wire    ap_ST_fsm_state199_blk;
wire    ap_ST_fsm_state200_blk;
wire    ap_ST_fsm_state201_blk;
wire    ap_ST_fsm_state202_blk;
wire    ap_ST_fsm_state203_blk;
wire    ap_ST_fsm_state204_blk;
wire    ap_ST_fsm_state205_blk;
wire    ap_ST_fsm_state206_blk;
wire    ap_ST_fsm_state207_blk;
wire    ap_ST_fsm_state208_blk;
wire    ap_ST_fsm_state209_blk;
wire    ap_ST_fsm_state210_blk;
wire    ap_ST_fsm_state211_blk;
wire    ap_ST_fsm_state212_blk;
wire    ap_ST_fsm_state213_blk;
wire    ap_ST_fsm_state214_blk;
wire    ap_ST_fsm_state215_blk;
wire    ap_ST_fsm_state216_blk;
wire    ap_ST_fsm_state217_blk;
wire    ap_ST_fsm_state218_blk;
wire    ap_ST_fsm_state219_blk;
wire    ap_ST_fsm_state220_blk;
wire    ap_ST_fsm_state221_blk;
wire    ap_ST_fsm_state222_blk;
wire    ap_ST_fsm_state223_blk;
wire    ap_ST_fsm_state224_blk;
wire    ap_ST_fsm_state225_blk;
wire    ap_ST_fsm_state226_blk;
wire    ap_ST_fsm_state227_blk;
wire    ap_ST_fsm_state228_blk;
wire    ap_ST_fsm_state229_blk;
wire    ap_ST_fsm_state230_blk;
wire    ap_ST_fsm_state231_blk;
wire    ap_ST_fsm_state232_blk;
wire    ap_ST_fsm_state233_blk;
wire    ap_ST_fsm_state234_blk;
wire    ap_ST_fsm_state235_blk;
wire    ap_ST_fsm_state236_blk;
wire    ap_ST_fsm_state237_blk;
wire    ap_ST_fsm_state238_blk;
wire    ap_ST_fsm_state239_blk;
wire    ap_ST_fsm_state240_blk;
wire    ap_ST_fsm_state241_blk;
wire    ap_ST_fsm_state242_blk;
reg    ap_ST_fsm_state243_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 243'd1;
#0 grp_update_weights_1_fu_1234_ap_start_reg = 1'b0;
#0 phi_mul1_fu_154 = 12'd0;
#0 i_fu_158 = 8'd0;
#0 activations3_0_0_fu_162 = 64'd0;
#0 activations3_1_0_fu_166 = 64'd0;
#0 activations3_2_0_fu_170 = 64'd0;
#0 dactivations3_0_04_fu_174 = 64'd0;
#0 dactivations3_1_05_fu_178 = 64'd0;
#0 dactivations3_2_06_fu_182 = 64'd0;
#0 net_outputs_0_07_fu_186 = 64'd0;
#0 net_outputs_1_08_fu_190 = 64'd0;
#0 net_outputs_2_09_fu_194 = 64'd0;
#0 output_difference_0_023_fu_198 = 64'd0;
#0 output_difference_1_024_fu_202 = 64'd0;
#0 output_difference_2_025_fu_206 = 64'd0;
end

backprop_activations1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
activations1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(activations1_address0),
    .ce0(activations1_ce0),
    .we0(activations1_we0),
    .d0(activations1_d0),
    .q0(activations1_q0)
);

backprop_activations1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
activations2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(activations2_address0),
    .ce0(activations2_ce0),
    .we0(activations2_we0),
    .d0(activations2_d0),
    .q0(activations2_q0)
);

backprop_activations1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dactivations1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dactivations1_address0),
    .ce0(dactivations1_ce0),
    .we0(dactivations1_we0),
    .d0(grp_fu_1276_p2),
    .q0(dactivations1_q0)
);

backprop_activations1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dactivations2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dactivations2_address0),
    .ce0(dactivations2_ce0),
    .we0(dactivations2_we0),
    .d0(grp_fu_1276_p2),
    .q0(dactivations2_q0)
);

backprop_delta_weights1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 832 ),
    .AddressWidth( 10 ))
delta_weights1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(delta_weights1_address0),
    .ce0(delta_weights1_ce0),
    .we0(delta_weights1_we0),
    .d0(grp_fu_1276_p2),
    .q0(delta_weights1_q0)
);

backprop_delta_weights2_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
delta_weights2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(delta_weights2_address0),
    .ce0(delta_weights2_ce0),
    .we0(delta_weights2_we0),
    .d0(reg_1321),
    .q0(delta_weights2_q0)
);

backprop_delta_weights3_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 192 ),
    .AddressWidth( 8 ))
delta_weights3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(delta_weights3_address0),
    .ce0(delta_weights3_ce0),
    .we0(delta_weights3_we0),
    .d0(grp_fu_1276_p2),
    .q0(delta_weights3_q0)
);

backprop_activations1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
oracle_activations1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(oracle_activations1_address0),
    .ce0(oracle_activations1_ce0),
    .we0(oracle_activations1_we0),
    .d0(grp_fu_1276_p2),
    .q0(oracle_activations1_q0)
);

backprop_activations1_RAM_AUTO_1R1W #(
    .DataWidth( 64 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
oracle_activations2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(oracle_activations2_address0),
    .ce0(oracle_activations2_ce0),
    .we0(oracle_activations2_we0),
    .d0(grp_fu_1276_p2),
    .q0(oracle_activations2_q0)
);

backprop_update_weights_1 grp_update_weights_1_fu_1234(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_update_weights_1_fu_1234_ap_start),
    .ap_done(grp_update_weights_1_fu_1234_ap_done),
    .ap_idle(grp_update_weights_1_fu_1234_ap_idle),
    .ap_ready(grp_update_weights_1_fu_1234_ap_ready),
    .weights1_address0(grp_update_weights_1_fu_1234_weights1_address0),
    .weights1_ce0(grp_update_weights_1_fu_1234_weights1_ce0),
    .weights1_we0(grp_update_weights_1_fu_1234_weights1_we0),
    .weights1_d0(grp_update_weights_1_fu_1234_weights1_d0),
    .weights1_q0(weights1_q0),
    .weights2_address0(grp_update_weights_1_fu_1234_weights2_address0),
    .weights2_ce0(grp_update_weights_1_fu_1234_weights2_ce0),
    .weights2_we0(grp_update_weights_1_fu_1234_weights2_we0),
    .weights2_d0(grp_update_weights_1_fu_1234_weights2_d0),
    .weights2_q0(weights2_q0),
    .weights3_address0(grp_update_weights_1_fu_1234_weights3_address0),
    .weights3_ce0(grp_update_weights_1_fu_1234_weights3_ce0),
    .weights3_we0(grp_update_weights_1_fu_1234_weights3_we0),
    .weights3_d0(grp_update_weights_1_fu_1234_weights3_d0),
    .weights3_q0(weights3_q0),
    .d_weights1_address0(grp_update_weights_1_fu_1234_d_weights1_address0),
    .d_weights1_ce0(grp_update_weights_1_fu_1234_d_weights1_ce0),
    .d_weights1_q0(delta_weights1_q0),
    .d_weights2_address0(grp_update_weights_1_fu_1234_d_weights2_address0),
    .d_weights2_ce0(grp_update_weights_1_fu_1234_d_weights2_ce0),
    .d_weights2_q0(delta_weights2_q0),
    .d_weights3_address0(grp_update_weights_1_fu_1234_d_weights3_address0),
    .d_weights3_ce0(grp_update_weights_1_fu_1234_d_weights3_ce0),
    .d_weights3_q0(delta_weights3_q0),
    .biases1_address0(grp_update_weights_1_fu_1234_biases1_address0),
    .biases1_ce0(grp_update_weights_1_fu_1234_biases1_ce0),
    .biases1_we0(grp_update_weights_1_fu_1234_biases1_we0),
    .biases1_d0(grp_update_weights_1_fu_1234_biases1_d0),
    .biases1_q0(biases1_q0),
    .biases2_address0(grp_update_weights_1_fu_1234_biases2_address0),
    .biases2_ce0(grp_update_weights_1_fu_1234_biases2_ce0),
    .biases2_we0(grp_update_weights_1_fu_1234_biases2_we0),
    .biases2_d0(grp_update_weights_1_fu_1234_biases2_d0),
    .biases2_q0(biases2_q0),
    .biases3_address0(grp_update_weights_1_fu_1234_biases3_address0),
    .biases3_ce0(grp_update_weights_1_fu_1234_biases3_ce0),
    .biases3_we0(grp_update_weights_1_fu_1234_biases3_we0),
    .biases3_d0(grp_update_weights_1_fu_1234_biases3_d0),
    .biases3_q0(biases3_q0),
    .d_biases1_address0(grp_update_weights_1_fu_1234_d_biases1_address0),
    .d_biases1_ce0(grp_update_weights_1_fu_1234_d_biases1_ce0),
    .d_biases1_q0(oracle_activations1_q0),
    .d_biases2_address0(grp_update_weights_1_fu_1234_d_biases2_address0),
    .d_biases2_ce0(grp_update_weights_1_fu_1234_d_biases2_ce0),
    .d_biases2_q0(oracle_activations2_q0),
    .p_read(output_difference_0_023_load_2_reg_3218),
    .p_read1(output_difference_1_024_load_2_reg_3223),
    .p_read2(output_difference_2_025_load31_reg_3228),
    .grp_fu_1258_p_din0(grp_update_weights_1_fu_1234_grp_fu_1258_p_din0),
    .grp_fu_1258_p_din1(grp_update_weights_1_fu_1234_grp_fu_1258_p_din1),
    .grp_fu_1258_p_opcode(grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode),
    .grp_fu_1258_p_dout0(grp_fu_1258_p2),
    .grp_fu_1258_p_ce(grp_update_weights_1_fu_1234_grp_fu_1258_p_ce),
    .grp_fu_1276_p_din0(grp_update_weights_1_fu_1234_grp_fu_1276_p_din0),
    .grp_fu_1276_p_din1(grp_update_weights_1_fu_1234_grp_fu_1276_p_din1),
    .grp_fu_1276_p_dout0(grp_fu_1276_p2),
    .grp_fu_1276_p_ce(grp_update_weights_1_fu_1234_grp_fu_1276_p_ce),
    .grp_fu_1295_p_din0(grp_update_weights_1_fu_1234_grp_fu_1295_p_din0),
    .grp_fu_1295_p_din1(grp_update_weights_1_fu_1234_grp_fu_1295_p_din1),
    .grp_fu_1295_p_dout0(grp_fu_1295_p2),
    .grp_fu_1295_p_ce(grp_update_weights_1_fu_1234_grp_fu_1295_p_ce)
);

backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadddsub_64ns_64ns_64_4_full_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1258_p0),
    .din1(grp_fu_1258_p1),
    .opcode(grp_fu_1258_opcode),
    .ce(grp_fu_1258_ce),
    .dout(grp_fu_1258_p2)
);

backprop_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1276_p0),
    .din1(grp_fu_1276_p1),
    .ce(grp_fu_1276_ce),
    .dout(grp_fu_1276_p2)
);

backprop_ddiv_64ns_64ns_64_14_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_14_no_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1295_p0),
    .din1(grp_fu_1295_p1),
    .ce(grp_fu_1295_ce),
    .dout(grp_fu_1295_p2)
);

backprop_dexp_64ns_64ns_64_10_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dexp_64ns_64ns_64_10_full_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(grp_fu_1304_p1),
    .ce(1'b1),
    .dout(grp_fu_1304_p2)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U26(
    .din0(activations3_0_63_reg_891),
    .din1(activations3_1_6_reg_880),
    .din2(activations3_2_6_reg_869),
    .din3(i_30_reg_902),
    .dout(tmp_5_fu_1833_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U27(
    .din0(activations3_0_8_reg_981),
    .din1(activations3_1_8_reg_970),
    .din2(activations3_2_8_reg_959),
    .din3(i_31_reg_992),
    .dout(tmp_6_fu_1863_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U28(
    .din0(activations3_0_8_reg_981),
    .din1(activations3_1_8_reg_970),
    .din2(activations3_2_8_reg_959),
    .din3(i_32_reg_1049),
    .dout(tmp_7_fu_1916_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U29(
    .din0(activations3_0_8_reg_981),
    .din1(activations3_1_8_reg_970),
    .din2(activations3_2_8_reg_959),
    .din3(i_33_reg_1072),
    .dout(tmp_8_fu_1954_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U30(
    .din0(net_outputs_0_07_fu_186),
    .din1(net_outputs_1_08_fu_190),
    .din2(net_outputs_2_09_fu_194),
    .din3(i_34_reg_1084),
    .dout(tmp_9_fu_2046_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U31(
    .din0(dactivations3_0_04_fu_174),
    .din1(dactivations3_1_05_fu_178),
    .din2(dactivations3_2_06_fu_182),
    .din3(i_34_reg_1084),
    .dout(tmp_s_fu_2088_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U32(
    .din0(output_difference_0_023_fu_198),
    .din1(output_difference_1_024_fu_202),
    .din2(output_difference_2_025_fu_206),
    .din3(j_9_reg_1108),
    .dout(tmp_10_fu_2171_p5)
);

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U33(
    .din0(output_difference_0_023_fu_198),
    .din1(output_difference_1_024_fu_202),
    .din2(output_difference_2_025_fu_206),
    .din3(j_10_reg_1130),
    .dout(tmp_11_fu_2258_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_update_weights_1_fu_1234_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state236) & (icmp_ln191_fu_2399_p2 == 1'd1))) begin
            grp_update_weights_1_fu_1234_ap_start_reg <= 1'b1;
        end else if ((grp_update_weights_1_fu_1234_ap_ready == 1'b1)) begin
            grp_update_weights_1_fu_1234_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd0))) begin
        activations3_0_1_reg_605 <= select_ln363_2_fu_1505_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd0))) begin
        activations3_0_1_reg_605 <= activations3_0_0_fu_162;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln36_1_fu_1728_p2 == 1'd1))) begin
        activations3_0_41_reg_775 <= activations3_0_1_reg_605;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        activations3_0_41_reg_775 <= activations3_0_52_reg_853;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1) & (j_8_reg_786 == 2'd0))) begin
        activations3_0_52_reg_853 <= activations3_0_reg_809;
    end else if ((((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1) & (j_8_reg_786 == 2'd1)) | (~(j_8_reg_786 == 2'd1) & ~(j_8_reg_786 == 2'd0) & (1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1)))) begin
        activations3_0_52_reg_853 <= activations3_0_41_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd1))) begin
        activations3_0_63_reg_891 <= activations3_0_41_reg_775;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        activations3_0_63_reg_891 <= activations3_0_7_reg_944;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state113) & (i_30_reg_902 == 2'd0))) begin
        activations3_0_7_reg_944 <= grp_fu_1258_p2;
    end else if ((((1'b1 == ap_CS_fsm_state113) & (i_30_reg_902 == 2'd1)) | (~(i_30_reg_902 == 2'd1) & ~(i_30_reg_902 == 2'd0) & (1'b1 == ap_CS_fsm_state113)))) begin
        activations3_0_7_reg_944 <= activations3_0_63_reg_891;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) & (icmp_ln48_2_fu_1816_p2 == 1'd1))) begin
        activations3_0_8_reg_981 <= activations3_0_63_reg_891;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        activations3_0_8_reg_981 <= ap_phi_mux_activations3_0_9_phi_fu_1038_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd0))) begin
        activations3_0_reg_809 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        activations3_0_reg_809 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd0))) begin
        activations3_1_1_reg_595 <= select_ln363_1_fu_1497_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd0))) begin
        activations3_1_1_reg_595 <= activations3_1_0_fu_166;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln36_1_fu_1728_p2 == 1'd1))) begin
        activations3_1_4_reg_764 <= activations3_1_1_reg_595;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        activations3_1_4_reg_764 <= activations3_1_5_reg_837;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1) & (j_8_reg_786 == 2'd1))) begin
        activations3_1_5_reg_837 <= activations3_0_reg_809;
    end else if ((((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1) & (j_8_reg_786 == 2'd0)) | (~(j_8_reg_786 == 2'd1) & ~(j_8_reg_786 == 2'd0) & (1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1)))) begin
        activations3_1_5_reg_837 <= activations3_1_4_reg_764;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd1))) begin
        activations3_1_6_reg_880 <= activations3_1_4_reg_764;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        activations3_1_6_reg_880 <= activations3_1_7_reg_929;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state113) & (i_30_reg_902 == 2'd1))) begin
        activations3_1_7_reg_929 <= grp_fu_1258_p2;
    end else if ((((1'b1 == ap_CS_fsm_state113) & (i_30_reg_902 == 2'd0)) | (~(i_30_reg_902 == 2'd1) & ~(i_30_reg_902 == 2'd0) & (1'b1 == ap_CS_fsm_state113)))) begin
        activations3_1_7_reg_929 <= activations3_1_6_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) & (icmp_ln48_2_fu_1816_p2 == 1'd1))) begin
        activations3_1_8_reg_970 <= activations3_1_6_reg_880;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        activations3_1_8_reg_970 <= ap_phi_mux_activations3_1_9_phi_fu_1023_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd0))) begin
        activations3_2_1_reg_585 <= select_ln363_fu_1489_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd0))) begin
        activations3_2_1_reg_585 <= activations3_2_0_fu_170;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln36_1_fu_1728_p2 == 1'd1))) begin
        activations3_2_4_reg_753 <= activations3_2_1_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        activations3_2_4_reg_753 <= activations3_2_5_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1) & (j_8_reg_786 == 2'd1)) | ((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1) & (j_8_reg_786 == 2'd0)))) begin
        activations3_2_5_reg_821 <= activations3_2_4_reg_753;
    end else if ((~(j_8_reg_786 == 2'd1) & ~(j_8_reg_786 == 2'd0) & (1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1))) begin
        activations3_2_5_reg_821 <= activations3_0_reg_809;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd1))) begin
        activations3_2_6_reg_869 <= activations3_2_4_reg_753;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        activations3_2_6_reg_869 <= activations3_2_7_reg_914;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state113) & (i_30_reg_902 == 2'd1)) | ((1'b1 == ap_CS_fsm_state113) & (i_30_reg_902 == 2'd0)))) begin
        activations3_2_7_reg_914 <= activations3_2_6_reg_869;
    end else if ((~(i_30_reg_902 == 2'd1) & ~(i_30_reg_902 == 2'd0) & (1'b1 == ap_CS_fsm_state113))) begin
        activations3_2_7_reg_914 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) & (icmp_ln48_2_fu_1816_p2 == 1'd1))) begin
        activations3_2_8_reg_959 <= activations3_2_6_reg_869;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        activations3_2_8_reg_959 <= ap_phi_mux_activations3_2_9_phi_fu_1008_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state199) & (icmp_ln141_fu_2193_p2 == 1'd0))) begin
        add113_i113_reg_1142 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state208)) begin
        add113_i113_reg_1142 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state221) & (icmp_ln174_fu_2334_p2 == 1'd0))) begin
        add113_i138_reg_1199 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state231)) begin
        add113_i138_reg_1199 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln78_fu_1640_p2 == 1'd0))) begin
        add113_i16_reg_718 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        add113_i16_reg_718 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_1519_p2 == 1'd0))) begin
        add113_i_reg_660 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        add113_i_reg_660 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_1519_p2 == 1'd1))) begin
        i_12_reg_673 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        i_12_reg_673 <= add_ln48_reg_2696;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_1519_p2 == 1'd0))) begin
        i_13_reg_649 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_13_reg_649 <= add_ln64_reg_2653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln48_fu_1585_p2 == 1'd1))) begin
        i_14_reg_684 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        i_14_reg_684 <= add_ln36_reg_2719;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln36_fu_1608_p2 == 1'd1))) begin
        i_15_reg_695 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln82_fu_1669_p2 == 1'd1))) begin
        i_15_reg_695 <= add_ln78_reg_2742;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln78_fu_1640_p2 == 1'd1))) begin
        i_16_reg_731 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        i_16_reg_731 <= add_ln48_1_reg_2788;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state62) & (icmp_ln48_1_fu_1705_p2 == 1'd1))) begin
        i_17_reg_742 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        i_17_reg_742 <= add_ln36_1_reg_2811;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd0))) begin
        i_19_reg_798 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        i_19_reg_798 <= add_ln100_reg_2847;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state184) & (icmp_ln114_fu_2011_p2 == 1'd1))) begin
        i_24_reg_1096 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state195) & (icmp_ln128_fu_2155_p2 == 1'd1))) begin
        i_24_reg_1096 <= add_ln125_reg_3009;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state193) & (icmp_ln125_fu_2116_p2 == 1'd1))) begin
        i_25_reg_1119 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state212)) begin
        i_25_reg_1119 <= add_ln141_reg_3045;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state199) & (icmp_ln141_fu_2193_p2 == 1'd1))) begin
        i_26_reg_1154 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state215) & (icmp_ln161_fu_2304_p2 == 1'd1))) begin
        i_26_reg_1154 <= add_ln158_reg_3106;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state213) & (icmp_ln158_fu_2276_p2 == 1'd1))) begin
        i_27_reg_1176 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state235)) begin
        i_27_reg_1176 <= add_ln174_reg_3147;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state221) & (icmp_ln174_fu_2334_p2 == 1'd1))) begin
        i_28_reg_1211 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state238) & (icmp_ln194_fu_2460_p2 == 1'd1))) begin
        i_28_reg_1211 <= add_ln191_reg_3208;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd1))) begin
        i_30_reg_902 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        i_30_reg_902 <= add_ln48_2_reg_2875;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state109) & (icmp_ln48_2_fu_1816_p2 == 1'd1))) begin
        i_31_reg_992 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        i_31_reg_992 <= add_ln36_2_reg_2905;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln36_2_fu_1851_p2 == 1'd1))) begin
        i_32_reg_1049 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        i_32_reg_1049 <= add_ln22_reg_2930;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (icmp_ln22_fu_1904_p2 == 1'd1))) begin
        i_33_reg_1072 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state183)) begin
        i_33_reg_1072 <= add_ln27_reg_2953;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state192)) begin
        i_34_reg_1084 <= add_ln114_reg_2976;
    end else if (((1'b1 == ap_CS_fsm_state159) & (icmp_ln27_fu_1942_p2 == 1'd1))) begin
        i_34_reg_1084 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_158 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state236) & (icmp_ln191_fu_2399_p2 == 1'd1))) begin
        i_fu_158 <= add_ln356_reg_2599;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state199) & (icmp_ln141_fu_2193_p2 == 1'd0))) begin
        j_10_reg_1130 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state208)) begin
        j_10_reg_1130 <= add_ln145_reg_3068;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state214)) begin
        j_11_reg_1165 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state220)) begin
        j_11_reg_1165 <= add_ln161_reg_3129;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state221) & (icmp_ln174_fu_2334_p2 == 1'd0))) begin
        j_12_reg_1187 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state231)) begin
        j_12_reg_1187 <= add_ln178_reg_3170;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state237)) begin
        j_13_reg_1223 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state242)) begin
        j_13_reg_1223 <= add_ln194_reg_3246;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd1))) begin
        j_6_reg_626 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_1536_p2 == 1'd1))) begin
        j_6_reg_626 <= add_ln60_reg_2640;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln78_fu_1640_p2 == 1'd0))) begin
        j_7_reg_706 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        j_7_reg_706 <= add_ln82_reg_2760;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln36_1_fu_1728_p2 == 1'd1))) begin
        j_8_reg_786 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        j_8_reg_786 <= add_ln96_reg_2834;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state194)) begin
        j_9_reg_1108 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        j_9_reg_1108 <= add_ln128_reg_3027;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd0))) begin
        j_reg_615 <= add_ln359_fu_1425_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd0))) begin
        j_reg_615 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_fu_154 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state236) & (icmp_ln191_fu_2399_p2 == 1'd1))) begin
        phi_mul1_fu_154 <= add_ln356_1_reg_2591;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd1))) begin
        phi_mul_reg_637 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_1536_p2 == 1'd1))) begin
        phi_mul_reg_637 <= add_ln60_1_reg_2632;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln36_2_fu_1851_p2 == 1'd1))) begin
        sum_reg_1060 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        sum_reg_1060 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        activations1_addr_1_reg_2645 <= zext_ln60_fu_1531_p1;
        add_ln60_1_reg_2632 <= add_ln60_1_fu_1513_p2;
        add_ln60_reg_2640 <= add_ln60_fu_1525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        activations1_addr_2_reg_2701 <= zext_ln48_fu_1597_p1;
        add_ln48_reg_2696 <= add_ln48_fu_1591_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        activations1_addr_3_reg_2729 <= zext_ln36_fu_1620_p1;
        add_ln36_reg_2719 <= add_ln36_fu_1614_p2;
        zext_ln36_reg_2724[6 : 0] <= zext_ln36_fu_1620_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        activations2_addr_1_reg_2747 <= zext_ln78_fu_1652_p1;
        add_ln78_reg_2742 <= add_ln78_fu_1646_p2;
        tmp_12_reg_2752[11 : 6] <= tmp_12_fu_1661_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        activations2_addr_2_reg_2793 <= zext_ln48_1_fu_1717_p1;
        add_ln48_1_reg_2788 <= add_ln48_1_fu_1711_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        activations2_addr_3_reg_2821 <= zext_ln36_1_fu_1740_p1;
        add_ln36_1_reg_2811 <= add_ln36_1_fu_1734_p2;
        zext_ln36_1_reg_2816[6 : 0] <= zext_ln36_1_fu_1740_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state236) & (icmp_ln191_fu_2399_p2 == 1'd1))) begin
        activations3_0_0_fu_162 <= activations3_0_8_reg_981;
        activations3_1_0_fu_166 <= activations3_1_8_reg_970;
        activations3_2_0_fu_170 <= activations3_2_8_reg_959;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        add_ln100_reg_2847 <= add_ln100_fu_1786_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state184)) begin
        add_ln114_reg_2976 <= add_ln114_fu_2017_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state193)) begin
        add_ln125_reg_3009 <= add_ln125_fu_2122_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state195)) begin
        add_ln128_reg_3027 <= add_ln128_fu_2161_p2;
        add_ln130_reg_3037 <= add_ln130_fu_2184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state199)) begin
        add_ln141_reg_3045 <= add_ln141_fu_2199_p2;
        empty_54_reg_3060 <= empty_54_fu_2226_p2;
        oracle_activations2_addr_reg_3055 <= zext_ln141_fu_2205_p1;
        zext_ln141_reg_3050[6 : 0] <= zext_ln141_fu_2205_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        add_ln145_reg_3068 <= add_ln145_fu_2238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state213)) begin
        add_ln158_reg_3106 <= add_ln158_fu_2282_p2;
        empty_55_reg_3116 <= empty_55_fu_2293_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state215)) begin
        add_ln161_reg_3129 <= add_ln161_fu_2310_p2;
        add_ln163_reg_3139 <= add_ln163_fu_2325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state221)) begin
        add_ln174_reg_3147 <= add_ln174_fu_2340_p2;
        oracle_activations1_addr_reg_3157 <= zext_ln174_fu_2346_p1;
        tmp_15_reg_3162[11 : 6] <= tmp_15_fu_2355_p3[11 : 6];
        zext_ln174_reg_3152[6 : 0] <= zext_ln174_fu_2346_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state222)) begin
        add_ln178_reg_3170 <= add_ln178_fu_2369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state236)) begin
        add_ln191_reg_3208 <= add_ln191_fu_2405_p2;
        output_difference_0_023_load_2_reg_3218 <= output_difference_0_023_fu_198;
        output_difference_1_024_load_2_reg_3223 <= output_difference_1_024_fu_202;
        output_difference_2_025_load31_reg_3228 <= output_difference_2_025_fu_206;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state238)) begin
        add_ln194_reg_3246 <= add_ln194_fu_2466_p2;
        add_ln196_reg_3256 <= add_ln196_fu_2481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        add_ln22_reg_2930 <= add_ln22_fu_1910_p2;
        tmp_7_reg_2935 <= tmp_7_fu_1916_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        add_ln27_reg_2953 <= add_ln27_fu_1948_p2;
        sub_ln374_reg_2963 <= sub_ln374_fu_1977_p2;
        tmp_8_reg_2958 <= tmp_8_fu_1954_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln356_1_reg_2591 <= add_ln356_1_fu_1397_p2;
        add_ln356_reg_2599 <= add_ln356_fu_1409_p2;
        zext_ln356_reg_2604[7 : 0] <= zext_ln356_fu_1415_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state115)) begin
        add_ln36_2_reg_2905 <= add_ln36_2_fu_1857_p2;
        tmp_6_reg_2910 <= tmp_6_fu_1863_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        add_ln48_2_reg_2875 <= add_ln48_2_fu_1822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln64_reg_2653 <= add_ln64_fu_1542_p2;
        add_ln66_reg_2658 <= add_ln66_fu_1556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        add_ln82_reg_2760 <= add_ln82_fu_1675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        add_ln96_reg_2834 <= add_ln96_fu_1766_p2;
        tmp_13_reg_2839[7 : 6] <= tmp_13_fu_1772_p3[7 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd0))) begin
        dactivations3_0_04_fu_174 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd1))) begin
        dactivations3_1_05_fu_178 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_31_reg_992 == 2'd1) & ~(i_31_reg_992 == 2'd0) & (1'b1 == ap_CS_fsm_state143))) begin
        dactivations3_2_06_fu_182 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state194)) begin
        empty_52_reg_3019 <= empty_52_fu_2149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state237)) begin
        empty_57_reg_3233 <= empty_57_fu_2448_p1;
        tmp_16_reg_3238[9 : 6] <= tmp_16_fu_2452_p3[9 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state183) & (i_33_reg_1072 == 2'd0))) begin
        net_outputs_0_07_fu_186 <= grp_fu_1295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state183) & (i_33_reg_1072 == 2'd1))) begin
        net_outputs_1_08_fu_190 <= grp_fu_1295_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_33_reg_1072 == 2'd1) & ~(i_33_reg_1072 == 2'd0) & (1'b1 == ap_CS_fsm_state183))) begin
        net_outputs_2_09_fu_194 <= grp_fu_1295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state192) & (i_34_reg_1084 == 2'd0))) begin
        output_difference_0_023_fu_198 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state192) & (i_34_reg_1084 == 2'd1))) begin
        output_difference_1_024_fu_202 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_34_reg_1084 == 2'd1) & ~(i_34_reg_1084 == 2'd0) & (1'b1 == ap_CS_fsm_state192))) begin
        output_difference_2_025_fu_206 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state227) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state204) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_1321 <= grp_fu_1276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state214) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_1327 <= activations1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state188) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_1335 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_1341 <= grp_fu_1304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state49))) begin
        reg_1348 <= grp_fu_1295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state223) | (1'b1 == ap_CS_fsm_state53))) begin
        reg_1354 <= weights2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state63))) begin
        reg_1358 <= activations2_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        sub_i2_reg_2922 <= grp_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state214)) begin
        tmp_14_reg_3121[11 : 6] <= tmp_14_fu_2297_p3[11 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        training_data_load_reg_2673 <= training_data_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state213)) begin
        activations1_address0 = zext_ln158_fu_2288_p1;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        activations1_address0 = zext_ln82_fu_1695_p1;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        activations1_address0 = activations1_addr_3_reg_2729;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        activations1_address0 = zext_ln36_fu_1620_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        activations1_address0 = activations1_addr_2_reg_2701;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        activations1_address0 = zext_ln48_fu_1597_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        activations1_address0 = activations1_addr_1_reg_2645;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        activations1_address0 = zext_ln359_fu_1431_p1;
    end else begin
        activations1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state213) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state19))) begin
        activations1_ce0 = 1'b1;
    end else begin
        activations1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        activations1_d0 = reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        activations1_d0 = grp_fu_1258_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        activations1_d0 = add113_i_reg_660;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        activations1_d0 = 64'd0;
    end else begin
        activations1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_1536_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd0)))) begin
        activations1_we0 = 1'b1;
    end else begin
        activations1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state193)) begin
        activations2_address0 = zext_ln125_fu_2128_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        activations2_address0 = zext_ln102_fu_1792_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        activations2_address0 = activations2_addr_3_reg_2821;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        activations2_address0 = zext_ln36_1_fu_1740_p1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        activations2_address0 = activations2_addr_2_reg_2793;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        activations2_address0 = zext_ln48_1_fu_1717_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        activations2_address0 = activations2_addr_1_reg_2747;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        activations2_address0 = zext_ln359_fu_1431_p1;
    end else begin
        activations2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state193) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state66))) begin
        activations2_ce0 = 1'b1;
    end else begin
        activations2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        activations2_d0 = reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        activations2_d0 = grp_fu_1258_p2;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        activations2_d0 = add113_i16_reg_718;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        activations2_d0 = 64'd0;
    end else begin
        activations2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state66) | ((1'b1 == ap_CS_fsm_state52) & (icmp_ln82_fu_1669_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd0)))) begin
        activations2_we0 = 1'b1;
    end else begin
        activations2_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

assign ap_ST_fsm_state123_blk = 1'b0;

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

assign ap_ST_fsm_state126_blk = 1'b0;

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

assign ap_ST_fsm_state152_blk = 1'b0;

assign ap_ST_fsm_state153_blk = 1'b0;

assign ap_ST_fsm_state154_blk = 1'b0;

assign ap_ST_fsm_state155_blk = 1'b0;

assign ap_ST_fsm_state156_blk = 1'b0;

assign ap_ST_fsm_state157_blk = 1'b0;

assign ap_ST_fsm_state158_blk = 1'b0;

assign ap_ST_fsm_state159_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state160_blk = 1'b0;

assign ap_ST_fsm_state161_blk = 1'b0;

assign ap_ST_fsm_state162_blk = 1'b0;

assign ap_ST_fsm_state163_blk = 1'b0;

assign ap_ST_fsm_state164_blk = 1'b0;

assign ap_ST_fsm_state165_blk = 1'b0;

assign ap_ST_fsm_state166_blk = 1'b0;

assign ap_ST_fsm_state167_blk = 1'b0;

assign ap_ST_fsm_state168_blk = 1'b0;

assign ap_ST_fsm_state169_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state170_blk = 1'b0;

assign ap_ST_fsm_state171_blk = 1'b0;

assign ap_ST_fsm_state172_blk = 1'b0;

assign ap_ST_fsm_state173_blk = 1'b0;

assign ap_ST_fsm_state174_blk = 1'b0;

assign ap_ST_fsm_state175_blk = 1'b0;

assign ap_ST_fsm_state176_blk = 1'b0;

assign ap_ST_fsm_state177_blk = 1'b0;

assign ap_ST_fsm_state178_blk = 1'b0;

assign ap_ST_fsm_state179_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state180_blk = 1'b0;

assign ap_ST_fsm_state181_blk = 1'b0;

assign ap_ST_fsm_state182_blk = 1'b0;

assign ap_ST_fsm_state183_blk = 1'b0;

assign ap_ST_fsm_state184_blk = 1'b0;

assign ap_ST_fsm_state185_blk = 1'b0;

assign ap_ST_fsm_state186_blk = 1'b0;

assign ap_ST_fsm_state187_blk = 1'b0;

assign ap_ST_fsm_state188_blk = 1'b0;

assign ap_ST_fsm_state189_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state190_blk = 1'b0;

assign ap_ST_fsm_state191_blk = 1'b0;

assign ap_ST_fsm_state192_blk = 1'b0;

assign ap_ST_fsm_state193_blk = 1'b0;

assign ap_ST_fsm_state194_blk = 1'b0;

assign ap_ST_fsm_state195_blk = 1'b0;

assign ap_ST_fsm_state196_blk = 1'b0;

assign ap_ST_fsm_state197_blk = 1'b0;

assign ap_ST_fsm_state198_blk = 1'b0;

assign ap_ST_fsm_state199_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state200_blk = 1'b0;

assign ap_ST_fsm_state201_blk = 1'b0;

assign ap_ST_fsm_state202_blk = 1'b0;

assign ap_ST_fsm_state203_blk = 1'b0;

assign ap_ST_fsm_state204_blk = 1'b0;

assign ap_ST_fsm_state205_blk = 1'b0;

assign ap_ST_fsm_state206_blk = 1'b0;

assign ap_ST_fsm_state207_blk = 1'b0;

assign ap_ST_fsm_state208_blk = 1'b0;

assign ap_ST_fsm_state209_blk = 1'b0;

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state210_blk = 1'b0;

assign ap_ST_fsm_state211_blk = 1'b0;

assign ap_ST_fsm_state212_blk = 1'b0;

assign ap_ST_fsm_state213_blk = 1'b0;

assign ap_ST_fsm_state214_blk = 1'b0;

assign ap_ST_fsm_state215_blk = 1'b0;

assign ap_ST_fsm_state216_blk = 1'b0;

assign ap_ST_fsm_state217_blk = 1'b0;

assign ap_ST_fsm_state218_blk = 1'b0;

assign ap_ST_fsm_state219_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state220_blk = 1'b0;

assign ap_ST_fsm_state221_blk = 1'b0;

assign ap_ST_fsm_state222_blk = 1'b0;

assign ap_ST_fsm_state223_blk = 1'b0;

assign ap_ST_fsm_state224_blk = 1'b0;

assign ap_ST_fsm_state225_blk = 1'b0;

assign ap_ST_fsm_state226_blk = 1'b0;

assign ap_ST_fsm_state227_blk = 1'b0;

assign ap_ST_fsm_state228_blk = 1'b0;

assign ap_ST_fsm_state229_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state230_blk = 1'b0;

assign ap_ST_fsm_state231_blk = 1'b0;

assign ap_ST_fsm_state232_blk = 1'b0;

assign ap_ST_fsm_state233_blk = 1'b0;

assign ap_ST_fsm_state234_blk = 1'b0;

assign ap_ST_fsm_state235_blk = 1'b0;

assign ap_ST_fsm_state236_blk = 1'b0;

assign ap_ST_fsm_state237_blk = 1'b0;

assign ap_ST_fsm_state238_blk = 1'b0;

assign ap_ST_fsm_state239_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state240_blk = 1'b0;

assign ap_ST_fsm_state241_blk = 1'b0;

assign ap_ST_fsm_state242_blk = 1'b0;

always @ (*) begin
    if ((grp_update_weights_1_fu_1234_ap_done == 1'b0)) begin
        ap_ST_fsm_state243_blk = 1'b1;
    end else begin
        ap_ST_fsm_state243_blk = 1'b0;
    end
end

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

assign ap_ST_fsm_state82_blk = 1'b0;

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd0))) begin
        ap_phi_mux_activations3_0_9_phi_fu_1038_p6 = grp_fu_1295_p2;
    end else if (((~(i_31_reg_992 == 2'd1) & ~(i_31_reg_992 == 2'd0) & (1'b1 == ap_CS_fsm_state143)) | ((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd1)))) begin
        ap_phi_mux_activations3_0_9_phi_fu_1038_p6 = activations3_0_8_reg_981;
    end else begin
        ap_phi_mux_activations3_0_9_phi_fu_1038_p6 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd1))) begin
        ap_phi_mux_activations3_1_9_phi_fu_1023_p6 = grp_fu_1295_p2;
    end else if (((~(i_31_reg_992 == 2'd1) & ~(i_31_reg_992 == 2'd0) & (1'b1 == ap_CS_fsm_state143)) | ((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd0)))) begin
        ap_phi_mux_activations3_1_9_phi_fu_1023_p6 = activations3_1_8_reg_970;
    end else begin
        ap_phi_mux_activations3_1_9_phi_fu_1023_p6 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd1)) | ((1'b1 == ap_CS_fsm_state143) & (i_31_reg_992 == 2'd0)))) begin
        ap_phi_mux_activations3_2_9_phi_fu_1008_p6 = activations3_2_8_reg_959;
    end else if ((~(i_31_reg_992 == 2'd1) & ~(i_31_reg_992 == 2'd0) & (1'b1 == ap_CS_fsm_state143))) begin
        ap_phi_mux_activations3_2_9_phi_fu_1008_p6 = grp_fu_1295_p2;
    end else begin
        ap_phi_mux_activations3_2_9_phi_fu_1008_p6 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        biases1_address0 = zext_ln48_fu_1597_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        biases1_address0 = grp_update_weights_1_fu_1234_biases1_address0;
    end else begin
        biases1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        biases1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        biases1_ce0 = grp_update_weights_1_fu_1234_biases1_ce0;
    end else begin
        biases1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        biases1_we0 = grp_update_weights_1_fu_1234_biases1_we0;
    end else begin
        biases1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        biases2_address0 = zext_ln48_1_fu_1717_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        biases2_address0 = grp_update_weights_1_fu_1234_biases2_address0;
    end else begin
        biases2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        biases2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        biases2_ce0 = grp_update_weights_1_fu_1234_biases2_ce0;
    end else begin
        biases2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        biases2_we0 = grp_update_weights_1_fu_1234_biases2_we0;
    end else begin
        biases2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        biases3_address0 = zext_ln48_2_fu_1828_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        biases3_address0 = grp_update_weights_1_fu_1234_biases3_address0;
    end else begin
        biases3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        biases3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        biases3_ce0 = grp_update_weights_1_fu_1234_biases3_ce0;
    end else begin
        biases3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        biases3_we0 = grp_update_weights_1_fu_1234_biases3_we0;
    end else begin
        biases3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state222)) begin
        dactivations1_address0 = zext_ln174_reg_3152;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        dactivations1_address0 = zext_ln36_reg_2724;
    end else begin
        dactivations1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state222) | (1'b1 == ap_CS_fsm_state28))) begin
        dactivations1_ce0 = 1'b1;
    end else begin
        dactivations1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        dactivations1_we0 = 1'b1;
    end else begin
        dactivations1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        dactivations2_address0 = zext_ln141_reg_3050;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        dactivations2_address0 = zext_ln36_1_reg_2816;
    end else begin
        dactivations2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state75))) begin
        dactivations2_ce0 = 1'b1;
    end else begin
        dactivations2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        dactivations2_we0 = 1'b1;
    end else begin
        dactivations2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        delta_weights1_address0 = zext_ln196_fu_2486_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        delta_weights1_address0 = grp_update_weights_1_fu_1234_d_weights1_address0;
    end else begin
        delta_weights1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        delta_weights1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        delta_weights1_ce0 = grp_update_weights_1_fu_1234_d_weights1_ce0;
    end else begin
        delta_weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state242)) begin
        delta_weights1_we0 = 1'b1;
    end else begin
        delta_weights1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        delta_weights2_address0 = zext_ln163_fu_2330_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        delta_weights2_address0 = grp_update_weights_1_fu_1234_d_weights2_address0;
    end else begin
        delta_weights2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        delta_weights2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        delta_weights2_ce0 = grp_update_weights_1_fu_1234_d_weights2_ce0;
    end else begin
        delta_weights2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        delta_weights2_we0 = 1'b1;
    end else begin
        delta_weights2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state198)) begin
        delta_weights3_address0 = zext_ln130_fu_2189_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        delta_weights3_address0 = grp_update_weights_1_fu_1234_d_weights3_address0;
    end else begin
        delta_weights3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state198)) begin
        delta_weights3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        delta_weights3_ce0 = grp_update_weights_1_fu_1234_d_weights3_ce0;
    end else begin
        delta_weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state198)) begin
        delta_weights3_we0 = 1'b1;
    end else begin
        delta_weights3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1258_ce = grp_update_weights_1_fu_1234_grp_fu_1258_p_ce;
    end else begin
        grp_fu_1258_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1258_opcode = grp_update_weights_1_fu_1234_grp_fu_1258_p_opcode;
    end else if (((1'b1 == ap_CS_fsm_state185) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state136))) begin
        grp_fu_1258_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state205) | (1'b1 == ap_CS_fsm_state155) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1258_opcode = 2'd0;
    end else begin
        grp_fu_1258_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1258_p0 = grp_update_weights_1_fu_1234_grp_fu_1258_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state228)) begin
        grp_fu_1258_p0 = add113_i138_reg_1199;
    end else if ((1'b1 == ap_CS_fsm_state205)) begin
        grp_fu_1258_p0 = add113_i113_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state185)) begin
        grp_fu_1258_p0 = tmp_9_fu_2046_p5;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        grp_fu_1258_p0 = sum_reg_1060;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_fu_1258_p0 = tmp_5_fu_1833_p5;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        grp_fu_1258_p0 = activations3_0_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_1258_p0 = activations2_q0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_1258_p0 = add113_i16_reg_718;
    end else if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_1258_p0 = reg_1341;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state136))) begin
        grp_fu_1258_p0 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_1258_p0 = activations1_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_1258_p0 = add113_i_reg_660;
    end else begin
        grp_fu_1258_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1258_p1 = grp_update_weights_1_fu_1234_grp_fu_1258_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state185)) begin
        grp_fu_1258_p1 = bitcast_ln116_fu_2059_p1;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        grp_fu_1258_p1 = reg_1341;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_fu_1258_p1 = tmp_6_reg_2910;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_fu_1258_p1 = bitcast_ln50_2_fu_1846_p1;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        grp_fu_1258_p1 = activations2_q0;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        grp_fu_1258_p1 = bitcast_ln50_1_fu_1723_p1;
    end else if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_1258_p1 = 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_1258_p1 = activations1_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_1258_p1 = bitcast_ln50_fu_1603_p1;
    end else if (((1'b1 == ap_CS_fsm_state228) | (1'b1 == ap_CS_fsm_state205) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state11))) begin
        grp_fu_1258_p1 = reg_1321;
    end else begin
        grp_fu_1258_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1276_ce = grp_update_weights_1_fu_1234_grp_fu_1276_p_ce;
    end else begin
        grp_fu_1276_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1276_p0 = grp_update_weights_1_fu_1234_grp_fu_1276_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state239)) begin
        grp_fu_1276_p0 = empty_57_reg_3233;
    end else if ((1'b1 == ap_CS_fsm_state232)) begin
        grp_fu_1276_p0 = add113_i138_reg_1199;
    end else if ((1'b1 == ap_CS_fsm_state224)) begin
        grp_fu_1276_p0 = oracle_activations2_q0;
    end else if ((1'b1 == ap_CS_fsm_state209)) begin
        grp_fu_1276_p0 = add113_i113_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state201)) begin
        grp_fu_1276_p0 = tmp_11_fu_2258_p5;
    end else if ((1'b1 == ap_CS_fsm_state189)) begin
        grp_fu_1276_p0 = bitcast_ln116_2_fu_2083_p1;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_fu_1276_p0 = tmp_6_reg_2910;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_1276_p0 = bitcast_ln102_fu_1811_p1;
    end else if (((1'b1 == ap_CS_fsm_state195) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_fu_1276_p0 = reg_1358;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_1276_p0 = bitcast_ln84_fu_1700_p1;
    end else if (((1'b1 == ap_CS_fsm_state216) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_1276_p0 = reg_1327;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1276_p0 = bitcast_ln66_fu_1576_p1;
    end else begin
        grp_fu_1276_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1276_p1 = grp_update_weights_1_fu_1234_grp_fu_1276_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state239)) begin
        grp_fu_1276_p1 = oracle_activations1_q0;
    end else if ((1'b1 == ap_CS_fsm_state232)) begin
        grp_fu_1276_p1 = dactivations1_q0;
    end else if ((1'b1 == ap_CS_fsm_state224)) begin
        grp_fu_1276_p1 = bitcast_ln180_fu_2394_p1;
    end else if ((1'b1 == ap_CS_fsm_state216)) begin
        grp_fu_1276_p1 = oracle_activations2_q0;
    end else if ((1'b1 == ap_CS_fsm_state209)) begin
        grp_fu_1276_p1 = dactivations2_q0;
    end else if ((1'b1 == ap_CS_fsm_state201)) begin
        grp_fu_1276_p1 = bitcast_ln147_fu_2271_p1;
    end else if ((1'b1 == ap_CS_fsm_state195)) begin
        grp_fu_1276_p1 = tmp_10_fu_2171_p5;
    end else if ((1'b1 == ap_CS_fsm_state189)) begin
        grp_fu_1276_p1 = tmp_s_fu_2088_p5;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_fu_1276_p1 = sub_i2_reg_2922;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        grp_fu_1276_p1 = activations2_q0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_1276_p1 = activations1_q0;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_1276_p1 = reg_1335;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_1276_p1 = bitcast_ln66_1_fu_1581_p1;
    end else begin
        grp_fu_1276_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1295_ce = grp_update_weights_1_fu_1234_grp_fu_1295_p_ce;
    end else begin
        grp_fu_1295_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1295_p0 = grp_update_weights_1_fu_1234_grp_fu_1295_p_din0;
    end else if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_fu_1295_p0 = reg_1341;
    end else if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state36))) begin
        grp_fu_1295_p0 = 64'd4607182418800017408;
    end else begin
        grp_fu_1295_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        grp_fu_1295_p1 = grp_update_weights_1_fu_1234_grp_fu_1295_p_din1;
    end else if ((1'b1 == ap_CS_fsm_state170)) begin
        grp_fu_1295_p1 = sum_reg_1060;
    end else if (((1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state36))) begin
        grp_fu_1295_p1 = reg_1335;
    end else begin
        grp_fu_1295_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        grp_fu_1304_p1 = bitcast_ln29_1_fu_1991_p1;
    end else if ((1'b1 == ap_CS_fsm_state145)) begin
        grp_fu_1304_p1 = bitcast_ln24_1_fu_1937_p1;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        grp_fu_1304_p1 = bitcast_ln39_5_fu_1884_p1;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        grp_fu_1304_p1 = bitcast_ln39_3_fu_1755_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_1304_p1 = bitcast_ln39_1_fu_1635_p1;
    end else begin
        grp_fu_1304_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state238)) begin
        oracle_activations1_address0 = zext_ln194_fu_2472_p1;
    end else if ((1'b1 == ap_CS_fsm_state235)) begin
        oracle_activations1_address0 = oracle_activations1_addr_reg_3157;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        oracle_activations1_address0 = grp_update_weights_1_fu_1234_d_biases1_address0;
    end else begin
        oracle_activations1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state238) | (1'b1 == ap_CS_fsm_state235))) begin
        oracle_activations1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        oracle_activations1_ce0 = grp_update_weights_1_fu_1234_d_biases1_ce0;
    end else begin
        oracle_activations1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state235)) begin
        oracle_activations1_we0 = 1'b1;
    end else begin
        oracle_activations1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state223)) begin
        oracle_activations2_address0 = zext_ln178_fu_2389_p1;
    end else if ((1'b1 == ap_CS_fsm_state215)) begin
        oracle_activations2_address0 = zext_ln161_fu_2316_p1;
    end else if ((1'b1 == ap_CS_fsm_state212)) begin
        oracle_activations2_address0 = oracle_activations2_addr_reg_3055;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        oracle_activations2_address0 = grp_update_weights_1_fu_1234_d_biases2_address0;
    end else begin
        oracle_activations2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state215) | (1'b1 == ap_CS_fsm_state223) | (1'b1 == ap_CS_fsm_state212))) begin
        oracle_activations2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        oracle_activations2_ce0 = grp_update_weights_1_fu_1234_d_biases2_ce0;
    end else begin
        oracle_activations2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state212)) begin
        oracle_activations2_we0 = 1'b1;
    end else begin
        oracle_activations2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state236)) begin
        training_data_address0 = arrayidx10_sum197_cast_fu_2420_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        training_data_address0 = zext_ln66_1_fu_1567_p1;
    end else begin
        training_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state236) | (1'b1 == ap_CS_fsm_state5))) begin
        training_data_ce0 = 1'b1;
    end else begin
        training_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state184)) begin
        training_targets_ce0 = 1'b1;
    end else begin
        training_targets_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights1_address0 = zext_ln66_fu_1572_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        weights1_address0 = grp_update_weights_1_fu_1234_weights1_address0;
    end else begin
        weights1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        weights1_ce0 = grp_update_weights_1_fu_1234_weights1_ce0;
    end else begin
        weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        weights1_we0 = grp_update_weights_1_fu_1234_weights1_we0;
    end else begin
        weights1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state222)) begin
        weights2_address0 = zext_ln180_fu_2384_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        weights2_address0 = zext_ln84_fu_1690_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        weights2_address0 = grp_update_weights_1_fu_1234_weights2_address0;
    end else begin
        weights2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state222) | (1'b1 == ap_CS_fsm_state52))) begin
        weights2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        weights2_ce0 = grp_update_weights_1_fu_1234_weights2_ce0;
    end else begin
        weights2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        weights2_we0 = grp_update_weights_1_fu_1234_weights2_we0;
    end else begin
        weights2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        weights3_address0 = zext_ln147_fu_2253_p1;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        weights3_address0 = zext_ln102_2_fu_1806_p1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        weights3_address0 = grp_update_weights_1_fu_1234_weights3_address0;
    end else begin
        weights3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state99))) begin
        weights3_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state243)) begin
        weights3_ce0 = grp_update_weights_1_fu_1234_weights3_ce0;
    end else begin
        weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state243)) begin
        weights3_we0 = grp_update_weights_1_fu_1234_weights3_we0;
    end else begin
        weights3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln356_fu_1403_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln359_fu_1419_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_1519_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_1536_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln48_fu_1585_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln36_fu_1608_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln78_fu_1640_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln82_fu_1669_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state62 : begin
            if (((1'b1 == ap_CS_fsm_state62) & (icmp_ln48_1_fu_1705_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (icmp_ln36_1_fu_1728_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state98 : begin
            if (((1'b1 == ap_CS_fsm_state98) & (icmp_ln96_fu_1760_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state109;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state99 : begin
            if (((1'b1 == ap_CS_fsm_state99) & (icmp_ln100_fu_1780_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state108;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state109 : begin
            if (((1'b1 == ap_CS_fsm_state109) & (icmp_ln48_2_fu_1816_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state115;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state115 : begin
            if (((1'b1 == ap_CS_fsm_state115) & (icmp_ln36_2_fu_1851_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state116;
            end
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (icmp_ln22_fu_1904_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state159 : begin
            if (((1'b1 == ap_CS_fsm_state159) & (icmp_ln27_fu_1942_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state184;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state184 : begin
            if (((1'b1 == ap_CS_fsm_state184) & (icmp_ln114_fu_2011_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state193;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state185;
            end
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state193 : begin
            if (((1'b1 == ap_CS_fsm_state193) & (icmp_ln125_fu_2116_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state199;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state194;
            end
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            if (((1'b1 == ap_CS_fsm_state195) & (icmp_ln128_fu_2155_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state193;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state196;
            end
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state199 : begin
            if (((1'b1 == ap_CS_fsm_state199) & (icmp_ln141_fu_2193_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state213;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state200;
            end
        end
        ap_ST_fsm_state200 : begin
            if (((1'b1 == ap_CS_fsm_state200) & (icmp_ln145_fu_2232_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state209;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state201;
            end
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state213 : begin
            if (((1'b1 == ap_CS_fsm_state213) & (icmp_ln158_fu_2276_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state221;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state214;
            end
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            if (((1'b1 == ap_CS_fsm_state215) & (icmp_ln161_fu_2304_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state213;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state216;
            end
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state221 : begin
            if (((1'b1 == ap_CS_fsm_state221) & (icmp_ln174_fu_2334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state236;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state222;
            end
        end
        ap_ST_fsm_state222 : begin
            if (((1'b1 == ap_CS_fsm_state222) & (icmp_ln178_fu_2363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state232;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state223;
            end
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state236 : begin
            if (((1'b1 == ap_CS_fsm_state236) & (icmp_ln191_fu_2399_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state243;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state237;
            end
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            if (((1'b1 == ap_CS_fsm_state238) & (icmp_ln194_fu_2460_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state236;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state239;
            end
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state243 : begin
            if (((1'b1 == ap_CS_fsm_state243) & (grp_update_weights_1_fu_1234_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state243;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_1786_p2 = (i_19_reg_798 + 7'd1);

assign add_ln102_fu_1801_p2 = (zext_ln102_1_fu_1797_p1 + tmp_13_reg_2839);

assign add_ln114_fu_2017_p2 = (i_34_reg_1084 + 2'd1);

assign add_ln116_fu_2027_p2 = (zext_ln114_fu_2023_p1 + sub_ln374_reg_2963);

assign add_ln125_fu_2122_p2 = (i_24_reg_1096 + 7'd1);

assign add_ln128_fu_2161_p2 = (j_9_reg_1108 + 2'd1);

assign add_ln130_fu_2184_p2 = (zext_ln128_fu_2167_p1 + empty_52_reg_3019);

assign add_ln141_fu_2199_p2 = (i_25_reg_1119 + 7'd1);

assign add_ln145_fu_2238_p2 = (j_10_reg_1130 + 2'd1);

assign add_ln147_fu_2248_p2 = (zext_ln145_fu_2244_p1 + empty_54_reg_3060);

assign add_ln158_fu_2282_p2 = (i_26_reg_1154 + 7'd1);

assign add_ln161_fu_2310_p2 = (j_11_reg_1165 + 7'd1);

assign add_ln163_fu_2325_p2 = (zext_ln161_1_fu_2321_p1 + tmp_14_reg_3121);

assign add_ln174_fu_2340_p2 = (i_27_reg_1176 + 7'd1);

assign add_ln178_fu_2369_p2 = (j_12_reg_1187 + 7'd1);

assign add_ln180_fu_2379_p2 = (zext_ln178_1_fu_2375_p1 + tmp_15_reg_3162);

assign add_ln191_fu_2405_p2 = (i_28_reg_1211 + 4'd1);

assign add_ln194_fu_2466_p2 = (j_13_reg_1223 + 7'd1);

assign add_ln196_fu_2481_p2 = (zext_ln194_1_fu_2477_p1 + tmp_16_reg_3238);

assign add_ln22_fu_1910_p2 = (i_32_reg_1049 + 2'd1);

assign add_ln27_fu_1948_p2 = (i_33_reg_1072 + 2'd1);

assign add_ln356_1_fu_1397_p2 = (phi_mul1_fu_154 + 12'd13);

assign add_ln356_fu_1409_p2 = (i_fu_158 + 8'd1);

assign add_ln359_fu_1425_p2 = (j_reg_615 + 7'd1);

assign add_ln36_1_fu_1734_p2 = (i_17_reg_742 + 7'd1);

assign add_ln36_2_fu_1857_p2 = (i_31_reg_992 + 2'd1);

assign add_ln36_fu_1614_p2 = (i_14_reg_684 + 7'd1);

assign add_ln48_1_fu_1711_p2 = (i_16_reg_731 + 7'd1);

assign add_ln48_2_fu_1822_p2 = (i_30_reg_902 + 2'd1);

assign add_ln48_fu_1591_p2 = (i_12_reg_673 + 7'd1);

assign add_ln60_1_fu_1513_p2 = (phi_mul_reg_637 + 10'd13);

assign add_ln60_fu_1525_p2 = (j_6_reg_626 + 7'd1);

assign add_ln64_fu_1542_p2 = (i_13_reg_649 + 4'd1);

assign add_ln66_1_fu_1562_p2 = (zext_ln64_fu_1548_p1 + phi_mul1_fu_154);

assign add_ln66_fu_1556_p2 = (zext_ln64_1_fu_1552_p1 + phi_mul_reg_637);

assign add_ln78_fu_1646_p2 = (i_15_reg_695 + 7'd1);

assign add_ln82_fu_1675_p2 = (j_7_reg_706 + 7'd1);

assign add_ln84_fu_1685_p2 = (zext_ln82_1_fu_1681_p1 + tmp_12_reg_2752);

assign add_ln96_fu_1766_p2 = (j_8_reg_786 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state183 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state184 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state185 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state188 = ap_CS_fsm[32'd187];

assign ap_CS_fsm_state189 = ap_CS_fsm[32'd188];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state192 = ap_CS_fsm[32'd191];

assign ap_CS_fsm_state193 = ap_CS_fsm[32'd192];

assign ap_CS_fsm_state194 = ap_CS_fsm[32'd193];

assign ap_CS_fsm_state195 = ap_CS_fsm[32'd194];

assign ap_CS_fsm_state198 = ap_CS_fsm[32'd197];

assign ap_CS_fsm_state199 = ap_CS_fsm[32'd198];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state200 = ap_CS_fsm[32'd199];

assign ap_CS_fsm_state201 = ap_CS_fsm[32'd200];

assign ap_CS_fsm_state204 = ap_CS_fsm[32'd203];

assign ap_CS_fsm_state205 = ap_CS_fsm[32'd204];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd207];

assign ap_CS_fsm_state209 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state212 = ap_CS_fsm[32'd211];

assign ap_CS_fsm_state213 = ap_CS_fsm[32'd212];

assign ap_CS_fsm_state214 = ap_CS_fsm[32'd213];

assign ap_CS_fsm_state215 = ap_CS_fsm[32'd214];

assign ap_CS_fsm_state216 = ap_CS_fsm[32'd215];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state221 = ap_CS_fsm[32'd220];

assign ap_CS_fsm_state222 = ap_CS_fsm[32'd221];

assign ap_CS_fsm_state223 = ap_CS_fsm[32'd222];

assign ap_CS_fsm_state224 = ap_CS_fsm[32'd223];

assign ap_CS_fsm_state227 = ap_CS_fsm[32'd226];

assign ap_CS_fsm_state228 = ap_CS_fsm[32'd227];

assign ap_CS_fsm_state231 = ap_CS_fsm[32'd230];

assign ap_CS_fsm_state232 = ap_CS_fsm[32'd231];

assign ap_CS_fsm_state235 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state236 = ap_CS_fsm[32'd235];

assign ap_CS_fsm_state237 = ap_CS_fsm[32'd236];

assign ap_CS_fsm_state238 = ap_CS_fsm[32'd237];

assign ap_CS_fsm_state239 = ap_CS_fsm[32'd238];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state242 = ap_CS_fsm[32'd241];

assign ap_CS_fsm_state243 = ap_CS_fsm[32'd242];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign arrayidx10_sum197_cast_fu_2420_p1 = arrayidx10_sum197_fu_2415_p2;

assign arrayidx10_sum197_fu_2415_p2 = (zext_ln191_fu_2411_p1 + phi_mul1_fu_154);

assign biases1_d0 = grp_update_weights_1_fu_1234_biases1_d0;

assign biases2_d0 = grp_update_weights_1_fu_1234_biases2_d0;

assign biases3_d0 = grp_update_weights_1_fu_1234_biases3_d0;

assign bitcast_ln102_fu_1811_p1 = weights3_q0;

assign bitcast_ln116_1_fu_2073_p1 = reg_1335;

assign bitcast_ln116_2_fu_2083_p1 = xor_ln116_fu_2077_p2;

assign bitcast_ln116_fu_2059_p1 = training_targets_q0;

assign bitcast_ln147_fu_2271_p1 = weights3_q0;

assign bitcast_ln180_fu_2394_p1 = reg_1354;

assign bitcast_ln24_1_fu_1937_p1 = xor_ln24_fu_1931_p2;

assign bitcast_ln24_fu_1928_p1 = tmp_7_reg_2935;

assign bitcast_ln29_1_fu_1991_p1 = xor_ln29_fu_1985_p2;

assign bitcast_ln29_fu_1982_p1 = tmp_8_reg_2958;

assign bitcast_ln39_1_fu_1635_p1 = xor_ln39_fu_1629_p2;

assign bitcast_ln39_2_fu_1745_p1 = reg_1358;

assign bitcast_ln39_3_fu_1755_p1 = xor_ln39_1_fu_1749_p2;

assign bitcast_ln39_4_fu_1875_p1 = tmp_6_reg_2910;

assign bitcast_ln39_5_fu_1884_p1 = xor_ln39_2_fu_1878_p2;

assign bitcast_ln39_fu_1625_p1 = reg_1327;

assign bitcast_ln50_1_fu_1723_p1 = biases2_q0;

assign bitcast_ln50_2_fu_1846_p1 = biases3_q0;

assign bitcast_ln50_fu_1603_p1 = biases1_q0;

assign bitcast_ln66_1_fu_1581_p1 = training_data_load_reg_2673;

assign bitcast_ln66_fu_1576_p1 = weights1_q0;

assign bitcast_ln84_fu_1700_p1 = reg_1354;

assign empty_51_fu_2137_p1 = i_24_reg_1096[5:0];

assign empty_52_fu_2149_p2 = (p_shl1_fu_2141_p3 - zext_ln125_1_fu_2133_p1);

assign empty_53_fu_2214_p1 = i_25_reg_1119[5:0];

assign empty_54_fu_2226_p2 = (p_shl2_fu_2218_p3 - zext_ln141_1_fu_2210_p1);

assign empty_55_fu_2293_p1 = i_26_reg_1154[5:0];

assign empty_56_fu_2351_p1 = i_27_reg_1176[5:0];

assign empty_57_fu_2448_p1 = training_data_q0;

assign empty_fu_1657_p1 = i_15_reg_695[5:0];

assign grp_update_weights_1_fu_1234_ap_start = grp_update_weights_1_fu_1234_ap_start_reg;

assign icmp_ln100_fu_1780_p2 = ((i_19_reg_798 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_2011_p2 = ((i_34_reg_1084 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_2116_p2 = ((i_24_reg_1096 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_2155_p2 = ((j_9_reg_1108 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln141_fu_2193_p2 = ((i_25_reg_1119 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_2232_p2 = ((j_10_reg_1130 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_2276_p2 = ((i_26_reg_1154 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_2304_p2 = ((j_11_reg_1165 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln174_fu_2334_p2 = ((i_27_reg_1176 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_2363_p2 = ((j_12_reg_1187 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_2399_p2 = ((i_28_reg_1211 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_2460_p2 = ((j_13_reg_1223 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_1904_p2 = ((i_32_reg_1049 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_1942_p2 = ((i_33_reg_1072 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_1403_p2 = ((i_fu_158 == 8'd163) ? 1'b1 : 1'b0);

assign icmp_ln359_fu_1419_p2 = ((j_reg_615 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln363_fu_1437_p2 = ((j_reg_615 < 7'd3) ? 1'b1 : 1'b0);

assign icmp_ln364_1_fu_1453_p2 = ((trunc_ln364_fu_1443_p1 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln364_fu_1447_p2 = ((trunc_ln364_fu_1443_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_1728_p2 = ((i_17_reg_742 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_1851_p2 = ((i_31_reg_992 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1608_p2 = ((i_14_reg_684 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_1705_p2 = ((i_16_reg_731 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_1816_p2 = ((i_30_reg_902 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_1585_p2 = ((i_12_reg_673 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1519_p2 = ((j_6_reg_626 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_1536_p2 = ((i_13_reg_649 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1640_p2 = ((i_15_reg_695 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_1669_p2 = ((j_7_reg_706 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_1760_p2 = ((j_8_reg_786 == 2'd3) ? 1'b1 : 1'b0);

assign or_ln364_fu_1459_p2 = (icmp_ln364_fu_1447_p2 | icmp_ln364_1_fu_1453_p2);

assign p_shl1_fu_2141_p3 = {{empty_51_fu_2137_p1}, {2'd0}};

assign p_shl2_fu_2218_p3 = {{empty_53_fu_2214_p1}, {2'd0}};

assign select_ln363_1_fu_1497_p3 = ((icmp_ln363_fu_1437_p2[0:0] == 1'b1) ? select_ln364_1_fu_1473_p3 : activations3_1_1_reg_595);

assign select_ln363_2_fu_1505_p3 = ((icmp_ln363_fu_1437_p2[0:0] == 1'b1) ? select_ln364_2_fu_1481_p3 : activations3_0_1_reg_605);

assign select_ln363_fu_1489_p3 = ((icmp_ln363_fu_1437_p2[0:0] == 1'b1) ? select_ln364_fu_1465_p3 : activations3_2_1_reg_585);

assign select_ln364_1_fu_1473_p3 = ((icmp_ln364_1_fu_1453_p2[0:0] == 1'b1) ? 64'd0 : activations3_1_1_reg_595);

assign select_ln364_2_fu_1481_p3 = ((icmp_ln364_fu_1447_p2[0:0] == 1'b1) ? 64'd0 : activations3_0_1_reg_605);

assign select_ln364_fu_1465_p3 = ((or_ln364_fu_1459_p2[0:0] == 1'b1) ? activations3_2_1_reg_585 : 64'd0);

assign shl_ln_fu_1969_p3 = {{trunc_ln374_fu_1966_p1}, {2'd0}};

assign sub_ln374_fu_1977_p2 = (shl_ln_fu_1969_p3 - zext_ln356_reg_2604);

assign tmp_12_fu_1661_p3 = {{empty_fu_1657_p1}, {6'd0}};

assign tmp_13_fu_1772_p3 = {{j_8_reg_786}, {6'd0}};

assign tmp_14_fu_2297_p3 = {{empty_55_reg_3116}, {6'd0}};

assign tmp_15_fu_2355_p3 = {{empty_56_fu_2351_p1}, {6'd0}};

assign tmp_16_fu_2452_p3 = {{i_28_reg_1211}, {6'd0}};

assign training_targets_address0 = zext_ln116_fu_2032_p1;

assign trunc_ln364_fu_1443_p1 = j_reg_615[1:0];

assign trunc_ln374_fu_1966_p1 = i_fu_158[6:0];

assign weights1_d0 = grp_update_weights_1_fu_1234_weights1_d0;

assign weights2_d0 = grp_update_weights_1_fu_1234_weights2_d0;

assign weights3_d0 = grp_update_weights_1_fu_1234_weights3_d0;

assign xor_ln116_fu_2077_p2 = (bitcast_ln116_1_fu_2073_p1 ^ 64'd9223372036854775808);

assign xor_ln24_fu_1931_p2 = (bitcast_ln24_fu_1928_p1 ^ 64'd9223372036854775808);

assign xor_ln29_fu_1985_p2 = (bitcast_ln29_fu_1982_p1 ^ 64'd9223372036854775808);

assign xor_ln39_1_fu_1749_p2 = (bitcast_ln39_2_fu_1745_p1 ^ 64'd9223372036854775808);

assign xor_ln39_2_fu_1878_p2 = (bitcast_ln39_4_fu_1875_p1 ^ 64'd9223372036854775808);

assign xor_ln39_fu_1629_p2 = (bitcast_ln39_fu_1625_p1 ^ 64'd9223372036854775808);

assign zext_ln102_1_fu_1797_p1 = i_19_reg_798;

assign zext_ln102_2_fu_1806_p1 = add_ln102_fu_1801_p2;

assign zext_ln102_fu_1792_p1 = i_19_reg_798;

assign zext_ln114_fu_2023_p1 = i_34_reg_1084;

assign zext_ln116_fu_2032_p1 = add_ln116_fu_2027_p2;

assign zext_ln125_1_fu_2133_p1 = i_24_reg_1096;

assign zext_ln125_fu_2128_p1 = i_24_reg_1096;

assign zext_ln128_fu_2167_p1 = j_9_reg_1108;

assign zext_ln130_fu_2189_p1 = add_ln130_reg_3037;

assign zext_ln141_1_fu_2210_p1 = i_25_reg_1119;

assign zext_ln141_fu_2205_p1 = i_25_reg_1119;

assign zext_ln145_fu_2244_p1 = j_10_reg_1130;

assign zext_ln147_fu_2253_p1 = add_ln147_fu_2248_p2;

assign zext_ln158_fu_2288_p1 = i_26_reg_1154;

assign zext_ln161_1_fu_2321_p1 = j_11_reg_1165;

assign zext_ln161_fu_2316_p1 = j_11_reg_1165;

assign zext_ln163_fu_2330_p1 = add_ln163_reg_3139;

assign zext_ln174_fu_2346_p1 = i_27_reg_1176;

assign zext_ln178_1_fu_2375_p1 = j_12_reg_1187;

assign zext_ln178_fu_2389_p1 = j_12_reg_1187;

assign zext_ln180_fu_2384_p1 = add_ln180_fu_2379_p2;

assign zext_ln191_fu_2411_p1 = i_28_reg_1211;

assign zext_ln194_1_fu_2477_p1 = j_13_reg_1223;

assign zext_ln194_fu_2472_p1 = j_13_reg_1223;

assign zext_ln196_fu_2486_p1 = add_ln196_reg_3256;

assign zext_ln356_fu_1415_p1 = i_fu_158;

assign zext_ln359_fu_1431_p1 = j_reg_615;

assign zext_ln36_1_fu_1740_p1 = i_17_reg_742;

assign zext_ln36_fu_1620_p1 = i_14_reg_684;

assign zext_ln48_1_fu_1717_p1 = i_16_reg_731;

assign zext_ln48_2_fu_1828_p1 = i_30_reg_902;

assign zext_ln48_fu_1597_p1 = i_12_reg_673;

assign zext_ln60_fu_1531_p1 = j_6_reg_626;

assign zext_ln64_1_fu_1552_p1 = i_13_reg_649;

assign zext_ln64_fu_1548_p1 = i_13_reg_649;

assign zext_ln66_1_fu_1567_p1 = add_ln66_1_fu_1562_p2;

assign zext_ln66_fu_1572_p1 = add_ln66_reg_2658;

assign zext_ln78_fu_1652_p1 = i_15_reg_695;

assign zext_ln82_1_fu_1681_p1 = j_7_reg_706;

assign zext_ln82_fu_1695_p1 = j_7_reg_706;

assign zext_ln84_fu_1690_p1 = add_ln84_fu_1685_p2;

always @ (posedge ap_clk) begin
    zext_ln356_reg_2604[8] <= 1'b0;
    zext_ln36_reg_2724[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_12_reg_2752[5:0] <= 6'b000000;
    zext_ln36_1_reg_2816[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_13_reg_2839[5:0] <= 6'b000000;
    zext_ln141_reg_3050[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_14_reg_3121[5:0] <= 6'b000000;
    zext_ln174_reg_3152[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_15_reg_3162[5:0] <= 6'b000000;
    tmp_16_reg_3238[5:0] <= 6'b000000;
end

endmodule //backprop
