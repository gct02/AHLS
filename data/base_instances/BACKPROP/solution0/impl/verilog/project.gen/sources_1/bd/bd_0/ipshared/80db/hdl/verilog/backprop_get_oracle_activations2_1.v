// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_get_oracle_activations2_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        weights3_address0,
        weights3_ce0,
        weights3_q0,
        p_read,
        p_read1,
        p_read2,
        oracle_activations_address0,
        oracle_activations_ce0,
        oracle_activations_we0,
        oracle_activations_d0,
        dactivations_address0,
        dactivations_ce0,
        dactivations_q0,
        grp_fu_986_p_din0,
        grp_fu_986_p_din1,
        grp_fu_986_p_opcode,
        grp_fu_986_p_dout0,
        grp_fu_986_p_ce,
        grp_fu_1006_p_din0,
        grp_fu_1006_p_din1,
        grp_fu_1006_p_dout0,
        grp_fu_1006_p_ce
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] weights3_address0;
output   weights3_ce0;
input  [63:0] weights3_q0;
input  [63:0] p_read;
input  [63:0] p_read1;
input  [63:0] p_read2;
output  [5:0] oracle_activations_address0;
output   oracle_activations_ce0;
output   oracle_activations_we0;
output  [63:0] oracle_activations_d0;
output  [5:0] dactivations_address0;
output   dactivations_ce0;
input  [63:0] dactivations_q0;
output  [63:0] grp_fu_986_p_din0;
output  [63:0] grp_fu_986_p_din1;
output  [0:0] grp_fu_986_p_opcode;
input  [63:0] grp_fu_986_p_dout0;
output   grp_fu_986_p_ce;
output  [63:0] grp_fu_1006_p_din0;
output  [63:0] grp_fu_1006_p_din1;
input  [63:0] grp_fu_1006_p_dout0;
output   grp_fu_1006_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights3_ce0;
reg oracle_activations_ce0;
reg oracle_activations_we0;
reg dactivations_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln141_fu_167_p2;
reg   [6:0] add_ln141_reg_269;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln141_fu_173_p1;
reg   [63:0] zext_ln141_reg_274;
reg   [5:0] oracle_activations_addr_reg_279;
wire   [7:0] empty_51_fu_194_p2;
reg   [7:0] empty_51_reg_284;
wire   [1:0] add_ln145_fu_206_p2;
reg   [1:0] add_ln145_reg_292;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_fu_216_p5;
reg   [63:0] tmp_reg_297;
wire   [63:0] bitcast_ln147_fu_239_p1;
wire    ap_CS_fsm_state4;
reg   [63:0] mul8_reg_317;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg   [1:0] j_reg_118;
wire   [0:0] icmp_ln141_fu_161_p2;
reg   [63:0] add113_reg_129;
wire   [63:0] zext_ln147_fu_230_p1;
wire   [0:0] icmp_ln145_fu_200_p2;
reg   [6:0] i_fu_58;
wire    ap_CS_fsm_state15;
reg   [63:0] grp_fu_146_p0;
reg   [63:0] grp_fu_146_p1;
wire   [5:0] empty_fu_182_p1;
wire   [7:0] p_shl_fu_186_p3;
wire   [7:0] zext_ln141_1_fu_178_p1;
wire   [7:0] zext_ln145_fu_212_p1;
wire   [7:0] add_ln147_fu_225_p2;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 i_fu_58 = 7'd0;
end

backprop_mux_3_2_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 64 ))
mux_3_2_64_1_1_U124(
    .din0(p_read),
    .din1(p_read1),
    .din2(p_read2),
    .din3(j_reg_118),
    .dout(tmp_fu_216_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_161_p2 == 1'd0))) begin
        add113_reg_129 <= 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        add113_reg_129 <= grp_fu_986_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_58 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln145_fu_200_p2 == 1'd1))) begin
        i_fu_58 <= add_ln141_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_161_p2 == 1'd0))) begin
        j_reg_118 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_118 <= add_ln145_reg_292;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln141_reg_269 <= add_ln141_fu_167_p2;
        empty_51_reg_284 <= empty_51_fu_194_p2;
        oracle_activations_addr_reg_279 <= zext_ln141_fu_173_p1;
        zext_ln141_reg_274[6 : 0] <= zext_ln141_fu_173_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln145_reg_292 <= add_ln145_fu_206_p2;
        tmp_reg_297 <= tmp_fu_216_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul8_reg_317 <= grp_fu_1006_p_dout0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_161_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_161_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dactivations_ce0 = 1'b1;
    end else begin
        dactivations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_146_p0 = add113_reg_129;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_146_p0 = tmp_reg_297;
    end else begin
        grp_fu_146_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_146_p1 = dactivations_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_146_p1 = bitcast_ln147_fu_239_p1;
    end else begin
        grp_fu_146_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        oracle_activations_ce0 = 1'b1;
    end else begin
        oracle_activations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        oracle_activations_we0 = 1'b1;
    end else begin
        oracle_activations_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weights3_ce0 = 1'b1;
    end else begin
        weights3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln141_fu_161_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln145_fu_200_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln141_fu_167_p2 = (i_fu_58 + 7'd1);

assign add_ln145_fu_206_p2 = (j_reg_118 + 2'd1);

assign add_ln147_fu_225_p2 = (zext_ln145_fu_212_p1 + empty_51_reg_284);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln147_fu_239_p1 = weights3_q0;

assign dactivations_address0 = zext_ln141_reg_274;

assign empty_51_fu_194_p2 = (p_shl_fu_186_p3 - zext_ln141_1_fu_178_p1);

assign empty_fu_182_p1 = i_fu_58[5:0];

assign grp_fu_1006_p_ce = 1'b1;

assign grp_fu_1006_p_din0 = grp_fu_146_p0;

assign grp_fu_1006_p_din1 = grp_fu_146_p1;

assign grp_fu_986_p_ce = 1'b1;

assign grp_fu_986_p_din0 = add113_reg_129;

assign grp_fu_986_p_din1 = mul8_reg_317;

assign grp_fu_986_p_opcode = 2'd0;

assign icmp_ln141_fu_161_p2 = ((i_fu_58 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_200_p2 = ((j_reg_118 == 2'd3) ? 1'b1 : 1'b0);

assign oracle_activations_address0 = oracle_activations_addr_reg_279;

assign oracle_activations_d0 = grp_fu_1006_p_dout0;

assign p_shl_fu_186_p3 = {{empty_fu_182_p1}, {2'd0}};

assign weights3_address0 = zext_ln147_fu_230_p1;

assign zext_ln141_1_fu_178_p1 = i_fu_58;

assign zext_ln141_fu_173_p1 = i_fu_58;

assign zext_ln145_fu_212_p1 = j_reg_118;

assign zext_ln147_fu_230_p1 = add_ln147_fu_225_p2;

always @ (posedge ap_clk) begin
    zext_ln141_reg_274[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //backprop_get_oracle_activations2_1
