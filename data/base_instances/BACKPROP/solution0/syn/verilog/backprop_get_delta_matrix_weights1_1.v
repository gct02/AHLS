// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module backprop_get_delta_matrix_weights1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        delta_weights1_address0,
        delta_weights1_ce0,
        delta_weights1_we0,
        delta_weights1_d0,
        output_difference_address0,
        output_difference_ce0,
        output_difference_q0,
        training_data_address0,
        training_data_ce0,
        training_data_q0,
        idx,
        grp_fu_990_p_din0,
        grp_fu_990_p_din1,
        grp_fu_990_p_dout0,
        grp_fu_990_p_ce
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] delta_weights1_address0;
output   delta_weights1_ce0;
output   delta_weights1_we0;
output  [63:0] delta_weights1_d0;
output  [5:0] output_difference_address0;
output   output_difference_ce0;
input  [63:0] output_difference_q0;
output  [11:0] training_data_address0;
output   training_data_ce0;
input  [63:0] training_data_q0;
input  [11:0] idx;
output  [63:0] grp_fu_990_p_din0;
output  [63:0] grp_fu_990_p_din1;
input  [63:0] grp_fu_990_p_dout0;
output   grp_fu_990_p_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg delta_weights1_ce0;
reg delta_weights1_we0;
reg output_difference_ce0;
reg training_data_ce0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] add_ln191_fu_132_p2;
reg   [3:0] add_ln191_reg_215;
wire    ap_CS_fsm_state2;
wire   [63:0] empty_fu_152_p1;
reg   [63:0] empty_reg_225;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_fu_156_p3;
reg   [9:0] tmp_reg_230;
wire   [6:0] add_ln194_fu_169_p2;
reg   [6:0] add_ln194_reg_238;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln196_fu_184_p2;
reg   [9:0] add_ln196_reg_248;
reg   [6:0] j_reg_101;
wire    ap_CS_fsm_state8;
wire   [63:0] p_sum_cast_fu_147_p1;
wire   [0:0] icmp_ln191_fu_126_p2;
wire   [63:0] zext_ln194_fu_175_p1;
wire   [0:0] icmp_ln194_fu_163_p2;
wire   [63:0] zext_ln196_fu_193_p1;
reg   [3:0] i_fu_52;
wire   [11:0] zext_ln191_fu_138_p1;
wire   [11:0] p_sum_fu_142_p2;
wire   [9:0] zext_ln194_1_fu_180_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 i_fu_52 = 4'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_52 <= 4'd0;
    end else if (((icmp_ln194_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_52 <= add_ln191_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_101 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_101 <= add_ln194_reg_238;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln191_reg_215 <= add_ln191_fu_132_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln194_reg_238 <= add_ln194_fu_169_p2;
        add_ln196_reg_248 <= add_ln196_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_reg_225 <= empty_fu_152_p1;
        tmp_reg_230[9 : 6] <= tmp_fu_156_p3[9 : 6];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) | ((icmp_ln191_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln191_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        delta_weights1_ce0 = 1'b1;
    end else begin
        delta_weights1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        delta_weights1_we0 = 1'b1;
    end else begin
        delta_weights1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_difference_ce0 = 1'b1;
    end else begin
        output_difference_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        training_data_ce0 = 1'b1;
    end else begin
        training_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln191_fu_126_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln194_fu_163_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln191_fu_132_p2 = (i_fu_52 + 4'd1);

assign add_ln194_fu_169_p2 = (j_reg_101 + 7'd1);

assign add_ln196_fu_184_p2 = (zext_ln194_1_fu_180_p1 + tmp_reg_230);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign delta_weights1_address0 = zext_ln196_fu_193_p1;

assign delta_weights1_d0 = grp_fu_990_p_dout0;

assign empty_fu_152_p1 = training_data_q0;

assign grp_fu_990_p_ce = 1'b1;

assign grp_fu_990_p_din0 = empty_reg_225;

assign grp_fu_990_p_din1 = output_difference_q0;

assign icmp_ln191_fu_126_p2 = ((i_fu_52 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_163_p2 = ((j_reg_101 == 7'd64) ? 1'b1 : 1'b0);

assign output_difference_address0 = zext_ln194_fu_175_p1;

assign p_sum_cast_fu_147_p1 = p_sum_fu_142_p2;

assign p_sum_fu_142_p2 = (zext_ln191_fu_138_p1 + idx);

assign tmp_fu_156_p3 = {{i_fu_52}, {6'd0}};

assign training_data_address0 = p_sum_cast_fu_147_p1;

assign zext_ln191_fu_138_p1 = i_fu_52;

assign zext_ln194_1_fu_180_p1 = j_reg_101;

assign zext_ln194_fu_175_p1 = j_reg_101;

assign zext_ln196_fu_193_p1 = add_ln196_reg_248;

always @ (posedge ap_clk) begin
    tmp_reg_230[5:0] <= 6'b000000;
end

endmodule //backprop_get_delta_matrix_weights1_1
