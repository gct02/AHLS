-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_get_oracle_activations1_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights2_ce0 : OUT STD_LOGIC;
    weights2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_differences_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_differences_ce0 : OUT STD_LOGIC;
    output_differences_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    oracle_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    oracle_activations_ce0 : OUT STD_LOGIC;
    oracle_activations_we0 : OUT STD_LOGIC;
    oracle_activations_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    dactivations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dactivations_ce0 : OUT STD_LOGIC;
    dactivations_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_986_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_ce : OUT STD_LOGIC;
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_get_oracle_activations1_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln174_fu_150_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln174_reg_222 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln174_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln174_reg_227 : STD_LOGIC_VECTOR (63 downto 0);
    signal oracle_activations_addr_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_165_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_reg_237 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln178_fu_179_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln178_reg_245 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal weights2_load_reg_265 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bitcast_ln180_fu_208_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul8_reg_280 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_reg_99 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln174_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add113_reg_111 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_fu_194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln178_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln178_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_44 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_161_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln178_1_fu_185_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln180_fu_189_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    add113_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_144_p2 = ap_const_lv1_0))) then 
                add113_reg_111 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                add113_reg_111 <= grp_fu_986_p_dout0;
            end if; 
        end if;
    end process;

    i_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_44 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln178_fu_173_p2 = ap_const_lv1_1))) then 
                i_fu_44 <= add_ln174_reg_222;
            end if; 
        end if;
    end process;

    j_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_144_p2 = ap_const_lv1_0))) then 
                j_reg_99 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_99 <= add_ln178_reg_245;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln174_reg_222 <= add_ln174_fu_150_p2;
                oracle_activations_addr_reg_232 <= zext_ln174_fu_156_p1(6 - 1 downto 0);
                    tmp_s_reg_237(11 downto 6) <= tmp_s_fu_165_p3(11 downto 6);
                    zext_ln174_reg_227(6 downto 0) <= zext_ln174_fu_156_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln178_reg_245 <= add_ln178_fu_179_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul8_reg_280 <= grp_fu_990_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                weights2_load_reg_265 <= weights2_q0;
            end if;
        end if;
    end process;
    zext_ln174_reg_227(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_s_reg_237(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln174_fu_144_p2, icmp_ln178_fu_173_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_144_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln178_fu_173_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln174_fu_150_p2 <= std_logic_vector(unsigned(i_fu_44) + unsigned(ap_const_lv7_1));
    add_ln178_fu_179_p2 <= std_logic_vector(unsigned(j_reg_99) + unsigned(ap_const_lv7_1));
    add_ln180_fu_189_p2 <= std_logic_vector(unsigned(zext_ln178_1_fu_185_p1) + unsigned(tmp_s_reg_237));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln174_fu_144_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_144_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln174_fu_144_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln174_fu_144_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln180_fu_208_p1 <= weights2_load_reg_265;
    dactivations_address0 <= zext_ln174_reg_227(6 - 1 downto 0);

    dactivations_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dactivations_ce0 <= ap_const_logic_1;
        else 
            dactivations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_161_p1 <= i_fu_44(6 - 1 downto 0);

    grp_fu_128_p0_assign_proc : process(output_differences_q0, ap_CS_fsm_state5, ap_CS_fsm_state13, add113_reg_111)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_128_p0 <= add113_reg_111;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_128_p0 <= output_differences_q0;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p1_assign_proc : process(dactivations_q0, ap_CS_fsm_state5, bitcast_ln180_fu_208_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_128_p1 <= dactivations_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_128_p1 <= bitcast_ln180_fu_208_p1;
        else 
            grp_fu_128_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_986_p_ce <= ap_const_logic_1;
    grp_fu_986_p_din0 <= add113_reg_111;
    grp_fu_986_p_din1 <= mul8_reg_280;
    grp_fu_986_p_opcode <= ap_const_lv2_0(1 - 1 downto 0);
    grp_fu_990_p_ce <= ap_const_logic_1;
    grp_fu_990_p_din0 <= grp_fu_128_p0;
    grp_fu_990_p_din1 <= grp_fu_128_p1;
    icmp_ln174_fu_144_p2 <= "1" when (i_fu_44 = ap_const_lv7_40) else "0";
    icmp_ln178_fu_173_p2 <= "1" when (j_reg_99 = ap_const_lv7_40) else "0";
    oracle_activations_address0 <= oracle_activations_addr_reg_232;

    oracle_activations_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            oracle_activations_ce0 <= ap_const_logic_1;
        else 
            oracle_activations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    oracle_activations_d0 <= grp_fu_990_p_dout0;

    oracle_activations_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            oracle_activations_we0 <= ap_const_logic_1;
        else 
            oracle_activations_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_differences_address0 <= zext_ln178_fu_203_p1(6 - 1 downto 0);

    output_differences_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_differences_ce0 <= ap_const_logic_1;
        else 
            output_differences_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_165_p3 <= (empty_fu_161_p1 & ap_const_lv6_0);
    weights2_address0 <= zext_ln180_fu_194_p1(12 - 1 downto 0);

    weights2_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            weights2_ce0 <= ap_const_logic_1;
        else 
            weights2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln174_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_44),64));
    zext_ln178_1_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_99),12));
    zext_ln178_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_99),64));
    zext_ln180_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_189_p2),64));
end behav;
