-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity backprop_backprop_Pipeline_take_difference_loop1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_difference_2_022 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_difference_1_021 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_difference_0_020 : IN STD_LOGIC_VECTOR (63 downto 0);
    net_outputs_0_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    net_outputs_1_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    net_outputs_2_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    sub_ln374 : IN STD_LOGIC_VECTOR (8 downto 0);
    training_targets_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    training_targets_ce0 : OUT STD_LOGIC;
    training_targets_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_0_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_1_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    dactivations3_2_1_reload : IN STD_LOGIC_VECTOR (63 downto 0);
    output_difference_2_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_difference_2_1_out_ap_vld : OUT STD_LOGIC;
    output_difference_1_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_difference_1_1_out_ap_vld : OUT STD_LOGIC;
    output_difference_0_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_difference_0_1_out_ap_vld : OUT STD_LOGIC;
    grp_fu_986_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_986_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_986_p_ce : OUT STD_LOGIC;
    grp_fu_990_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_990_p_ce : OUT STD_LOGIC );
end;


architecture behav of backprop_backprop_Pipeline_take_difference_loop1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln114_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_363 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_363_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln114_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_369_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_369_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_369_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln114_reg_369_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_241_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln116_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i4_reg_388 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln116_2_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_269_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln116_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_20_fu_68 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln114_fu_215_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (1 downto 0);
    signal output_difference_0_1_fu_72 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal output_difference_1_1_fu_76 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal output_difference_2_1_fu_80 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln114_fu_221_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln116_fu_225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln116_1_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln116_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_364 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component backprop_dadddsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_mux_3_2_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component backprop_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_64_1_1_U99 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => net_outputs_0_1_reload,
        din1 => net_outputs_1_1_reload,
        din2 => net_outputs_2_1_reload,
        din3 => i_reg_363,
        dout => tmp_8_fu_241_p5);

    mux_3_2_64_1_1_U100 : component backprop_mux_3_2_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 2,
        dout_WIDTH => 64)
    port map (
        din0 => dactivations3_0_1_reload,
        din1 => dactivations3_1_1_reload,
        din2 => dactivations3_2_1_reload,
        din3 => i_reg_363_pp0_iter4_reg,
        dout => tmp_9_fu_269_p5);

    flow_control_loop_pipe_sequential_init_U : component backprop_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    i_20_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln114_fu_209_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_20_fu_68 <= add_ln114_fu_215_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_20_fu_68 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    output_difference_0_1_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    output_difference_0_1_fu_72 <= output_difference_0_020;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (i_reg_363_pp0_iter7_reg = ap_const_lv2_0))) then 
                    output_difference_0_1_fu_72 <= grp_fu_990_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    output_difference_1_1_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    output_difference_1_1_fu_76 <= output_difference_1_021;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (i_reg_363_pp0_iter7_reg = ap_const_lv2_1))) then 
                    output_difference_1_1_fu_76 <= grp_fu_990_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    output_difference_2_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    output_difference_2_1_fu_80 <= output_difference_2_022;
                elsif ((ap_const_boolean_1 = ap_condition_364)) then 
                    output_difference_2_1_fu_80 <= grp_fu_990_p_dout0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_reg_363 <= ap_sig_allocacmp_i;
                i_reg_363_pp0_iter1_reg <= i_reg_363;
                icmp_ln114_reg_369 <= icmp_ln114_fu_209_p2;
                icmp_ln114_reg_369_pp0_iter1_reg <= icmp_ln114_reg_369;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                i_reg_363_pp0_iter2_reg <= i_reg_363_pp0_iter1_reg;
                i_reg_363_pp0_iter3_reg <= i_reg_363_pp0_iter2_reg;
                i_reg_363_pp0_iter4_reg <= i_reg_363_pp0_iter3_reg;
                i_reg_363_pp0_iter5_reg <= i_reg_363_pp0_iter4_reg;
                i_reg_363_pp0_iter6_reg <= i_reg_363_pp0_iter5_reg;
                i_reg_363_pp0_iter7_reg <= i_reg_363_pp0_iter6_reg;
                icmp_ln114_reg_369_pp0_iter2_reg <= icmp_ln114_reg_369_pp0_iter1_reg;
                icmp_ln114_reg_369_pp0_iter3_reg <= icmp_ln114_reg_369_pp0_iter2_reg;
                icmp_ln114_reg_369_pp0_iter4_reg <= icmp_ln114_reg_369_pp0_iter3_reg;
                icmp_ln114_reg_369_pp0_iter5_reg <= icmp_ln114_reg_369_pp0_iter4_reg;
                icmp_ln114_reg_369_pp0_iter6_reg <= icmp_ln114_reg_369_pp0_iter5_reg;
                sub_i4_reg_388 <= grp_fu_986_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln114_fu_215_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv2_1));
    add_ln116_fu_225_p2 <= std_logic_vector(unsigned(zext_ln114_fu_221_p1) + unsigned(sub_ln374));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_364_assign_proc : process(ap_enable_reg_pp0_iter8, i_reg_363_pp0_iter7_reg)
    begin
                ap_condition_364 <= (not((i_reg_363_pp0_iter7_reg = ap_const_lv2_1)) and not((i_reg_363_pp0_iter7_reg = ap_const_lv2_0)) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln114_fu_209_p2)
    begin
        if (((icmp_ln114_fu_209_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_20_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i <= i_20_fu_68;
        end if; 
    end process;

    bitcast_ln116_1_fu_255_p1 <= sub_i4_reg_388;
    bitcast_ln116_2_fu_264_p1 <= xor_ln116_fu_258_p2;
    bitcast_ln116_fu_250_p1 <= training_targets_q0;
    grp_fu_986_p_ce <= ap_const_logic_1;
    grp_fu_986_p_din0 <= tmp_8_fu_241_p5;
    grp_fu_986_p_din1 <= bitcast_ln116_fu_250_p1;
    grp_fu_986_p_opcode <= ap_const_lv2_1(1 - 1 downto 0);
    grp_fu_990_p_ce <= ap_const_logic_1;
    grp_fu_990_p_din0 <= bitcast_ln116_2_fu_264_p1;
    grp_fu_990_p_din1 <= tmp_9_fu_269_p5;
    icmp_ln114_fu_209_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_3) else "0";
    output_difference_0_1_out <= output_difference_0_1_fu_72;

    output_difference_0_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln114_reg_369_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_reg_369_pp0_iter6_reg = ap_const_lv1_1))) then 
            output_difference_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_difference_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_difference_1_1_out <= output_difference_1_1_fu_76;

    output_difference_1_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln114_reg_369_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_reg_369_pp0_iter6_reg = ap_const_lv1_1))) then 
            output_difference_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_difference_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_difference_2_1_out <= output_difference_2_1_fu_80;

    output_difference_2_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln114_reg_369_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln114_reg_369_pp0_iter6_reg = ap_const_lv1_1))) then 
            output_difference_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            output_difference_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    training_targets_address0 <= zext_ln116_fu_231_p1(9 - 1 downto 0);

    training_targets_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            training_targets_ce0 <= ap_const_logic_1;
        else 
            training_targets_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln116_fu_258_p2 <= (bitcast_ln116_1_fu_255_p1 xor ap_const_lv64_8000000000000000);
    zext_ln114_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),9));
    zext_ln116_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln116_fu_225_p2),64));
end behav;
