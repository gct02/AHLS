-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity adpcm_main_ilb_table_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 5; 
             AddressRange    : integer := 32
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of adpcm_main_ilb_table_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "100000000000", 1 => "100000101101", 2 => "100001011011", 3 => "100010001010", 
    4 => "100010111001", 5 => "100011101010", 6 => "100100011100", 7 => "100101001111", 
    8 => "100110000011", 9 => "100110111001", 10 => "100111101111", 11 => "101000100111", 
    12 => "101001100000", 13 => "101010011010", 14 => "101011010110", 15 => "101100010010", 
    16 => "101101010000", 17 => "101110010000", 18 => "101111010001", 19 => "110000010011", 
    20 => "110001010110", 21 => "110010011100", 22 => "110011100010", 23 => "110100101011", 
    24 => "110101110100", 25 => "110111000000", 26 => "111000001101", 27 => "111001011100", 
    28 => "111010101100", 29 => "111011111110", 30 => "111101010010", 31 => "111110101000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

