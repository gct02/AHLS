-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_encode is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    xin1 : IN STD_LOGIC_VECTOR (31 downto 0);
    xin2 : IN STD_LOGIC_VECTOR (31 downto 0);
    tqmf_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce0 : OUT STD_LOGIC;
    tqmf_we0 : OUT STD_LOGIC;
    tqmf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tqmf_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce1 : OUT STD_LOGIC;
    tqmf_we1 : OUT STD_LOGIC;
    tqmf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce0 : OUT STD_LOGIC;
    h_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    h_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce1 : OUT STD_LOGIC;
    h_q1 : IN STD_LOGIC_VECTOR (14 downto 0);
    delay_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bpl_ce0 : OUT STD_LOGIC;
    delay_bpl_we0 : OUT STD_LOGIC;
    delay_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce0 : OUT STD_LOGIC;
    delay_dltx_we0 : OUT STD_LOGIC;
    delay_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce1 : OUT STD_LOGIC;
    delay_dltx_we1 : OUT STD_LOGIC;
    delay_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rlt1_o_ap_vld : OUT STD_LOGIC;
    al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    al1_o_ap_vld : OUT STD_LOGIC;
    rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rlt2_o_ap_vld : OUT STD_LOGIC;
    al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    al2_o_ap_vld : OUT STD_LOGIC;
    detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    detl_o_ap_vld : OUT STD_LOGIC;
    il : OUT STD_LOGIC_VECTOR (5 downto 0);
    il_ap_vld : OUT STD_LOGIC;
    qq4_code4_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qq4_code4_table_ce0 : OUT STD_LOGIC;
    qq4_code4_table_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    nbl_o_ap_vld : OUT STD_LOGIC;
    wl_code_table_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    wl_code_table_ce0 : OUT STD_LOGIC;
    wl_code_table_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    ilb_table_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    ilb_table_ce0 : OUT STD_LOGIC;
    ilb_table_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt1_o_ap_vld : OUT STD_LOGIC;
    plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt2_o_ap_vld : OUT STD_LOGIC;
    delay_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bph_ce0 : OUT STD_LOGIC;
    delay_bph_we0 : OUT STD_LOGIC;
    delay_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce0 : OUT STD_LOGIC;
    delay_dhx_we0 : OUT STD_LOGIC;
    delay_dhx_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    delay_dhx_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    delay_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce1 : OUT STD_LOGIC;
    delay_dhx_we1 : OUT STD_LOGIC;
    delay_dhx_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    delay_dhx_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rh1_o_ap_vld : OUT STD_LOGIC;
    ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    ah1_o_ap_vld : OUT STD_LOGIC;
    rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rh2_o_ap_vld : OUT STD_LOGIC;
    ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    ah2_o_ap_vld : OUT STD_LOGIC;
    deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
    deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    deth_o_ap_vld : OUT STD_LOGIC;
    nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
    nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    nbh_o_ap_vld : OUT STD_LOGIC;
    ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph1_o_ap_vld : OUT STD_LOGIC;
    ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph2_o_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of adpcm_main_encode is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv39_7FFFFFFFD4 : STD_LOGIC_VECTOR (38 downto 0) := "111111111111111111111111111111111010100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv17_1FF80 : STD_LOGIC_VECTOR (16 downto 0) := "11111111110000000";
    constant ap_const_lv17_80 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_4800 : STD_LOGIC_VECTOR (16 downto 0) := "00100100000000000";
    constant ap_const_lv15_4800 : STD_LOGIC_VECTOR (14 downto 0) := "100100000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv18_3FF40 : STD_LOGIC_VECTOR (17 downto 0) := "111111111101000000";
    constant ap_const_lv18_C0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000011000000";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv17_3000 : STD_LOGIC_VECTOR (16 downto 0) := "00011000000000000";
    constant ap_const_lv17_1D000 : STD_LOGIC_VECTOR (16 downto 0) := "11101000000000000";
    constant ap_const_lv15_5000 : STD_LOGIC_VECTOR (14 downto 0) := "101000000000000";
    constant ap_const_lv15_3C00 : STD_LOGIC_VECTOR (14 downto 0) := "011110000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv25_234 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000110100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv14_2310 : STD_LOGIC_VECTOR (13 downto 0) := "10001100010000";
    constant ap_const_lv14_39B0 : STD_LOGIC_VECTOR (13 downto 0) := "11100110110000";
    constant ap_const_lv14_1CF0 : STD_LOGIC_VECTOR (13 downto 0) := "01110011110000";
    constant ap_const_lv14_650 : STD_LOGIC_VECTOR (13 downto 0) := "00011001010000";
    constant ap_const_lv11_31E : STD_LOGIC_VECTOR (10 downto 0) := "01100011110";
    constant ap_const_lv11_72A : STD_LOGIC_VECTOR (10 downto 0) := "11100101010";
    constant ap_const_lv17_5800 : STD_LOGIC_VECTOR (16 downto 0) := "00101100000000000";
    constant ap_const_lv15_5800 : STD_LOGIC_VECTOR (14 downto 0) := "101100000000000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal decis_levl_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal decis_levl_ce0 : STD_LOGIC;
    signal decis_levl_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal quant26bt_pos_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_pos_ce0 : STD_LOGIC;
    signal quant26bt_pos_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal quant26bt_neg_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal quant26bt_neg_ce0 : STD_LOGIC;
    signal quant26bt_neg_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_817 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_828 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln255_fu_1010_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln255_reg_3005 : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln255_1_fu_1014_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal trunc_ln255_1_reg_3010 : STD_LOGIC_VECTOR (46 downto 0);
    signal tqmf_load_2_reg_3015 : STD_LOGIC_VECTOR (31 downto 0);
    signal tqmf_load_3_reg_3020 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln269_fu_1036_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln269_reg_3029 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln2_reg_3080 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_reg_3085 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_fu_1310_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_reg_3099 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_ln477_fu_1320_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln477_reg_3104 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln479_fu_1323_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln479_reg_3109 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln285_fu_1332_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln285_reg_3114 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_1345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_3119 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_4_fu_1359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_4_reg_3124 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln493_fu_1367_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln493_reg_3129 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln493_1_fu_1371_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln493_1_reg_3134 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln493_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln493_reg_3142 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln493_fu_1384_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln493_reg_3146 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ril_2_fu_1438_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ril_2_reg_3177 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln7_reg_3193 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal trunc_ln_reg_3201 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln287_1_fu_1604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln287_1_reg_3211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal sext_ln511_fu_1607_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln511_reg_3216 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln290_fu_1639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln290_reg_3221 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln535_fu_1644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln535_reg_3227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal delay_bpl_addr_1_reg_3239 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bpl_addr_reg_3247 : STD_LOGIC_VECTOR (2 downto 0);
    signal apl2_fu_1781_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl2_reg_3273 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl1_fu_1825_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal apl1_reg_3279 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_dltx_load_3_reg_3285 : STD_LOGIC_VECTOR (15 downto 0);
    signal delay_dltx_load_5_reg_3290 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln469_1_fu_2192_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln469_1_reg_3326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal trunc_ln304_fu_2208_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln304_reg_3331 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln314_fu_2289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln314_reg_3339 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln10_reg_3346 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln522_1_reg_3355 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln477_1_fu_2463_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln477_1_reg_3365 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal sext_ln479_2_fu_2466_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln479_2_reg_3370 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln620_fu_2472_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln620_reg_3375 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln317_fu_2504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln317_reg_3380 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln535_1_fu_2509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln535_1_reg_3386 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln543_fu_2514_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln543_reg_3390 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal delay_bph_addr_1_reg_3403 : STD_LOGIC_VECTOR (2 downto 0);
    signal delay_bph_addr_reg_3411 : STD_LOGIC_VECTOR (2 downto 0);
    signal apl2_3_fu_2659_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl2_3_reg_3416 : STD_LOGIC_VECTOR (16 downto 0);
    signal apl1_4_fu_2703_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal apl1_4_reg_3422 : STD_LOGIC_VECTOR (17 downto 0);
    signal delay_dhx_load_3_reg_3428 : STD_LOGIC_VECTOR (13 downto 0);
    signal delay_dhx_load_5_reg_3433 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_mil_02_i_phi_fu_695_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal mil_02_i_reg_691 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln496_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln243_fu_922_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln255_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln257_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln243_1_fu_1046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln269_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln243_2_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln460_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln464_fu_1109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln493_2_fu_1390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln504_fu_1427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_fu_1455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln525_fu_1594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_fu_1649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln537_fu_1660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln460_1_fu_2087_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln464_1_fu_2078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln525_1_fu_2458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln543_1_fu_2527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln537_1_fu_2538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln294_fu_1831_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal apl1_3_fu_2042_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl2_2_fu_1982_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln3_fu_1625_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln515_fu_1560_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln321_fu_2709_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal apl1_7_fu_2910_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl2_5_fu_2850_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln526_1_fu_2490_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln624_fu_2424_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal idx_fu_330 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln243_fu_916_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_334 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal i_7_fu_907_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xa_1_fu_338 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xa_3_fu_974_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln244_fu_875_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal xb_1_fu_342 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal xb_3_fu_994_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln244_1_fu_884_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal idx214_fu_346 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln269_fu_1051_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_fu_350 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_12_fu_1027_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal idx220_fu_354 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln464_fu_1130_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zl_1_fu_358 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal zl_2_fu_1299_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln460_fu_1097_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_4_fu_362 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_14_fu_1124_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mil_fu_366 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_6_fu_370 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal idx226_fu_374 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln464_2_fu_2099_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zl_4_fu_378 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal zl_7_fu_2181_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln460_1_fu_2066_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal i_8_fu_382 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal i_18_fu_2093_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_fu_386 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal grp_fu_811_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln550_fu_1924_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln550_1_fu_2792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_702_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln461_3_fu_2061_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln466_4_fu_2172_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_702_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln461_2_fu_2056_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal sext_ln466_3_fu_2167_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal grp_fu_706_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln257_1_fu_965_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln479_1_fu_1275_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln479_3_fu_2162_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln257_fu_960_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_2_fu_1270_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_5_fu_2157_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_714_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln475_1_fu_1257_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_4_fu_2144_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_fu_1252_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln475_3_fu_2139_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_718_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln461_1_fu_1092_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln466_1_fu_1290_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln461_fu_1087_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln466_fu_1285_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_722_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln570_1_fu_1694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln570_3_fu_2572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_722_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln570_fu_1689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln570_2_fu_2567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_726_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln574_fu_1740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln574_1_fu_2618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_730_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln251_fu_879_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln262_fu_1146_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal grp_fu_730_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_706_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_714_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal grp_fu_722_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_726_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_783_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_845_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln250_1_fu_857_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln250_fu_853_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln250_1_fu_865_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal xa_fu_869_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_730_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln257_fu_928_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln257_2_fu_970_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln258_fu_710_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sext_ln258_2_fu_990_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal add_ln243_1_fu_1040_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln243_2_fu_1077_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln461_1_fu_1092_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_718_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln262_1_fu_1150_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln1_fu_1159_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln263_1_fu_1170_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln263_fu_1166_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln263_1_fu_1177_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal sub_ln263_fu_1181_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln263_2_fu_1187_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal xb_4_fu_1191_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal xa_4_fu_1154_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal add_ln278_fu_1196_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal sub_ln279_fu_1202_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal pl_fu_1244_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_1_fu_1257_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal pl2_fu_1262_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln479_1_fu_1275_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln466_2_fu_1295_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln477_fu_1320_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln479_fu_1323_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln284_fu_1326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln285_fu_1336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_1353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln495_fu_1399_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln495_fu_1399_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln495_fu_1399_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal decis_fu_1404_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln486_fu_1414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_1445_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln287_fu_1465_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln287_fu_1465_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2_fu_1488_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln511_1_fu_1496_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln511_fu_1484_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln511_fu_1500_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln8_fu_1506_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln512_1_fu_1520_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln512_fu_1516_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln512_fu_1524_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln509_fu_1530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1534_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln513_fu_1542_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln515_fu_1554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln509_fu_1550_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_fu_1574_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln525_fu_1610_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln525cast_fu_1615_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_fu_1619_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd2_fu_1678_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal wd2_fu_1678_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln570_1_fu_1694_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln566_fu_1685_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_fu_1705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1705_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln571_fu_1699_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln572_fu_1714_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_1718_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln570_fu_1728_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln574_fu_1740_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln6_fu_1745_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln6_fu_1745_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln580_fu_1752_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln580_fu_1756_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln6_fu_1761_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln580_1_fu_1771_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_791_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln580_fu_1775_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln574_2_fu_1736_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln7_fu_1787_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln7_fu_1787_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln597_fu_1794_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln597_fu_1798_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln9_fu_1803_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln599_fu_1817_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln599_fu_1813_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln545_fu_1871_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln545_fu_1871_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln545_1_fu_1876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_1880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln549_fu_1896_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln5_fu_1900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln5_fu_1900_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln549_fu_1896_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln549_fu_1908_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd3_1_fu_1914_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln549_fu_1888_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln539_fu_1931_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln4_fu_1935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln4_fu_1935_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln539_fu_1931_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln539_fu_1943_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln583_fu_1960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_1_fu_1965_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln585_fu_1976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln567_fu_1972_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd3_2_fu_1996_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln595_fu_2002_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln607_fu_2010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_1_fu_2015_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln595_1_fu_2006_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_2_fu_2026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln609_fu_2032_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln609_fu_2036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_fu_2022_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln461_3_fu_2061_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal pl_2_fu_2131_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln475_4_fu_2144_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal pl2_1_fu_2149_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln479_3_fu_2162_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln466_5_fu_2177_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln303_fu_2202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln304_fu_2212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_2217_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln310_fu_2241_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln310_fu_2241_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln310_fu_2241_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal decis_1_fu_2247_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal m_2_fu_2261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_3_fu_2267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln310_2_fu_2257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln311_fu_2275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_fu_2281_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln305_fu_2225_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_2298_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln314_fu_2315_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln314_fu_2315_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln8_fu_2339_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln620_1_fu_2347_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln620_fu_2335_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln620_fu_2351_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal wd_1_fu_2357_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_2371_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln618_fu_2367_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln621_fu_2384_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln621_fu_2388_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln617_fu_2394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_2398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln622_fu_2406_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln624_fu_2418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln617_fu_2414_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd1_1_fu_2438_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln477_1_fu_2463_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln479_2_fu_2466_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal sub_ln525_1_fu_2475_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln525_1cast_fu_2480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal wd3_3_fu_2484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln314_1_fu_2469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wd2_1_fu_2556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal wd2_1_fu_2556_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln570_3_fu_2572_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln566_1_fu_2563_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_6_fu_2583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_2583_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln571_1_fu_2577_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln572_1_fu_2592_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_2596_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln570_1_fu_2606_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln574_1_fu_2618_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln580_1_fu_2623_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln580_1_fu_2623_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln580_2_fu_2630_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln580_1_fu_2634_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln580_1_fu_2639_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln580_3_fu_2649_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln580_2_fu_2653_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln574_3_fu_2614_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln597_1_fu_2665_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln597_1_fu_2665_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln597_1_fu_2672_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sub_ln597_1_fu_2676_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln597_1_fu_2681_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln599_1_fu_2695_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln599_1_fu_2691_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln545_1_fu_2739_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln545_1_fu_2739_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln545_3_fu_2744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_2748_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln549_1_fu_2764_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln549_1_fu_2768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln549_1_fu_2768_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln549_1_fu_2764_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln549_1_fu_2776_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal wd3_4_fu_2782_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln549_1_fu_2756_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln539_1_fu_2799_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln539_1_fu_2803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln539_1_fu_2803_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln539_1_fu_2799_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sub_ln539_1_fu_2811_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal icmp_ln583_1_fu_2828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl2_4_fu_2833_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln585_1_fu_2844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln567_1_fu_2840_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal wd3_5_fu_2864_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln595_2_fu_2870_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln607_1_fu_2878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal apl1_5_fu_2883_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln595_3_fu_2874_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal apl1_6_fu_2894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln609_1_fu_2900_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln609_1_fu_2904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln595_1_fu_2890_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal mul_ln310_fu_2241_p00 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln314_fu_2315_p10 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln495_fu_1399_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_mul_14s_32s_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component adpcm_main_mul_15s_32s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component adpcm_main_mul_16s_32s_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component adpcm_main_mul_16s_32s_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component adpcm_main_mul_32s_32s_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component adpcm_main_mul_32s_7s_39_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (38 downto 0) );
    end component;


    component adpcm_main_mul_15ns_15ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component adpcm_main_mul_16s_15ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component adpcm_main_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_mul_15ns_11ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component adpcm_main_mux_4_2_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component adpcm_main_mul_14s_15ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component adpcm_main_mux_4_2_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        din3 : IN STD_LOGIC_VECTOR (10 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component adpcm_main_mul_14s_14s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component adpcm_main_encode_decis_levl_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component adpcm_main_encode_quant26bt_pos_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component adpcm_main_encode_quant26bt_neg_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    decis_levl_U : component adpcm_main_encode_decis_levl_ROM_AUTO_1R
    generic map (
        DataWidth => 15,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => decis_levl_address0,
        ce0 => decis_levl_ce0,
        q0 => decis_levl_q0);

    quant26bt_pos_U : component adpcm_main_encode_quant26bt_pos_ROM_AUTO_1R
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_pos_address0,
        ce0 => quant26bt_pos_ce0,
        q0 => quant26bt_pos_q0);

    quant26bt_neg_U : component adpcm_main_encode_quant26bt_neg_ROM_AUTO_1R
    generic map (
        DataWidth => 6,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => quant26bt_neg_address0,
        ce0 => quant26bt_neg_ce0,
        q0 => quant26bt_neg_q0);

    mul_14s_32s_46_1_1_U1 : component adpcm_main_mul_14s_32s_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 32,
        dout_WIDTH => 46)
    port map (
        din0 => grp_fu_702_p0,
        din1 => grp_fu_702_p1,
        dout => grp_fu_702_p2);

    mul_15s_32s_47_1_1_U2 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => grp_fu_706_p0,
        din1 => grp_fu_706_p1,
        dout => grp_fu_706_p2);

    mul_15s_32s_47_1_1_U3 : component adpcm_main_mul_15s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => h_q0,
        din1 => tqmf_q0,
        dout => mul_ln258_fu_710_p2);

    mul_16s_32s_47_1_1_U4 : component adpcm_main_mul_16s_32s_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 47)
    port map (
        din0 => grp_fu_714_p0,
        din1 => grp_fu_714_p1,
        dout => grp_fu_714_p2);

    mul_16s_32s_48_1_1_U5 : component adpcm_main_mul_16s_32s_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_718_p0,
        din1 => grp_fu_718_p1,
        dout => grp_fu_718_p2);

    mul_32s_32s_64_1_1_U6 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_722_p0,
        din1 => grp_fu_722_p1,
        dout => grp_fu_722_p2);

    mul_32s_32s_64_1_1_U7 : component adpcm_main_mul_32s_32s_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_726_p0,
        din1 => grp_fu_726_p1,
        dout => grp_fu_726_p2);

    mul_32s_7s_39_1_1_U8 : component adpcm_main_mul_32s_7s_39_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 7,
        dout_WIDTH => 39)
    port map (
        din0 => grp_fu_730_p0,
        din1 => grp_fu_730_p1,
        dout => grp_fu_730_p2);

    mul_15ns_15ns_30_1_1_U9 : component adpcm_main_mul_15ns_15ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln495_fu_1399_p0,
        din1 => mul_ln495_fu_1399_p1,
        dout => mul_ln495_fu_1399_p2);

    mul_16s_15ns_31_1_1_U10 : component adpcm_main_mul_16s_15ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => qq4_code4_table_q0,
        din1 => mul_ln287_fu_1465_p1,
        dout => mul_ln287_fu_1465_p2);

    mul_16s_16s_32_1_1_U11 : component adpcm_main_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => delay_dltx_q0,
        din1 => mul_ln545_fu_1871_p1,
        dout => mul_ln545_fu_1871_p2);

    mul_15ns_11ns_25_1_1_U12 : component adpcm_main_mul_15ns_11ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 11,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln310_fu_2241_p0,
        din1 => mul_ln310_fu_2241_p1,
        dout => mul_ln310_fu_2241_p2);

    mux_4_2_14_1_1_U13 : component adpcm_main_mux_4_2_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 2,
        dout_WIDTH => 14)
    port map (
        din0 => ap_const_lv14_2310,
        din1 => ap_const_lv14_39B0,
        din2 => ap_const_lv14_1CF0,
        din3 => ap_const_lv14_650,
        din4 => add_ln314_reg_3339,
        dout => tmp_fu_2298_p6);

    mul_14s_15ns_29_1_1_U14 : component adpcm_main_mul_14s_15ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_fu_2298_p6,
        din1 => mul_ln314_fu_2315_p1,
        dout => mul_ln314_fu_2315_p2);

    mux_4_2_11_1_1_U15 : component adpcm_main_mux_4_2_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        din2_WIDTH => 11,
        din3_WIDTH => 11,
        din4_WIDTH => 2,
        dout_WIDTH => 11)
    port map (
        din0 => ap_const_lv11_31E,
        din1 => ap_const_lv11_72A,
        din2 => ap_const_lv11_31E,
        din3 => ap_const_lv11_72A,
        din4 => add_ln314_reg_3339,
        dout => tmp_1_fu_2371_p6);

    mul_14s_14s_28_1_1_U16 : component adpcm_main_mul_14s_14s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        dout_WIDTH => 28)
    port map (
        din0 => delay_dhx_q0,
        din1 => mul_ln545_1_fu_2739_p1,
        dout => mul_ln545_1_fu_2739_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_10_fu_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln535_1_fu_2509_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((icmp_ln535_1_fu_2509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
                i_10_fu_386 <= ap_const_lv3_0;
            elsif ((((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
                i_10_fu_386 <= grp_fu_811_p2;
            end if; 
        end if;
    end process;

    i_1_fu_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_fu_350 <= ap_const_lv5_0;
            elsif (((icmp_ln269_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_fu_350 <= i_12_fu_1027_p2;
            end if; 
        end if;
    end process;

    i_4_fu_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_4_fu_362 <= ap_const_lv3_1;
            elsif (((icmp_ln464_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_4_fu_362 <= i_14_fu_1124_p2;
            end if; 
        end if;
    end process;

    i_6_fu_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and ((icmp_ln496_fu_1418_p2 = ap_const_lv1_0) or (icmp_ln493_reg_3142 = ap_const_lv1_1)))) then 
                i_6_fu_370 <= ap_const_lv3_0;
            elsif ((((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                i_6_fu_370 <= grp_fu_769_p2;
            end if; 
        end if;
    end process;

    i_8_fu_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
                i_8_fu_382 <= ap_const_lv3_1;
            elsif (((icmp_ln464_1_fu_2078_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                i_8_fu_382 <= i_18_fu_2093_p2;
            end if; 
        end if;
    end process;

    i_fu_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_334 <= ap_const_lv4_0;
            elsif (((icmp_ln255_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_fu_334 <= i_7_fu_907_p2;
            end if; 
        end if;
    end process;

    idx214_fu_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx214_fu_346 <= ap_const_lv6_0;
            elsif (((icmp_ln269_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                idx214_fu_346 <= add_ln269_fu_1051_p2;
            end if; 
        end if;
    end process;

    idx220_fu_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                idx220_fu_354 <= ap_const_lv3_1;
            elsif (((icmp_ln464_fu_1109_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                idx220_fu_354 <= add_ln464_fu_1130_p2;
            end if; 
        end if;
    end process;

    idx226_fu_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
                idx226_fu_374 <= ap_const_lv3_1;
            elsif (((icmp_ln464_1_fu_2078_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                idx226_fu_374 <= add_ln464_2_fu_2099_p2;
            end if; 
        end if;
    end process;

    idx_fu_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx_fu_330 <= ap_const_lv5_0;
            elsif (((icmp_ln255_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx_fu_330 <= add_ln243_fu_916_p2;
            end if; 
        end if;
    end process;

    mil_02_i_reg_691_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln493_fu_1378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                mil_02_i_reg_691 <= ap_const_lv5_1E;
            elsif (((icmp_ln496_fu_1418_p2 = ap_const_lv1_0) and (icmp_ln493_reg_3142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                mil_02_i_reg_691 <= mil_fu_366;
            end if; 
        end if;
    end process;

    mil_fu_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln464_fu_1109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                mil_fu_366 <= ap_const_lv5_0;
            elsif (((icmp_ln496_fu_1418_p2 = ap_const_lv1_1) and (icmp_ln493_reg_3142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                mil_fu_366 <= add_ln493_reg_3146;
            end if; 
        end if;
    end process;

    reg_817_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_817 <= delay_dltx_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                reg_817 <= delay_dltx_q0;
            end if; 
        end if;
    end process;

    reg_828_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                reg_828 <= delay_dhx_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                reg_828 <= delay_dhx_q0;
            end if; 
        end if;
    end process;

    xa_1_fu_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                xa_1_fu_338 <= sext_ln244_fu_875_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                xa_1_fu_338 <= xa_3_fu_974_p2;
            end if; 
        end if;
    end process;

    xb_1_fu_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                xb_1_fu_342 <= sext_ln244_1_fu_884_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                xb_1_fu_342 <= xb_3_fu_994_p2;
            end if; 
        end if;
    end process;

    zl_1_fu_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                zl_1_fu_358 <= sext_ln460_fu_1097_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                zl_1_fu_358 <= zl_2_fu_1299_p2;
            end if; 
        end if;
    end process;

    zl_4_fu_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                zl_4_fu_378 <= sext_ln460_1_fu_2066_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                zl_4_fu_378 <= zl_7_fu_2181_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln290_reg_3221 <= add_ln290_fu_1639_p2;
                icmp_ln535_reg_3227 <= icmp_ln535_fu_1644_p2;
                sext_ln287_1_reg_3211 <= sext_ln287_1_fu_1604_p1;
                sext_ln511_reg_3216 <= sext_ln511_fu_1607_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln314_reg_3339 <= add_ln314_fu_2289_p2;
                trunc_ln304_reg_3331 <= trunc_ln304_fu_2208_p1;
                trunc_ln469_1_reg_3326 <= zl_4_fu_378(45 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln317_reg_3380 <= add_ln317_fu_2504_p2;
                icmp_ln535_1_reg_3386 <= icmp_ln535_1_fu_2509_p2;
                sext_ln477_1_reg_3365 <= sext_ln477_1_fu_2463_p1;
                sext_ln479_2_reg_3370 <= sext_ln479_2_fu_2466_p1;
                sext_ln543_reg_3390 <= sext_ln543_fu_2514_p1;
                sext_ln620_reg_3375 <= sext_ln620_fu_2472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln493_reg_3146 <= add_ln493_fu_1384_p2;
                icmp_ln493_reg_3142 <= icmp_ln493_fu_1378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                apl1_4_reg_3422 <= apl1_4_fu_2703_p2;
                apl2_3_reg_3416 <= apl2_3_fu_2659_p2;
                delay_bph_addr_1_reg_3403 <= zext_ln543_1_fu_2527_p1(3 - 1 downto 0);
                delay_bph_addr_reg_3411 <= zext_ln537_1_fu_2538_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                apl1_reg_3279 <= apl1_fu_1825_p2;
                apl2_reg_3273 <= apl2_fu_1781_p2;
                delay_bpl_addr_1_reg_3239 <= zext_ln543_fu_1649_p1(3 - 1 downto 0);
                delay_bpl_addr_reg_3247 <= zext_ln537_fu_1660_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                delay_dhx_load_3_reg_3428 <= delay_dhx_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                delay_dhx_load_5_reg_3433 <= delay_dhx_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                delay_dltx_load_3_reg_3285 <= delay_dltx_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                delay_dltx_load_5_reg_3290 <= delay_dltx_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                m_4_reg_3124 <= m_4_fu_1359_p3;
                sext_ln477_reg_3104 <= sext_ln477_fu_1320_p1;
                sext_ln479_reg_3109 <= sext_ln479_fu_1323_p1;
                tmp_2_reg_3119 <= sub_ln285_fu_1336_p2(31 downto 31);
                trunc_ln285_reg_3114 <= trunc_ln285_fu_1332_p1;
                trunc_ln4_reg_3099 <= zl_1_fu_358(45 downto 14);
                    zext_ln493_1_reg_3134(14 downto 0) <= zext_ln493_1_fu_1371_p1(14 downto 0);
                    zext_ln493_reg_3129(14 downto 0) <= zext_ln493_fu_1367_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_824 <= grp_fu_741_p2(46 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                ril_2_reg_3177 <= ril_2_fu_1438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tqmf_load_2_reg_3015 <= tqmf_q1;
                tqmf_load_3_reg_3020 <= tqmf_q0;
                trunc_ln255_1_reg_3010 <= trunc_ln255_1_fu_1014_p1;
                trunc_ln255_reg_3005 <= trunc_ln255_fu_1010_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                trunc_ln10_reg_3346 <= mul_ln314_fu_2315_p2(28 downto 15);
                trunc_ln522_1_reg_3355 <= select_ln624_fu_2424_p3(14 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln269_reg_3029 <= trunc_ln269_fu_1036_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln2_reg_3080 <= add_ln278_fu_1196_p2(46 downto 15);
                trunc_ln3_reg_3085 <= sub_ln279_fu_1202_p2(46 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln7_reg_3193 <= mul_ln287_fu_1465_p2(30 downto 15);
                trunc_ln_reg_3201 <= select_ln515_fu_1560_p3(14 downto 11);
            end if;
        end if;
    end process;
    zext_ln493_reg_3129(29 downto 15) <= "000000000000000";
    zext_ln493_1_reg_3134(30 downto 15) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln493_reg_3142, ap_CS_fsm_state13, icmp_ln535_reg_3227, ap_CS_fsm_state17, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, icmp_ln496_fu_1418_p2, icmp_ln255_fu_901_p2, icmp_ln269_fu_1021_p2, icmp_ln464_fu_1109_p2, grp_fu_763_p2, icmp_ln464_1_fu_2078_p2, grp_fu_805_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln464_fu_1109_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln496_fu_1418_p2 = ap_const_lv1_1) and (icmp_ln493_reg_3142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((icmp_ln464_1_fu_2078_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln243_1_fu_1040_p2 <= std_logic_vector(unsigned(trunc_ln269_fu_1036_p1) + unsigned(ap_const_lv5_15));
    add_ln243_2_fu_1077_p2 <= std_logic_vector(unsigned(trunc_ln269_reg_3029) + unsigned(ap_const_lv5_17));
    add_ln243_fu_916_p2 <= std_logic_vector(unsigned(idx_fu_330) + unsigned(ap_const_lv5_2));
    add_ln257_fu_928_p2 <= std_logic_vector(unsigned(idx_fu_330) + unsigned(ap_const_lv5_3));
    add_ln269_fu_1051_p2 <= std_logic_vector(unsigned(idx214_fu_346) + unsigned(ap_const_lv6_3F));
    add_ln278_fu_1196_p2 <= std_logic_vector(unsigned(xb_4_fu_1191_p2) + unsigned(xa_4_fu_1154_p2));
    add_ln284_fu_1326_p2 <= std_logic_vector(unsigned(reg_824) + unsigned(trunc_ln4_fu_1310_p4));
    add_ln290_fu_1639_p2 <= std_logic_vector(signed(sext_ln287_1_fu_1604_p1) + signed(trunc_ln4_reg_3099));
    add_ln294_fu_1831_p2 <= std_logic_vector(signed(sext_ln511_reg_3216) + signed(trunc_ln285_reg_3114));
    add_ln303_fu_2202_p2 <= std_logic_vector(unsigned(reg_824) + unsigned(trunc_ln469_1_fu_2192_p4));
    add_ln314_fu_2289_p2 <= std_logic_vector(unsigned(select_ln311_fu_2281_p3) + unsigned(select_ln305_fu_2225_p3));
    add_ln317_fu_2504_p2 <= std_logic_vector(signed(sext_ln314_1_fu_2469_p1) + signed(trunc_ln469_1_reg_3326));
    add_ln321_fu_2709_p2 <= std_logic_vector(unsigned(trunc_ln304_reg_3331) + unsigned(sext_ln620_reg_3375));
    add_ln464_2_fu_2099_p2 <= std_logic_vector(unsigned(idx226_fu_374) + unsigned(ap_const_lv3_1));
    add_ln464_fu_1130_p2 <= std_logic_vector(unsigned(idx220_fu_354) + unsigned(ap_const_lv3_1));
    add_ln493_fu_1384_p2 <= std_logic_vector(unsigned(mil_fu_366) + unsigned(ap_const_lv5_1));
    add_ln512_fu_1524_p2 <= std_logic_vector(signed(sext_ln512_1_fu_1520_p1) + signed(sext_ln512_fu_1516_p1));
    add_ln550_1_fu_2792_p2 <= std_logic_vector(unsigned(wd3_4_fu_2782_p4) + unsigned(select_ln549_1_fu_2756_p3));
    add_ln550_fu_1924_p2 <= std_logic_vector(unsigned(wd3_1_fu_1914_p4) + unsigned(select_ln549_fu_1888_p3));
    add_ln580_2_fu_2653_p2 <= std_logic_vector(signed(sext_ln580_3_fu_2649_p1) + signed(grp_fu_791_p3));
    add_ln580_fu_1775_p2 <= std_logic_vector(signed(sext_ln580_1_fu_1771_p1) + signed(grp_fu_791_p3));
    add_ln621_fu_2388_p2 <= std_logic_vector(signed(sext_ln618_fu_2367_p1) + signed(sext_ln621_fu_2384_p1));

    ah1_o_assign_proc : process(ah1_i, ap_CS_fsm_state32, apl1_7_fu_2910_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ah1_o <= apl1_7_fu_2910_p3;
        else 
            ah1_o <= ah1_i;
        end if; 
    end process;


    ah1_o_ap_vld_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ah1_o_ap_vld <= ap_const_logic_1;
        else 
            ah1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ah2_o_assign_proc : process(ah2_i, ap_CS_fsm_state32, apl2_5_fu_2850_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ah2_o <= apl2_5_fu_2850_p3;
        else 
            ah2_o <= ah2_i;
        end if; 
    end process;


    ah2_o_ap_vld_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ah2_o_ap_vld <= ap_const_logic_1;
        else 
            ah2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    al1_o_assign_proc : process(al1_i, ap_CS_fsm_state20, apl1_3_fu_2042_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            al1_o <= apl1_3_fu_2042_p3;
        else 
            al1_o <= al1_i;
        end if; 
    end process;


    al1_o_ap_vld_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            al1_o_ap_vld <= ap_const_logic_1;
        else 
            al1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    al2_o_assign_proc : process(al2_i, ap_CS_fsm_state20, apl2_2_fu_1982_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            al2_o <= apl2_2_fu_1982_p3;
        else 
            al2_o <= al2_i;
        end if; 
    end process;


    al2_o_ap_vld_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            al2_o_ap_vld <= ap_const_logic_1;
        else 
            al2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mil_02_i_phi_fu_695_p4_assign_proc : process(icmp_ln493_reg_3142, ap_CS_fsm_state13, mil_02_i_reg_691, icmp_ln496_fu_1418_p2, mil_fu_366)
    begin
        if (((icmp_ln496_fu_1418_p2 = ap_const_lv1_0) and (icmp_ln493_reg_3142 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_phi_mux_mil_02_i_phi_fu_695_p4 <= mil_fu_366;
        else 
            ap_phi_mux_mil_02_i_phi_fu_695_p4 <= mil_02_i_reg_691;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (add_ln314_reg_3339 & ril_2_reg_3177);
    apl1_1_fu_2015_p3 <= 
        zext_ln595_fu_2002_p1 when (icmp_ln607_fu_2010_p2(0) = '1') else 
        apl1_reg_3279;
    apl1_2_fu_2026_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln595_1_fu_2006_p1));
    apl1_3_fu_2042_p3 <= 
        apl1_2_fu_2026_p2 when (icmp_ln609_fu_2036_p2(0) = '1') else 
        trunc_ln595_fu_2022_p1;
    apl1_4_fu_2703_p2 <= std_logic_vector(unsigned(select_ln599_1_fu_2695_p3) + unsigned(sext_ln599_1_fu_2691_p1));
    apl1_5_fu_2883_p3 <= 
        zext_ln595_2_fu_2870_p1 when (icmp_ln607_1_fu_2878_p2(0) = '1') else 
        apl1_4_reg_3422;
    apl1_6_fu_2894_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln595_3_fu_2874_p1));
    apl1_7_fu_2910_p3 <= 
        apl1_6_fu_2894_p2 when (icmp_ln609_1_fu_2904_p2(0) = '1') else 
        trunc_ln595_1_fu_2890_p1;
    apl1_fu_1825_p2 <= std_logic_vector(unsigned(select_ln599_fu_1817_p3) + unsigned(sext_ln599_fu_1813_p1));
    apl2_1_fu_1965_p3 <= 
        ap_const_lv17_3000 when (icmp_ln583_fu_1960_p2(0) = '1') else 
        apl2_reg_3273;
    apl2_2_fu_1982_p3 <= 
        ap_const_lv15_5000 when (icmp_ln585_fu_1976_p2(0) = '1') else 
        trunc_ln567_fu_1972_p1;
    apl2_3_fu_2659_p2 <= std_logic_vector(unsigned(add_ln580_2_fu_2653_p2) + unsigned(sext_ln574_3_fu_2614_p1));
    apl2_4_fu_2833_p3 <= 
        ap_const_lv17_3000 when (icmp_ln583_1_fu_2828_p2(0) = '1') else 
        apl2_3_reg_3416;
    apl2_5_fu_2850_p3 <= 
        ap_const_lv15_5000 when (icmp_ln585_1_fu_2844_p2(0) = '1') else 
        trunc_ln567_1_fu_2840_p1;
    apl2_fu_1781_p2 <= std_logic_vector(unsigned(add_ln580_fu_1775_p2) + unsigned(sext_ln574_2_fu_1736_p1));
    decis_1_fu_2247_p4 <= mul_ln310_fu_2241_p2(24 downto 12);
    decis_fu_1404_p4 <= mul_ln495_fu_1399_p2(29 downto 15);
    decis_levl_address0 <= zext_ln493_2_fu_1390_p1(5 - 1 downto 0);

    decis_levl_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            decis_levl_ce0 <= ap_const_logic_1;
        else 
            decis_levl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bph_address0_assign_proc : process(ap_CS_fsm_state24, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, delay_bph_addr_1_reg_3403, delay_bph_addr_reg_3411, zext_ln460_1_fu_2087_p1, zext_ln543_1_fu_2527_p1, grp_fu_805_p2, zext_ln537_1_fu_2538_p1, ap_CS_fsm_state22, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            delay_bph_address0 <= delay_bph_addr_reg_3411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            delay_bph_address0 <= delay_bph_addr_1_reg_3403;
        elsif (((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            delay_bph_address0 <= zext_ln537_1_fu_2538_p1(3 - 1 downto 0);
        elsif (((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            delay_bph_address0 <= zext_ln543_1_fu_2527_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            delay_bph_address0 <= zext_ln460_1_fu_2087_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_bph_address0 <= ap_const_lv3_0;
        else 
            delay_bph_address0 <= "XXX";
        end if; 
    end process;


    delay_bph_ce0_assign_proc : process(ap_CS_fsm_state24, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2, ap_CS_fsm_state22, ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            delay_bph_ce0 <= ap_const_logic_1;
        else 
            delay_bph_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bph_d0_assign_proc : process(ap_CS_fsm_state30, add_ln550_1_fu_2792_p2, ap_CS_fsm_state31, sub_ln539_1_fu_2811_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            delay_bph_d0 <= sub_ln539_1_fu_2811_p2(39 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            delay_bph_d0 <= add_ln550_1_fu_2792_p2;
        else 
            delay_bph_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_bph_we0_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            delay_bph_we0 <= ap_const_logic_1;
        else 
            delay_bph_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bpl_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state6, icmp_ln535_reg_3227, ap_CS_fsm_state17, delay_bpl_addr_1_reg_3239, delay_bpl_addr_reg_3247, zext_ln460_fu_1118_p1, zext_ln543_fu_1649_p1, grp_fu_763_p2, zext_ln537_fu_1660_p1, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            delay_bpl_address0 <= delay_bpl_addr_reg_3247;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            delay_bpl_address0 <= delay_bpl_addr_1_reg_3239;
        elsif (((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            delay_bpl_address0 <= zext_ln537_fu_1660_p1(3 - 1 downto 0);
        elsif (((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            delay_bpl_address0 <= zext_ln543_fu_1649_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_bpl_address0 <= zext_ln460_fu_1118_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_bpl_address0 <= ap_const_lv3_0;
        else 
            delay_bpl_address0 <= "XXX";
        end if; 
    end process;


    delay_bpl_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state6, icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            delay_bpl_ce0 <= ap_const_logic_1;
        else 
            delay_bpl_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_bpl_d0_assign_proc : process(ap_CS_fsm_state18, add_ln550_fu_1924_p2, ap_CS_fsm_state19, sub_ln539_fu_1943_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            delay_bpl_d0 <= sub_ln539_fu_1943_p2(39 downto 8);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            delay_bpl_d0 <= add_ln550_fu_1924_p2;
        else 
            delay_bpl_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_bpl_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            delay_bpl_we0 <= ap_const_logic_1;
        else 
            delay_bpl_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_address0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state32, ap_CS_fsm_state33, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, zext_ln460_1_fu_2087_p1, zext_ln543_1_fu_2527_p1, grp_fu_805_p2, ap_CS_fsm_state22, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_dhx_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_dhx_address0 <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            delay_dhx_address0 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            delay_dhx_address0 <= ap_const_lv3_3;
        elsif (((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            delay_dhx_address0 <= zext_ln543_1_fu_2527_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            delay_dhx_address0 <= zext_ln460_1_fu_2087_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_dhx_address0 <= ap_const_lv3_0;
        else 
            delay_dhx_address0 <= "XXX";
        end if; 
    end process;


    delay_dhx_address1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            delay_dhx_address1 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_dhx_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_dhx_address1 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            delay_dhx_address1 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            delay_dhx_address1 <= ap_const_lv3_4;
        else 
            delay_dhx_address1 <= "XXX";
        end if; 
    end process;


    delay_dhx_ce0_assign_proc : process(ap_CS_fsm_state24, ap_CS_fsm_state32, ap_CS_fsm_state33, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2, ap_CS_fsm_state22, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((grp_fu_805_p2 = ap_const_lv1_0) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0)))))) then 
            delay_dhx_ce0 <= ap_const_logic_1;
        else 
            delay_dhx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_ce1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state29, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            delay_dhx_ce1 <= ap_const_logic_1;
        else 
            delay_dhx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_d0_assign_proc : process(reg_828, ap_CS_fsm_state33, delay_dhx_load_3_reg_3428, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            delay_dhx_d0 <= delay_dhx_load_3_reg_3428;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_dhx_d0 <= reg_828;
        else 
            delay_dhx_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_dhx_d1_assign_proc : process(reg_828, ap_CS_fsm_state32, ap_CS_fsm_state33, trunc_ln10_reg_3346, delay_dhx_load_5_reg_3433, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            delay_dhx_d1 <= delay_dhx_load_5_reg_3433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            delay_dhx_d1 <= trunc_ln10_reg_3346;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            delay_dhx_d1 <= reg_828;
        else 
            delay_dhx_d1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_dhx_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            delay_dhx_we0 <= ap_const_logic_1;
        else 
            delay_dhx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dhx_we1_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            delay_dhx_we1 <= ap_const_logic_1;
        else 
            delay_dhx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state9, ap_CS_fsm_state6, icmp_ln535_reg_3227, ap_CS_fsm_state17, zext_ln460_fu_1118_p1, zext_ln543_fu_1649_p1, grp_fu_763_p2, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_dltx_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            delay_dltx_address0 <= ap_const_lv3_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            delay_dltx_address0 <= ap_const_lv3_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            delay_dltx_address0 <= ap_const_lv3_3;
        elsif (((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            delay_dltx_address0 <= zext_ln543_fu_1649_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            delay_dltx_address0 <= zext_ln460_fu_1118_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            delay_dltx_address0 <= ap_const_lv3_0;
        else 
            delay_dltx_address0 <= "XXX";
        end if; 
    end process;


    delay_dltx_address1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            delay_dltx_address1 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_dltx_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            delay_dltx_address1 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            delay_dltx_address1 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            delay_dltx_address1 <= ap_const_lv3_4;
        else 
            delay_dltx_address1 <= "XXX";
        end if; 
    end process;


    delay_dltx_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state9, ap_CS_fsm_state6, icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or ((grp_fu_763_p2 = ap_const_lv1_0) and (icmp_ln535_reg_3227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0)))))) then 
            delay_dltx_ce0 <= ap_const_logic_1;
        else 
            delay_dltx_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_ce1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state17, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            delay_dltx_ce1 <= ap_const_logic_1;
        else 
            delay_dltx_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_d0_assign_proc : process(reg_817, ap_CS_fsm_state21, delay_dltx_load_3_reg_3285, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            delay_dltx_d0 <= delay_dltx_load_3_reg_3285;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            delay_dltx_d0 <= reg_817;
        else 
            delay_dltx_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_dltx_d1_assign_proc : process(reg_817, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, trunc_ln7_reg_3193, delay_dltx_load_5_reg_3290, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            delay_dltx_d1 <= delay_dltx_load_5_reg_3290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            delay_dltx_d1 <= trunc_ln7_reg_3193;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            delay_dltx_d1 <= reg_817;
        else 
            delay_dltx_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    delay_dltx_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            delay_dltx_we0 <= ap_const_logic_1;
        else 
            delay_dltx_we0 <= ap_const_logic_0;
        end if; 
    end process;


    delay_dltx_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            delay_dltx_we1 <= ap_const_logic_1;
        else 
            delay_dltx_we1 <= ap_const_logic_0;
        end if; 
    end process;


    deth_o_assign_proc : process(deth_i, ap_CS_fsm_state28, shl_ln526_1_fu_2490_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            deth_o <= shl_ln526_1_fu_2490_p3;
        else 
            deth_o <= deth_i;
        end if; 
    end process;


    deth_o_ap_vld_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            deth_o_ap_vld <= ap_const_logic_1;
        else 
            deth_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    detl_o_assign_proc : process(detl_i, ap_CS_fsm_state16, shl_ln3_fu_1625_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            detl_o <= shl_ln3_fu_1625_p3;
        else 
            detl_o <= detl_i;
        end if; 
    end process;


    detl_o_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            detl_o_ap_vld <= ap_const_logic_1;
        else 
            detl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_702_p0_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state25, sext_ln461_3_fu_2061_p1, sext_ln466_4_fu_2172_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_702_p0 <= sext_ln466_4_fu_2172_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_702_p0 <= sext_ln461_3_fu_2061_p1(14 - 1 downto 0);
        else 
            grp_fu_702_p0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_702_p1_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state25, sext_ln461_2_fu_2056_p1, sext_ln466_3_fu_2167_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_702_p1 <= sext_ln466_3_fu_2167_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_702_p1 <= sext_ln461_2_fu_2056_p1(32 - 1 downto 0);
        else 
            grp_fu_702_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_706_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state4, sext_ln257_1_fu_965_p1, sext_ln479_1_fu_1275_p1, sext_ln479_3_fu_2162_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_706_p0 <= sext_ln479_3_fu_2162_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_706_p0 <= sext_ln479_1_fu_1275_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_706_p0 <= sext_ln257_1_fu_965_p1(15 - 1 downto 0);
        else 
            grp_fu_706_p0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_706_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, ap_CS_fsm_state4, sext_ln257_fu_960_p1, sext_ln475_2_fu_1270_p1, sext_ln475_5_fu_2157_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_706_p1 <= sext_ln475_5_fu_2157_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_706_p1 <= sext_ln475_2_fu_1270_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_706_p1 <= sext_ln257_fu_960_p1(32 - 1 downto 0);
        else 
            grp_fu_706_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_714_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, sext_ln475_1_fu_1257_p1, sext_ln475_4_fu_2144_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_714_p0 <= sext_ln475_4_fu_2144_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_714_p0 <= sext_ln475_1_fu_1257_p1(16 - 1 downto 0);
        else 
            grp_fu_714_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_714_p1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state24, sext_ln475_fu_1252_p1, sext_ln475_3_fu_2139_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            grp_fu_714_p1 <= sext_ln475_3_fu_2139_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_714_p1 <= sext_ln475_fu_1252_p1(32 - 1 downto 0);
        else 
            grp_fu_714_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_718_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, sext_ln461_1_fu_1092_p1, sext_ln466_1_fu_1290_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_718_p0 <= sext_ln466_1_fu_1290_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_718_p0 <= sext_ln461_1_fu_1092_p1(16 - 1 downto 0);
        else 
            grp_fu_718_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_718_p1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, sext_ln461_fu_1087_p1, sext_ln466_fu_1285_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_718_p1 <= sext_ln466_fu_1285_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_718_p1 <= sext_ln461_fu_1087_p1(32 - 1 downto 0);
        else 
            grp_fu_718_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_722_p0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state29, sext_ln570_1_fu_1694_p1, sext_ln570_3_fu_2572_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_722_p0 <= sext_ln570_3_fu_2572_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_722_p0 <= sext_ln570_1_fu_1694_p1(32 - 1 downto 0);
        else 
            grp_fu_722_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_722_p1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state29, sext_ln570_fu_1689_p1, sext_ln570_2_fu_2567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_722_p1 <= sext_ln570_2_fu_2567_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_722_p1 <= sext_ln570_fu_1689_p1(32 - 1 downto 0);
        else 
            grp_fu_722_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_726_p0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state29, sext_ln574_fu_1740_p1, sext_ln574_1_fu_2618_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_726_p0 <= sext_ln574_1_fu_2618_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_726_p0 <= sext_ln574_fu_1740_p1(32 - 1 downto 0);
        else 
            grp_fu_726_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_726_p1_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state29, sext_ln570_fu_1689_p1, sext_ln570_2_fu_2567_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_726_p1 <= sext_ln570_2_fu_2567_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_726_p1 <= sext_ln570_fu_1689_p1(32 - 1 downto 0);
        else 
            grp_fu_726_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_730_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state2, sext_ln251_fu_879_p1, sext_ln262_fu_1146_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_730_p0 <= sext_ln262_fu_1146_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_730_p0 <= sext_ln251_fu_879_p1(32 - 1 downto 0);
        else 
            grp_fu_730_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_730_p1 <= ap_const_lv39_7FFFFFFFD4(7 - 1 downto 0);
    grp_fu_741_p2 <= std_logic_vector(unsigned(grp_fu_706_p2) + unsigned(grp_fu_714_p2));
    grp_fu_763_p2 <= "1" when (i_6_fu_370 = ap_const_lv3_6) else "0";
    grp_fu_769_p2 <= std_logic_vector(unsigned(i_6_fu_370) + unsigned(ap_const_lv3_1));
    grp_fu_775_p3 <= grp_fu_722_p2(63 downto 63);
    grp_fu_783_p3 <= grp_fu_726_p2(63 downto 63);
    grp_fu_791_p3 <= 
        ap_const_lv17_1FF80 when (grp_fu_783_p3(0) = '1') else 
        ap_const_lv17_80;
    grp_fu_805_p2 <= "1" when (i_10_fu_386 = ap_const_lv3_6) else "0";
    grp_fu_811_p2 <= std_logic_vector(unsigned(i_10_fu_386) + unsigned(ap_const_lv3_1));
    h_address0 <= zext_ln257_fu_934_p1(5 - 1 downto 0);
    h_address1 <= zext_ln243_fu_922_p1(5 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    h_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            h_ce1 <= ap_const_logic_1;
        else 
            h_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    i_12_fu_1027_p2 <= std_logic_vector(unsigned(i_1_fu_350) + unsigned(ap_const_lv5_1));
    i_14_fu_1124_p2 <= std_logic_vector(unsigned(i_4_fu_362) + unsigned(ap_const_lv3_1));
    i_18_fu_2093_p2 <= std_logic_vector(unsigned(i_8_fu_382) + unsigned(ap_const_lv3_1));
    i_7_fu_907_p2 <= std_logic_vector(unsigned(i_fu_334) + unsigned(ap_const_lv4_1));
    icmp_ln255_fu_901_p2 <= "1" when (i_fu_334 = ap_const_lv4_A) else "0";
    icmp_ln269_fu_1021_p2 <= "1" when (i_1_fu_350 = ap_const_lv5_16) else "0";
    icmp_ln311_fu_2275_p2 <= "1" when (signed(m_3_fu_2267_p3) > signed(zext_ln310_2_fu_2257_p1)) else "0";
    icmp_ln464_1_fu_2078_p2 <= "1" when (i_8_fu_382 = ap_const_lv3_6) else "0";
    icmp_ln464_fu_1109_p2 <= "1" when (i_4_fu_362 = ap_const_lv3_6) else "0";
    icmp_ln493_fu_1378_p2 <= "1" when (mil_fu_366 = ap_const_lv5_1E) else "0";
    icmp_ln496_fu_1418_p2 <= "1" when (signed(zext_ln486_fu_1414_p1) < signed(m_4_reg_3124)) else "0";
    icmp_ln515_fu_1554_p2 <= "1" when (unsigned(select_ln513_fu_1542_p3) > unsigned(ap_const_lv17_4800)) else "0";
    icmp_ln535_1_fu_2509_p2 <= "1" when (trunc_ln10_reg_3346 = ap_const_lv14_0) else "0";
    icmp_ln535_fu_1644_p2 <= "1" when (trunc_ln7_reg_3193 = ap_const_lv16_0) else "0";
    icmp_ln583_1_fu_2828_p2 <= "1" when (signed(apl2_3_reg_3416) > signed(ap_const_lv17_3000)) else "0";
    icmp_ln583_fu_1960_p2 <= "1" when (signed(apl2_reg_3273) > signed(ap_const_lv17_3000)) else "0";
    icmp_ln585_1_fu_2844_p2 <= "1" when (signed(apl2_4_fu_2833_p3) < signed(ap_const_lv17_1D000)) else "0";
    icmp_ln585_fu_1976_p2 <= "1" when (signed(apl2_1_fu_1965_p3) < signed(ap_const_lv17_1D000)) else "0";
    icmp_ln607_1_fu_2878_p2 <= "1" when (signed(apl1_4_reg_3422) > signed(zext_ln595_2_fu_2870_p1)) else "0";
    icmp_ln607_fu_2010_p2 <= "1" when (signed(apl1_reg_3279) > signed(zext_ln595_fu_2002_p1)) else "0";
    icmp_ln609_1_fu_2904_p2 <= "1" when (signed(apl1_5_fu_2883_p3) < signed(sext_ln609_1_fu_2900_p1)) else "0";
    icmp_ln609_fu_2036_p2 <= "1" when (signed(apl1_1_fu_2015_p3) < signed(sext_ln609_fu_2032_p1)) else "0";
    icmp_ln624_fu_2418_p2 <= "1" when (unsigned(select_ln622_fu_2406_p3) > unsigned(ap_const_lv17_5800)) else "0";
    il <= ril_2_reg_3177;

    il_ap_vld_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            il_ap_vld <= ap_const_logic_1;
        else 
            il_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ilb_table_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state27, zext_ln525_fu_1594_p1, zext_ln525_1_fu_2458_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            ilb_table_address0 <= zext_ln525_1_fu_2458_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ilb_table_address0 <= zext_ln525_fu_1594_p1(5 - 1 downto 0);
        else 
            ilb_table_address0 <= "XXXXX";
        end if; 
    end process;


    ilb_table_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ilb_table_ce0 <= ap_const_logic_1;
        else 
            ilb_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_1445_p4 <= ril_2_fu_1438_p3(5 downto 2);
    m_2_fu_2261_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln304_fu_2212_p2));
    m_3_fu_2267_p3 <= 
        m_2_fu_2261_p2 when (tmp_11_fu_2217_p3(0) = '1') else 
        sub_ln304_fu_2212_p2;
    m_4_fu_1359_p3 <= 
        m_fu_1353_p2 when (tmp_2_fu_1345_p3(0) = '1') else 
        sub_ln285_fu_1336_p2;
    m_fu_1353_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sub_ln285_fu_1336_p2));
    mul_ln287_fu_1465_p1 <= zext_ln493_1_reg_3134(15 - 1 downto 0);
    mul_ln310_fu_2241_p0 <= mul_ln310_fu_2241_p00(15 - 1 downto 0);
    mul_ln310_fu_2241_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deth_i),25));
    mul_ln310_fu_2241_p1 <= ap_const_lv25_234(11 - 1 downto 0);
    mul_ln314_fu_2315_p1 <= mul_ln314_fu_2315_p10(15 - 1 downto 0);
    mul_ln314_fu_2315_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(deth_i),29));
    mul_ln495_fu_1399_p0 <= mul_ln495_fu_1399_p00(15 - 1 downto 0);
    mul_ln495_fu_1399_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decis_levl_q0),30));
    mul_ln495_fu_1399_p1 <= zext_ln493_reg_3129(15 - 1 downto 0);
    mul_ln545_1_fu_2739_p1 <= sext_ln543_reg_3390(14 - 1 downto 0);
    mul_ln545_fu_1871_p1 <= sext_ln287_1_reg_3211(16 - 1 downto 0);

    nbh_o_assign_proc : process(nbh_i, ap_CS_fsm_state27, select_ln624_fu_2424_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nbh_o <= select_ln624_fu_2424_p3;
        else 
            nbh_o <= nbh_i;
        end if; 
    end process;


    nbh_o_ap_vld_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            nbh_o_ap_vld <= ap_const_logic_1;
        else 
            nbh_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    nbl_o_assign_proc : process(nbl_i, ap_CS_fsm_state15, select_ln515_fu_1560_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            nbl_o <= select_ln515_fu_1560_p3;
        else 
            nbl_o <= nbl_i;
        end if; 
    end process;


    nbl_o_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            nbl_o_ap_vld <= ap_const_logic_1;
        else 
            nbl_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ph1_o_assign_proc : process(ph1_i, add_ln317_reg_3380, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            ph1_o <= add_ln317_reg_3380;
        else 
            ph1_o <= ph1_i;
        end if; 
    end process;


    ph1_o_ap_vld_assign_proc : process(icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            ph1_o_ap_vld <= ap_const_logic_1;
        else 
            ph1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    ph2_o_assign_proc : process(ph1_i, ph2_i, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            ph2_o <= ph1_i;
        else 
            ph2_o <= ph2_i;
        end if; 
    end process;


    ph2_o_ap_vld_assign_proc : process(icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            ph2_o_ap_vld <= ap_const_logic_1;
        else 
            ph2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    pl2_1_fu_2149_p3 <= (rh2_i & ap_const_lv1_0);
    pl2_fu_1262_p3 <= (rlt2_i & ap_const_lv1_0);
    pl_2_fu_2131_p3 <= (rh1_i & ap_const_lv1_0);
    pl_fu_1244_p3 <= (rlt1_i & ap_const_lv1_0);

    plt1_o_assign_proc : process(plt1_i, add_ln290_reg_3221, icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            plt1_o <= add_ln290_reg_3221;
        else 
            plt1_o <= plt1_i;
        end if; 
    end process;


    plt1_o_ap_vld_assign_proc : process(icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            plt1_o_ap_vld <= ap_const_logic_1;
        else 
            plt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    plt2_o_assign_proc : process(plt1_i, plt2_i, icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            plt2_o <= plt1_i;
        else 
            plt2_o <= plt2_i;
        end if; 
    end process;


    plt2_o_ap_vld_assign_proc : process(icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            plt2_o_ap_vld <= ap_const_logic_1;
        else 
            plt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    qq4_code4_table_address0 <= zext_ln287_fu_1455_p1(4 - 1 downto 0);

    qq4_code4_table_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            qq4_code4_table_ce0 <= ap_const_logic_1;
        else 
            qq4_code4_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    quant26bt_neg_address0 <= zext_ln504_fu_1427_p1(5 - 1 downto 0);

    quant26bt_neg_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            quant26bt_neg_ce0 <= ap_const_logic_1;
        else 
            quant26bt_neg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    quant26bt_pos_address0 <= zext_ln504_fu_1427_p1(5 - 1 downto 0);

    quant26bt_pos_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            quant26bt_pos_ce0 <= ap_const_logic_1;
        else 
            quant26bt_pos_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rh1_o_assign_proc : process(rh1_i, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2, add_ln321_fu_2709_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            rh1_o <= add_ln321_fu_2709_p2;
        else 
            rh1_o <= rh1_i;
        end if; 
    end process;


    rh1_o_ap_vld_assign_proc : process(icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            rh1_o_ap_vld <= ap_const_logic_1;
        else 
            rh1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rh2_o_assign_proc : process(rh1_i, rh2_i, icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            rh2_o <= rh1_i;
        else 
            rh2_o <= rh2_i;
        end if; 
    end process;


    rh2_o_ap_vld_assign_proc : process(icmp_ln535_1_reg_3386, ap_CS_fsm_state29, grp_fu_805_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and (((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_1)) or ((grp_fu_805_p2 = ap_const_lv1_1) and (icmp_ln535_1_reg_3386 = ap_const_lv1_0))))) then 
            rh2_o_ap_vld <= ap_const_logic_1;
        else 
            rh2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ril_2_fu_1438_p3 <= 
        quant26bt_neg_q0 when (tmp_2_reg_3119(0) = '1') else 
        quant26bt_pos_q0;

    rlt1_o_assign_proc : process(rlt1_i, icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2, add_ln294_fu_1831_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            rlt1_o <= add_ln294_fu_1831_p2;
        else 
            rlt1_o <= rlt1_i;
        end if; 
    end process;


    rlt1_o_ap_vld_assign_proc : process(icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            rlt1_o_ap_vld <= ap_const_logic_1;
        else 
            rlt1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rlt2_o_assign_proc : process(rlt1_i, rlt2_i, icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            rlt2_o <= rlt1_i;
        else 
            rlt2_o <= rlt2_i;
        end if; 
    end process;


    rlt2_o_ap_vld_assign_proc : process(icmp_ln535_reg_3227, ap_CS_fsm_state17, grp_fu_763_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_1)) or ((grp_fu_763_p2 = ap_const_lv1_1) and (icmp_ln535_reg_3227 = ap_const_lv1_0))))) then 
            rlt2_o_ap_vld <= ap_const_logic_1;
        else 
            rlt2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln305_fu_2225_p3 <= 
        ap_const_lv2_2 when (tmp_11_fu_2217_p3(0) = '1') else 
        ap_const_lv2_0;
    select_ln311_fu_2281_p3 <= 
        ap_const_lv2_2 when (icmp_ln311_fu_2275_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln513_fu_1542_p3 <= 
        ap_const_lv17_0 when (tmp_5_fu_1534_p3(0) = '1') else 
        add_ln512_fu_1524_p2;
    select_ln515_fu_1560_p3 <= 
        ap_const_lv15_4800 when (icmp_ln515_fu_1554_p2(0) = '1') else 
        trunc_ln509_fu_1550_p1;
    select_ln549_1_fu_2756_p3 <= 
        ap_const_lv32_FFFFFF80 when (tmp_13_fu_2748_p3(0) = '1') else 
        ap_const_lv32_80;
    select_ln549_fu_1888_p3 <= 
        ap_const_lv32_FFFFFF80 when (tmp_8_fu_1880_p3(0) = '1') else 
        ap_const_lv32_80;
    select_ln570_1_fu_2606_p3 <= 
        sext_ln572_1_fu_2592_p1 when (grp_fu_775_p3(0) = '1') else 
        tmp_7_fu_2596_p4;
    select_ln570_fu_1728_p3 <= 
        sext_ln572_fu_1714_p1 when (grp_fu_775_p3(0) = '1') else 
        tmp_4_fu_1718_p4;
    select_ln599_1_fu_2695_p3 <= 
        ap_const_lv18_3FF40 when (grp_fu_775_p3(0) = '1') else 
        ap_const_lv18_C0;
    select_ln599_fu_1817_p3 <= 
        ap_const_lv18_3FF40 when (grp_fu_775_p3(0) = '1') else 
        ap_const_lv18_C0;
    select_ln622_fu_2406_p3 <= 
        ap_const_lv17_0 when (tmp_12_fu_2398_p3(0) = '1') else 
        add_ln621_fu_2388_p2;
    select_ln624_fu_2424_p3 <= 
        ap_const_lv15_5800 when (icmp_ln624_fu_2418_p2(0) = '1') else 
        trunc_ln617_fu_2414_p1;
        sext_ln244_1_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_730_p2),50));

        sext_ln244_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xa_fu_869_p2),50));

        sext_ln250_1_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln250_1_fu_857_p3),37));

        sext_ln250_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_845_p3),37));

        sext_ln251_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tqmf_q0),39));

        sext_ln257_1_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_q1),47));

        sext_ln257_2_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_706_p2),50));

        sext_ln257_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tqmf_q1),47));

        sext_ln258_2_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln258_fu_710_p2),50));

        sext_ln262_1_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_730_p2),47));

        sext_ln262_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tqmf_load_2_reg_3015),39));

        sext_ln263_1_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln263_1_fu_1170_p3),37));

        sext_ln263_2_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln263_fu_1181_p2),47));

        sext_ln263_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_1159_p3),37));

        sext_ln287_1_fu_1604_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_reg_3193),32));

        sext_ln314_1_fu_2469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln10_reg_3346),32));

        sext_ln460_1_fu_2066_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_702_p2),48));

        sext_ln460_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_718_p2),50));

    sext_ln461_1_fu_1092_p0 <= delay_dltx_q0;
        sext_ln461_1_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln461_1_fu_1092_p0),48));

        sext_ln461_2_fu_2056_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_bph_q0),46));

    sext_ln461_3_fu_2061_p0 <= delay_dhx_q0;
        sext_ln461_3_fu_2061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln461_3_fu_2061_p0),46));

        sext_ln461_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_bpl_q0),48));

        sext_ln466_1_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_dltx_q0),48));

        sext_ln466_2_fu_1295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_718_p2),50));

        sext_ln466_3_fu_2167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_bph_q0),46));

        sext_ln466_4_fu_2172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_dhx_q0),46));

        sext_ln466_5_fu_2177_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_702_p2),48));

        sext_ln466_fu_1285_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(delay_bpl_q0),48));

    sext_ln475_1_fu_1257_p0 <= al1_i;
        sext_ln475_1_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln475_1_fu_1257_p0),47));

        sext_ln475_2_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl2_fu_1262_p3),47));

        sext_ln475_3_fu_2139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl_2_fu_2131_p3),47));

    sext_ln475_4_fu_2144_p0 <= ah1_i;
        sext_ln475_4_fu_2144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln475_4_fu_2144_p0),47));

        sext_ln475_5_fu_2157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl2_1_fu_2149_p3),47));

        sext_ln475_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pl_fu_1244_p3),47));

    sext_ln477_1_fu_2463_p0 <= ah1_i;
        sext_ln477_1_fu_2463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln477_1_fu_2463_p0),25));

    sext_ln477_fu_1320_p0 <= al1_i;
        sext_ln477_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln477_fu_1320_p0),25));

    sext_ln479_1_fu_1275_p0 <= al2_i;
        sext_ln479_1_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_1_fu_1275_p0),47));

    sext_ln479_2_fu_2466_p0 <= ah2_i;
        sext_ln479_2_fu_2466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_2_fu_2466_p0),23));

    sext_ln479_3_fu_2162_p0 <= ah2_i;
        sext_ln479_3_fu_2162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_3_fu_2162_p0),47));

    sext_ln479_fu_1323_p0 <= al2_i;
        sext_ln479_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln479_fu_1323_p0),23));

        sext_ln509_fu_1530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln512_fu_1524_p2),32));

        sext_ln511_fu_1607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_reg_3193),31));

        sext_ln512_1_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wl_code_table_q0),17));

        sext_ln512_fu_1516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_1506_p4),17));

    sext_ln539_1_fu_2799_p0 <= delay_bph_q0;
        sext_ln539_1_fu_2799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln539_1_fu_2799_p0),40));

    sext_ln539_fu_1931_p0 <= delay_bpl_q0;
        sext_ln539_fu_1931_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln539_fu_1931_p0),40));

        sext_ln543_fu_2514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln10_reg_3346),28));

        sext_ln545_1_fu_1876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln545_fu_1871_p2),64));

        sext_ln545_3_fu_2744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln545_1_fu_2739_p2),64));

    sext_ln549_1_fu_2764_p0 <= delay_bph_q0;
        sext_ln549_1_fu_2764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln549_1_fu_2764_p0),40));

    sext_ln549_fu_1896_p0 <= delay_bpl_q0;
        sext_ln549_fu_1896_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln549_fu_1896_p0),40));

        sext_ln566_1_fu_2563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_1_fu_2556_p3),19));

        sext_ln566_fu_1685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd2_fu_1678_p3),19));

    sext_ln570_1_fu_1694_p0 <= plt1_i;
        sext_ln570_1_fu_1694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln570_1_fu_1694_p0),64));

        sext_ln570_2_fu_2567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln317_reg_3380),64));

    sext_ln570_3_fu_2572_p0 <= ph1_i;
        sext_ln570_3_fu_2572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln570_3_fu_2572_p0),64));

        sext_ln570_fu_1689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln290_reg_3221),64));

        sext_ln572_1_fu_2592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_2583_p4),12));

        sext_ln572_fu_1714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_1705_p4),12));

    sext_ln574_1_fu_2618_p0 <= ph2_i;
        sext_ln574_1_fu_2618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln574_1_fu_2618_p0),64));

        sext_ln574_2_fu_1736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln570_fu_1728_p3),17));

        sext_ln574_3_fu_2614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln570_1_fu_2606_p3),17));

    sext_ln574_fu_1740_p0 <= plt2_i;
        sext_ln574_fu_1740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln574_fu_1740_p0),64));

        sext_ln580_1_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln6_fu_1761_p4),17));

        sext_ln580_2_fu_2630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln580_1_fu_2623_p3),23));

        sext_ln580_3_fu_2649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln580_1_fu_2639_p4),17));

        sext_ln580_fu_1752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln6_fu_1745_p3),23));

        sext_ln597_1_fu_2672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln597_1_fu_2665_p3),25));

        sext_ln597_fu_1794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln7_fu_1787_p3),25));

        sext_ln599_1_fu_2691_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln597_1_fu_2681_p4),18));

        sext_ln599_fu_1813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_1803_p4),18));

        sext_ln609_1_fu_2900_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_6_fu_2894_p2),18));

        sext_ln609_fu_2032_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(apl1_2_fu_2026_p2),18));

        sext_ln617_fu_2394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln621_fu_2388_p2),32));

        sext_ln618_fu_2367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(wd_1_fu_2357_p4),17));

        sext_ln620_fu_2472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln10_reg_3346),31));

        sext_ln621_fu_2384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_2371_p6),17));

    shl_ln1_fu_1159_p3 <= (tqmf_load_3_reg_3020 & ap_const_lv4_0);
    shl_ln250_1_fu_857_p3 <= (tqmf_q1 & ap_const_lv2_0);
    shl_ln263_1_fu_1170_p3 <= (tqmf_load_3_reg_3020 & ap_const_lv2_0);
    shl_ln2_fu_1488_p3 <= (nbl_i & ap_const_lv7_0);
    shl_ln3_fu_1625_p3 <= (wd3_fu_1619_p2 & ap_const_lv3_0);
    shl_ln4_fu_1935_p1 <= delay_bpl_q0;
    shl_ln4_fu_1935_p3 <= (shl_ln4_fu_1935_p1 & ap_const_lv8_0);
    shl_ln526_1_fu_2490_p3 <= (wd3_3_fu_2484_p2 & ap_const_lv3_0);
    shl_ln539_1_fu_2803_p1 <= delay_bph_q0;
    shl_ln539_1_fu_2803_p3 <= (shl_ln539_1_fu_2803_p1 & ap_const_lv8_0);
    shl_ln549_1_fu_2768_p1 <= delay_bph_q0;
    shl_ln549_1_fu_2768_p3 <= (shl_ln549_1_fu_2768_p1 & ap_const_lv8_0);
    shl_ln580_1_fu_2623_p1 <= ah2_i;
    shl_ln580_1_fu_2623_p3 <= (shl_ln580_1_fu_2623_p1 & ap_const_lv7_0);
    shl_ln597_1_fu_2665_p1 <= ah1_i;
    shl_ln597_1_fu_2665_p3 <= (shl_ln597_1_fu_2665_p1 & ap_const_lv8_0);
    shl_ln5_fu_1900_p1 <= delay_bpl_q0;
    shl_ln5_fu_1900_p3 <= (shl_ln5_fu_1900_p1 & ap_const_lv8_0);
    shl_ln6_fu_1745_p1 <= al2_i;
    shl_ln6_fu_1745_p3 <= (shl_ln6_fu_1745_p1 & ap_const_lv7_0);
    shl_ln7_fu_1787_p1 <= al1_i;
    shl_ln7_fu_1787_p3 <= (shl_ln7_fu_1787_p1 & ap_const_lv8_0);
    shl_ln8_fu_2339_p3 <= (nbh_i & ap_const_lv7_0);
    shl_ln_fu_845_p3 <= (tqmf_q1 & ap_const_lv4_0);
    sub_ln263_fu_1181_p2 <= std_logic_vector(signed(sext_ln263_fu_1166_p1) - signed(sext_ln263_1_fu_1177_p1));
    sub_ln279_fu_1202_p2 <= std_logic_vector(unsigned(xa_4_fu_1154_p2) - unsigned(xb_4_fu_1191_p2));
    sub_ln285_fu_1336_p2 <= std_logic_vector(unsigned(trunc_ln2_reg_3080) - unsigned(add_ln284_fu_1326_p2));
    sub_ln304_fu_2212_p2 <= std_logic_vector(unsigned(trunc_ln3_reg_3085) - unsigned(add_ln303_fu_2202_p2));
    sub_ln511_fu_1500_p2 <= std_logic_vector(unsigned(zext_ln511_1_fu_1496_p1) - unsigned(zext_ln511_fu_1484_p1));
    sub_ln525_1_fu_2475_p2 <= std_logic_vector(signed(ap_const_lv4_B) - signed(trunc_ln522_1_reg_3355));
    sub_ln525_1cast_fu_2480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln525_1_fu_2475_p2),12));
    sub_ln525_fu_1610_p2 <= std_logic_vector(signed(ap_const_lv4_9) - signed(trunc_ln_reg_3201));
    sub_ln525cast_fu_1615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln525_fu_1610_p2),12));
    sub_ln539_1_fu_2811_p2 <= std_logic_vector(unsigned(shl_ln539_1_fu_2803_p3) - unsigned(sext_ln539_1_fu_2799_p1));
    sub_ln539_fu_1943_p2 <= std_logic_vector(unsigned(shl_ln4_fu_1935_p3) - unsigned(sext_ln539_fu_1931_p1));
    sub_ln549_1_fu_2776_p2 <= std_logic_vector(unsigned(shl_ln549_1_fu_2768_p3) - unsigned(sext_ln549_1_fu_2764_p1));
    sub_ln549_fu_1908_p2 <= std_logic_vector(unsigned(shl_ln5_fu_1900_p3) - unsigned(sext_ln549_fu_1896_p1));
    sub_ln571_1_fu_2577_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(sext_ln566_1_fu_2563_p1));
    sub_ln571_fu_1699_p2 <= std_logic_vector(unsigned(ap_const_lv19_0) - unsigned(sext_ln566_fu_1685_p1));
    sub_ln580_1_fu_2634_p2 <= std_logic_vector(signed(sext_ln580_2_fu_2630_p1) - signed(sext_ln479_2_reg_3370));
    sub_ln580_fu_1756_p2 <= std_logic_vector(signed(sext_ln580_fu_1752_p1) - signed(sext_ln479_reg_3109));
    sub_ln597_1_fu_2676_p2 <= std_logic_vector(signed(sext_ln597_1_fu_2672_p1) - signed(sext_ln477_1_reg_3365));
    sub_ln597_fu_1798_p2 <= std_logic_vector(signed(sext_ln597_fu_1794_p1) - signed(sext_ln477_reg_3104));
    sub_ln620_fu_2351_p2 <= std_logic_vector(unsigned(zext_ln620_1_fu_2347_p1) - unsigned(zext_ln620_fu_2335_p1));
    tmp_11_fu_2217_p3 <= sub_ln304_fu_2212_p2(31 downto 31);
    tmp_12_fu_2398_p3 <= sext_ln617_fu_2394_p1(31 downto 31);
    tmp_13_fu_2748_p3 <= sext_ln545_3_fu_2744_p1(63 downto 63);
    tmp_2_fu_1345_p3 <= sub_ln285_fu_1336_p2(31 downto 31);
    tmp_3_fu_1705_p1 <= al1_i;
    tmp_3_fu_1705_p4 <= tmp_3_fu_1705_p1(15 downto 5);
    tmp_4_fu_1718_p4 <= sub_ln571_fu_1699_p2(18 downto 7);
    tmp_5_fu_1534_p3 <= sext_ln509_fu_1530_p1(31 downto 31);
    tmp_6_fu_2583_p1 <= ah1_i;
    tmp_6_fu_2583_p4 <= tmp_6_fu_2583_p1(15 downto 5);
    tmp_7_fu_2596_p4 <= sub_ln571_1_fu_2577_p2(18 downto 7);
    tmp_8_fu_1880_p3 <= sext_ln545_1_fu_1876_p1(63 downto 63);

    tqmf_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln255_fu_901_p2, zext_ln257_fu_934_p1, zext_ln243_1_fu_1046_p1, icmp_ln269_fu_1021_p2)
    begin
        if (((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tqmf_address0 <= ap_const_lv5_0;
        elsif (((icmp_ln269_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tqmf_address0 <= zext_ln243_1_fu_1046_p1(5 - 1 downto 0);
        elsif (((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address0 <= ap_const_lv5_17;
        elsif (((icmp_ln255_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address0 <= zext_ln257_fu_934_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tqmf_address0 <= ap_const_lv5_1;
        else 
            tqmf_address0 <= "XXXXX";
        end if; 
    end process;


    tqmf_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, zext_ln243_fu_922_p1, icmp_ln255_fu_901_p2, zext_ln243_2_fu_1082_p1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tqmf_address1 <= zext_ln243_2_fu_1082_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tqmf_address1 <= ap_const_lv5_1;
        elsif (((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address1 <= ap_const_lv5_16;
        elsif (((icmp_ln255_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            tqmf_address1 <= zext_ln243_fu_922_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            tqmf_address1 <= ap_const_lv5_0;
        else 
            tqmf_address1 <= "XXXXX";
        end if; 
    end process;


    tqmf_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln255_fu_901_p2, icmp_ln269_fu_1021_p2)
    begin
        if ((((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln269_fu_1021_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln255_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            tqmf_ce0 <= ap_const_logic_1;
        else 
            tqmf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state6, icmp_ln255_fu_901_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln255_fu_901_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln255_fu_901_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            tqmf_ce1 <= ap_const_logic_1;
        else 
            tqmf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tqmf_d0 <= xin2;

    tqmf_d1_assign_proc : process(xin1, tqmf_q0, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tqmf_d1 <= tqmf_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tqmf_d1 <= xin1;
        else 
            tqmf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tqmf_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln269_fu_1021_p2)
    begin
        if (((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            tqmf_we0 <= ap_const_logic_1;
        else 
            tqmf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tqmf_we1_assign_proc : process(ap_CS_fsm_state6, icmp_ln269_fu_1021_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln269_fu_1021_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            tqmf_we1 <= ap_const_logic_1;
        else 
            tqmf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln255_1_fu_1014_p1 <= xa_1_fu_338(47 - 1 downto 0);
    trunc_ln255_fu_1010_p1 <= xb_1_fu_342(47 - 1 downto 0);
    trunc_ln269_fu_1036_p1 <= idx214_fu_346(5 - 1 downto 0);
    trunc_ln285_fu_1332_p1 <= add_ln284_fu_1326_p2(31 - 1 downto 0);
    trunc_ln304_fu_2208_p1 <= add_ln303_fu_2202_p2(31 - 1 downto 0);
    trunc_ln469_1_fu_2192_p4 <= zl_4_fu_378(45 downto 14);
    trunc_ln4_fu_1310_p4 <= zl_1_fu_358(45 downto 14);
    trunc_ln509_fu_1550_p1 <= select_ln513_fu_1542_p3(15 - 1 downto 0);
    trunc_ln567_1_fu_2840_p1 <= apl2_4_fu_2833_p3(15 - 1 downto 0);
    trunc_ln567_fu_1972_p1 <= apl2_1_fu_1965_p3(15 - 1 downto 0);
    trunc_ln580_1_fu_2639_p4 <= sub_ln580_1_fu_2634_p2(22 downto 7);
    trunc_ln595_1_fu_2890_p1 <= apl1_5_fu_2883_p3(16 - 1 downto 0);
    trunc_ln595_fu_2022_p1 <= apl1_1_fu_2015_p3(16 - 1 downto 0);
    trunc_ln597_1_fu_2681_p4 <= sub_ln597_1_fu_2676_p2(24 downto 8);
    trunc_ln617_fu_2414_p1 <= select_ln622_fu_2406_p3(15 - 1 downto 0);
    trunc_ln6_fu_1761_p4 <= sub_ln580_fu_1756_p2(22 downto 7);
    trunc_ln8_fu_1506_p4 <= sub_ln511_fu_1500_p2(22 downto 7);
    trunc_ln9_fu_1803_p4 <= sub_ln597_fu_1798_p2(24 downto 8);
    wd1_1_fu_2438_p4 <= select_ln624_fu_2424_p3(10 downto 6);
    wd1_fu_1574_p4 <= select_ln515_fu_1560_p3(10 downto 6);
    wd2_1_fu_2556_p1 <= ah1_i;
    wd2_1_fu_2556_p3 <= (wd2_1_fu_2556_p1 & ap_const_lv2_0);
    wd2_fu_1678_p1 <= al1_i;
    wd2_fu_1678_p3 <= (wd2_fu_1678_p1 & ap_const_lv2_0);
    wd3_1_fu_1914_p4 <= sub_ln549_fu_1908_p2(39 downto 8);
    wd3_2_fu_1996_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_2_fu_1982_p3));
    wd3_3_fu_2484_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & sub_ln525_1cast_fu_2480_p1(12-1 downto 0)))));
    wd3_4_fu_2782_p4 <= sub_ln549_1_fu_2776_p2(39 downto 8);
    wd3_5_fu_2864_p2 <= std_logic_vector(unsigned(ap_const_lv15_3C00) - unsigned(apl2_5_fu_2850_p3));
    wd3_fu_1619_p2 <= std_logic_vector(shift_right(unsigned(ilb_table_q0),to_integer(unsigned('0' & sub_ln525cast_fu_1615_p1(12-1 downto 0)))));
    wd_1_fu_2357_p4 <= sub_ln620_fu_2351_p2(22 downto 7);
    wl_code_table_address0 <= zext_ln287_fu_1455_p1(4 - 1 downto 0);

    wl_code_table_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wl_code_table_ce0 <= ap_const_logic_1;
        else 
            wl_code_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xa_3_fu_974_p2 <= std_logic_vector(signed(sext_ln257_2_fu_970_p1) + signed(xa_1_fu_338));
    xa_4_fu_1154_p2 <= std_logic_vector(signed(sext_ln262_1_fu_1150_p1) + signed(trunc_ln255_1_reg_3010));
    xa_fu_869_p2 <= std_logic_vector(signed(sext_ln250_fu_853_p1) - signed(sext_ln250_1_fu_865_p1));
    xb_3_fu_994_p2 <= std_logic_vector(signed(sext_ln258_2_fu_990_p1) + signed(xb_1_fu_342));
    xb_4_fu_1191_p2 <= std_logic_vector(signed(sext_ln263_2_fu_1187_p1) + signed(trunc_ln255_reg_3005));
    zext_ln243_1_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_1_fu_1040_p2),64));
    zext_ln243_2_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_2_fu_1077_p2),64));
    zext_ln243_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln243_fu_916_p2),64));
    zext_ln257_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_fu_928_p2),64));
    zext_ln287_fu_1455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_1445_p4),64));
    zext_ln310_2_fu_2257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decis_1_fu_2247_p4),32));
    zext_ln460_1_fu_2087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx226_fu_374),64));
    zext_ln460_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx220_fu_354),64));
    zext_ln486_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(decis_fu_1404_p4),32));
    zext_ln493_1_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(detl_i),31));
    zext_ln493_2_fu_1390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mil_fu_366),64));
    zext_ln493_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(detl_i),30));
    zext_ln504_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_mil_02_i_phi_fu_695_p4),64));
    zext_ln511_1_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_1488_p3),23));
    zext_ln511_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nbl_i),23));
    zext_ln525_1_fu_2458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd1_1_fu_2438_p4),64));
    zext_ln525_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd1_fu_1574_p4),64));
    zext_ln537_1_fu_2538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_fu_386),64));
    zext_ln537_fu_1660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_fu_370),64));
    zext_ln543_1_fu_2527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_fu_386),64));
    zext_ln543_fu_1649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_fu_370),64));
    zext_ln595_1_fu_2006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_2_fu_1996_p2),16));
    zext_ln595_2_fu_2870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_5_fu_2864_p2),18));
    zext_ln595_3_fu_2874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_5_fu_2864_p2),16));
    zext_ln595_fu_2002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wd3_2_fu_1996_p2),18));
    zext_ln620_1_fu_2347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln8_fu_2339_p3),23));
    zext_ln620_fu_2335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nbh_i),23));
    zl_2_fu_1299_p2 <= std_logic_vector(signed(sext_ln466_2_fu_1295_p1) + signed(zl_1_fu_358));
    zl_7_fu_2181_p2 <= std_logic_vector(signed(sext_ln466_5_fu_2177_p1) + signed(zl_4_fu_378));
end behav;
