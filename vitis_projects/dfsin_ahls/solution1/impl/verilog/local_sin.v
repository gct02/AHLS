// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="local_sin_local_sin,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.518917,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=11875,HLS_SYN_LUT=26744,HLS_VERSION=2023_2}" *)

module local_sin (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        rad,
        ap_return
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] rad;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] float_exception_flags;
reg   [7:0] countLeadingZerosHigh_address0;
reg    countLeadingZerosHigh_ce0;
wire   [3:0] countLeadingZerosHigh_q0;
wire   [63:0] grp_float64_mul_fu_137_ap_return;
reg   [63:0] reg_188;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
wire   [63:0] m_rad2_fu_208_p2;
reg   [63:0] m_rad2_reg_532;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [30:0] grp_fu_179_p2;
reg   [30:0] mul_ln59_reg_550;
wire    ap_CS_fsm_state5;
reg   [15:0] tmp_19_reg_555;
wire   [14:0] trunc_ln268_fu_251_p1;
reg   [14:0] trunc_ln268_reg_560;
wire   [31:0] zSig_fu_255_p3;
reg   [31:0] zSig_reg_565;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln265_fu_262_p2;
reg   [0:0] icmp_ln265_reg_570;
wire   [0:0] icmp_ln270_fu_292_p2;
reg   [0:0] icmp_ln270_reg_576;
wire   [7:0] select_ln270_fu_308_p3;
reg   [7:0] select_ln270_reg_581;
wire    ap_CS_fsm_state7;
wire   [5:0] shiftCount_6_fu_353_p2;
reg   [5:0] shiftCount_6_reg_594;
wire    ap_CS_fsm_state8;
wire   [63:0] add_ln146_fu_398_p2;
reg   [63:0] add_ln146_reg_600;
wire   [63:0] grp_float64_div_fu_149_ap_return;
reg   [63:0] diff_1_reg_605;
wire    ap_CS_fsm_state11;
wire   [51:0] trunc_ln49_fu_404_p1;
reg   [51:0] trunc_ln49_reg_613;
wire   [62:0] trunc_ln49_1_fu_408_p1;
reg   [62:0] trunc_ln49_1_reg_618;
reg   [0:0] tmp_22_reg_623;
reg   [63:0] grp_load_fu_183_p1;
reg   [63:0] app_reg_628;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_21_fu_420_p3;
reg   [0:0] tmp_21_reg_634;
wire   [0:0] xor_ln454_fu_430_p2;
reg   [0:0] xor_ln454_reg_640;
wire   [63:0] grp_addFloat64Sigs_fu_159_ap_return;
reg   [63:0] tmp_2_reg_644;
wire    ap_CS_fsm_state13;
wire   [63:0] grp_subFloat64Sigs_fu_168_ap_return;
reg   [63:0] tmp_3_reg_655;
wire    ap_CS_fsm_state15;
wire    grp_float64_mul_fu_137_ap_start;
wire    grp_float64_mul_fu_137_ap_done;
wire    grp_float64_mul_fu_137_ap_idle;
wire    grp_float64_mul_fu_137_ap_ready;
reg   [63:0] grp_float64_mul_fu_137_a;
reg   [63:0] grp_float64_mul_fu_137_b;
wire   [31:0] grp_float64_mul_fu_137_float_exception_flags_o;
wire    grp_float64_mul_fu_137_float_exception_flags_o_ap_vld;
wire    grp_float64_div_fu_149_ap_start;
wire    grp_float64_div_fu_149_ap_done;
wire    grp_float64_div_fu_149_ap_idle;
wire    grp_float64_div_fu_149_ap_ready;
wire   [31:0] grp_float64_div_fu_149_float_exception_flags_o;
wire    grp_float64_div_fu_149_float_exception_flags_o_ap_vld;
wire    grp_addFloat64Sigs_fu_159_ap_start;
wire    grp_addFloat64Sigs_fu_159_ap_done;
wire    grp_addFloat64Sigs_fu_159_ap_idle;
wire    grp_addFloat64Sigs_fu_159_ap_ready;
wire   [31:0] grp_addFloat64Sigs_fu_159_float_exception_flags_o;
wire    grp_addFloat64Sigs_fu_159_float_exception_flags_o_ap_vld;
wire    grp_subFloat64Sigs_fu_168_ap_start;
wire    grp_subFloat64Sigs_fu_168_ap_done;
wire    grp_subFloat64Sigs_fu_168_ap_idle;
wire    grp_subFloat64Sigs_fu_168_ap_ready;
wire   [31:0] grp_subFloat64Sigs_fu_168_float_exception_flags_o;
wire    grp_subFloat64Sigs_fu_168_float_exception_flags_o_ap_vld;
reg    grp_float64_mul_fu_137_ap_start_reg;
wire    grp_float64_mul_fu_137_countLeadingZerosHigh_ce0;
wire   [7:0] grp_float64_mul_fu_137_countLeadingZerosHigh_address0;
reg    grp_float64_div_fu_149_ap_start_reg;
wire    ap_CS_fsm_state10;
wire    grp_float64_div_fu_149_countLeadingZerosHigh_ce0;
wire   [7:0] grp_float64_div_fu_149_countLeadingZerosHigh_address0;
reg    grp_addFloat64Sigs_fu_159_ap_start_reg;
reg    grp_subFloat64Sigs_fu_168_ap_start_reg;
wire   [63:0] zext_ln275_fu_316_p1;
wire   [31:0] or_ln69_fu_492_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] and_ln626_fu_468_p2;
reg   [63:0] app_1_fu_106;
reg   [63:0] ap_sig_allocacmp_app_1_load;
wire   [0:0] icmp_ln635_fu_474_p2;
reg   [63:0] diff_fu_110;
reg   [63:0] inc_fu_114;
wire   [63:0] add_ln61_fu_443_p2;
wire  signed [30:0] grp_fu_179_p0;
wire  signed [30:0] grp_fu_179_p1;
wire   [29:0] trunc_ln59_1_fu_222_p1;
wire   [30:0] shl_ln_fu_226_p3;
wire   [31:0] shl_ln3_fu_267_p3;
wire   [31:0] select_ln265_2_fu_274_p3;
wire   [7:0] tmp_20_fu_282_p4;
wire   [7:0] tmp_s_fu_298_p4;
wire   [4:0] shiftCount_4_fu_331_p3;
wire   [4:0] shiftCount_fu_324_p3;
wire   [4:0] shiftCount_5_fu_338_p3;
wire   [5:0] zext_ln275_1_fu_349_p1;
wire   [5:0] zext_ln270_fu_345_p1;
wire   [5:0] shiftCount_7_fu_359_p2;
wire   [63:0] zext_ln272_fu_364_p1;
wire   [63:0] zext_ln273_fu_370_p1;
wire   [10:0] zext_ln273_1_fu_367_p1;
wire   [10:0] sub_ln146_fu_380_p2;
wire   [62:0] shl_ln4_fu_386_p3;
wire   [63:0] zext_ln146_fu_394_p1;
wire   [63:0] shl_ln273_fu_374_p2;
wire   [10:0] trunc_ln8_fu_448_p4;
wire   [0:0] icmp_ln626_fu_457_p2;
wire   [0:0] icmp_ln626_1_fu_463_p2;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 float_exception_flags = 32'd0;
#0 grp_float64_mul_fu_137_ap_start_reg = 1'b0;
#0 grp_float64_div_fu_149_ap_start_reg = 1'b0;
#0 grp_addFloat64Sigs_fu_159_ap_start_reg = 1'b0;
#0 grp_subFloat64Sigs_fu_168_ap_start_reg = 1'b0;
#0 app_1_fu_106 = 64'd0;
#0 diff_fu_110 = 64'd0;
#0 inc_fu_114 = 64'd0;
end

local_sin_float64_mul_countLeadingZerosHigh_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
countLeadingZerosHigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(countLeadingZerosHigh_address0),
    .ce0(countLeadingZerosHigh_ce0),
    .q0(countLeadingZerosHigh_q0)
);

local_sin_float64_mul grp_float64_mul_fu_137(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_float64_mul_fu_137_ap_start),
    .ap_done(grp_float64_mul_fu_137_ap_done),
    .ap_idle(grp_float64_mul_fu_137_ap_idle),
    .ap_ready(grp_float64_mul_fu_137_ap_ready),
    .a(grp_float64_mul_fu_137_a),
    .b(grp_float64_mul_fu_137_b),
    .float_exception_flags_i(float_exception_flags),
    .float_exception_flags_o(grp_float64_mul_fu_137_float_exception_flags_o),
    .float_exception_flags_o_ap_vld(grp_float64_mul_fu_137_float_exception_flags_o_ap_vld),
    .ap_return(grp_float64_mul_fu_137_ap_return)
);

local_sin_float64_div grp_float64_div_fu_149(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_float64_div_fu_149_ap_start),
    .ap_done(grp_float64_div_fu_149_ap_done),
    .ap_idle(grp_float64_div_fu_149_ap_idle),
    .ap_ready(grp_float64_div_fu_149_ap_ready),
    .a(reg_188),
    .b(add_ln146_reg_600),
    .float_exception_flags_i(float_exception_flags),
    .float_exception_flags_o(grp_float64_div_fu_149_float_exception_flags_o),
    .float_exception_flags_o_ap_vld(grp_float64_div_fu_149_float_exception_flags_o_ap_vld),
    .ap_return(grp_float64_div_fu_149_ap_return)
);

local_sin_addFloat64Sigs grp_addFloat64Sigs_fu_159(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_addFloat64Sigs_fu_159_ap_start),
    .ap_done(grp_addFloat64Sigs_fu_159_ap_done),
    .ap_idle(grp_addFloat64Sigs_fu_159_ap_idle),
    .ap_ready(grp_addFloat64Sigs_fu_159_ap_ready),
    .a(app_reg_628),
    .b(diff_1_reg_605),
    .zSign(tmp_21_reg_634),
    .float_exception_flags_i(float_exception_flags),
    .float_exception_flags_o(grp_addFloat64Sigs_fu_159_float_exception_flags_o),
    .float_exception_flags_o_ap_vld(grp_addFloat64Sigs_fu_159_float_exception_flags_o_ap_vld),
    .ap_return(grp_addFloat64Sigs_fu_159_ap_return)
);

local_sin_subFloat64Sigs grp_subFloat64Sigs_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_subFloat64Sigs_fu_168_ap_start),
    .ap_done(grp_subFloat64Sigs_fu_168_ap_done),
    .ap_idle(grp_subFloat64Sigs_fu_168_ap_idle),
    .ap_ready(grp_subFloat64Sigs_fu_168_ap_ready),
    .a(app_reg_628),
    .b(diff_1_reg_605),
    .zSign(tmp_21_reg_634),
    .float_exception_flags_i(float_exception_flags),
    .float_exception_flags_o(grp_subFloat64Sigs_fu_168_float_exception_flags_o),
    .float_exception_flags_o_ap_vld(grp_subFloat64Sigs_fu_168_float_exception_flags_o_ap_vld),
    .ap_return(grp_subFloat64Sigs_fu_168_ap_return)
);

local_sin_mul_31s_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_31s_31s_31_2_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_179_p0),
    .din1(grp_fu_179_p1),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_addFloat64Sigs_fu_159_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (xor_ln454_fu_430_p2 == 1'd0))) begin
            grp_addFloat64Sigs_fu_159_ap_start_reg <= 1'b1;
        end else if ((grp_addFloat64Sigs_fu_159_ap_ready == 1'b1)) begin
            grp_addFloat64Sigs_fu_159_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_float64_div_fu_149_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_float64_div_fu_149_ap_start_reg <= 1'b1;
        end else if ((grp_float64_div_fu_149_ap_ready == 1'b1)) begin
            grp_float64_div_fu_149_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_float64_mul_fu_137_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
            grp_float64_mul_fu_137_ap_start_reg <= 1'b1;
        end else if ((grp_float64_mul_fu_137_ap_ready == 1'b1)) begin
            grp_float64_mul_fu_137_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_subFloat64Sigs_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state12) & (xor_ln454_fu_430_p2 == 1'd1))) begin
            grp_subFloat64Sigs_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_subFloat64Sigs_fu_168_ap_ready == 1'b1)) begin
            grp_subFloat64Sigs_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        app_1_fu_106 <= rad;
    end else if (((1'b1 == ap_CS_fsm_state14) & (xor_ln454_reg_640 == 1'd1))) begin
        app_1_fu_106 <= tmp_3_reg_655;
    end else if (((1'b1 == ap_CS_fsm_state14) & (xor_ln454_reg_640 == 1'd0))) begin
        app_1_fu_106 <= tmp_2_reg_644;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        diff_fu_110 <= rad;
    end else if (((1'd0 == and_ln626_fu_468_p2) & (1'b1 == ap_CS_fsm_state14))) begin
        diff_fu_110 <= diff_1_reg_605;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln626_fu_468_p2) & (1'b1 == ap_CS_fsm_state14))) begin
        float_exception_flags <= or_ln69_fu_492_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (grp_subFloat64Sigs_fu_168_float_exception_flags_o_ap_vld == 1'b1))) begin
        float_exception_flags <= grp_subFloat64Sigs_fu_168_float_exception_flags_o;
    end else if (((1'b1 == ap_CS_fsm_state13) & (grp_addFloat64Sigs_fu_159_float_exception_flags_o_ap_vld == 1'b1))) begin
        float_exception_flags <= grp_addFloat64Sigs_fu_159_float_exception_flags_o;
    end else if (((1'b1 == ap_CS_fsm_state11) & (grp_float64_div_fu_149_float_exception_flags_o_ap_vld == 1'b1))) begin
        float_exception_flags <= grp_float64_div_fu_149_float_exception_flags_o;
    end else if ((((1'b1 == ap_CS_fsm_state9) & (grp_float64_mul_fu_137_float_exception_flags_o_ap_vld == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (grp_float64_mul_fu_137_float_exception_flags_o_ap_vld == 1'b1)))) begin
        float_exception_flags <= grp_float64_mul_fu_137_float_exception_flags_o;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        inc_fu_114 <= 64'd1;
    end else if (((1'd0 == and_ln626_fu_468_p2) & (1'b1 == ap_CS_fsm_state14))) begin
        inc_fu_114 <= add_ln61_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln146_reg_600 <= add_ln146_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        app_reg_628 <= grp_load_fu_183_p1;
        tmp_21_reg_634 <= grp_load_fu_183_p1[32'd63];
        xor_ln454_reg_640 <= xor_ln454_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        diff_1_reg_605 <= grp_float64_div_fu_149_ap_return;
        tmp_22_reg_623 <= grp_float64_div_fu_149_ap_return[32'd63];
        trunc_ln49_1_reg_618 <= trunc_ln49_1_fu_408_p1;
        trunc_ln49_reg_613 <= trunc_ln49_fu_404_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln265_reg_570 <= icmp_ln265_fu_262_p2;
        icmp_ln270_reg_576 <= icmp_ln270_fu_292_p2;
        select_ln270_reg_581 <= select_ln270_fu_308_p3;
        zSig_reg_565[31 : 1] <= zSig_fu_255_p3[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        m_rad2_reg_532 <= m_rad2_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln59_reg_550 <= grp_fu_179_p2;
        tmp_19_reg_555 <= {{grp_fu_179_p2[30:15]}};
        trunc_ln268_reg_560 <= trunc_ln268_fu_251_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_188 <= grp_float64_mul_fu_137_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        shiftCount_6_reg_594 <= shiftCount_6_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_2_reg_644 <= grp_addFloat64Sigs_fu_159_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_3_reg_655 <= grp_subFloat64Sigs_fu_168_ap_return;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_float64_div_fu_149_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_addFloat64Sigs_fu_159_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((grp_subFloat64Sigs_fu_168_ap_done == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_float64_mul_fu_137_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((grp_float64_mul_fu_137_ap_done == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln635_fu_474_p2 == 1'd0) | (1'd1 == and_ln626_fu_468_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln635_fu_474_p2 == 1'd0) | (1'd1 == and_ln626_fu_468_p2)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if ((xor_ln454_reg_640 == 1'd1)) begin
            ap_sig_allocacmp_app_1_load = tmp_3_reg_655;
        end else if ((xor_ln454_reg_640 == 1'd0)) begin
            ap_sig_allocacmp_app_1_load = tmp_2_reg_644;
        end else begin
            ap_sig_allocacmp_app_1_load = app_1_fu_106;
        end
    end else begin
        ap_sig_allocacmp_app_1_load = app_1_fu_106;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        countLeadingZerosHigh_address0 = zext_ln275_fu_316_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        countLeadingZerosHigh_address0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        countLeadingZerosHigh_address0 = grp_float64_div_fu_149_countLeadingZerosHigh_address0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        countLeadingZerosHigh_address0 = grp_float64_mul_fu_137_countLeadingZerosHigh_address0;
    end else begin
        countLeadingZerosHigh_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        countLeadingZerosHigh_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        countLeadingZerosHigh_ce0 = 1'b0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        countLeadingZerosHigh_ce0 = grp_float64_div_fu_149_countLeadingZerosHigh_ce0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        countLeadingZerosHigh_ce0 = grp_float64_mul_fu_137_countLeadingZerosHigh_ce0;
    end else begin
        countLeadingZerosHigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_float64_mul_fu_137_a = diff_fu_110;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_float64_mul_fu_137_a = rad;
    end else begin
        grp_float64_mul_fu_137_a = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_float64_mul_fu_137_b = m_rad2_reg_532;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_float64_mul_fu_137_b = rad;
    end else begin
        grp_float64_mul_fu_137_b = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln635_fu_474_p2 == 1'd0) | (1'd1 == and_ln626_fu_468_p2)))) begin
        grp_load_fu_183_p1 = ap_sig_allocacmp_app_1_load;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_load_fu_183_p1 = app_1_fu_106;
    end else begin
        grp_load_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_float64_mul_fu_137_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (grp_float64_mul_fu_137_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_float64_div_fu_149_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (xor_ln454_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_addFloat64Sigs_fu_159_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & ((icmp_ln635_fu_474_p2 == 1'd0) | (1'd1 == and_ln626_fu_468_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (grp_subFloat64Sigs_fu_168_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln146_fu_398_p2 = (zext_ln146_fu_394_p1 + shl_ln273_fu_374_p2);

assign add_ln61_fu_443_p2 = (inc_fu_114 + 64'd1);

assign and_ln626_fu_468_p2 = (icmp_ln626_fu_457_p2 & icmp_ln626_1_fu_463_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_return = grp_load_fu_183_p1;

assign grp_addFloat64Sigs_fu_159_ap_start = grp_addFloat64Sigs_fu_159_ap_start_reg;

assign grp_float64_div_fu_149_ap_start = grp_float64_div_fu_149_ap_start_reg;

assign grp_float64_div_fu_149_countLeadingZerosHigh_address0 = 8'd0;

assign grp_float64_div_fu_149_countLeadingZerosHigh_ce0 = 1'b0;

assign grp_float64_mul_fu_137_ap_start = grp_float64_mul_fu_137_ap_start_reg;

assign grp_float64_mul_fu_137_countLeadingZerosHigh_address0 = 8'd0;

assign grp_float64_mul_fu_137_countLeadingZerosHigh_ce0 = 1'b0;

assign grp_fu_179_p0 = inc_fu_114[30:0];

assign grp_fu_179_p1 = (shl_ln_fu_226_p3 | 31'd1);

assign grp_subFloat64Sigs_fu_168_ap_start = grp_subFloat64Sigs_fu_168_ap_start_reg;

assign icmp_ln265_fu_262_p2 = ((tmp_19_reg_555 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln270_fu_292_p2 = ((tmp_20_fu_282_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln626_1_fu_463_p2 = ((trunc_ln49_reg_613 != 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln626_fu_457_p2 = ((trunc_ln8_fu_448_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln635_fu_474_p2 = ((trunc_ln49_1_reg_618 > 63'd4532020583610935536) ? 1'b1 : 1'b0);

assign m_rad2_fu_208_p2 = (reg_188 ^ 64'd9223372036854775808);

assign or_ln69_fu_492_p2 = (float_exception_flags | 32'd16);

assign select_ln265_2_fu_274_p3 = ((icmp_ln265_fu_262_p2[0:0] == 1'b1) ? shl_ln3_fu_267_p3 : zSig_fu_255_p3);

assign select_ln270_fu_308_p3 = ((icmp_ln270_fu_292_p2[0:0] == 1'b1) ? tmp_s_fu_298_p4 : tmp_20_fu_282_p4);

assign shiftCount_4_fu_331_p3 = ((icmp_ln265_reg_570[0:0] == 1'b1) ? 5'd24 : 5'd8);

assign shiftCount_5_fu_338_p3 = ((icmp_ln270_reg_576[0:0] == 1'b1) ? shiftCount_4_fu_331_p3 : shiftCount_fu_324_p3);

assign shiftCount_6_fu_353_p2 = (zext_ln275_1_fu_349_p1 + zext_ln270_fu_345_p1);

assign shiftCount_7_fu_359_p2 = (shiftCount_6_reg_594 + 6'd21);

assign shiftCount_fu_324_p3 = ((icmp_ln265_reg_570[0:0] == 1'b1) ? 5'd16 : 5'd0);

assign shl_ln273_fu_374_p2 = zext_ln272_fu_364_p1 << zext_ln273_fu_370_p1;

assign shl_ln3_fu_267_p3 = {{trunc_ln268_reg_560}, {17'd0}};

assign shl_ln4_fu_386_p3 = {{sub_ln146_fu_380_p2}, {52'd0}};

assign shl_ln_fu_226_p3 = {{trunc_ln59_1_fu_222_p1}, {1'd0}};

assign sub_ln146_fu_380_p2 = ($signed(11'd1053) - $signed(zext_ln273_1_fu_367_p1));

assign tmp_20_fu_282_p4 = {{select_ln265_2_fu_274_p3[31:24]}};

assign tmp_21_fu_420_p3 = grp_load_fu_183_p1[32'd63];

assign tmp_s_fu_298_p4 = {{select_ln265_2_fu_274_p3[23:16]}};

assign trunc_ln268_fu_251_p1 = grp_fu_179_p2[14:0];

assign trunc_ln49_1_fu_408_p1 = grp_float64_div_fu_149_ap_return[62:0];

assign trunc_ln49_fu_404_p1 = grp_float64_div_fu_149_ap_return[51:0];

assign trunc_ln59_1_fu_222_p1 = inc_fu_114[29:0];

assign trunc_ln8_fu_448_p4 = {{diff_1_reg_605[62:52]}};

assign xor_ln454_fu_430_p2 = (tmp_22_reg_623 ^ tmp_21_fu_420_p3);

assign zSig_fu_255_p3 = {{mul_ln59_reg_550}, {1'd0}};

assign zext_ln146_fu_394_p1 = shl_ln4_fu_386_p3;

assign zext_ln270_fu_345_p1 = shiftCount_5_fu_338_p3;

assign zext_ln272_fu_364_p1 = zSig_reg_565;

assign zext_ln273_1_fu_367_p1 = shiftCount_6_reg_594;

assign zext_ln273_fu_370_p1 = shiftCount_7_fu_359_p2;

assign zext_ln275_1_fu_349_p1 = countLeadingZerosHigh_q0;

assign zext_ln275_fu_316_p1 = select_ln270_reg_581;

always @ (posedge ap_clk) begin
    zSig_reg_565[0] <= 1'b0;
end

endmodule //local_sin
