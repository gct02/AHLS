-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity local_sin is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rad : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of local_sin is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "local_sin_local_sin,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.518917,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=11875,HLS_SYN_LUT=26744,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv11_41D : STD_LOGIC_VECTOR (10 downto 0) := "10000011101";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv63_3EE4F8B588E368F0 : STD_LOGIC_VECTOR (62 downto 0) := "011111011100100111110001011010110001000111000110110100011110000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal float_exception_flags : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal countLeadingZerosHigh_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal countLeadingZerosHigh_ce0 : STD_LOGIC;
    signal countLeadingZerosHigh_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_float64_mul_fu_137_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal m_rad2_fu_208_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_rad2_reg_532 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_179_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln59_reg_550 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_19_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln268_fu_251_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln268_reg_560 : STD_LOGIC_VECTOR (14 downto 0);
    signal zSig_fu_255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zSig_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln265_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln270_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln270_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln270_fu_308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln270_reg_581 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shiftCount_6_fu_353_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shiftCount_6_reg_594 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln146_fu_398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln146_reg_600 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_float64_div_fu_149_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal diff_1_reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln49_fu_404_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln49_reg_613 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln49_1_fu_408_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln49_1_reg_618 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_22_reg_623 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_load_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal app_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_21_fu_420_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln454_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln454_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_addFloat64Sigs_fu_159_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_644 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_subFloat64Sigs_fu_168_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_655 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_float64_mul_fu_137_ap_start : STD_LOGIC;
    signal grp_float64_mul_fu_137_ap_done : STD_LOGIC;
    signal grp_float64_mul_fu_137_ap_idle : STD_LOGIC;
    signal grp_float64_mul_fu_137_ap_ready : STD_LOGIC;
    signal grp_float64_mul_fu_137_a : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_float64_mul_fu_137_b : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_float64_mul_fu_137_float_exception_flags_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_float64_mul_fu_137_float_exception_flags_o_ap_vld : STD_LOGIC;
    signal grp_float64_div_fu_149_ap_start : STD_LOGIC;
    signal grp_float64_div_fu_149_ap_done : STD_LOGIC;
    signal grp_float64_div_fu_149_ap_idle : STD_LOGIC;
    signal grp_float64_div_fu_149_ap_ready : STD_LOGIC;
    signal grp_float64_div_fu_149_float_exception_flags_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_float64_div_fu_149_float_exception_flags_o_ap_vld : STD_LOGIC;
    signal grp_addFloat64Sigs_fu_159_ap_start : STD_LOGIC;
    signal grp_addFloat64Sigs_fu_159_ap_done : STD_LOGIC;
    signal grp_addFloat64Sigs_fu_159_ap_idle : STD_LOGIC;
    signal grp_addFloat64Sigs_fu_159_ap_ready : STD_LOGIC;
    signal grp_addFloat64Sigs_fu_159_float_exception_flags_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_addFloat64Sigs_fu_159_float_exception_flags_o_ap_vld : STD_LOGIC;
    signal grp_subFloat64Sigs_fu_168_ap_start : STD_LOGIC;
    signal grp_subFloat64Sigs_fu_168_ap_done : STD_LOGIC;
    signal grp_subFloat64Sigs_fu_168_ap_idle : STD_LOGIC;
    signal grp_subFloat64Sigs_fu_168_ap_ready : STD_LOGIC;
    signal grp_subFloat64Sigs_fu_168_float_exception_flags_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_subFloat64Sigs_fu_168_float_exception_flags_o_ap_vld : STD_LOGIC;
    signal grp_float64_mul_fu_137_ap_start_reg : STD_LOGIC := '0';
    signal grp_float64_mul_fu_137_countLeadingZerosHigh_ce0 : STD_LOGIC;
    signal grp_float64_mul_fu_137_countLeadingZerosHigh_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_float64_div_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_float64_div_fu_149_countLeadingZerosHigh_ce0 : STD_LOGIC;
    signal grp_float64_div_fu_149_countLeadingZerosHigh_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_addFloat64Sigs_fu_159_ap_start_reg : STD_LOGIC := '0';
    signal grp_subFloat64Sigs_fu_168_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln275_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln69_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal and_ln626_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal app_1_fu_106 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_app_1_load : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln635_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal diff_fu_110 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal inc_fu_114 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln61_fu_443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_179_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_179_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln59_1_fu_222_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln_fu_226_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln3_fu_267_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln265_2_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_298_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shiftCount_4_fu_331_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shiftCount_fu_324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shiftCount_5_fu_338_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln275_1_fu_349_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln270_fu_345_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shiftCount_7_fu_359_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln272_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln273_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln273_1_fu_367_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln146_fu_380_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln4_fu_386_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln146_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln273_fu_374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_448_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln626_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln626_1_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component local_sin_float64_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        float_exception_flags_i : IN STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component local_sin_float64_div IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        float_exception_flags_i : IN STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component local_sin_addFloat64Sigs IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        zSign : IN STD_LOGIC_VECTOR (0 downto 0);
        float_exception_flags_i : IN STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component local_sin_subFloat64Sigs IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (63 downto 0);
        b : IN STD_LOGIC_VECTOR (63 downto 0);
        zSign : IN STD_LOGIC_VECTOR (0 downto 0);
        float_exception_flags_i : IN STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        float_exception_flags_o_ap_vld : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component local_sin_mul_31s_31s_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component local_sin_float64_mul_countLeadingZerosHigh_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    countLeadingZerosHigh_U : component local_sin_float64_mul_countLeadingZerosHigh_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => countLeadingZerosHigh_address0,
        ce0 => countLeadingZerosHigh_ce0,
        q0 => countLeadingZerosHigh_q0);

    grp_float64_mul_fu_137 : component local_sin_float64_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_float64_mul_fu_137_ap_start,
        ap_done => grp_float64_mul_fu_137_ap_done,
        ap_idle => grp_float64_mul_fu_137_ap_idle,
        ap_ready => grp_float64_mul_fu_137_ap_ready,
        a => grp_float64_mul_fu_137_a,
        b => grp_float64_mul_fu_137_b,
        float_exception_flags_i => float_exception_flags,
        float_exception_flags_o => grp_float64_mul_fu_137_float_exception_flags_o,
        float_exception_flags_o_ap_vld => grp_float64_mul_fu_137_float_exception_flags_o_ap_vld,
        ap_return => grp_float64_mul_fu_137_ap_return);

    grp_float64_div_fu_149 : component local_sin_float64_div
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_float64_div_fu_149_ap_start,
        ap_done => grp_float64_div_fu_149_ap_done,
        ap_idle => grp_float64_div_fu_149_ap_idle,
        ap_ready => grp_float64_div_fu_149_ap_ready,
        a => reg_188,
        b => add_ln146_reg_600,
        float_exception_flags_i => float_exception_flags,
        float_exception_flags_o => grp_float64_div_fu_149_float_exception_flags_o,
        float_exception_flags_o_ap_vld => grp_float64_div_fu_149_float_exception_flags_o_ap_vld,
        ap_return => grp_float64_div_fu_149_ap_return);

    grp_addFloat64Sigs_fu_159 : component local_sin_addFloat64Sigs
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_addFloat64Sigs_fu_159_ap_start,
        ap_done => grp_addFloat64Sigs_fu_159_ap_done,
        ap_idle => grp_addFloat64Sigs_fu_159_ap_idle,
        ap_ready => grp_addFloat64Sigs_fu_159_ap_ready,
        a => app_reg_628,
        b => diff_1_reg_605,
        zSign => tmp_21_reg_634,
        float_exception_flags_i => float_exception_flags,
        float_exception_flags_o => grp_addFloat64Sigs_fu_159_float_exception_flags_o,
        float_exception_flags_o_ap_vld => grp_addFloat64Sigs_fu_159_float_exception_flags_o_ap_vld,
        ap_return => grp_addFloat64Sigs_fu_159_ap_return);

    grp_subFloat64Sigs_fu_168 : component local_sin_subFloat64Sigs
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_subFloat64Sigs_fu_168_ap_start,
        ap_done => grp_subFloat64Sigs_fu_168_ap_done,
        ap_idle => grp_subFloat64Sigs_fu_168_ap_idle,
        ap_ready => grp_subFloat64Sigs_fu_168_ap_ready,
        a => app_reg_628,
        b => diff_1_reg_605,
        zSign => tmp_21_reg_634,
        float_exception_flags_i => float_exception_flags,
        float_exception_flags_o => grp_subFloat64Sigs_fu_168_float_exception_flags_o,
        float_exception_flags_o_ap_vld => grp_subFloat64Sigs_fu_168_float_exception_flags_o_ap_vld,
        ap_return => grp_subFloat64Sigs_fu_168_ap_return);

    mul_31s_31s_31_2_1_U42 : component local_sin_mul_31s_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_179_p0,
        din1 => grp_fu_179_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_179_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_addFloat64Sigs_fu_159_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_addFloat64Sigs_fu_159_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (xor_ln454_fu_430_p2 = ap_const_lv1_0))) then 
                    grp_addFloat64Sigs_fu_159_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_addFloat64Sigs_fu_159_ap_ready = ap_const_logic_1)) then 
                    grp_addFloat64Sigs_fu_159_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_float64_div_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_float64_div_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_float64_div_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_float64_div_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_float64_div_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_float64_mul_fu_137_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_float64_mul_fu_137_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    grp_float64_mul_fu_137_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_float64_mul_fu_137_ap_ready = ap_const_logic_1)) then 
                    grp_float64_mul_fu_137_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_subFloat64Sigs_fu_168_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_subFloat64Sigs_fu_168_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (xor_ln454_fu_430_p2 = ap_const_lv1_1))) then 
                    grp_subFloat64Sigs_fu_168_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_subFloat64Sigs_fu_168_ap_ready = ap_const_logic_1)) then 
                    grp_subFloat64Sigs_fu_168_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    app_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                app_1_fu_106 <= rad;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (xor_ln454_reg_640 = ap_const_lv1_1))) then 
                app_1_fu_106 <= tmp_3_reg_655;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (xor_ln454_reg_640 = ap_const_lv1_0))) then 
                app_1_fu_106 <= tmp_2_reg_644;
            end if; 
        end if;
    end process;

    diff_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                diff_fu_110 <= rad;
            elsif (((ap_const_lv1_0 = and_ln626_fu_468_p2) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                diff_fu_110 <= diff_1_reg_605;
            end if; 
        end if;
    end process;

    float_exception_flags_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln626_fu_468_p2) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                float_exception_flags <= or_ln69_fu_492_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_subFloat64Sigs_fu_168_float_exception_flags_o_ap_vld = ap_const_logic_1))) then 
                float_exception_flags <= grp_subFloat64Sigs_fu_168_float_exception_flags_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_addFloat64Sigs_fu_159_float_exception_flags_o_ap_vld = ap_const_logic_1))) then 
                float_exception_flags <= grp_addFloat64Sigs_fu_159_float_exception_flags_o;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_float64_div_fu_149_float_exception_flags_o_ap_vld = ap_const_logic_1))) then 
                float_exception_flags <= grp_float64_div_fu_149_float_exception_flags_o;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_float64_mul_fu_137_float_exception_flags_o_ap_vld = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_float64_mul_fu_137_float_exception_flags_o_ap_vld = ap_const_logic_1)))) then 
                float_exception_flags <= grp_float64_mul_fu_137_float_exception_flags_o;
            end if; 
        end if;
    end process;

    inc_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                inc_fu_114 <= ap_const_lv64_1;
            elsif (((ap_const_lv1_0 = and_ln626_fu_468_p2) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                inc_fu_114 <= add_ln61_fu_443_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln146_reg_600 <= add_ln146_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                app_reg_628 <= grp_load_fu_183_p1;
                tmp_21_reg_634 <= grp_load_fu_183_p1(63 downto 63);
                xor_ln454_reg_640 <= xor_ln454_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                diff_1_reg_605 <= grp_float64_div_fu_149_ap_return;
                tmp_22_reg_623 <= grp_float64_div_fu_149_ap_return(63 downto 63);
                trunc_ln49_1_reg_618 <= trunc_ln49_1_fu_408_p1;
                trunc_ln49_reg_613 <= trunc_ln49_fu_404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln265_reg_570 <= icmp_ln265_fu_262_p2;
                icmp_ln270_reg_576 <= icmp_ln270_fu_292_p2;
                select_ln270_reg_581 <= select_ln270_fu_308_p3;
                    zSig_reg_565(31 downto 1) <= zSig_fu_255_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                m_rad2_reg_532 <= m_rad2_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln59_reg_550 <= grp_fu_179_p2;
                tmp_19_reg_555 <= grp_fu_179_p2(30 downto 15);
                trunc_ln268_reg_560 <= trunc_ln268_fu_251_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_188 <= grp_float64_mul_fu_137_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                shiftCount_6_reg_594 <= shiftCount_6_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_2_reg_644 <= grp_addFloat64Sigs_fu_159_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_3_reg_655 <= grp_subFloat64Sigs_fu_168_ap_return;
            end if;
        end if;
    end process;
    zSig_reg_565(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12, xor_ln454_fu_430_p2, ap_CS_fsm_state13, ap_CS_fsm_state15, grp_float64_mul_fu_137_ap_done, grp_float64_div_fu_149_ap_done, grp_addFloat64Sigs_fu_159_ap_done, grp_subFloat64Sigs_fu_168_ap_done, ap_CS_fsm_state14, and_ln626_fu_468_p2, icmp_ln635_fu_474_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_float64_mul_fu_137_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_float64_mul_fu_137_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_float64_div_fu_149_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (xor_ln454_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_addFloat64Sigs_fu_159_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln635_fu_474_p2 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln626_fu_468_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_subFloat64Sigs_fu_168_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln146_fu_398_p2 <= std_logic_vector(unsigned(zext_ln146_fu_394_p1) + unsigned(shl_ln273_fu_374_p2));
    add_ln61_fu_443_p2 <= std_logic_vector(unsigned(inc_fu_114) + unsigned(ap_const_lv64_1));
    and_ln626_fu_468_p2 <= (icmp_ln626_fu_457_p2 and icmp_ln626_1_fu_463_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_float64_div_fu_149_ap_done)
    begin
        if ((grp_float64_div_fu_149_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_addFloat64Sigs_fu_159_ap_done)
    begin
        if ((grp_addFloat64Sigs_fu_159_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_subFloat64Sigs_fu_168_ap_done)
    begin
        if ((grp_subFloat64Sigs_fu_168_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_float64_mul_fu_137_ap_done)
    begin
        if ((grp_float64_mul_fu_137_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(grp_float64_mul_fu_137_ap_done)
    begin
        if ((grp_float64_mul_fu_137_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14, and_ln626_fu_468_p2, icmp_ln635_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln635_fu_474_p2 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln626_fu_468_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, and_ln626_fu_468_p2, icmp_ln635_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln635_fu_474_p2 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln626_fu_468_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_load_fu_183_p1;

    ap_sig_allocacmp_app_1_load_assign_proc : process(xor_ln454_reg_640, tmp_2_reg_644, tmp_3_reg_655, ap_CS_fsm_state14, app_1_fu_106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
            if ((xor_ln454_reg_640 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_app_1_load <= tmp_3_reg_655;
            elsif ((xor_ln454_reg_640 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_app_1_load <= tmp_2_reg_644;
            else 
                ap_sig_allocacmp_app_1_load <= app_1_fu_106;
            end if;
        else 
            ap_sig_allocacmp_app_1_load <= app_1_fu_106;
        end if; 
    end process;


    countLeadingZerosHigh_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, grp_float64_mul_fu_137_countLeadingZerosHigh_address0, grp_float64_div_fu_149_countLeadingZerosHigh_address0, zext_ln275_fu_316_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            countLeadingZerosHigh_address0 <= zext_ln275_fu_316_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            countLeadingZerosHigh_address0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            countLeadingZerosHigh_address0 <= grp_float64_div_fu_149_countLeadingZerosHigh_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            countLeadingZerosHigh_address0 <= grp_float64_mul_fu_137_countLeadingZerosHigh_address0;
        else 
            countLeadingZerosHigh_address0 <= "XXXXXXXX";
        end if; 
    end process;


    countLeadingZerosHigh_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, grp_float64_mul_fu_137_countLeadingZerosHigh_ce0, grp_float64_div_fu_149_countLeadingZerosHigh_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            countLeadingZerosHigh_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            countLeadingZerosHigh_ce0 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            countLeadingZerosHigh_ce0 <= grp_float64_div_fu_149_countLeadingZerosHigh_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            countLeadingZerosHigh_ce0 <= grp_float64_mul_fu_137_countLeadingZerosHigh_ce0;
        else 
            countLeadingZerosHigh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_addFloat64Sigs_fu_159_ap_start <= grp_addFloat64Sigs_fu_159_ap_start_reg;
    grp_float64_div_fu_149_ap_start <= grp_float64_div_fu_149_ap_start_reg;
    grp_float64_div_fu_149_countLeadingZerosHigh_address0 <= ap_const_lv8_0;
    grp_float64_div_fu_149_countLeadingZerosHigh_ce0 <= ap_const_logic_0;

    grp_float64_mul_fu_137_a_assign_proc : process(rad, ap_CS_fsm_state2, ap_CS_fsm_state9, diff_fu_110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_float64_mul_fu_137_a <= diff_fu_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_float64_mul_fu_137_a <= rad;
        else 
            grp_float64_mul_fu_137_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_float64_mul_fu_137_ap_start <= grp_float64_mul_fu_137_ap_start_reg;

    grp_float64_mul_fu_137_b_assign_proc : process(rad, ap_CS_fsm_state2, ap_CS_fsm_state9, m_rad2_reg_532)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_float64_mul_fu_137_b <= m_rad2_reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_float64_mul_fu_137_b <= rad;
        else 
            grp_float64_mul_fu_137_b <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_float64_mul_fu_137_countLeadingZerosHigh_address0 <= ap_const_lv8_0;
    grp_float64_mul_fu_137_countLeadingZerosHigh_ce0 <= ap_const_logic_0;
    grp_fu_179_p0 <= inc_fu_114(31 - 1 downto 0);
    grp_fu_179_p1 <= (shl_ln_fu_226_p3 or ap_const_lv31_1);

    grp_load_fu_183_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14, and_ln626_fu_468_p2, app_1_fu_106, ap_sig_allocacmp_app_1_load, icmp_ln635_fu_474_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and ((icmp_ln635_fu_474_p2 = ap_const_lv1_0) or (ap_const_lv1_1 = and_ln626_fu_468_p2)))) then 
            grp_load_fu_183_p1 <= ap_sig_allocacmp_app_1_load;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_load_fu_183_p1 <= app_1_fu_106;
        else 
            grp_load_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_subFloat64Sigs_fu_168_ap_start <= grp_subFloat64Sigs_fu_168_ap_start_reg;
    icmp_ln265_fu_262_p2 <= "1" when (tmp_19_reg_555 = ap_const_lv16_0) else "0";
    icmp_ln270_fu_292_p2 <= "1" when (tmp_20_fu_282_p4 = ap_const_lv8_0) else "0";
    icmp_ln626_1_fu_463_p2 <= "0" when (trunc_ln49_reg_613 = ap_const_lv52_0) else "1";
    icmp_ln626_fu_457_p2 <= "1" when (trunc_ln8_fu_448_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln635_fu_474_p2 <= "1" when (unsigned(trunc_ln49_1_reg_618) > unsigned(ap_const_lv63_3EE4F8B588E368F0)) else "0";
    m_rad2_fu_208_p2 <= (reg_188 xor ap_const_lv64_8000000000000000);
    or_ln69_fu_492_p2 <= (float_exception_flags or ap_const_lv32_10);
    select_ln265_2_fu_274_p3 <= 
        shl_ln3_fu_267_p3 when (icmp_ln265_fu_262_p2(0) = '1') else 
        zSig_fu_255_p3;
    select_ln270_fu_308_p3 <= 
        tmp_s_fu_298_p4 when (icmp_ln270_fu_292_p2(0) = '1') else 
        tmp_20_fu_282_p4;
    shiftCount_4_fu_331_p3 <= 
        ap_const_lv5_18 when (icmp_ln265_reg_570(0) = '1') else 
        ap_const_lv5_8;
    shiftCount_5_fu_338_p3 <= 
        shiftCount_4_fu_331_p3 when (icmp_ln270_reg_576(0) = '1') else 
        shiftCount_fu_324_p3;
    shiftCount_6_fu_353_p2 <= std_logic_vector(unsigned(zext_ln275_1_fu_349_p1) + unsigned(zext_ln270_fu_345_p1));
    shiftCount_7_fu_359_p2 <= std_logic_vector(unsigned(shiftCount_6_reg_594) + unsigned(ap_const_lv6_15));
    shiftCount_fu_324_p3 <= 
        ap_const_lv5_10 when (icmp_ln265_reg_570(0) = '1') else 
        ap_const_lv5_0;
    shl_ln273_fu_374_p2 <= std_logic_vector(shift_left(unsigned(zext_ln272_fu_364_p1),to_integer(unsigned('0' & zext_ln273_fu_370_p1(31-1 downto 0)))));
    shl_ln3_fu_267_p3 <= (trunc_ln268_reg_560 & ap_const_lv17_0);
    shl_ln4_fu_386_p3 <= (sub_ln146_fu_380_p2 & ap_const_lv52_0);
    shl_ln_fu_226_p3 <= (trunc_ln59_1_fu_222_p1 & ap_const_lv1_0);
    sub_ln146_fu_380_p2 <= std_logic_vector(signed(ap_const_lv11_41D) - signed(zext_ln273_1_fu_367_p1));
    tmp_20_fu_282_p4 <= select_ln265_2_fu_274_p3(31 downto 24);
    tmp_21_fu_420_p3 <= grp_load_fu_183_p1(63 downto 63);
    tmp_s_fu_298_p4 <= select_ln265_2_fu_274_p3(23 downto 16);
    trunc_ln268_fu_251_p1 <= grp_fu_179_p2(15 - 1 downto 0);
    trunc_ln49_1_fu_408_p1 <= grp_float64_div_fu_149_ap_return(63 - 1 downto 0);
    trunc_ln49_fu_404_p1 <= grp_float64_div_fu_149_ap_return(52 - 1 downto 0);
    trunc_ln59_1_fu_222_p1 <= inc_fu_114(30 - 1 downto 0);
    trunc_ln8_fu_448_p4 <= diff_1_reg_605(62 downto 52);
    xor_ln454_fu_430_p2 <= (tmp_22_reg_623 xor tmp_21_fu_420_p3);
    zSig_fu_255_p3 <= (mul_ln59_reg_550 & ap_const_lv1_0);
    zext_ln146_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_386_p3),64));
    zext_ln270_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftCount_5_fu_338_p3),6));
    zext_ln272_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zSig_reg_565),64));
    zext_ln273_1_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftCount_6_reg_594),11));
    zext_ln273_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftCount_7_fu_359_p2),64));
    zext_ln275_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(countLeadingZerosHigh_q0),6));
    zext_ln275_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln270_reg_581),64));
end behav;
