// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module face_detect_cascadeClassifier_Pipeline_Filters (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln200,
        stage_sum,
        add_ln200,
        stddev_0,
        pt_y_val,
        pt_x_val,
        SUM1_data_address0,
        SUM1_data_ce0,
        SUM1_data_q0,
        SUM1_data_address1,
        SUM1_data_ce1,
        SUM1_data_q1,
        SUM1_data_address2,
        SUM1_data_ce2,
        SUM1_data_q2,
        SUM1_data_address3,
        SUM1_data_ce3,
        SUM1_data_q3,
        SUM1_data_address4,
        SUM1_data_ce4,
        SUM1_data_q4,
        SUM1_data_address5,
        SUM1_data_ce5,
        SUM1_data_q5,
        SUM1_data_address6,
        SUM1_data_ce6,
        SUM1_data_q6,
        SUM1_data_address7,
        SUM1_data_ce7,
        SUM1_data_q7,
        SUM1_data_address8,
        SUM1_data_ce8,
        SUM1_data_q8,
        SUM1_data_address9,
        SUM1_data_ce9,
        SUM1_data_q9,
        SUM1_data_address10,
        SUM1_data_ce10,
        SUM1_data_q10,
        SUM1_data_address11,
        SUM1_data_ce11,
        SUM1_data_q11,
        stage_sum_1_out,
        stage_sum_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sext_ln200;
input  [63:0] stage_sum;
input  [7:0] add_ln200;
input  [31:0] stddev_0;
input  [7:0] pt_y_val;
input  [16:0] pt_x_val;
output  [16:0] SUM1_data_address0;
output   SUM1_data_ce0;
input  [31:0] SUM1_data_q0;
output  [16:0] SUM1_data_address1;
output   SUM1_data_ce1;
input  [31:0] SUM1_data_q1;
output  [16:0] SUM1_data_address2;
output   SUM1_data_ce2;
input  [31:0] SUM1_data_q2;
output  [16:0] SUM1_data_address3;
output   SUM1_data_ce3;
input  [31:0] SUM1_data_q3;
output  [16:0] SUM1_data_address4;
output   SUM1_data_ce4;
input  [31:0] SUM1_data_q4;
output  [16:0] SUM1_data_address5;
output   SUM1_data_ce5;
input  [31:0] SUM1_data_q5;
output  [16:0] SUM1_data_address6;
output   SUM1_data_ce6;
input  [31:0] SUM1_data_q6;
output  [16:0] SUM1_data_address7;
output   SUM1_data_ce7;
input  [31:0] SUM1_data_q7;
output  [16:0] SUM1_data_address8;
output   SUM1_data_ce8;
input  [31:0] SUM1_data_q8;
output  [16:0] SUM1_data_address9;
output   SUM1_data_ce9;
input  [31:0] SUM1_data_q9;
output  [16:0] SUM1_data_address10;
output   SUM1_data_ce10;
input  [31:0] SUM1_data_q10;
output  [16:0] SUM1_data_address11;
output   SUM1_data_ce11;
input  [31:0] SUM1_data_q11;
output  [63:0] stage_sum_1_out;
output   stage_sum_1_out_ap_vld;

reg ap_idle;
reg SUM1_data_ce0;
reg SUM1_data_ce1;
reg SUM1_data_ce2;
reg SUM1_data_ce3;
reg SUM1_data_ce4;
reg SUM1_data_ce5;
reg SUM1_data_ce6;
reg SUM1_data_ce7;
reg SUM1_data_ce8;
reg SUM1_data_ce9;
reg SUM1_data_ce10;
reg SUM1_data_ce11;
reg stage_sum_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln200_fu_599_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [11:0] tree_thresh_array_address0;
reg    tree_thresh_array_ce0;
wire   [12:0] tree_thresh_array_q0;
wire   [11:0] weights_array0_address0;
reg    weights_array0_ce0;
wire   [12:0] weights_array0_q0;
wire   [11:0] weights_array1_address0;
reg    weights_array1_ce0;
wire   [13:0] weights_array1_q0;
reg   [31:0] coord_8;
reg   [31:0] coord_9;
reg   [31:0] coord_10;
wire   [11:0] weights_array2_address0;
reg    weights_array2_ce0;
wire   [13:0] weights_array2_q0;
wire   [11:0] alpha1_array_address0;
reg    alpha1_array_ce0;
wire   [13:0] alpha1_array_q0;
wire   [11:0] alpha2_array_address0;
reg    alpha2_array_ce0;
wire   [13:0] alpha2_array_q0;
wire   [11:0] rectangles_array0_address0;
reg    rectangles_array0_ce0;
wire   [4:0] rectangles_array0_q0;
wire   [11:0] rectangles_array2_address0;
reg    rectangles_array2_ce0;
wire   [4:0] rectangles_array2_q0;
wire   [11:0] rectangles_array1_address0;
reg    rectangles_array1_ce0;
wire   [4:0] rectangles_array1_q0;
wire   [11:0] rectangles_array3_address0;
reg    rectangles_array3_ce0;
wire   [4:0] rectangles_array3_q0;
wire   [11:0] rectangles_array4_address0;
reg    rectangles_array4_ce0;
wire   [4:0] rectangles_array4_q0;
wire   [11:0] rectangles_array6_address0;
reg    rectangles_array6_ce0;
wire   [4:0] rectangles_array6_q0;
wire   [11:0] rectangles_array5_address0;
reg    rectangles_array5_ce0;
wire   [4:0] rectangles_array5_q0;
wire   [11:0] rectangles_array7_address0;
reg    rectangles_array7_ce0;
wire   [4:0] rectangles_array7_q0;
wire   [11:0] rectangles_array8_address0;
reg    rectangles_array8_ce0;
wire   [4:0] rectangles_array8_q0;
wire   [11:0] rectangles_array10_address0;
reg    rectangles_array10_ce0;
wire   [3:0] rectangles_array10_q0;
wire   [11:0] rectangles_array9_address0;
reg    rectangles_array9_ce0;
wire   [4:0] rectangles_array9_q0;
wire   [11:0] rectangles_array11_address0;
reg    rectangles_array11_ce0;
wire   [3:0] rectangles_array11_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln200_reg_1366;
reg   [0:0] icmp_ln200_reg_1366_pp0_iter2_reg;
reg   [0:0] icmp_ln200_reg_1366_pp0_iter3_reg;
reg   [0:0] icmp_ln200_reg_1366_pp0_iter4_reg;
reg   [0:0] icmp_ln200_reg_1366_pp0_iter5_reg;
reg   [0:0] icmp_ln200_reg_1366_pp0_iter6_reg;
reg   [0:0] icmp_ln200_reg_1366_pp0_iter7_reg;
wire   [11:0] trunc_ln248_fu_620_p1;
reg   [11:0] trunc_ln248_reg_1430;
reg   [11:0] trunc_ln248_reg_1430_pp0_iter2_reg;
reg   [11:0] trunc_ln248_reg_1430_pp0_iter3_reg;
wire   [16:0] tr0_fu_639_p2;
reg   [16:0] tr0_reg_1435;
reg   [4:0] tr0_1_reg_1442;
wire   [7:0] tr0_2_fu_648_p2;
reg   [7:0] tr0_2_reg_1447;
wire   [16:0] tr1_fu_661_p2;
reg   [16:0] tr1_reg_1453;
reg   [4:0] tr1_1_reg_1460;
wire   [7:0] tr1_2_fu_670_p2;
reg   [7:0] tr1_2_reg_1465;
reg   [3:0] tr2_1_reg_1471;
wire   [7:0] add_ln225_fu_691_p2;
reg   [7:0] add_ln225_reg_1476;
wire   [7:0] add_ln230_fu_697_p2;
reg   [7:0] add_ln230_reg_1482;
wire   [0:0] and_ln233_1_fu_785_p2;
reg   [0:0] and_ln233_1_reg_1488;
reg   [0:0] and_ln233_1_reg_1488_pp0_iter3_reg;
wire   [7:0] add_ln235_fu_791_p2;
reg   [7:0] add_ln235_reg_1492;
wire   [16:0] add_ln235_1_fu_796_p2;
reg   [16:0] add_ln235_1_reg_1498;
wire   [7:0] add_ln237_fu_801_p2;
reg   [7:0] add_ln237_reg_1505;
wire  signed [31:0] add_ln282_fu_1194_p2;
reg  signed [31:0] add_ln282_reg_1596;
reg  signed [31:0] add_ln282_reg_1596_pp0_iter5_reg;
wire  signed [31:0] add_ln282_1_fu_1200_p2;
reg  signed [31:0] add_ln282_1_reg_1601;
reg  signed [31:0] add_ln282_1_reg_1601_pp0_iter5_reg;
reg  signed [12:0] tree_thresh_array_load_reg_1616;
reg  signed [12:0] weights_array0_load_reg_1621;
reg   [13:0] weights_array1_load_reg_1626;
wire  signed [31:0] sub_ln281_1_fu_1230_p2;
reg  signed [31:0] sub_ln281_1_reg_1631;
reg   [13:0] weights_array2_load_reg_1636;
reg   [13:0] return_value_reg_1641;
reg   [13:0] return_value_reg_1641_pp0_iter6_reg;
reg   [13:0] return_value_reg_1641_pp0_iter7_reg;
reg   [13:0] return_value_reg_1641_pp0_iter8_reg;
reg   [13:0] return_value_1_reg_1646;
reg   [13:0] return_value_1_reg_1646_pp0_iter6_reg;
reg   [13:0] return_value_1_reg_1646_pp0_iter7_reg;
reg   [13:0] return_value_1_reg_1646_pp0_iter8_reg;
wire   [31:0] grp_fu_557_p2;
reg   [31:0] t_reg_1671;
wire   [31:0] grp_fu_565_p2;
reg   [31:0] sum2_reg_1676;
wire   [31:0] grp_fu_561_p2;
reg   [31:0] mul_ln282_reg_1681;
wire   [31:0] grp_fu_569_p2;
reg   [31:0] mul_ln282_1_reg_1686;
wire   [0:0] icmp_ln201_fu_1261_p2;
reg   [0:0] icmp_ln201_reg_1691;
wire   [0:0] icmp_ln284_fu_1276_p2;
reg   [0:0] icmp_ln284_reg_1696;
reg    ap_condition_exit_pp0_iter8_stage0;
wire   [31:0] ap_phi_reg_pp0_iter0_storemerge_reg_546;
reg   [31:0] ap_phi_reg_pp0_iter1_storemerge_reg_546;
reg   [31:0] ap_phi_reg_pp0_iter2_storemerge_reg_546;
reg   [31:0] ap_phi_reg_pp0_iter3_storemerge_reg_546;
reg   [31:0] ap_phi_reg_pp0_iter4_storemerge_reg_546;
reg   [31:0] ap_phi_reg_pp0_iter5_storemerge_reg_546;
wire   [63:0] zext_ln200_fu_604_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln223_2_fu_849_p1;
wire   [63:0] zext_ln224_fu_865_p1;
wire   [63:0] zext_ln225_2_fu_903_p1;
wire   [63:0] zext_ln226_fu_914_p1;
wire   [63:0] zext_ln228_2_fu_952_p1;
wire   [63:0] zext_ln229_fu_968_p1;
wire   [63:0] zext_ln230_2_fu_1006_p1;
wire   [63:0] zext_ln231_fu_1017_p1;
wire   [63:0] zext_ln235_2_fu_1055_p1;
wire   [63:0] zext_ln236_fu_1071_p1;
wire   [63:0] zext_ln237_2_fu_1109_p1;
wire   [63:0] zext_ln238_fu_1120_p1;
wire   [63:0] zext_ln271_fu_1161_p1;
reg   [63:0] stage_sum_1_fu_112;
wire   [63:0] stage_sum_3_fu_1305_p2;
wire    ap_loop_init;
reg   [7:0] j_fu_116;
wire   [7:0] j_2_fu_1255_p2;
reg   [32:0] haar_counter_fu_120;
wire   [32:0] add_ln251_fu_624_p2;
wire  signed [32:0] sext_ln200_cast_fu_573_p1;
wire    ap_block_pp0_stage0_01001;
wire   [13:0] grp_fu_565_p0;
wire   [13:0] grp_fu_569_p0;
wire   [7:0] trunc_ln200_fu_595_p1;
wire   [16:0] zext_ln208_fu_635_p1;
wire   [7:0] zext_ln210_fu_644_p1;
wire   [16:0] zext_ln213_fu_657_p1;
wire   [7:0] zext_ln215_fu_666_p1;
wire   [7:0] zext_ln193_1_fu_653_p1;
wire   [7:0] zext_ln193_3_fu_675_p1;
wire   [3:0] trunc_ln233_fu_703_p1;
wire   [0:0] tmp_24_fu_713_p3;
wire   [3:0] or_ln233_fu_707_p2;
wire   [3:0] trunc_ln233_1_fu_729_p1;
wire   [0:0] tmp_25_fu_739_p3;
wire   [3:0] or_ln233_1_fu_733_p2;
wire   [4:0] tmp1_fu_747_p3;
wire   [4:0] tmp_fu_721_p3;
wire   [4:0] or_ln233_2_fu_755_p2;
wire   [0:0] icmp_ln233_2_fu_773_p2;
wire   [0:0] icmp_ln233_fu_761_p2;
wire   [0:0] and_ln233_fu_779_p2;
wire   [0:0] icmp_ln233_1_fu_767_p2;
wire   [7:0] zext_ln193_6_fu_683_p1;
wire   [16:0] zext_ln193_4_fu_679_p1;
wire   [7:0] zext_ln193_7_fu_687_p1;
wire   [15:0] tmp_s_fu_816_p3;
wire   [13:0] tmp_17_fu_827_p3;
wire   [16:0] zext_ln223_fu_823_p1;
wire   [16:0] zext_ln223_1_fu_834_p1;
wire   [16:0] add_ln223_fu_838_p2;
wire   [16:0] add_ln223_1_fu_844_p2;
wire   [16:0] zext_ln193_fu_807_p1;
wire   [16:0] add_ln224_fu_854_p2;
wire   [16:0] add_ln224_1_fu_859_p2;
wire   [15:0] tmp_18_fu_870_p3;
wire   [13:0] tmp_19_fu_881_p3;
wire   [16:0] zext_ln225_fu_877_p1;
wire   [16:0] zext_ln225_1_fu_888_p1;
wire   [16:0] add_ln225_1_fu_892_p2;
wire   [16:0] add_ln225_2_fu_898_p2;
wire   [16:0] add_ln226_fu_908_p2;
wire   [15:0] tmp_20_fu_919_p3;
wire   [13:0] tmp_21_fu_930_p3;
wire   [16:0] zext_ln228_fu_926_p1;
wire   [16:0] zext_ln228_1_fu_937_p1;
wire   [16:0] add_ln228_fu_941_p2;
wire   [16:0] add_ln228_1_fu_947_p2;
wire   [16:0] zext_ln193_2_fu_810_p1;
wire   [16:0] add_ln229_fu_957_p2;
wire   [16:0] add_ln229_1_fu_962_p2;
wire   [15:0] tmp_22_fu_973_p3;
wire   [13:0] tmp_23_fu_984_p3;
wire   [16:0] zext_ln230_fu_980_p1;
wire   [16:0] zext_ln230_1_fu_991_p1;
wire   [16:0] add_ln230_1_fu_995_p2;
wire   [16:0] add_ln230_2_fu_1001_p2;
wire   [16:0] add_ln231_fu_1011_p2;
wire   [15:0] tmp_26_fu_1022_p3;
wire   [13:0] tmp_27_fu_1033_p3;
wire   [16:0] zext_ln235_fu_1029_p1;
wire   [16:0] zext_ln235_1_fu_1040_p1;
wire   [16:0] add_ln235_2_fu_1044_p2;
wire   [16:0] add_ln235_3_fu_1050_p2;
wire   [16:0] zext_ln193_5_fu_813_p1;
wire   [16:0] add_ln236_fu_1060_p2;
wire   [16:0] add_ln236_1_fu_1065_p2;
wire   [15:0] tmp_28_fu_1076_p3;
wire   [13:0] tmp_29_fu_1087_p3;
wire   [16:0] zext_ln237_fu_1083_p1;
wire   [16:0] zext_ln237_1_fu_1094_p1;
wire   [16:0] add_ln237_1_fu_1098_p2;
wire   [16:0] add_ln237_2_fu_1104_p2;
wire   [16:0] add_ln238_fu_1114_p2;
wire   [31:0] sub_ln279_fu_1170_p2;
wire   [31:0] sub_ln280_fu_1182_p2;
wire   [31:0] sub_ln279_1_fu_1176_p2;
wire   [31:0] sub_ln280_1_fu_1188_p2;
wire   [31:0] add_ln281_fu_1218_p2;
wire   [31:0] sub_ln281_fu_1224_p2;
wire   [31:0] add_ln282_2_fu_1267_p2;
wire   [31:0] final_sum_fu_1271_p2;
wire   [13:0] return_value_3_fu_1296_p3;
wire   [63:0] stage_sum_2_fu_1289_p3;
wire  signed [63:0] sext_ln250_fu_1301_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] grp_fu_565_p00;
wire   [31:0] grp_fu_569_p00;
reg    ap_condition_1051;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 coord_8 = 32'd0;
#0 coord_9 = 32'd0;
#0 coord_10 = 32'd0;
#0 stage_sum_1_fu_112 = 64'd0;
#0 j_fu_116 = 8'd0;
#0 haar_counter_fu_120 = 33'd0;
#0 ap_done_reg = 1'b0;
end

face_detect_cascadeClassifier_Pipeline_Filters_tree_thresh_array_ROM_AUTO_1R #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
tree_thresh_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(tree_thresh_array_address0),
    .ce0(tree_thresh_array_ce0),
    .q0(tree_thresh_array_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_weights_array0_ROM_AUTO_1R #(
    .DataWidth( 13 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array0_address0),
    .ce0(weights_array0_ce0),
    .q0(weights_array0_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_weights_array1_ROM_AUTO_1R #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array1_address0),
    .ce0(weights_array1_ce0),
    .q0(weights_array1_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_weights_array2_ROM_AUTO_1R #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
weights_array2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_array2_address0),
    .ce0(weights_array2_ce0),
    .q0(weights_array2_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_alpha1_array_ROM_AUTO_1R #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
alpha1_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha1_array_address0),
    .ce0(alpha1_array_ce0),
    .q0(alpha1_array_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_alpha2_array_ROM_AUTO_1R #(
    .DataWidth( 14 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
alpha2_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(alpha2_array_address0),
    .ce0(alpha2_array_ce0),
    .q0(alpha2_array_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array0_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array0_address0),
    .ce0(rectangles_array0_ce0),
    .q0(rectangles_array0_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array2_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array2_address0),
    .ce0(rectangles_array2_ce0),
    .q0(rectangles_array2_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array1_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array1_address0),
    .ce0(rectangles_array1_ce0),
    .q0(rectangles_array1_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array3_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array3_address0),
    .ce0(rectangles_array3_ce0),
    .q0(rectangles_array3_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array4_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array4_address0),
    .ce0(rectangles_array4_ce0),
    .q0(rectangles_array4_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array6_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array6_address0),
    .ce0(rectangles_array6_ce0),
    .q0(rectangles_array6_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array5_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array5_address0),
    .ce0(rectangles_array5_ce0),
    .q0(rectangles_array5_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array7_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array7_address0),
    .ce0(rectangles_array7_ce0),
    .q0(rectangles_array7_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array8_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array8_address0),
    .ce0(rectangles_array8_ce0),
    .q0(rectangles_array8_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array10_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array10_address0),
    .ce0(rectangles_array10_ce0),
    .q0(rectangles_array10_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array9_ROM_AUTO_1R #(
    .DataWidth( 5 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array9_address0),
    .ce0(rectangles_array9_ce0),
    .q0(rectangles_array9_q0)
);

face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array11_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 2913 ),
    .AddressWidth( 12 ))
rectangles_array11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rectangles_array11_address0),
    .ce0(rectangles_array11_ce0),
    .q0(rectangles_array11_q0)
);

face_detect_mul_13s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_13s_32s_32_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tree_thresh_array_load_reg_1616),
    .din1(stddev_0),
    .ce(1'b1),
    .dout(grp_fu_557_p2)
);

face_detect_mul_13s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_13s_32s_32_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_array0_load_reg_1621),
    .din1(add_ln282_reg_1596_pp0_iter5_reg),
    .ce(1'b1),
    .dout(grp_fu_561_p2)
);

face_detect_mul_14ns_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_14ns_32s_32_2_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_565_p0),
    .din1(sub_ln281_1_reg_1631),
    .ce(1'b1),
    .dout(grp_fu_565_p2)
);

face_detect_mul_14ns_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_14ns_32s_32_2_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_569_p0),
    .din1(add_ln282_1_reg_1601_pp0_iter5_reg),
    .ce(1'b1),
    .dout(grp_fu_569_p2)
);

face_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter8_stage0)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if (((1'd1 == and_ln233_1_reg_1488_pp0_iter3_reg) & (icmp_ln200_reg_1366_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_storemerge_reg_546 <= SUM1_data_q0;
        end else if (((1'd0 == and_ln233_1_reg_1488_pp0_iter3_reg) & (icmp_ln200_reg_1366_pp0_iter3_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter5_storemerge_reg_546 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_storemerge_reg_546 <= ap_phi_reg_pp0_iter4_storemerge_reg_546;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1051)) begin
        if ((1'd1 == and_ln233_1_reg_1488_pp0_iter3_reg)) begin
            coord_10 <= SUM1_data_q1;
        end else if ((1'd0 == and_ln233_1_reg_1488_pp0_iter3_reg)) begin
            coord_10 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1051)) begin
        if ((1'd1 == and_ln233_1_reg_1488_pp0_iter3_reg)) begin
            coord_8 <= SUM1_data_q3;
        end else if ((1'd0 == and_ln233_1_reg_1488_pp0_iter3_reg)) begin
            coord_8 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1051)) begin
        if ((1'd1 == and_ln233_1_reg_1488_pp0_iter3_reg)) begin
            coord_9 <= SUM1_data_q2;
        end else if ((1'd0 == and_ln233_1_reg_1488_pp0_iter3_reg)) begin
            coord_9 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            haar_counter_fu_120 <= sext_ln200_cast_fu_573_p1;
        end else if (((icmp_ln200_fu_599_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            haar_counter_fu_120 <= add_ln251_fu_624_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_116 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln200_reg_1366_pp0_iter7_reg == 1'd0))) begin
            j_fu_116 <= j_2_fu_1255_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            stage_sum_1_fu_112 <= stage_sum;
        end else if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
            stage_sum_1_fu_112 <= stage_sum_3_fu_1305_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln225_reg_1476 <= add_ln225_fu_691_p2;
        add_ln230_reg_1482 <= add_ln230_fu_697_p2;
        add_ln235_1_reg_1498 <= add_ln235_1_fu_796_p2;
        add_ln235_reg_1492 <= add_ln235_fu_791_p2;
        add_ln237_reg_1505 <= add_ln237_fu_801_p2;
        add_ln282_1_reg_1601 <= add_ln282_1_fu_1200_p2;
        add_ln282_1_reg_1601_pp0_iter5_reg <= add_ln282_1_reg_1601;
        add_ln282_reg_1596 <= add_ln282_fu_1194_p2;
        add_ln282_reg_1596_pp0_iter5_reg <= add_ln282_reg_1596;
        and_ln233_1_reg_1488 <= and_ln233_1_fu_785_p2;
        and_ln233_1_reg_1488_pp0_iter3_reg <= and_ln233_1_reg_1488;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln200_reg_1366_pp0_iter2_reg <= icmp_ln200_reg_1366;
        icmp_ln200_reg_1366_pp0_iter3_reg <= icmp_ln200_reg_1366_pp0_iter2_reg;
        icmp_ln200_reg_1366_pp0_iter4_reg <= icmp_ln200_reg_1366_pp0_iter3_reg;
        icmp_ln200_reg_1366_pp0_iter5_reg <= icmp_ln200_reg_1366_pp0_iter4_reg;
        icmp_ln200_reg_1366_pp0_iter6_reg <= icmp_ln200_reg_1366_pp0_iter5_reg;
        icmp_ln200_reg_1366_pp0_iter7_reg <= icmp_ln200_reg_1366_pp0_iter6_reg;
        icmp_ln201_reg_1691 <= icmp_ln201_fu_1261_p2;
        icmp_ln284_reg_1696 <= icmp_ln284_fu_1276_p2;
        mul_ln282_1_reg_1686 <= grp_fu_569_p2;
        mul_ln282_reg_1681 <= grp_fu_561_p2;
        return_value_1_reg_1646 <= alpha2_array_q0;
        return_value_1_reg_1646_pp0_iter6_reg <= return_value_1_reg_1646;
        return_value_1_reg_1646_pp0_iter7_reg <= return_value_1_reg_1646_pp0_iter6_reg;
        return_value_1_reg_1646_pp0_iter8_reg <= return_value_1_reg_1646_pp0_iter7_reg;
        return_value_reg_1641 <= alpha1_array_q0;
        return_value_reg_1641_pp0_iter6_reg <= return_value_reg_1641;
        return_value_reg_1641_pp0_iter7_reg <= return_value_reg_1641_pp0_iter6_reg;
        return_value_reg_1641_pp0_iter8_reg <= return_value_reg_1641_pp0_iter7_reg;
        sub_ln281_1_reg_1631 <= sub_ln281_1_fu_1230_p2;
        sum2_reg_1676 <= grp_fu_565_p2;
        t_reg_1671 <= grp_fu_557_p2;
        tr0_1_reg_1442 <= rectangles_array2_q0;
        tr0_2_reg_1447 <= tr0_2_fu_648_p2;
        tr0_reg_1435 <= tr0_fu_639_p2;
        tr1_1_reg_1460 <= rectangles_array6_q0;
        tr1_2_reg_1465 <= tr1_2_fu_670_p2;
        tr1_reg_1453 <= tr1_fu_661_p2;
        tr2_1_reg_1471 <= rectangles_array10_q0;
        tree_thresh_array_load_reg_1616 <= tree_thresh_array_q0;
        trunc_ln248_reg_1430_pp0_iter2_reg <= trunc_ln248_reg_1430;
        trunc_ln248_reg_1430_pp0_iter3_reg <= trunc_ln248_reg_1430_pp0_iter2_reg;
        weights_array0_load_reg_1621 <= weights_array0_q0;
        weights_array1_load_reg_1626 <= weights_array1_q0;
        weights_array2_load_reg_1636 <= weights_array2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln200_reg_1366 <= icmp_ln200_fu_599_p2;
        trunc_ln248_reg_1430 <= trunc_ln248_fu_620_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_storemerge_reg_546 <= ap_phi_reg_pp0_iter0_storemerge_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_storemerge_reg_546 <= ap_phi_reg_pp0_iter1_storemerge_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_storemerge_reg_546 <= ap_phi_reg_pp0_iter2_storemerge_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_storemerge_reg_546 <= ap_phi_reg_pp0_iter3_storemerge_reg_546;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce0 = 1'b1;
    end else begin
        SUM1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce1 = 1'b1;
    end else begin
        SUM1_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce10 = 1'b1;
    end else begin
        SUM1_data_ce10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce11 = 1'b1;
    end else begin
        SUM1_data_ce11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce2 = 1'b1;
    end else begin
        SUM1_data_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce3 = 1'b1;
    end else begin
        SUM1_data_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce4 = 1'b1;
    end else begin
        SUM1_data_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce5 = 1'b1;
    end else begin
        SUM1_data_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce6 = 1'b1;
    end else begin
        SUM1_data_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce7 = 1'b1;
    end else begin
        SUM1_data_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce8 = 1'b1;
    end else begin
        SUM1_data_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        SUM1_data_ce9 = 1'b1;
    end else begin
        SUM1_data_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        alpha1_array_ce0 = 1'b1;
    end else begin
        alpha1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        alpha2_array_ce0 = 1'b1;
    end else begin
        alpha2_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln200_fu_599_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln200_reg_1366_pp0_iter7_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter8_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter8_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array0_ce0 = 1'b1;
    end else begin
        rectangles_array0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array10_ce0 = 1'b1;
    end else begin
        rectangles_array10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array11_ce0 = 1'b1;
    end else begin
        rectangles_array11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array1_ce0 = 1'b1;
    end else begin
        rectangles_array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array2_ce0 = 1'b1;
    end else begin
        rectangles_array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array3_ce0 = 1'b1;
    end else begin
        rectangles_array3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array4_ce0 = 1'b1;
    end else begin
        rectangles_array4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array5_ce0 = 1'b1;
    end else begin
        rectangles_array5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array6_ce0 = 1'b1;
    end else begin
        rectangles_array6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array7_ce0 = 1'b1;
    end else begin
        rectangles_array7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array8_ce0 = 1'b1;
    end else begin
        rectangles_array8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rectangles_array9_ce0 = 1'b1;
    end else begin
        rectangles_array9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln200_reg_1366_pp0_iter7_reg == 1'd1))) begin
        stage_sum_1_out_ap_vld = 1'b1;
    end else begin
        stage_sum_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        tree_thresh_array_ce0 = 1'b1;
    end else begin
        tree_thresh_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_array0_ce0 = 1'b1;
    end else begin
        weights_array0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_array1_ce0 = 1'b1;
    end else begin
        weights_array1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        weights_array2_ce0 = 1'b1;
    end else begin
        weights_array2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SUM1_data_address0 = zext_ln238_fu_1120_p1;

assign SUM1_data_address1 = zext_ln237_2_fu_1109_p1;

assign SUM1_data_address10 = zext_ln224_fu_865_p1;

assign SUM1_data_address11 = zext_ln223_2_fu_849_p1;

assign SUM1_data_address2 = zext_ln236_fu_1071_p1;

assign SUM1_data_address3 = zext_ln235_2_fu_1055_p1;

assign SUM1_data_address4 = zext_ln231_fu_1017_p1;

assign SUM1_data_address5 = zext_ln230_2_fu_1006_p1;

assign SUM1_data_address6 = zext_ln229_fu_968_p1;

assign SUM1_data_address7 = zext_ln228_2_fu_952_p1;

assign SUM1_data_address8 = zext_ln226_fu_914_p1;

assign SUM1_data_address9 = zext_ln225_2_fu_903_p1;

assign add_ln223_1_fu_844_p2 = (add_ln223_fu_838_p2 + tr0_reg_1435);

assign add_ln223_fu_838_p2 = (zext_ln223_fu_823_p1 + zext_ln223_1_fu_834_p1);

assign add_ln224_1_fu_859_p2 = (add_ln223_fu_838_p2 + add_ln224_fu_854_p2);

assign add_ln224_fu_854_p2 = (zext_ln193_fu_807_p1 + tr0_reg_1435);

assign add_ln225_1_fu_892_p2 = (zext_ln225_fu_877_p1 + zext_ln225_1_fu_888_p1);

assign add_ln225_2_fu_898_p2 = (add_ln225_1_fu_892_p2 + tr0_reg_1435);

assign add_ln225_fu_691_p2 = (zext_ln193_1_fu_653_p1 + tr0_2_fu_648_p2);

assign add_ln226_fu_908_p2 = (add_ln225_1_fu_892_p2 + add_ln224_fu_854_p2);

assign add_ln228_1_fu_947_p2 = (add_ln228_fu_941_p2 + tr1_reg_1453);

assign add_ln228_fu_941_p2 = (zext_ln228_fu_926_p1 + zext_ln228_1_fu_937_p1);

assign add_ln229_1_fu_962_p2 = (add_ln228_fu_941_p2 + add_ln229_fu_957_p2);

assign add_ln229_fu_957_p2 = (zext_ln193_2_fu_810_p1 + tr1_reg_1453);

assign add_ln230_1_fu_995_p2 = (zext_ln230_fu_980_p1 + zext_ln230_1_fu_991_p1);

assign add_ln230_2_fu_1001_p2 = (add_ln230_1_fu_995_p2 + tr1_reg_1453);

assign add_ln230_fu_697_p2 = (zext_ln193_3_fu_675_p1 + tr1_2_fu_670_p2);

assign add_ln231_fu_1011_p2 = (add_ln230_1_fu_995_p2 + add_ln229_fu_957_p2);

assign add_ln235_1_fu_796_p2 = (zext_ln193_4_fu_679_p1 + pt_x_val);

assign add_ln235_2_fu_1044_p2 = (zext_ln235_fu_1029_p1 + zext_ln235_1_fu_1040_p1);

assign add_ln235_3_fu_1050_p2 = (add_ln235_2_fu_1044_p2 + add_ln235_1_reg_1498);

assign add_ln235_fu_791_p2 = (zext_ln193_6_fu_683_p1 + pt_y_val);

assign add_ln236_1_fu_1065_p2 = (add_ln235_2_fu_1044_p2 + add_ln236_fu_1060_p2);

assign add_ln236_fu_1060_p2 = (zext_ln193_5_fu_813_p1 + add_ln235_1_reg_1498);

assign add_ln237_1_fu_1098_p2 = (zext_ln237_fu_1083_p1 + zext_ln237_1_fu_1094_p1);

assign add_ln237_2_fu_1104_p2 = (add_ln237_1_fu_1098_p2 + add_ln235_1_reg_1498);

assign add_ln237_fu_801_p2 = (zext_ln193_7_fu_687_p1 + add_ln235_fu_791_p2);

assign add_ln238_fu_1114_p2 = (add_ln237_1_fu_1098_p2 + add_ln236_fu_1060_p2);

assign add_ln251_fu_624_p2 = (haar_counter_fu_120 + 33'd1);

assign add_ln281_fu_1218_p2 = (coord_8 + ap_phi_reg_pp0_iter5_storemerge_reg_546);

assign add_ln282_1_fu_1200_p2 = (SUM1_data_q4 + sub_ln280_1_fu_1188_p2);

assign add_ln282_2_fu_1267_p2 = (mul_ln282_1_reg_1686 + mul_ln282_reg_1681);

assign add_ln282_fu_1194_p2 = (SUM1_data_q8 + sub_ln279_1_fu_1176_p2);

assign alpha1_array_address0 = zext_ln271_fu_1161_p1;

assign alpha2_array_address0 = zext_ln271_fu_1161_p1;

assign and_ln233_1_fu_785_p2 = (icmp_ln233_1_fu_767_p2 & and_ln233_fu_779_p2);

assign and_ln233_fu_779_p2 = (icmp_ln233_fu_761_p2 & icmp_ln233_2_fu_773_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1051 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln200_reg_1366_pp0_iter3_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_storemerge_reg_546 = 'bx;

assign final_sum_fu_1271_p2 = (add_ln282_2_fu_1267_p2 + sum2_reg_1676);

assign grp_fu_565_p0 = grp_fu_565_p00;

assign grp_fu_565_p00 = weights_array2_load_reg_1636;

assign grp_fu_569_p0 = grp_fu_569_p00;

assign grp_fu_569_p00 = weights_array1_load_reg_1626;

assign icmp_ln200_fu_599_p2 = ((trunc_ln200_fu_595_p1 == add_ln200) ? 1'b1 : 1'b0);

assign icmp_ln201_fu_1261_p2 = ((j_fu_116 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln233_1_fu_767_p2 = ((rectangles_array11_q0 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln233_2_fu_773_p2 = ((or_ln233_2_fu_755_p2 != 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln233_fu_761_p2 = ((rectangles_array10_q0 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_1276_p2 = (($signed(final_sum_fu_1271_p2) < $signed(t_reg_1671)) ? 1'b1 : 1'b0);

assign j_2_fu_1255_p2 = (j_fu_116 + 8'd1);

assign or_ln233_1_fu_733_p2 = (trunc_ln233_1_fu_729_p1 | rectangles_array11_q0);

assign or_ln233_2_fu_755_p2 = (tmp_fu_721_p3 | tmp1_fu_747_p3);

assign or_ln233_fu_707_p2 = (trunc_ln233_fu_703_p1 | rectangles_array10_q0);

assign rectangles_array0_address0 = zext_ln200_fu_604_p1;

assign rectangles_array10_address0 = zext_ln200_fu_604_p1;

assign rectangles_array11_address0 = zext_ln200_fu_604_p1;

assign rectangles_array1_address0 = zext_ln200_fu_604_p1;

assign rectangles_array2_address0 = zext_ln200_fu_604_p1;

assign rectangles_array3_address0 = zext_ln200_fu_604_p1;

assign rectangles_array4_address0 = zext_ln200_fu_604_p1;

assign rectangles_array5_address0 = zext_ln200_fu_604_p1;

assign rectangles_array6_address0 = zext_ln200_fu_604_p1;

assign rectangles_array7_address0 = zext_ln200_fu_604_p1;

assign rectangles_array8_address0 = zext_ln200_fu_604_p1;

assign rectangles_array9_address0 = zext_ln200_fu_604_p1;

assign return_value_3_fu_1296_p3 = ((icmp_ln284_reg_1696[0:0] == 1'b1) ? return_value_reg_1641_pp0_iter8_reg : return_value_1_reg_1646_pp0_iter8_reg);

assign sext_ln200_cast_fu_573_p1 = $signed(sext_ln200);

assign sext_ln250_fu_1301_p1 = $signed(return_value_3_fu_1296_p3);

assign stage_sum_1_out = stage_sum_1_fu_112;

assign stage_sum_2_fu_1289_p3 = ((icmp_ln201_reg_1691[0:0] == 1'b1) ? 64'd0 : stage_sum_1_fu_112);

assign stage_sum_3_fu_1305_p2 = ($signed(stage_sum_2_fu_1289_p3) + $signed(sext_ln250_fu_1301_p1));

assign sub_ln279_1_fu_1176_p2 = (sub_ln279_fu_1170_p2 - SUM1_data_q9);

assign sub_ln279_fu_1170_p2 = (SUM1_data_q11 - SUM1_data_q10);

assign sub_ln280_1_fu_1188_p2 = (sub_ln280_fu_1182_p2 - SUM1_data_q5);

assign sub_ln280_fu_1182_p2 = (SUM1_data_q7 - SUM1_data_q6);

assign sub_ln281_1_fu_1230_p2 = (sub_ln281_fu_1224_p2 - coord_10);

assign sub_ln281_fu_1224_p2 = (add_ln281_fu_1218_p2 - coord_9);

assign tmp1_fu_747_p3 = {{tmp_25_fu_739_p3}, {or_ln233_1_fu_733_p2}};

assign tmp_17_fu_827_p3 = {{tr0_2_reg_1447}, {6'd0}};

assign tmp_18_fu_870_p3 = {{add_ln225_reg_1476}, {8'd0}};

assign tmp_19_fu_881_p3 = {{add_ln225_reg_1476}, {6'd0}};

assign tmp_20_fu_919_p3 = {{tr1_2_reg_1465}, {8'd0}};

assign tmp_21_fu_930_p3 = {{tr1_2_reg_1465}, {6'd0}};

assign tmp_22_fu_973_p3 = {{add_ln230_reg_1482}, {8'd0}};

assign tmp_23_fu_984_p3 = {{add_ln230_reg_1482}, {6'd0}};

assign tmp_24_fu_713_p3 = rectangles_array8_q0[32'd4];

assign tmp_25_fu_739_p3 = rectangles_array9_q0[32'd4];

assign tmp_26_fu_1022_p3 = {{add_ln235_reg_1492}, {8'd0}};

assign tmp_27_fu_1033_p3 = {{add_ln235_reg_1492}, {6'd0}};

assign tmp_28_fu_1076_p3 = {{add_ln237_reg_1505}, {8'd0}};

assign tmp_29_fu_1087_p3 = {{add_ln237_reg_1505}, {6'd0}};

assign tmp_fu_721_p3 = {{tmp_24_fu_713_p3}, {or_ln233_fu_707_p2}};

assign tmp_s_fu_816_p3 = {{tr0_2_reg_1447}, {8'd0}};

assign tr0_2_fu_648_p2 = (zext_ln210_fu_644_p1 + pt_y_val);

assign tr0_fu_639_p2 = (zext_ln208_fu_635_p1 + pt_x_val);

assign tr1_2_fu_670_p2 = (zext_ln215_fu_666_p1 + pt_y_val);

assign tr1_fu_661_p2 = (zext_ln213_fu_657_p1 + pt_x_val);

assign tree_thresh_array_address0 = zext_ln271_fu_1161_p1;

assign trunc_ln200_fu_595_p1 = haar_counter_fu_120[7:0];

assign trunc_ln233_1_fu_729_p1 = rectangles_array9_q0[3:0];

assign trunc_ln233_fu_703_p1 = rectangles_array8_q0[3:0];

assign trunc_ln248_fu_620_p1 = haar_counter_fu_120[11:0];

assign weights_array0_address0 = zext_ln271_fu_1161_p1;

assign weights_array1_address0 = zext_ln271_fu_1161_p1;

assign weights_array2_address0 = zext_ln271_fu_1161_p1;

assign zext_ln193_1_fu_653_p1 = rectangles_array3_q0;

assign zext_ln193_2_fu_810_p1 = tr1_1_reg_1460;

assign zext_ln193_3_fu_675_p1 = rectangles_array7_q0;

assign zext_ln193_4_fu_679_p1 = rectangles_array8_q0;

assign zext_ln193_5_fu_813_p1 = tr2_1_reg_1471;

assign zext_ln193_6_fu_683_p1 = rectangles_array9_q0;

assign zext_ln193_7_fu_687_p1 = rectangles_array11_q0;

assign zext_ln193_fu_807_p1 = tr0_1_reg_1442;

assign zext_ln200_fu_604_p1 = haar_counter_fu_120;

assign zext_ln208_fu_635_p1 = rectangles_array0_q0;

assign zext_ln210_fu_644_p1 = rectangles_array1_q0;

assign zext_ln213_fu_657_p1 = rectangles_array4_q0;

assign zext_ln215_fu_666_p1 = rectangles_array5_q0;

assign zext_ln223_1_fu_834_p1 = tmp_17_fu_827_p3;

assign zext_ln223_2_fu_849_p1 = add_ln223_1_fu_844_p2;

assign zext_ln223_fu_823_p1 = tmp_s_fu_816_p3;

assign zext_ln224_fu_865_p1 = add_ln224_1_fu_859_p2;

assign zext_ln225_1_fu_888_p1 = tmp_19_fu_881_p3;

assign zext_ln225_2_fu_903_p1 = add_ln225_2_fu_898_p2;

assign zext_ln225_fu_877_p1 = tmp_18_fu_870_p3;

assign zext_ln226_fu_914_p1 = add_ln226_fu_908_p2;

assign zext_ln228_1_fu_937_p1 = tmp_21_fu_930_p3;

assign zext_ln228_2_fu_952_p1 = add_ln228_1_fu_947_p2;

assign zext_ln228_fu_926_p1 = tmp_20_fu_919_p3;

assign zext_ln229_fu_968_p1 = add_ln229_1_fu_962_p2;

assign zext_ln230_1_fu_991_p1 = tmp_23_fu_984_p3;

assign zext_ln230_2_fu_1006_p1 = add_ln230_2_fu_1001_p2;

assign zext_ln230_fu_980_p1 = tmp_22_fu_973_p3;

assign zext_ln231_fu_1017_p1 = add_ln231_fu_1011_p2;

assign zext_ln235_1_fu_1040_p1 = tmp_27_fu_1033_p3;

assign zext_ln235_2_fu_1055_p1 = add_ln235_3_fu_1050_p2;

assign zext_ln235_fu_1029_p1 = tmp_26_fu_1022_p3;

assign zext_ln236_fu_1071_p1 = add_ln236_1_fu_1065_p2;

assign zext_ln237_1_fu_1094_p1 = tmp_29_fu_1087_p3;

assign zext_ln237_2_fu_1109_p1 = add_ln237_2_fu_1104_p2;

assign zext_ln237_fu_1083_p1 = tmp_28_fu_1076_p3;

assign zext_ln238_fu_1120_p1 = add_ln238_fu_1114_p2;

assign zext_ln271_fu_1161_p1 = trunc_ln248_reg_1430_pp0_iter3_reg;

endmodule //face_detect_cascadeClassifier_Pipeline_Filters
