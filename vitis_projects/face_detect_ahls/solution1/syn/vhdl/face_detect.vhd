-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Data_ce0 : OUT STD_LOGIC;
    Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_x_ce0 : OUT STD_LOGIC;
    result_x_we0 : OUT STD_LOGIC;
    result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_y_ce0 : OUT STD_LOGIC;
    result_y_we0 : OUT STD_LOGIC;
    result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_w_ce0 : OUT STD_LOGIC;
    result_w_we0 : OUT STD_LOGIC;
    result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_h_ce0 : OUT STD_LOGIC;
    result_h_we0 : OUT STD_LOGIC;
    result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_size_ap_vld : OUT STD_LOGIC );
end;


architecture behav of face_detect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "face_detect_face_detect,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.644000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1766,HLS_SYN_DSP=0,HLS_SYN_FF=6914,HLS_SYN_LUT=12662,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3F99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111111100110011001100110011010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_41C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_43A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011101000000000000000000000";
    constant ap_const_lv32_43700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011100000000000000000000";
    constant ap_const_lv32_41C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110010000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001010000000000000000000000";
    constant ap_const_lv32_F00000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111100000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal factor_2_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_2_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_3_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_3_fu_371_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_exp_3_reg_935 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln92_1_fu_381_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln92_1_reg_941 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_2_reg_949 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_2_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_2_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_sign_3_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_3_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_3_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_assign_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln61_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_982 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal icmp_ln61_2_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_987 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_992 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln61_fu_677_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1007 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sdiv_ln357_reg_1012 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_629_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sdiv_ln358_reg_1017 : STD_LOGIC_VECTOR (23 downto 0);
    signal result_18_fu_778_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_18_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal result_19_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_19_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_ratio_fu_817_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_ratio_reg_1034 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_ratio_fu_840_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_ratio_reg_1039 : STD_LOGIC_VECTOR (23 downto 0);
    signal val_fu_867_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_sign_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_17_fu_888_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_17_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal IMG1_data_ce0 : STD_LOGIC;
    signal IMG1_data_we0 : STD_LOGIC;
    signal IMG1_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_idle : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_ready : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0 : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0 : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_ap_start : STD_LOGIC;
    signal grp_processImage_fu_213_ap_done : STD_LOGIC;
    signal grp_processImage_fu_213_ap_idle : STD_LOGIC;
    signal grp_processImage_fu_213_ap_ready : STD_LOGIC;
    signal grp_processImage_fu_213_result_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_x_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_x_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_result_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_y_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_y_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_result_w_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_w_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_w_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_result_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_h_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_h_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_fu_213_IMG1_data_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_278_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_278_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_278_p_ce : STD_LOGIC;
    signal grp_processImage_fu_213_grp_fu_294_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_294_p_ce : STD_LOGIC;
    signal grp_processImage_fu_213_grp_fu_297_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_297_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_297_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_processImage_fu_213_grp_fu_297_p_ce : STD_LOGIC;
    signal grp_processImage_fu_213_grp_fu_308_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_processImage_fu_213_grp_fu_308_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_processImage_fu_213_grp_fu_308_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_processImage_fu_213_grp_fu_308_p_ce : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal grp_processImage_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal factor_fu_182 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal result_size1_fu_186 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_2_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_2_fu_330_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln92_fu_340_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln92_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_3_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln92_3_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_2_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mantissa_2_fu_423_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln317_fu_437_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_fu_441_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_2_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_5_fu_461_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_4_fu_465_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln18_6_fu_473_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_2_fu_433_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_2_fu_477_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal lshr_ln18_2_fu_481_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal shl_ln18_2_fu_487_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_s_fu_493_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_503_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal mantissa_3_fu_529_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln317_1_fu_542_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_1_fu_545_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_3_fu_559_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_7_fu_564_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_6_fu_568_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln18_8_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_538_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_3_fu_580_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal lshr_ln18_3_fu_584_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal shl_ln18_3_fu_590_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_15_fu_596_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_606_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_624_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_629_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bitcast_ln61_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_642_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_652_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln61_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln505_fu_699_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_703_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_fu_689_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_717_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_721_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_735_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_741_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_fu_745_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_4_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_713_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln18_fu_757_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal result_12_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_15_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln357_fu_797_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln357_fu_800_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln357_fu_806_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln357_fu_813_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal trunc_ln358_fu_824_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln358_fu_827_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln358_fu_833_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln18_fu_761_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal shl_ln18_fu_767_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_17_fu_847_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_857_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_fu_883_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_ce : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal grp_fu_297_ce : STD_LOGIC;
    signal grp_fu_297_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_308_ce : STD_LOGIC;
    signal and_ln92_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_624_ap_start : STD_LOGIC;
    signal grp_fu_624_ap_done : STD_LOGIC;
    signal grp_fu_629_ap_start : STD_LOGIC;
    signal grp_fu_629_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_ratio : IN STD_LOGIC_VECTOR (23 downto 0);
        result_19 : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_we0 : OUT STD_LOGIC;
        IMG1_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        result_18 : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln357_1 : IN STD_LOGIC_VECTOR (27 downto 0);
        Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        Data_ce0 : OUT STD_LOGIC;
        Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component face_detect_processImage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        factor : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
        result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_x_ce0 : OUT STD_LOGIC;
        result_x_we0 : OUT STD_LOGIC;
        result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_y_ce0 : OUT STD_LOGIC;
        result_y_we0 : OUT STD_LOGIC;
        result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_w_ce0 : OUT STD_LOGIC;
        result_w_we0 : OUT STD_LOGIC;
        result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_h_ce0 : OUT STD_LOGIC;
        result_h_we0 : OUT STD_LOGIC;
        result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        winSize_width_val : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_ce : OUT STD_LOGIC;
        grp_fu_294_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_294_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_294_p_ce : OUT STD_LOGIC;
        grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_297_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_297_p_ce : OUT STD_LOGIC;
        grp_fu_308_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_308_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_308_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_308_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_308_p_ce : OUT STD_LOGIC );
    end component;


    component face_detect_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_fdiv_32ns_32ns_32_10_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_sdiv_27ns_32ns_27_31_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component face_detect_sdiv_26ns_32ns_24_30_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component face_detect_IMG1_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    IMG1_data_U : component face_detect_IMG1_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IMG1_data_address0,
        ce0 => IMG1_data_ce0,
        we0 => IMG1_data_we0,
        d0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_d0,
        q0 => IMG1_data_q0);

    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202 : component face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start,
        ap_done => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done,
        ap_idle => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_idle,
        ap_ready => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_ready,
        y_ratio => y_ratio_reg_1039,
        result_19 => result_19_reg_1028,
        IMG1_data_address0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0,
        IMG1_data_ce0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0,
        IMG1_data_we0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0,
        IMG1_data_d0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_d0,
        result_18 => result_18_reg_1022,
        sext_ln357_1 => x_ratio_reg_1034,
        Data_address0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_address0,
        Data_ce0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_ce0,
        Data_q0 => Data_q0);

    grp_processImage_fu_213 : component face_detect_processImage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_processImage_fu_213_ap_start,
        ap_done => grp_processImage_fu_213_ap_done,
        ap_idle => grp_processImage_fu_213_ap_idle,
        ap_ready => grp_processImage_fu_213_ap_ready,
        factor => factor_2_reg_917,
        sum_row => result_19_reg_1028,
        sum_col => result_18_reg_1022,
        result_x_address0 => grp_processImage_fu_213_result_x_address0,
        result_x_ce0 => grp_processImage_fu_213_result_x_ce0,
        result_x_we0 => grp_processImage_fu_213_result_x_we0,
        result_x_d0 => grp_processImage_fu_213_result_x_d0,
        result_y_address0 => grp_processImage_fu_213_result_y_address0,
        result_y_ce0 => grp_processImage_fu_213_result_y_ce0,
        result_y_we0 => grp_processImage_fu_213_result_y_we0,
        result_y_d0 => grp_processImage_fu_213_result_y_d0,
        result_w_address0 => grp_processImage_fu_213_result_w_address0,
        result_w_ce0 => grp_processImage_fu_213_result_w_ce0,
        result_w_we0 => grp_processImage_fu_213_result_w_we0,
        result_w_d0 => grp_processImage_fu_213_result_w_d0,
        result_h_address0 => grp_processImage_fu_213_result_h_address0,
        result_h_ce0 => grp_processImage_fu_213_result_h_ce0,
        result_h_we0 => grp_processImage_fu_213_result_h_we0,
        result_h_d0 => grp_processImage_fu_213_result_h_d0,
        p_read => result_size1_fu_186,
        IMG1_data_address0 => grp_processImage_fu_213_IMG1_data_address0,
        IMG1_data_ce0 => grp_processImage_fu_213_IMG1_data_ce0,
        IMG1_data_q0 => IMG1_data_q0,
        winSize_width_val => result_17_reg_1055,
        ap_return => grp_processImage_fu_213_ap_return,
        grp_fu_278_p_din0 => grp_processImage_fu_213_grp_fu_278_p_din0,
        grp_fu_278_p_din1 => grp_processImage_fu_213_grp_fu_278_p_din1,
        grp_fu_278_p_dout0 => grp_fu_278_p2,
        grp_fu_278_p_ce => grp_processImage_fu_213_grp_fu_278_p_ce,
        grp_fu_294_p_din0 => grp_processImage_fu_213_grp_fu_294_p_din0,
        grp_fu_294_p_dout0 => grp_fu_294_p1,
        grp_fu_294_p_ce => grp_processImage_fu_213_grp_fu_294_p_ce,
        grp_fu_297_p_din0 => grp_processImage_fu_213_grp_fu_297_p_din0,
        grp_fu_297_p_din1 => grp_processImage_fu_213_grp_fu_297_p_din1,
        grp_fu_297_p_opcode => grp_processImage_fu_213_grp_fu_297_p_opcode,
        grp_fu_297_p_dout0 => grp_fu_297_p2,
        grp_fu_297_p_ce => grp_processImage_fu_213_grp_fu_297_p_ce,
        grp_fu_308_p_din0 => grp_processImage_fu_213_grp_fu_308_p_din0,
        grp_fu_308_p_din1 => grp_processImage_fu_213_grp_fu_308_p_din1,
        grp_fu_308_p_opcode => grp_processImage_fu_213_grp_fu_308_p_opcode,
        grp_fu_308_p_dout0 => grp_fu_308_p2,
        grp_fu_308_p_ce => grp_processImage_fu_213_grp_fu_308_p_ce);

    fmul_32ns_32ns_32_4_max_dsp_1_U85 : component face_detect_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => grp_fu_278_ce,
        dout => grp_fu_278_p2);

    fdiv_32ns_32ns_32_10_no_dsp_1_U86 : component face_detect_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43A00000,
        din1 => factor_fu_182,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    fdiv_32ns_32ns_32_10_no_dsp_1_U87 : component face_detect_fdiv_32ns_32ns_32_10_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43700000,
        din1 => factor_fu_182,
        ce => ap_const_logic_1,
        dout => grp_fu_289_p2);

    fpext_32ns_64_2_no_dsp_1_U88 : component face_detect_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        ce => grp_fu_294_ce,
        dout => grp_fu_294_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U89 : component face_detect_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => grp_fu_297_ce,
        opcode => grp_fu_297_opcode,
        dout => grp_fu_297_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U90 : component face_detect_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_3_reg_929,
        din1 => ap_const_lv32_41C80000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_302_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U91 : component face_detect_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_308_p0,
        din1 => grp_fu_308_p1,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p2);

    sdiv_27ns_32ns_27_31_seq_1_U92 : component face_detect_sdiv_27ns_32ns_27_31_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_624_ap_start,
        done => grp_fu_624_ap_done,
        din0 => grp_fu_624_p0,
        din1 => val_2_reg_955,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p2);

    sdiv_26ns_32ns_24_30_seq_1_U93 : component face_detect_sdiv_26ns_32ns_24_30_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 26,
        din1_WIDTH => 32,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_629_ap_start,
        done => grp_fu_629_ap_done,
        din0 => grp_fu_629_p0,
        din1 => val_3_reg_968,
        ce => ap_const_logic_1,
        dout => grp_fu_629_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processImage_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_processImage_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    grp_processImage_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processImage_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_processImage_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    factor_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                factor_fu_182 <= ap_const_lv32_3F99999A;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                factor_fu_182 <= grp_fu_278_p2;
            end if; 
        end if;
    end process;

    result_size1_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                result_size1_fu_186 <= ap_const_lv32_0;
            elsif (((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                result_size1_fu_186 <= grp_processImage_fu_213_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                conv_i_reg_992 <= grp_fu_294_p1;
                tmp_2_reg_997 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                dc_2_reg_923 <= grp_fu_284_p2;
                dc_3_reg_929 <= grp_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                dc_reg_1007 <= grp_fu_308_p2;
                sdiv_ln357_reg_1012 <= grp_fu_624_p2;
                sdiv_ln358_reg_1017 <= grp_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                factor_2_reg_917 <= factor_fu_182;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                icmp_ln61_2_reg_987 <= icmp_ln61_2_fu_662_p2;
                icmp_ln61_reg_982 <= icmp_ln61_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                result_17_reg_1055 <= result_17_fu_888_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                result_18_reg_1022 <= result_18_fu_778_p3;
                result_19_reg_1028 <= result_19_fu_790_p3;
                val_reg_1044 <= val_fu_867_p3;
                x_ratio_reg_1034 <= x_ratio_fu_817_p2;
                xs_sign_reg_1050 <= data_fu_686_p1(63 downto 63);
                y_ratio_reg_1039 <= y_ratio_fu_840_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln92_1_reg_941 <= trunc_ln92_1_fu_381_p1;
                val_2_reg_955 <= val_2_fu_513_p3;
                xs_exp_3_reg_935 <= data_3_fu_368_p1(30 downto 23);
                xs_sign_2_reg_949 <= data_2_fu_327_p1(31 downto 31);
                xs_sign_3_reg_962 <= data_3_fu_368_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                val_3_reg_968 <= val_3_fu_616_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                value_assign_reg_975 <= grp_fu_278_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state13, ap_CS_fsm_state46, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done, grp_processImage_fu_213_ap_done, ap_CS_fsm_state48, and_ln92_fu_409_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_lv1_0 = and_ln92_fu_409_p2) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Data_address0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_address0;
    Data_ce0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_ce0;

    IMG1_data_address0_assign_proc : process(ap_CS_fsm_state46, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0, grp_processImage_fu_213_IMG1_data_address0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            IMG1_data_address0 <= grp_processImage_fu_213_IMG1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            IMG1_data_address0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0;
        else 
            IMG1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state46, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0, grp_processImage_fu_213_IMG1_data_ce0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            IMG1_data_ce0 <= grp_processImage_fu_213_IMG1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            IMG1_data_ce0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_we0_assign_proc : process(ap_CS_fsm_state46, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            IMG1_data_we0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0;
        else 
            IMG1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln317_1_fu_545_p2 <= std_logic_vector(unsigned(zext_ln317_1_fu_542_p1) + unsigned(ap_const_lv9_181));
    add_ln317_fu_441_p2 <= std_logic_vector(unsigned(zext_ln317_fu_437_p1) + unsigned(ap_const_lv9_181));
    add_ln486_fu_721_p2 <= std_logic_vector(unsigned(zext_ln486_fu_717_p1) + unsigned(ap_const_lv12_C01));
    and_ln61_fu_672_p2 <= (tmp_2_reg_997 and or_ln61_fu_668_p2);
    and_ln92_1_fu_362_p2 <= (or_ln92_fu_356_p2 and grp_fu_297_p2);
    and_ln92_2_fu_403_p2 <= (or_ln92_1_fu_397_p2 and grp_fu_302_p2);
    and_ln92_fu_409_p2 <= (and_ln92_2_fu_403_p2 and and_ln92_1_fu_362_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done)
    begin
        if ((grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;

    ap_ST_fsm_state48_blk_assign_proc : process(grp_processImage_fu_213_ap_done)
    begin
        if ((grp_processImage_fu_213_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state13, and_ln92_fu_409_p2)
    begin
        if (((ap_const_lv1_0 = and_ln92_fu_409_p2) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, and_ln92_fu_409_p2)
    begin
        if (((ap_const_lv1_0 = and_ln92_fu_409_p2) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln61_fu_639_p1 <= value_assign_reg_975;
    data_2_fu_327_p1 <= dc_2_reg_923;
    data_3_fu_368_p1 <= dc_3_reg_929;
    data_fu_686_p1 <= dc_reg_1007;
    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg;

    grp_fu_278_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_278_p_ce, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_278_ce <= grp_processImage_fu_213_grp_fu_278_p_ce;
        else 
            grp_fu_278_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(factor_2_reg_917, ap_CS_fsm_state13, grp_processImage_fu_213_grp_fu_278_p_din0, ap_CS_fsm_state48, factor_fu_182, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_278_p0 <= grp_processImage_fu_213_grp_fu_278_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_278_p0 <= factor_2_reg_917;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_278_p0 <= factor_fu_182;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(ap_CS_fsm_state13, grp_processImage_fu_213_grp_fu_278_p_din1, ap_CS_fsm_state48, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_278_p1 <= grp_processImage_fu_213_grp_fu_278_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_278_p1 <= ap_const_lv32_41C00000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_278_p1 <= ap_const_lv32_3F99999A;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_294_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_294_p_ce, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_294_ce <= grp_processImage_fu_213_grp_fu_294_p_ce;
        else 
            grp_fu_294_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_294_p0_assign_proc : process(value_assign_reg_975, ap_CS_fsm_state38, grp_processImage_fu_213_grp_fu_294_p_din0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_294_p0 <= grp_processImage_fu_213_grp_fu_294_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_294_p0 <= value_assign_reg_975;
        else 
            grp_fu_294_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_297_p_ce, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_297_ce <= grp_processImage_fu_213_grp_fu_297_p_ce;
        else 
            grp_fu_297_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_297_opcode_assign_proc : process(ap_CS_fsm_state38, grp_processImage_fu_213_grp_fu_297_p_opcode, ap_CS_fsm_state48, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_297_opcode <= grp_processImage_fu_213_grp_fu_297_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_297_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_297_opcode <= ap_const_lv5_2;
        else 
            grp_fu_297_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_297_p0_assign_proc : process(dc_2_reg_923, value_assign_reg_975, ap_CS_fsm_state38, grp_processImage_fu_213_grp_fu_297_p_din0, ap_CS_fsm_state48, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_297_p0 <= grp_processImage_fu_213_grp_fu_297_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_297_p0 <= value_assign_reg_975;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_297_p0 <= dc_2_reg_923;
        else 
            grp_fu_297_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(ap_CS_fsm_state38, grp_processImage_fu_213_grp_fu_297_p_din1, ap_CS_fsm_state48, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_297_p1 <= grp_processImage_fu_213_grp_fu_297_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_297_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_297_p1 <= ap_const_lv32_41C80000;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_308_p_ce, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_308_ce <= grp_processImage_fu_213_grp_fu_308_p_ce;
        else 
            grp_fu_308_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_308_p0_assign_proc : process(conv_i_reg_992, ap_CS_fsm_state40, grp_processImage_fu_213_grp_fu_308_p_din0, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_308_p0 <= grp_processImage_fu_213_grp_fu_308_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_308_p0 <= conv_i_reg_992;
        else 
            grp_fu_308_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_308_p1_assign_proc : process(select_ln61_fu_677_p3, ap_CS_fsm_state40, grp_processImage_fu_213_grp_fu_308_p_din1, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_308_p1 <= grp_processImage_fu_213_grp_fu_308_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_308_p1 <= select_ln61_fu_677_p3;
        else 
            grp_fu_308_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_624_ap_start_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_624_ap_start <= ap_const_logic_1;
        else 
            grp_fu_624_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_624_p0 <= ap_const_lv32_1400000(27 - 1 downto 0);

    grp_fu_629_ap_start_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_629_ap_start <= ap_const_logic_1;
        else 
            grp_fu_629_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_629_p0 <= ap_const_lv32_F00000(26 - 1 downto 0);
    grp_processImage_fu_213_ap_start <= grp_processImage_fu_213_ap_start_reg;
    icmp_ln61_2_fu_662_p2 <= "1" when (trunc_ln61_fu_652_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_656_p2 <= "0" when (tmp_9_fu_642_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_1_fu_350_p2 <= "1" when (trunc_ln92_fu_340_p1 = ap_const_lv23_0) else "0";
    icmp_ln92_2_fu_385_p2 <= "0" when (xs_exp_3_fu_371_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_3_fu_391_p2 <= "1" when (trunc_ln92_1_fu_381_p1 = ap_const_lv23_0) else "0";
    icmp_ln92_fu_344_p2 <= "0" when (xs_exp_2_fu_330_p4 = ap_const_lv8_FF) else "1";
    lshr_ln18_2_fu_481_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_2_fu_433_p1),to_integer(unsigned('0' & zext_ln18_2_fu_477_p1(31-1 downto 0)))));
    lshr_ln18_3_fu_584_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_3_fu_538_p1),to_integer(unsigned('0' & zext_ln18_3_fu_580_p1(31-1 downto 0)))));
    lshr_ln18_fu_761_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_713_p1),to_integer(unsigned('0' & zext_ln18_fu_757_p1(31-1 downto 0)))));
    mantissa_2_fu_423_p4 <= ((ap_const_lv1_1 & trunc_ln92_fu_340_p1) & ap_const_lv1_0);
    mantissa_3_fu_529_p4 <= ((ap_const_lv1_1 & trunc_ln92_1_reg_941) & ap_const_lv1_0);
    mantissa_fu_703_p4 <= ((ap_const_lv1_1 & trunc_ln505_fu_699_p1) & ap_const_lv1_0);
    or_ln61_fu_668_p2 <= (icmp_ln61_reg_982 or icmp_ln61_2_reg_987);
    or_ln92_1_fu_397_p2 <= (icmp_ln92_3_fu_391_p2 or icmp_ln92_2_fu_385_p2);
    or_ln92_fu_356_p2 <= (icmp_ln92_fu_344_p2 or icmp_ln92_1_fu_350_p2);
    result_12_fu_773_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_2_reg_955));
    result_15_fu_785_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_3_reg_968));
    result_17_fu_888_p3 <= 
        result_fu_883_p2 when (xs_sign_reg_1050(0) = '1') else 
        val_reg_1044;
    result_18_fu_778_p3 <= 
        result_12_fu_773_p2 when (xs_sign_2_reg_949(0) = '1') else 
        val_2_reg_955;
    result_19_fu_790_p3 <= 
        result_15_fu_785_p2 when (xs_sign_3_reg_962(0) = '1') else 
        val_3_reg_968;
    result_fu_883_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1044));
    result_h_address0 <= grp_processImage_fu_213_result_h_address0;
    result_h_ce0 <= grp_processImage_fu_213_result_h_ce0;
    result_h_d0 <= grp_processImage_fu_213_result_h_d0;
    result_h_we0 <= grp_processImage_fu_213_result_h_we0;

    result_size_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_processImage_fu_213_ap_done, grp_processImage_fu_213_ap_return, ap_CS_fsm_state48)
    begin
        if (((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            result_size <= grp_processImage_fu_213_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_size <= ap_const_lv32_0;
        else 
            result_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_size_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_processImage_fu_213_ap_done, ap_CS_fsm_state48)
    begin
        if ((((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            result_size_ap_vld <= ap_const_logic_1;
        else 
            result_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_w_address0 <= grp_processImage_fu_213_result_w_address0;
    result_w_ce0 <= grp_processImage_fu_213_result_w_ce0;
    result_w_d0 <= grp_processImage_fu_213_result_w_d0;
    result_w_we0 <= grp_processImage_fu_213_result_w_we0;
    result_x_address0 <= grp_processImage_fu_213_result_x_address0;
    result_x_ce0 <= grp_processImage_fu_213_result_x_ce0;
    result_x_d0 <= grp_processImage_fu_213_result_x_d0;
    result_x_we0 <= grp_processImage_fu_213_result_x_we0;
    result_y_address0 <= grp_processImage_fu_213_result_y_address0;
    result_y_ce0 <= grp_processImage_fu_213_result_y_ce0;
    result_y_d0 <= grp_processImage_fu_213_result_y_d0;
    result_y_we0 <= grp_processImage_fu_213_result_y_we0;
    select_ln18_4_fu_465_p3 <= 
        sext_ln18_5_fu_461_p1 when (tmp_11_fu_447_p3(0) = '1') else 
        add_ln317_fu_441_p2;
    select_ln18_6_fu_568_p3 <= 
        sext_ln18_7_fu_564_p1 when (tmp_14_fu_551_p3(0) = '1') else 
        add_ln317_1_fu_545_p2;
    select_ln18_fu_745_p3 <= 
        sext_ln18_fu_741_p1 when (tmp_fu_727_p3(0) = '1') else 
        add_ln486_fu_721_p2;
    select_ln357_fu_806_p3 <= 
        sub_ln357_fu_800_p2 when (xs_sign_2_reg_949(0) = '1') else 
        trunc_ln357_fu_797_p1;
    select_ln358_fu_833_p3 <= 
        sub_ln358_fu_827_p2 when (xs_sign_3_reg_962(0) = '1') else 
        trunc_ln358_fu_824_p1;
    select_ln61_fu_677_p3 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln61_fu_672_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
        sext_ln18_4_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_745_p3),32));

        sext_ln18_5_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_2_fu_455_p2),9));

        sext_ln18_6_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_4_fu_465_p3),32));

        sext_ln18_7_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_3_fu_559_p2),9));

        sext_ln18_8_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_6_fu_568_p3),32));

        sext_ln18_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_735_p2),12));

        sext_ln357_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln357_fu_806_p3),28));

    shl_ln18_2_fu_487_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_2_fu_433_p1),to_integer(unsigned('0' & zext_ln18_2_fu_477_p1(31-1 downto 0)))));
    shl_ln18_3_fu_590_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_3_fu_538_p1),to_integer(unsigned('0' & zext_ln18_3_fu_580_p1(31-1 downto 0)))));
    shl_ln18_fu_767_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_713_p1),to_integer(unsigned('0' & zext_ln18_fu_757_p1(31-1 downto 0)))));
    sub_ln18_2_fu_455_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_2_fu_330_p4));
    sub_ln18_3_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_3_reg_935));
    sub_ln18_fu_735_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_689_p4));
    sub_ln357_fu_800_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(trunc_ln357_fu_797_p1));
    sub_ln358_fu_827_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(trunc_ln358_fu_824_p1));
    tmp_11_fu_447_p3 <= add_ln317_fu_441_p2(8 downto 8);
    tmp_13_fu_503_p4 <= shl_ln18_2_fu_487_p2(55 downto 24);
    tmp_14_fu_551_p3 <= add_ln317_1_fu_545_p2(8 downto 8);
    tmp_15_fu_596_p4 <= lshr_ln18_3_fu_584_p2(55 downto 24);
    tmp_16_fu_606_p4 <= shl_ln18_3_fu_590_p2(55 downto 24);
    tmp_17_fu_847_p4 <= lshr_ln18_fu_761_p2(84 downto 53);
    tmp_18_fu_857_p4 <= shl_ln18_fu_767_p2(84 downto 53);
    tmp_9_fu_642_p4 <= bitcast_ln61_fu_639_p1(30 downto 23);
    tmp_fu_727_p3 <= add_ln486_fu_721_p2(11 downto 11);
    tmp_s_fu_493_p4 <= lshr_ln18_2_fu_481_p2(55 downto 24);
    trunc_ln357_fu_797_p1 <= sdiv_ln357_reg_1012(27 - 1 downto 0);
    trunc_ln358_fu_824_p1 <= sdiv_ln358_reg_1017(24 - 1 downto 0);
    trunc_ln505_fu_699_p1 <= data_fu_686_p1(52 - 1 downto 0);
    trunc_ln61_fu_652_p1 <= bitcast_ln61_fu_639_p1(23 - 1 downto 0);
    trunc_ln92_1_fu_381_p1 <= data_3_fu_368_p1(23 - 1 downto 0);
    trunc_ln92_fu_340_p1 <= data_2_fu_327_p1(23 - 1 downto 0);
    val_2_fu_513_p3 <= 
        tmp_s_fu_493_p4 when (tmp_11_fu_447_p3(0) = '1') else 
        tmp_13_fu_503_p4;
    val_3_fu_616_p3 <= 
        tmp_15_fu_596_p4 when (tmp_14_fu_551_p3(0) = '1') else 
        tmp_16_fu_606_p4;
    val_fu_867_p3 <= 
        tmp_17_fu_847_p4 when (tmp_fu_727_p3(0) = '1') else 
        tmp_18_fu_857_p4;
    x_ratio_fu_817_p2 <= std_logic_vector(signed(sext_ln357_fu_813_p1) + signed(ap_const_lv28_1));
    xs_exp_2_fu_330_p4 <= data_2_fu_327_p1(30 downto 23);
    xs_exp_3_fu_371_p4 <= data_3_fu_368_p1(30 downto 23);
    xs_exp_fu_689_p4 <= data_fu_686_p1(62 downto 52);
    y_ratio_fu_840_p2 <= std_logic_vector(unsigned(select_ln358_fu_833_p3) + unsigned(ap_const_lv24_1));
    zext_ln15_2_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_423_p4),79));
    zext_ln15_3_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_529_p4),79));
    zext_ln15_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_703_p4),137));
    zext_ln18_2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_6_fu_473_p1),79));
    zext_ln18_3_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_8_fu_576_p1),79));
    zext_ln18_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_4_fu_753_p1),137));
    zext_ln317_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_3_reg_935),9));
    zext_ln317_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_2_fu_330_p4),9));
    zext_ln486_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_689_p4),12));
end behav;
