-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_processImage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    factor : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
    result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_x_ce0 : OUT STD_LOGIC;
    result_x_we0 : OUT STD_LOGIC;
    result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_y_ce0 : OUT STD_LOGIC;
    result_y_we0 : OUT STD_LOGIC;
    result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_w_ce0 : OUT STD_LOGIC;
    result_w_we0 : OUT STD_LOGIC;
    result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_h_ce0 : OUT STD_LOGIC;
    result_h_we0 : OUT STD_LOGIC;
    result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    winSize_width_val : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_ce : OUT STD_LOGIC;
    grp_fu_294_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_294_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_294_p_ce : OUT STD_LOGIC;
    grp_fu_297_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_297_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_297_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_297_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_297_p_ce : OUT STD_LOGIC;
    grp_fu_308_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_308_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_308_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_308_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_308_p_ce : OUT STD_LOGIC );
end;


architecture behav of face_detect_processImage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal cast_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cast1_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_865 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln132_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln132_1_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_1_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln132_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal y_fu_408_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_reg_899 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln132_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln132_reg_904 : STD_LOGIC_VECTOR (7 downto 0);
    signal notlhs_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal notrhs_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_i15_fu_457_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal data_1_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_reg_929 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal xs_sign_1_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln133_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln133_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal x_fu_487_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_reg_948 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln133_fu_493_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln133_reg_953 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln139_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal val_1_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_fu_622_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln61_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln61_1_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_983 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln61_fu_667_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal dc_reg_993 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal xs_sign_reg_998 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal val_fu_791_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal SUM1_data_ce0 : STD_LOGIC;
    signal SUM1_data_we0 : STD_LOGIC;
    signal SUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal SUM1_data_ce1 : STD_LOGIC;
    signal SUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce2 : STD_LOGIC;
    signal SUM1_data_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce3 : STD_LOGIC;
    signal SUM1_data_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce4 : STD_LOGIC;
    signal SUM1_data_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce5 : STD_LOGIC;
    signal SUM1_data_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce6 : STD_LOGIC;
    signal SUM1_data_q6 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce7 : STD_LOGIC;
    signal SUM1_data_q7 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce8 : STD_LOGIC;
    signal SUM1_data_q8 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce9 : STD_LOGIC;
    signal SUM1_data_q9 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce10 : STD_LOGIC;
    signal SUM1_data_q10 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce11 : STD_LOGIC;
    signal SUM1_data_q11 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal SQSUM1_data_ce0 : STD_LOGIC;
    signal SQSUM1_data_we0 : STD_LOGIC;
    signal SQSUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_ce1 : STD_LOGIC;
    signal SQSUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_idle : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_ready : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_ce0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce1 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cascadeClassifier_fu_269_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_done : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce2 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce3 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address4 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce4 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address5 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce5 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address6 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce6 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address7 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce7 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address8 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce8 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address9 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce9 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce10 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address11 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce11 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_cascadeClassifier_fu_269_grp_fu_342_p_din0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_cascadeClassifier_fu_269_grp_fu_342_p_din1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_cascadeClassifier_fu_269_grp_fu_342_p_ce : STD_LOGIC;
    signal x_2_reg_248 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln141_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_y_fu_150 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal icmp_ln133_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_size_0_fu_154 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln145_fu_819_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln132_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_327_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal value_assign_1_to_int_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_22_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln505_1_fu_516_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_1_fu_519_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_1_fu_507_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_1_fu_533_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_1_fu_537_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_1_fu_551_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_543_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_2_fu_557_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_2_fu_561_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_3_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_1_fu_529_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln18_1_fu_573_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal lshr_ln18_1_fu_577_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal shl_ln18_1_fu_583_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_7_fu_589_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_599_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln61_fu_628_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_632_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_642_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln61_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln505_fu_697_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_701_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_fu_687_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_715_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_719_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_733_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_725_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_739_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_fu_743_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_1_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_711_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln18_fu_755_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal lshr_ln18_fu_759_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal shl_ln18_fu_765_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_fu_771_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_781_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_fu_799_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_ce : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_342_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (63 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce0 : OUT STD_LOGIC;
        SUM1_data_we0 : OUT STD_LOGIC;
        SUM1_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce1 : OUT STD_LOGIC;
        SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce0 : OUT STD_LOGIC;
        SQSUM1_data_we0 : OUT STD_LOGIC;
        SQSUM1_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_cascadeClassifier IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce0 : OUT STD_LOGIC;
        SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce1 : OUT STD_LOGIC;
        SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce2 : OUT STD_LOGIC;
        SUM1_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce3 : OUT STD_LOGIC;
        SUM1_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce4 : OUT STD_LOGIC;
        SUM1_data_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce5 : OUT STD_LOGIC;
        SUM1_data_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce6 : OUT STD_LOGIC;
        SUM1_data_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address7 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce7 : OUT STD_LOGIC;
        SUM1_data_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address8 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce8 : OUT STD_LOGIC;
        SUM1_data_q8 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address9 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce9 : OUT STD_LOGIC;
        SUM1_data_q9 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address10 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce10 : OUT STD_LOGIC;
        SUM1_data_q10 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address11 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce11 : OUT STD_LOGIC;
        SUM1_data_q11 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce0 : OUT STD_LOGIC;
        SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce1 : OUT STD_LOGIC;
        SQSUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pt_x_val : IN STD_LOGIC_VECTOR (16 downto 0);
        pt_y_val : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0);
        grp_fu_342_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
        grp_fu_342_p_din1 : OUT STD_LOGIC_VECTOR (32 downto 0);
        grp_fu_342_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_342_p_ce : OUT STD_LOGIC );
    end component;


    component face_detect_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_mul_32s_32s_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_processImage_SUM1_data_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address5 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address6 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address7 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address8 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address9 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address10 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address11 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_processImage_SQSUM1_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SUM1_data_U : component face_detect_processImage_SUM1_data_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SUM1_data_address0,
        ce0 => SUM1_data_ce0,
        we0 => SUM1_data_we0,
        d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_d0,
        q0 => SUM1_data_q0,
        address1 => SUM1_data_address1,
        ce1 => SUM1_data_ce1,
        q1 => SUM1_data_q1,
        address2 => grp_cascadeClassifier_fu_269_SUM1_data_address2,
        ce2 => SUM1_data_ce2,
        q2 => SUM1_data_q2,
        address3 => grp_cascadeClassifier_fu_269_SUM1_data_address3,
        ce3 => SUM1_data_ce3,
        q3 => SUM1_data_q3,
        address4 => grp_cascadeClassifier_fu_269_SUM1_data_address4,
        ce4 => SUM1_data_ce4,
        q4 => SUM1_data_q4,
        address5 => grp_cascadeClassifier_fu_269_SUM1_data_address5,
        ce5 => SUM1_data_ce5,
        q5 => SUM1_data_q5,
        address6 => grp_cascadeClassifier_fu_269_SUM1_data_address6,
        ce6 => SUM1_data_ce6,
        q6 => SUM1_data_q6,
        address7 => grp_cascadeClassifier_fu_269_SUM1_data_address7,
        ce7 => SUM1_data_ce7,
        q7 => SUM1_data_q7,
        address8 => grp_cascadeClassifier_fu_269_SUM1_data_address8,
        ce8 => SUM1_data_ce8,
        q8 => SUM1_data_q8,
        address9 => grp_cascadeClassifier_fu_269_SUM1_data_address9,
        ce9 => SUM1_data_ce9,
        q9 => SUM1_data_q9,
        address10 => grp_cascadeClassifier_fu_269_SUM1_data_address10,
        ce10 => SUM1_data_ce10,
        q10 => SUM1_data_q10,
        address11 => grp_cascadeClassifier_fu_269_SUM1_data_address11,
        ce11 => SUM1_data_ce11,
        q11 => SUM1_data_q11);

    SQSUM1_data_U : component face_detect_processImage_SQSUM1_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SQSUM1_data_address0,
        ce0 => SQSUM1_data_ce0,
        we0 => SQSUM1_data_we0,
        d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_d0,
        q0 => SQSUM1_data_q0,
        address1 => grp_cascadeClassifier_fu_269_SQSUM1_data_address1,
        ce1 => SQSUM1_data_ce1,
        q1 => SQSUM1_data_q1);

    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259 : component face_detect_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start,
        ap_done => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done,
        ap_idle => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_idle,
        ap_ready => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_ready,
        sum_col => sum_col,
        bound => bound_reg_865,
        IMG1_data_address0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_address0,
        IMG1_data_ce0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_ce0,
        IMG1_data_q0 => IMG1_data_q0,
        SUM1_data_address0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0,
        SUM1_data_ce0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0,
        SUM1_data_we0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0,
        SUM1_data_d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_d0,
        SUM1_data_address1 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address1,
        SUM1_data_ce1 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce1,
        SUM1_data_q1 => SUM1_data_q1,
        SQSUM1_data_address0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0,
        SQSUM1_data_ce0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0,
        SQSUM1_data_we0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0,
        SQSUM1_data_d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_d0,
        SQSUM1_data_q0 => SQSUM1_data_q0);

    grp_cascadeClassifier_fu_269 : component face_detect_cascadeClassifier
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_fu_269_ap_start,
        ap_done => grp_cascadeClassifier_fu_269_ap_done,
        ap_idle => grp_cascadeClassifier_fu_269_ap_idle,
        ap_ready => grp_cascadeClassifier_fu_269_ap_ready,
        SUM1_data_address0 => grp_cascadeClassifier_fu_269_SUM1_data_address0,
        SUM1_data_ce0 => grp_cascadeClassifier_fu_269_SUM1_data_ce0,
        SUM1_data_q0 => SUM1_data_q0,
        SUM1_data_address1 => grp_cascadeClassifier_fu_269_SUM1_data_address1,
        SUM1_data_ce1 => grp_cascadeClassifier_fu_269_SUM1_data_ce1,
        SUM1_data_q1 => SUM1_data_q1,
        SUM1_data_address2 => grp_cascadeClassifier_fu_269_SUM1_data_address2,
        SUM1_data_ce2 => grp_cascadeClassifier_fu_269_SUM1_data_ce2,
        SUM1_data_q2 => SUM1_data_q2,
        SUM1_data_address3 => grp_cascadeClassifier_fu_269_SUM1_data_address3,
        SUM1_data_ce3 => grp_cascadeClassifier_fu_269_SUM1_data_ce3,
        SUM1_data_q3 => SUM1_data_q3,
        SUM1_data_address4 => grp_cascadeClassifier_fu_269_SUM1_data_address4,
        SUM1_data_ce4 => grp_cascadeClassifier_fu_269_SUM1_data_ce4,
        SUM1_data_q4 => SUM1_data_q4,
        SUM1_data_address5 => grp_cascadeClassifier_fu_269_SUM1_data_address5,
        SUM1_data_ce5 => grp_cascadeClassifier_fu_269_SUM1_data_ce5,
        SUM1_data_q5 => SUM1_data_q5,
        SUM1_data_address6 => grp_cascadeClassifier_fu_269_SUM1_data_address6,
        SUM1_data_ce6 => grp_cascadeClassifier_fu_269_SUM1_data_ce6,
        SUM1_data_q6 => SUM1_data_q6,
        SUM1_data_address7 => grp_cascadeClassifier_fu_269_SUM1_data_address7,
        SUM1_data_ce7 => grp_cascadeClassifier_fu_269_SUM1_data_ce7,
        SUM1_data_q7 => SUM1_data_q7,
        SUM1_data_address8 => grp_cascadeClassifier_fu_269_SUM1_data_address8,
        SUM1_data_ce8 => grp_cascadeClassifier_fu_269_SUM1_data_ce8,
        SUM1_data_q8 => SUM1_data_q8,
        SUM1_data_address9 => grp_cascadeClassifier_fu_269_SUM1_data_address9,
        SUM1_data_ce9 => grp_cascadeClassifier_fu_269_SUM1_data_ce9,
        SUM1_data_q9 => SUM1_data_q9,
        SUM1_data_address10 => grp_cascadeClassifier_fu_269_SUM1_data_address10,
        SUM1_data_ce10 => grp_cascadeClassifier_fu_269_SUM1_data_ce10,
        SUM1_data_q10 => SUM1_data_q10,
        SUM1_data_address11 => grp_cascadeClassifier_fu_269_SUM1_data_address11,
        SUM1_data_ce11 => grp_cascadeClassifier_fu_269_SUM1_data_ce11,
        SUM1_data_q11 => SUM1_data_q11,
        SQSUM1_data_address0 => grp_cascadeClassifier_fu_269_SQSUM1_data_address0,
        SQSUM1_data_ce0 => grp_cascadeClassifier_fu_269_SQSUM1_data_ce0,
        SQSUM1_data_q0 => SQSUM1_data_q0,
        SQSUM1_data_address1 => grp_cascadeClassifier_fu_269_SQSUM1_data_address1,
        SQSUM1_data_ce1 => grp_cascadeClassifier_fu_269_SQSUM1_data_ce1,
        SQSUM1_data_q1 => SQSUM1_data_q1,
        pt_x_val => trunc_ln133_reg_953,
        pt_y_val => trunc_ln132_reg_904,
        ap_return => grp_cascadeClassifier_fu_269_ap_return,
        grp_fu_342_p_din0 => grp_cascadeClassifier_fu_269_grp_fu_342_p_din0,
        grp_fu_342_p_din1 => grp_cascadeClassifier_fu_269_grp_fu_342_p_din1,
        grp_fu_342_p_dout0 => grp_fu_342_p2,
        grp_fu_342_p_ce => grp_cascadeClassifier_fu_269_grp_fu_342_p_ce);

    sitofp_32ns_32_4_no_dsp_1_U66 : component face_detect_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_327_p0,
        ce => grp_fu_327_ce,
        dout => grp_fu_327_p1);

    mul_32s_32s_64_2_1_U70 : component face_detect_mul_32s_32s_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 33,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_342_p0,
        din1 => grp_fu_342_p1,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cascadeClassifier_fu_269_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_fu_269_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_cascadeClassifier_fu_269_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_fu_269_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_fu_269_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_y_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_y_fu_150 <= ap_const_lv31_0;
            elsif (((icmp_ln133_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                p_y_fu_150 <= y_reg_899;
            end if; 
        end if;
    end process;

    result_size_0_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                result_size_0_fu_154 <= p_read;
            elsif (((icmp_ln139_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                result_size_0_fu_154 <= add_ln145_fu_819_p2;
            end if; 
        end if;
    end process;

    x_2_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                x_2_reg_248 <= x_reg_948;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                x_2_reg_248 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln132_1_reg_886 <= add_ln132_1_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln132_reg_870 <= add_ln132_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_865 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                data_1_reg_929 <= data_1_fu_466_p1;
                xs_sign_1_reg_935 <= data_1_fu_466_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                dc_reg_993 <= grp_fu_308_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                icmp_ln139_reg_958 <= icmp_ln139_fu_501_p2;
                val_1_reg_962 <= val_1_fu_609_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                icmp_ln61_1_reg_978 <= icmp_ln61_1_fu_652_p2;
                icmp_ln61_reg_973 <= icmp_ln61_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                notlhs_reg_909 <= notlhs_fu_436_p2;
                notrhs_reg_914 <= notrhs_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_349 <= grp_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_354 <= grp_fu_278_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_360 <= grp_fu_294_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                result_8_reg_968 <= result_8_fu_622_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_2_reg_919 <= grp_fu_297_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_4_reg_983 <= grp_fu_297_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln132_reg_904 <= trunc_ln132_fu_414_p1;
                y_reg_899 <= y_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                trunc_ln133_reg_953 <= trunc_ln133_fu_493_p1;
                x_reg_948 <= x_fu_487_p2;
                    zext_ln133_reg_940(30 downto 0) <= zext_ln133_fu_478_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                val_reg_1003 <= val_fu_791_p3;
                xs_sign_reg_998 <= data_fu_676_p1(63 downto 63);
            end if;
        end if;
    end process;
    zext_ln133_reg_940(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state20, icmp_ln139_fu_501_p2, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done, grp_cascadeClassifier_fu_269_ap_done, icmp_ln133_fu_482_p2, icmp_ln132_fu_403_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln132_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln133_fu_482_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((grp_cascadeClassifier_fu_269_ap_done = ap_const_logic_1) and (icmp_ln139_fu_501_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                elsif (((grp_cascadeClassifier_fu_269_ap_done = ap_const_logic_1) and (icmp_ln139_fu_501_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IMG1_data_address0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_address0;
    IMG1_data_ce0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_ce0;

    SQSUM1_data_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0, grp_cascadeClassifier_fu_269_SQSUM1_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SQSUM1_data_address0 <= grp_cascadeClassifier_fu_269_SQSUM1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SQSUM1_data_address0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0;
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0, grp_cascadeClassifier_fu_269_SQSUM1_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SQSUM1_data_ce0 <= grp_cascadeClassifier_fu_269_SQSUM1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SQSUM1_data_ce0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_ce1_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SQSUM1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SQSUM1_data_ce1 <= grp_cascadeClassifier_fu_269_SQSUM1_data_ce1;
        else 
            SQSUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_we0_assign_proc : process(ap_CS_fsm_state4, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SQSUM1_data_we0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0;
        else 
            SQSUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0, grp_cascadeClassifier_fu_269_SUM1_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_address0 <= grp_cascadeClassifier_fu_269_SUM1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_address0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0;
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address1, grp_cascadeClassifier_fu_269_SUM1_data_address1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_address1 <= grp_cascadeClassifier_fu_269_SUM1_data_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_address1 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address1;
        else 
            SUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0, grp_cascadeClassifier_fu_269_SUM1_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce0 <= grp_cascadeClassifier_fu_269_SUM1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_ce0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state22, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce1, grp_cascadeClassifier_fu_269_SUM1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce1 <= grp_cascadeClassifier_fu_269_SUM1_data_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_ce1 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce10_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce10 <= grp_cascadeClassifier_fu_269_SUM1_data_ce10;
        else 
            SUM1_data_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce11_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce11 <= grp_cascadeClassifier_fu_269_SUM1_data_ce11;
        else 
            SUM1_data_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce2_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce2 <= grp_cascadeClassifier_fu_269_SUM1_data_ce2;
        else 
            SUM1_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce3_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce3 <= grp_cascadeClassifier_fu_269_SUM1_data_ce3;
        else 
            SUM1_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce4_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce4 <= grp_cascadeClassifier_fu_269_SUM1_data_ce4;
        else 
            SUM1_data_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce5_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce5 <= grp_cascadeClassifier_fu_269_SUM1_data_ce5;
        else 
            SUM1_data_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce6_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce6 <= grp_cascadeClassifier_fu_269_SUM1_data_ce6;
        else 
            SUM1_data_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce7_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce7 <= grp_cascadeClassifier_fu_269_SUM1_data_ce7;
        else 
            SUM1_data_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce8_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce8 <= grp_cascadeClassifier_fu_269_SUM1_data_ce8;
        else 
            SUM1_data_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce9_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_SUM1_data_ce9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SUM1_data_ce9 <= grp_cascadeClassifier_fu_269_SUM1_data_ce9;
        else 
            SUM1_data_ce9 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_we0_assign_proc : process(ap_CS_fsm_state4, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_we0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0;
        else 
            SUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln132_1_fu_390_p2 <= std_logic_vector(unsigned(sum_row) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln132_fu_385_p2 <= std_logic_vector(unsigned(sum_col) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln145_fu_819_p2 <= std_logic_vector(unsigned(result_size_0_fu_154) + unsigned(ap_const_lv32_1));
    add_ln486_1_fu_537_p2 <= std_logic_vector(unsigned(zext_ln486_1_fu_533_p1) + unsigned(ap_const_lv12_C01));
    add_ln486_fu_719_p2 <= std_logic_vector(unsigned(zext_ln486_fu_715_p1) + unsigned(ap_const_lv12_C01));
    and_ln61_fu_662_p2 <= (tmp_4_reg_983 and or_ln61_fu_658_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_cascadeClassifier_fu_269_ap_done)
    begin
        if ((grp_cascadeClassifier_fu_269_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done)
    begin
        if ((grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln132_fu_403_p2)
    begin
        if ((((icmp_ln132_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, icmp_ln132_fu_403_p2)
    begin
        if (((icmp_ln132_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= result_size_0_fu_154;
    bitcast_ln61_fu_628_p1 <= reg_354;
    cast1_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_col),64));
    cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_row),64));
    cond_i15_fu_457_p3 <= 
        ap_const_lv64_3FE0000000000000 when (empty_23_fu_452_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    data_1_fu_466_p1 <= grp_fu_308_p_dout0;
    data_fu_676_p1 <= dc_reg_993;
    empty_22_fu_448_p2 <= (notrhs_reg_914 or notlhs_reg_909);
    empty_23_fu_452_p2 <= (tmp_2_reg_919 and empty_22_fu_448_p2);
    empty_fu_432_p1 <= value_assign_1_to_int_fu_418_p1(23 - 1 downto 0);
    grp_cascadeClassifier_fu_269_ap_start <= grp_cascadeClassifier_fu_269_ap_start_reg;
    grp_fu_278_p_ce <= ap_const_logic_1;
    grp_fu_278_p_din0 <= reg_349;
    grp_fu_278_p_din1 <= factor;
    grp_fu_294_p_ce <= ap_const_logic_1;
    grp_fu_294_p_din0 <= reg_354;
    grp_fu_297_p_ce <= ap_const_logic_1;
    grp_fu_297_p_din0 <= reg_354;
    grp_fu_297_p_din1 <= ap_const_lv32_0;
    grp_fu_297_p_opcode <= ap_const_lv5_3;
    grp_fu_308_p_ce <= ap_const_logic_1;
    grp_fu_308_p_din0 <= reg_360;
    grp_fu_308_p_din1 <= grp_fu_338_p1;
    grp_fu_308_p_opcode <= ap_const_lv2_0;

    grp_fu_327_ce_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state25, ap_CS_fsm_state5, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_cascadeClassifier_fu_269_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((grp_cascadeClassifier_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            grp_fu_327_ce <= ap_const_logic_1;
        else 
            grp_fu_327_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_327_p0_assign_proc : process(zext_ln132_fu_398_p1, ap_CS_fsm_state5, zext_ln133_reg_940, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_327_p0 <= zext_ln133_reg_940;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_327_p0 <= zext_ln132_fu_398_p1;
        else 
            grp_fu_327_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(cond_i15_fu_457_p3, ap_CS_fsm_state15, select_ln61_fu_667_p3, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_338_p1 <= select_ln61_fu_667_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_338_p1 <= cond_i15_fu_457_p3;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_ce_assign_proc : process(ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_grp_fu_342_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_342_ce <= grp_cascadeClassifier_fu_269_grp_fu_342_p_ce;
        else 
            grp_fu_342_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_342_p0_assign_proc : process(ap_CS_fsm_state1, cast_fu_365_p1, ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_grp_fu_342_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_342_p0 <= grp_cascadeClassifier_fu_269_grp_fu_342_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_342_p0 <= cast_fu_365_p1(33 - 1 downto 0);
        else 
            grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(ap_CS_fsm_state1, cast1_fu_370_p1, ap_CS_fsm_state22, grp_cascadeClassifier_fu_269_grp_fu_342_p_din1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_342_p1 <= grp_cascadeClassifier_fu_269_grp_fu_342_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_342_p1 <= cast1_fu_370_p1(33 - 1 downto 0);
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg;
    icmp_ln132_fu_403_p2 <= "1" when (signed(zext_ln132_fu_398_p1) < signed(add_ln132_1_reg_886)) else "0";
    icmp_ln133_fu_482_p2 <= "1" when (signed(zext_ln133_fu_478_p1) < signed(add_ln132_reg_870)) else "0";
    icmp_ln139_fu_501_p2 <= "1" when (signed(grp_cascadeClassifier_fu_269_ap_return) > signed(ap_const_lv6_0)) else "0";
    icmp_ln61_1_fu_652_p2 <= "1" when (trunc_ln61_fu_642_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_646_p2 <= "0" when (tmp_3_fu_632_p4 = ap_const_lv8_FF) else "1";
    lshr_ln18_1_fu_577_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_1_fu_529_p1),to_integer(unsigned('0' & zext_ln18_1_fu_573_p1(31-1 downto 0)))));
    lshr_ln18_fu_759_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_711_p1),to_integer(unsigned('0' & zext_ln18_fu_755_p1(31-1 downto 0)))));
    mantissa_1_fu_519_p4 <= ((ap_const_lv1_1 & trunc_ln505_1_fu_516_p1) & ap_const_lv1_0);
    mantissa_fu_701_p4 <= ((ap_const_lv1_1 & trunc_ln505_fu_697_p1) & ap_const_lv1_0);
    notlhs_fu_436_p2 <= "0" when (tmp_1_fu_422_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_442_p2 <= "1" when (empty_fu_432_p1 = ap_const_lv23_0) else "0";
    or_ln61_fu_658_p2 <= (icmp_ln61_reg_973 or icmp_ln61_1_reg_978);
    result_2_fu_799_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1003));
    result_5_fu_617_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_reg_962));
    result_8_fu_622_p3 <= 
        result_5_fu_617_p2 when (xs_sign_1_reg_935(0) = '1') else 
        val_1_reg_962;
    result_h_address0 <= zext_ln141_fu_811_p1(7 - 1 downto 0);

    result_h_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            result_h_ce0 <= ap_const_logic_1;
        else 
            result_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_h_d0 <= winSize_width_val;

    result_h_we0_assign_proc : process(icmp_ln139_reg_958, ap_CS_fsm_state38)
    begin
        if (((icmp_ln139_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            result_h_we0 <= ap_const_logic_1;
        else 
            result_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_w_address0 <= zext_ln141_fu_811_p1(7 - 1 downto 0);

    result_w_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            result_w_ce0 <= ap_const_logic_1;
        else 
            result_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_w_d0 <= winSize_width_val;

    result_w_we0_assign_proc : process(icmp_ln139_reg_958, ap_CS_fsm_state38)
    begin
        if (((icmp_ln139_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            result_w_we0 <= ap_const_logic_1;
        else 
            result_w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_x_address0 <= zext_ln141_fu_811_p1(7 - 1 downto 0);

    result_x_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            result_x_ce0 <= ap_const_logic_1;
        else 
            result_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_x_d0 <= 
        result_2_fu_799_p2 when (xs_sign_reg_998(0) = '1') else 
        val_reg_1003;

    result_x_we0_assign_proc : process(icmp_ln139_reg_958, ap_CS_fsm_state38)
    begin
        if (((icmp_ln139_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            result_x_we0 <= ap_const_logic_1;
        else 
            result_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_y_address0 <= zext_ln141_fu_811_p1(7 - 1 downto 0);

    result_y_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            result_y_ce0 <= ap_const_logic_1;
        else 
            result_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_y_d0 <= result_8_reg_968;

    result_y_we0_assign_proc : process(icmp_ln139_reg_958, ap_CS_fsm_state38)
    begin
        if (((icmp_ln139_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            result_y_we0 <= ap_const_logic_1;
        else 
            result_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_2_fu_561_p3 <= 
        sext_ln18_2_fu_557_p1 when (tmp_fu_543_p3(0) = '1') else 
        add_ln486_1_fu_537_p2;
    select_ln18_fu_743_p3 <= 
        sext_ln18_fu_739_p1 when (tmp_6_fu_725_p3(0) = '1') else 
        add_ln486_fu_719_p2;
    select_ln61_fu_667_p3 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln61_fu_662_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
        sext_ln18_1_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_743_p3),32));

        sext_ln18_2_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_1_fu_551_p2),12));

        sext_ln18_3_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_2_fu_561_p3),32));

        sext_ln18_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_733_p2),12));

    shl_ln18_1_fu_583_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_1_fu_529_p1),to_integer(unsigned('0' & zext_ln18_1_fu_573_p1(31-1 downto 0)))));
    shl_ln18_fu_765_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_711_p1),to_integer(unsigned('0' & zext_ln18_fu_755_p1(31-1 downto 0)))));
    sub_ln18_1_fu_551_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_1_fu_507_p4));
    sub_ln18_fu_733_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_687_p4));
    tmp_1_fu_422_p4 <= value_assign_1_to_int_fu_418_p1(30 downto 23);
    tmp_3_fu_632_p4 <= bitcast_ln61_fu_628_p1(30 downto 23);
    tmp_5_fu_781_p4 <= shl_ln18_fu_765_p2(84 downto 53);
    tmp_6_fu_725_p3 <= add_ln486_fu_719_p2(11 downto 11);
    tmp_7_fu_589_p4 <= lshr_ln18_1_fu_577_p2(84 downto 53);
    tmp_8_fu_599_p4 <= shl_ln18_1_fu_583_p2(84 downto 53);
    tmp_fu_543_p3 <= add_ln486_1_fu_537_p2(11 downto 11);
    tmp_s_fu_771_p4 <= lshr_ln18_fu_759_p2(84 downto 53);
    trunc_ln132_fu_414_p1 <= p_y_fu_150(8 - 1 downto 0);
    trunc_ln133_fu_493_p1 <= x_2_reg_248(17 - 1 downto 0);
    trunc_ln505_1_fu_516_p1 <= data_1_reg_929(52 - 1 downto 0);
    trunc_ln505_fu_697_p1 <= data_fu_676_p1(52 - 1 downto 0);
    trunc_ln61_fu_642_p1 <= bitcast_ln61_fu_628_p1(23 - 1 downto 0);
    val_1_fu_609_p3 <= 
        tmp_7_fu_589_p4 when (tmp_fu_543_p3(0) = '1') else 
        tmp_8_fu_599_p4;
    val_fu_791_p3 <= 
        tmp_s_fu_771_p4 when (tmp_6_fu_725_p3(0) = '1') else 
        tmp_5_fu_781_p4;
    value_assign_1_to_int_fu_418_p1 <= reg_354;
    x_fu_487_p2 <= std_logic_vector(unsigned(x_2_reg_248) + unsigned(ap_const_lv31_1));
    xs_exp_1_fu_507_p4 <= data_1_reg_929(62 downto 52);
    xs_exp_fu_687_p4 <= data_fu_676_p1(62 downto 52);
    y_fu_408_p2 <= std_logic_vector(unsigned(p_y_fu_150) + unsigned(ap_const_lv31_1));
    zext_ln132_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_y_fu_150),32));
    zext_ln133_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2_reg_248),32));
    zext_ln141_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_size_0_fu_154),64));
    zext_ln15_1_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_519_p4),137));
    zext_ln15_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_701_p4),137));
    zext_ln18_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_3_fu_569_p1),137));
    zext_ln18_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_751_p1),137));
    zext_ln486_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_1_fu_507_p4),12));
    zext_ln486_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_687_p4),12));
end behav;
