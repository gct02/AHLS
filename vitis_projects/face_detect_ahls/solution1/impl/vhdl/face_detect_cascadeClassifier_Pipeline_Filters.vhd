-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_cascadeClassifier_Pipeline_Filters is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln200 : IN STD_LOGIC_VECTOR (31 downto 0);
    stage_sum : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln200 : IN STD_LOGIC_VECTOR (7 downto 0);
    stddev_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pt_y_val : IN STD_LOGIC_VECTOR (7 downto 0);
    pt_x_val : IN STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce0 : OUT STD_LOGIC;
    SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce1 : OUT STD_LOGIC;
    SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address2 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce2 : OUT STD_LOGIC;
    SUM1_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address3 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce3 : OUT STD_LOGIC;
    SUM1_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address4 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce4 : OUT STD_LOGIC;
    SUM1_data_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address5 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce5 : OUT STD_LOGIC;
    SUM1_data_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address6 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce6 : OUT STD_LOGIC;
    SUM1_data_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address7 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce7 : OUT STD_LOGIC;
    SUM1_data_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address8 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce8 : OUT STD_LOGIC;
    SUM1_data_q8 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address9 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce9 : OUT STD_LOGIC;
    SUM1_data_q9 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address10 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce10 : OUT STD_LOGIC;
    SUM1_data_q10 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address11 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce11 : OUT STD_LOGIC;
    SUM1_data_q11 : IN STD_LOGIC_VECTOR (31 downto 0);
    stage_sum_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    stage_sum_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of face_detect_cascadeClassifier_Pipeline_Filters is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln200_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tree_thresh_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tree_thresh_array_ce0 : STD_LOGIC;
    signal tree_thresh_array_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array0_ce0 : STD_LOGIC;
    signal weights_array0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array1_ce0 : STD_LOGIC;
    signal weights_array1_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal coord_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coord_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coord_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal weights_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array2_ce0 : STD_LOGIC;
    signal weights_array2_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha1_array_ce0 : STD_LOGIC;
    signal alpha1_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha2_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha2_array_ce0 : STD_LOGIC;
    signal alpha2_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal rectangles_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array0_ce0 : STD_LOGIC;
    signal rectangles_array0_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array2_ce0 : STD_LOGIC;
    signal rectangles_array2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array1_ce0 : STD_LOGIC;
    signal rectangles_array1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array3_ce0 : STD_LOGIC;
    signal rectangles_array3_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array4_ce0 : STD_LOGIC;
    signal rectangles_array4_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array6_ce0 : STD_LOGIC;
    signal rectangles_array6_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array5_ce0 : STD_LOGIC;
    signal rectangles_array5_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array7_ce0 : STD_LOGIC;
    signal rectangles_array7_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array8_ce0 : STD_LOGIC;
    signal rectangles_array8_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array10_ce0 : STD_LOGIC;
    signal rectangles_array10_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rectangles_array9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array9_ce0 : STD_LOGIC;
    signal rectangles_array9_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array11_ce0 : STD_LOGIC;
    signal rectangles_array11_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln200_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1366_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1366_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1366_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1366_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1366_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1366_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln248_fu_620_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1430 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1430_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1430_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal tr0_fu_639_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr0_reg_1435 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr0_1_reg_1442 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr0_2_fu_648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr0_2_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr1_fu_661_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr1_reg_1453 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr1_1_reg_1460 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr1_2_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr1_2_reg_1465 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr2_1_reg_1471 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln225_fu_691_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_reg_1476 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln230_fu_697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln230_reg_1482 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln233_1_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_1_reg_1488 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_1_reg_1488_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln235_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln235_reg_1492 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln235_1_fu_796_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_1_reg_1498 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_fu_801_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln237_reg_1505 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln282_fu_1194_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_reg_1596_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_1_fu_1200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_1_reg_1601 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_1_reg_1601_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tree_thresh_array_load_reg_1616 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array0_load_reg_1621 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_load_reg_1626 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln281_1_fu_1230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln281_1_reg_1631 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_array2_load_reg_1636 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_reg_1641 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_reg_1641_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_reg_1641_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_reg_1641_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_1_reg_1646 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_1_reg_1646_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_1_reg_1646_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_1_reg_1646_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_1671 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_reg_1676 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln282_reg_1681 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln282_1_reg_1686 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln201_fu_1261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln201_reg_1691 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_1696 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter8_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln200_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln223_2_fu_849_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln228_2_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_968_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln230_2_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_fu_1017_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_2_fu_1055_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_fu_1071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln237_2_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln238_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage_sum_1_fu_112 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal stage_sum_3_fu_1305_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_116 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal j_2_fu_1255_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal haar_counter_fu_120 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal add_ln251_fu_624_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln200_cast_fu_573_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln200_fu_595_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln208_fu_635_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln210_fu_644_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln213_fu_657_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_fu_666_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln193_1_fu_653_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln193_3_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_fu_703_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_713_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln233_fu_707_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln233_1_fu_729_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_739_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln233_1_fu_733_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_747_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_721_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln233_2_fu_755_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln233_2_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_1_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln193_6_fu_683_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln193_4_fu_679_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_7_fu_687_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_827_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln223_fu_823_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln223_1_fu_834_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln223_fu_838_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln223_1_fu_844_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_fu_807_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln224_fu_854_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln224_1_fu_859_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_870_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_881_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln225_fu_877_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_1_fu_888_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_1_fu_892_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_2_fu_898_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln226_fu_908_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_919_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_930_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln228_fu_926_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln228_1_fu_937_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln228_fu_941_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln228_1_fu_947_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_2_fu_810_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_fu_957_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_1_fu_962_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_973_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_984_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln230_fu_980_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln230_1_fu_991_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_1_fu_995_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_2_fu_1001_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln231_fu_1011_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_fu_1022_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1033_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln235_fu_1029_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln235_1_fu_1040_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_2_fu_1044_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_3_fu_1050_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_5_fu_813_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln236_fu_1060_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln236_1_fu_1065_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_1076_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_1087_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_fu_1083_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln237_1_fu_1094_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_1_fu_1098_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_2_fu_1104_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln238_fu_1114_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln279_fu_1170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln280_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln279_1_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln280_1_fu_1188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln281_fu_1218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln281_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_2_fu_1267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_sum_fu_1271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal return_value_3_fu_1296_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal stage_sum_2_fu_1289_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln250_fu_1301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_565_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_1051 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_mul_13s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_mul_14ns_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_tree_thresh_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_weights_array0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_weights_array1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_weights_array2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_alpha1_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_alpha2_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array7_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array8_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array9_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array11_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component face_detect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    tree_thresh_array_U : component face_detect_cascadeClassifier_Pipeline_Filters_tree_thresh_array_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tree_thresh_array_address0,
        ce0 => tree_thresh_array_ce0,
        q0 => tree_thresh_array_q0);

    weights_array0_U : component face_detect_cascadeClassifier_Pipeline_Filters_weights_array0_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array0_address0,
        ce0 => weights_array0_ce0,
        q0 => weights_array0_q0);

    weights_array1_U : component face_detect_cascadeClassifier_Pipeline_Filters_weights_array1_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array1_address0,
        ce0 => weights_array1_ce0,
        q0 => weights_array1_q0);

    weights_array2_U : component face_detect_cascadeClassifier_Pipeline_Filters_weights_array2_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array2_address0,
        ce0 => weights_array2_ce0,
        q0 => weights_array2_q0);

    alpha1_array_U : component face_detect_cascadeClassifier_Pipeline_Filters_alpha1_array_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha1_array_address0,
        ce0 => alpha1_array_ce0,
        q0 => alpha1_array_q0);

    alpha2_array_U : component face_detect_cascadeClassifier_Pipeline_Filters_alpha2_array_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha2_array_address0,
        ce0 => alpha2_array_ce0,
        q0 => alpha2_array_q0);

    rectangles_array0_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array0_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array0_address0,
        ce0 => rectangles_array0_ce0,
        q0 => rectangles_array0_q0);

    rectangles_array2_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array2_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array2_address0,
        ce0 => rectangles_array2_ce0,
        q0 => rectangles_array2_q0);

    rectangles_array1_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array1_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array1_address0,
        ce0 => rectangles_array1_ce0,
        q0 => rectangles_array1_q0);

    rectangles_array3_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array3_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array3_address0,
        ce0 => rectangles_array3_ce0,
        q0 => rectangles_array3_q0);

    rectangles_array4_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array4_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array4_address0,
        ce0 => rectangles_array4_ce0,
        q0 => rectangles_array4_q0);

    rectangles_array6_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array6_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array6_address0,
        ce0 => rectangles_array6_ce0,
        q0 => rectangles_array6_q0);

    rectangles_array5_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array5_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array5_address0,
        ce0 => rectangles_array5_ce0,
        q0 => rectangles_array5_q0);

    rectangles_array7_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array7_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array7_address0,
        ce0 => rectangles_array7_ce0,
        q0 => rectangles_array7_q0);

    rectangles_array8_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array8_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array8_address0,
        ce0 => rectangles_array8_ce0,
        q0 => rectangles_array8_q0);

    rectangles_array10_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array10_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array10_address0,
        ce0 => rectangles_array10_ce0,
        q0 => rectangles_array10_q0);

    rectangles_array9_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array9_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array9_address0,
        ce0 => rectangles_array9_ce0,
        q0 => rectangles_array9_q0);

    rectangles_array11_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array11_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array11_address0,
        ce0 => rectangles_array11_ce0,
        q0 => rectangles_array11_q0);

    mul_13s_32s_32_2_1_U20 : component face_detect_mul_13s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tree_thresh_array_load_reg_1616,
        din1 => stddev_0,
        ce => ap_const_logic_1,
        dout => grp_fu_557_p2);

    mul_13s_32s_32_2_1_U21 : component face_detect_mul_13s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_array0_load_reg_1621,
        din1 => add_ln282_reg_1596_pp0_iter5_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_561_p2);

    mul_14ns_32s_32_2_1_U22 : component face_detect_mul_14ns_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => sub_ln281_1_reg_1631,
        ce => ap_const_logic_1,
        dout => grp_fu_565_p2);

    mul_14ns_32s_32_2_1_U23 : component face_detect_mul_14ns_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 14,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_569_p0,
        din1 => add_ln282_1_reg_1601_pp0_iter5_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    flow_control_loop_pipe_sequential_init_U : component face_detect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter8_stage0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_storemerge_reg_546_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                if (((ap_const_lv1_1 = and_ln233_1_reg_1488_pp0_iter3_reg) and (icmp_ln200_reg_1366_pp0_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_546 <= SUM1_data_q0;
                elsif (((ap_const_lv1_0 = and_ln233_1_reg_1488_pp0_iter3_reg) and (icmp_ln200_reg_1366_pp0_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_546 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_546 <= ap_phi_reg_pp0_iter4_storemerge_reg_546;
                end if;
            end if; 
        end if;
    end process;

    coord_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1051)) then
                if ((ap_const_lv1_1 = and_ln233_1_reg_1488_pp0_iter3_reg)) then 
                    coord_10 <= SUM1_data_q1;
                elsif ((ap_const_lv1_0 = and_ln233_1_reg_1488_pp0_iter3_reg)) then 
                    coord_10 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    coord_8_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1051)) then
                if ((ap_const_lv1_1 = and_ln233_1_reg_1488_pp0_iter3_reg)) then 
                    coord_8 <= SUM1_data_q3;
                elsif ((ap_const_lv1_0 = and_ln233_1_reg_1488_pp0_iter3_reg)) then 
                    coord_8 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    coord_9_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1051)) then
                if ((ap_const_lv1_1 = and_ln233_1_reg_1488_pp0_iter3_reg)) then 
                    coord_9 <= SUM1_data_q2;
                elsif ((ap_const_lv1_0 = and_ln233_1_reg_1488_pp0_iter3_reg)) then 
                    coord_9 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    haar_counter_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    haar_counter_fu_120 <= sext_ln200_cast_fu_573_p1;
                elsif (((icmp_ln200_fu_599_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    haar_counter_fu_120 <= add_ln251_fu_624_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    j_fu_116 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln200_reg_1366_pp0_iter7_reg = ap_const_lv1_0))) then 
                    j_fu_116 <= j_2_fu_1255_p2;
                end if;
            end if; 
        end if;
    end process;

    stage_sum_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    stage_sum_1_fu_112 <= stage_sum;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    stage_sum_1_fu_112 <= stage_sum_3_fu_1305_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln225_reg_1476 <= add_ln225_fu_691_p2;
                add_ln230_reg_1482 <= add_ln230_fu_697_p2;
                add_ln235_1_reg_1498 <= add_ln235_1_fu_796_p2;
                add_ln235_reg_1492 <= add_ln235_fu_791_p2;
                add_ln237_reg_1505 <= add_ln237_fu_801_p2;
                add_ln282_1_reg_1601 <= add_ln282_1_fu_1200_p2;
                add_ln282_1_reg_1601_pp0_iter5_reg <= add_ln282_1_reg_1601;
                add_ln282_reg_1596 <= add_ln282_fu_1194_p2;
                add_ln282_reg_1596_pp0_iter5_reg <= add_ln282_reg_1596;
                and_ln233_1_reg_1488 <= and_ln233_1_fu_785_p2;
                and_ln233_1_reg_1488_pp0_iter3_reg <= and_ln233_1_reg_1488;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln200_reg_1366_pp0_iter2_reg <= icmp_ln200_reg_1366;
                icmp_ln200_reg_1366_pp0_iter3_reg <= icmp_ln200_reg_1366_pp0_iter2_reg;
                icmp_ln200_reg_1366_pp0_iter4_reg <= icmp_ln200_reg_1366_pp0_iter3_reg;
                icmp_ln200_reg_1366_pp0_iter5_reg <= icmp_ln200_reg_1366_pp0_iter4_reg;
                icmp_ln200_reg_1366_pp0_iter6_reg <= icmp_ln200_reg_1366_pp0_iter5_reg;
                icmp_ln200_reg_1366_pp0_iter7_reg <= icmp_ln200_reg_1366_pp0_iter6_reg;
                icmp_ln201_reg_1691 <= icmp_ln201_fu_1261_p2;
                icmp_ln284_reg_1696 <= icmp_ln284_fu_1276_p2;
                mul_ln282_1_reg_1686 <= grp_fu_569_p2;
                mul_ln282_reg_1681 <= grp_fu_561_p2;
                return_value_1_reg_1646 <= alpha2_array_q0;
                return_value_1_reg_1646_pp0_iter6_reg <= return_value_1_reg_1646;
                return_value_1_reg_1646_pp0_iter7_reg <= return_value_1_reg_1646_pp0_iter6_reg;
                return_value_1_reg_1646_pp0_iter8_reg <= return_value_1_reg_1646_pp0_iter7_reg;
                return_value_reg_1641 <= alpha1_array_q0;
                return_value_reg_1641_pp0_iter6_reg <= return_value_reg_1641;
                return_value_reg_1641_pp0_iter7_reg <= return_value_reg_1641_pp0_iter6_reg;
                return_value_reg_1641_pp0_iter8_reg <= return_value_reg_1641_pp0_iter7_reg;
                sub_ln281_1_reg_1631 <= sub_ln281_1_fu_1230_p2;
                sum2_reg_1676 <= grp_fu_565_p2;
                t_reg_1671 <= grp_fu_557_p2;
                tr0_1_reg_1442 <= rectangles_array2_q0;
                tr0_2_reg_1447 <= tr0_2_fu_648_p2;
                tr0_reg_1435 <= tr0_fu_639_p2;
                tr1_1_reg_1460 <= rectangles_array6_q0;
                tr1_2_reg_1465 <= tr1_2_fu_670_p2;
                tr1_reg_1453 <= tr1_fu_661_p2;
                tr2_1_reg_1471 <= rectangles_array10_q0;
                tree_thresh_array_load_reg_1616 <= tree_thresh_array_q0;
                trunc_ln248_reg_1430_pp0_iter2_reg <= trunc_ln248_reg_1430;
                trunc_ln248_reg_1430_pp0_iter3_reg <= trunc_ln248_reg_1430_pp0_iter2_reg;
                weights_array0_load_reg_1621 <= weights_array0_q0;
                weights_array1_load_reg_1626 <= weights_array1_q0;
                weights_array2_load_reg_1636 <= weights_array2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln200_reg_1366 <= icmp_ln200_fu_599_p2;
                trunc_ln248_reg_1430 <= trunc_ln248_fu_620_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_546 <= ap_phi_reg_pp0_iter0_storemerge_reg_546;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_storemerge_reg_546 <= ap_phi_reg_pp0_iter1_storemerge_reg_546;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_546 <= ap_phi_reg_pp0_iter2_storemerge_reg_546;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_546 <= ap_phi_reg_pp0_iter3_storemerge_reg_546;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    SUM1_data_address0 <= zext_ln238_fu_1120_p1(17 - 1 downto 0);
    SUM1_data_address1 <= zext_ln237_2_fu_1109_p1(17 - 1 downto 0);
    SUM1_data_address10 <= zext_ln224_fu_865_p1(17 - 1 downto 0);
    SUM1_data_address11 <= zext_ln223_2_fu_849_p1(17 - 1 downto 0);
    SUM1_data_address2 <= zext_ln236_fu_1071_p1(17 - 1 downto 0);
    SUM1_data_address3 <= zext_ln235_2_fu_1055_p1(17 - 1 downto 0);
    SUM1_data_address4 <= zext_ln231_fu_1017_p1(17 - 1 downto 0);
    SUM1_data_address5 <= zext_ln230_2_fu_1006_p1(17 - 1 downto 0);
    SUM1_data_address6 <= zext_ln229_fu_968_p1(17 - 1 downto 0);
    SUM1_data_address7 <= zext_ln228_2_fu_952_p1(17 - 1 downto 0);
    SUM1_data_address8 <= zext_ln226_fu_914_p1(17 - 1 downto 0);
    SUM1_data_address9 <= zext_ln225_2_fu_903_p1(17 - 1 downto 0);

    SUM1_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce0 <= ap_const_logic_1;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce1 <= ap_const_logic_1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce10_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce10 <= ap_const_logic_1;
        else 
            SUM1_data_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce11_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce11 <= ap_const_logic_1;
        else 
            SUM1_data_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce2_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce2 <= ap_const_logic_1;
        else 
            SUM1_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce3_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce3 <= ap_const_logic_1;
        else 
            SUM1_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce4 <= ap_const_logic_1;
        else 
            SUM1_data_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce5_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce5 <= ap_const_logic_1;
        else 
            SUM1_data_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce6_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce6 <= ap_const_logic_1;
        else 
            SUM1_data_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce7_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce7 <= ap_const_logic_1;
        else 
            SUM1_data_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce8_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce8 <= ap_const_logic_1;
        else 
            SUM1_data_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce9_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            SUM1_data_ce9 <= ap_const_logic_1;
        else 
            SUM1_data_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln223_1_fu_844_p2 <= std_logic_vector(unsigned(add_ln223_fu_838_p2) + unsigned(tr0_reg_1435));
    add_ln223_fu_838_p2 <= std_logic_vector(unsigned(zext_ln223_fu_823_p1) + unsigned(zext_ln223_1_fu_834_p1));
    add_ln224_1_fu_859_p2 <= std_logic_vector(unsigned(add_ln223_fu_838_p2) + unsigned(add_ln224_fu_854_p2));
    add_ln224_fu_854_p2 <= std_logic_vector(unsigned(zext_ln193_fu_807_p1) + unsigned(tr0_reg_1435));
    add_ln225_1_fu_892_p2 <= std_logic_vector(unsigned(zext_ln225_fu_877_p1) + unsigned(zext_ln225_1_fu_888_p1));
    add_ln225_2_fu_898_p2 <= std_logic_vector(unsigned(add_ln225_1_fu_892_p2) + unsigned(tr0_reg_1435));
    add_ln225_fu_691_p2 <= std_logic_vector(unsigned(zext_ln193_1_fu_653_p1) + unsigned(tr0_2_fu_648_p2));
    add_ln226_fu_908_p2 <= std_logic_vector(unsigned(add_ln225_1_fu_892_p2) + unsigned(add_ln224_fu_854_p2));
    add_ln228_1_fu_947_p2 <= std_logic_vector(unsigned(add_ln228_fu_941_p2) + unsigned(tr1_reg_1453));
    add_ln228_fu_941_p2 <= std_logic_vector(unsigned(zext_ln228_fu_926_p1) + unsigned(zext_ln228_1_fu_937_p1));
    add_ln229_1_fu_962_p2 <= std_logic_vector(unsigned(add_ln228_fu_941_p2) + unsigned(add_ln229_fu_957_p2));
    add_ln229_fu_957_p2 <= std_logic_vector(unsigned(zext_ln193_2_fu_810_p1) + unsigned(tr1_reg_1453));
    add_ln230_1_fu_995_p2 <= std_logic_vector(unsigned(zext_ln230_fu_980_p1) + unsigned(zext_ln230_1_fu_991_p1));
    add_ln230_2_fu_1001_p2 <= std_logic_vector(unsigned(add_ln230_1_fu_995_p2) + unsigned(tr1_reg_1453));
    add_ln230_fu_697_p2 <= std_logic_vector(unsigned(zext_ln193_3_fu_675_p1) + unsigned(tr1_2_fu_670_p2));
    add_ln231_fu_1011_p2 <= std_logic_vector(unsigned(add_ln230_1_fu_995_p2) + unsigned(add_ln229_fu_957_p2));
    add_ln235_1_fu_796_p2 <= std_logic_vector(unsigned(zext_ln193_4_fu_679_p1) + unsigned(pt_x_val));
    add_ln235_2_fu_1044_p2 <= std_logic_vector(unsigned(zext_ln235_fu_1029_p1) + unsigned(zext_ln235_1_fu_1040_p1));
    add_ln235_3_fu_1050_p2 <= std_logic_vector(unsigned(add_ln235_2_fu_1044_p2) + unsigned(add_ln235_1_reg_1498));
    add_ln235_fu_791_p2 <= std_logic_vector(unsigned(zext_ln193_6_fu_683_p1) + unsigned(pt_y_val));
    add_ln236_1_fu_1065_p2 <= std_logic_vector(unsigned(add_ln235_2_fu_1044_p2) + unsigned(add_ln236_fu_1060_p2));
    add_ln236_fu_1060_p2 <= std_logic_vector(unsigned(zext_ln193_5_fu_813_p1) + unsigned(add_ln235_1_reg_1498));
    add_ln237_1_fu_1098_p2 <= std_logic_vector(unsigned(zext_ln237_fu_1083_p1) + unsigned(zext_ln237_1_fu_1094_p1));
    add_ln237_2_fu_1104_p2 <= std_logic_vector(unsigned(add_ln237_1_fu_1098_p2) + unsigned(add_ln235_1_reg_1498));
    add_ln237_fu_801_p2 <= std_logic_vector(unsigned(zext_ln193_7_fu_687_p1) + unsigned(add_ln235_fu_791_p2));
    add_ln238_fu_1114_p2 <= std_logic_vector(unsigned(add_ln237_1_fu_1098_p2) + unsigned(add_ln236_fu_1060_p2));
    add_ln251_fu_624_p2 <= std_logic_vector(unsigned(haar_counter_fu_120) + unsigned(ap_const_lv33_1));
    add_ln281_fu_1218_p2 <= std_logic_vector(unsigned(coord_8) + unsigned(ap_phi_reg_pp0_iter5_storemerge_reg_546));
    add_ln282_1_fu_1200_p2 <= std_logic_vector(unsigned(SUM1_data_q4) + unsigned(sub_ln280_1_fu_1188_p2));
    add_ln282_2_fu_1267_p2 <= std_logic_vector(unsigned(mul_ln282_1_reg_1686) + unsigned(mul_ln282_reg_1681));
    add_ln282_fu_1194_p2 <= std_logic_vector(unsigned(SUM1_data_q8) + unsigned(sub_ln279_1_fu_1176_p2));
    alpha1_array_address0 <= zext_ln271_fu_1161_p1(12 - 1 downto 0);

    alpha1_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            alpha1_array_ce0 <= ap_const_logic_1;
        else 
            alpha1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    alpha2_array_address0 <= zext_ln271_fu_1161_p1(12 - 1 downto 0);

    alpha2_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            alpha2_array_ce0 <= ap_const_logic_1;
        else 
            alpha2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln233_1_fu_785_p2 <= (icmp_ln233_1_fu_767_p2 and and_ln233_fu_779_p2);
    and_ln233_fu_779_p2 <= (icmp_ln233_fu_761_p2 and icmp_ln233_2_fu_773_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1051_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln200_reg_1366_pp0_iter3_reg)
    begin
                ap_condition_1051 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln200_reg_1366_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln200_fu_599_p2)
    begin
        if (((icmp_ln200_fu_599_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter8_stage0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_subdone, icmp_ln200_reg_1366_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln200_reg_1366_pp0_iter7_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter8_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter8_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_phi_reg_pp0_iter0_storemerge_reg_546 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    final_sum_fu_1271_p2 <= std_logic_vector(unsigned(add_ln282_2_fu_1267_p2) + unsigned(sum2_reg_1676));
    grp_fu_565_p0 <= grp_fu_565_p00(14 - 1 downto 0);
    grp_fu_565_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array2_load_reg_1636),32));
    grp_fu_569_p0 <= grp_fu_569_p00(14 - 1 downto 0);
    grp_fu_569_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array1_load_reg_1626),32));
    icmp_ln200_fu_599_p2 <= "1" when (trunc_ln200_fu_595_p1 = add_ln200) else "0";
    icmp_ln201_fu_1261_p2 <= "1" when (j_fu_116 = ap_const_lv8_0) else "0";
    icmp_ln233_1_fu_767_p2 <= "0" when (rectangles_array11_q0 = ap_const_lv4_0) else "1";
    icmp_ln233_2_fu_773_p2 <= "0" when (or_ln233_2_fu_755_p2 = ap_const_lv5_0) else "1";
    icmp_ln233_fu_761_p2 <= "0" when (rectangles_array10_q0 = ap_const_lv4_0) else "1";
    icmp_ln284_fu_1276_p2 <= "1" when (signed(final_sum_fu_1271_p2) < signed(t_reg_1671)) else "0";
    j_2_fu_1255_p2 <= std_logic_vector(unsigned(j_fu_116) + unsigned(ap_const_lv8_1));
    or_ln233_1_fu_733_p2 <= (trunc_ln233_1_fu_729_p1 or rectangles_array11_q0);
    or_ln233_2_fu_755_p2 <= (tmp_fu_721_p3 or tmp1_fu_747_p3);
    or_ln233_fu_707_p2 <= (trunc_ln233_fu_703_p1 or rectangles_array10_q0);
    rectangles_array0_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array0_ce0 <= ap_const_logic_1;
        else 
            rectangles_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array10_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array10_ce0 <= ap_const_logic_1;
        else 
            rectangles_array10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array11_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array11_ce0 <= ap_const_logic_1;
        else 
            rectangles_array11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array1_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array2_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array2_ce0 <= ap_const_logic_1;
        else 
            rectangles_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array3_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array3_ce0 <= ap_const_logic_1;
        else 
            rectangles_array3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array4_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array4_ce0 <= ap_const_logic_1;
        else 
            rectangles_array4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array5_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array5_ce0 <= ap_const_logic_1;
        else 
            rectangles_array5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array6_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array6_ce0 <= ap_const_logic_1;
        else 
            rectangles_array6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array7_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array7_ce0 <= ap_const_logic_1;
        else 
            rectangles_array7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array8_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array8_ce0 <= ap_const_logic_1;
        else 
            rectangles_array8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array9_address0 <= zext_ln200_fu_604_p1(12 - 1 downto 0);

    rectangles_array9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rectangles_array9_ce0 <= ap_const_logic_1;
        else 
            rectangles_array9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    return_value_3_fu_1296_p3 <= 
        return_value_reg_1641_pp0_iter8_reg when (icmp_ln284_reg_1696(0) = '1') else 
        return_value_1_reg_1646_pp0_iter8_reg;
        sext_ln200_cast_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln200),33));

        sext_ln250_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(return_value_3_fu_1296_p3),64));

    stage_sum_1_out <= stage_sum_1_fu_112;

    stage_sum_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln200_reg_1366_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln200_reg_1366_pp0_iter7_reg = ap_const_lv1_1))) then 
            stage_sum_1_out_ap_vld <= ap_const_logic_1;
        else 
            stage_sum_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    stage_sum_2_fu_1289_p3 <= 
        ap_const_lv64_0 when (icmp_ln201_reg_1691(0) = '1') else 
        stage_sum_1_fu_112;
    stage_sum_3_fu_1305_p2 <= std_logic_vector(unsigned(stage_sum_2_fu_1289_p3) + unsigned(sext_ln250_fu_1301_p1));
    sub_ln279_1_fu_1176_p2 <= std_logic_vector(unsigned(sub_ln279_fu_1170_p2) - unsigned(SUM1_data_q9));
    sub_ln279_fu_1170_p2 <= std_logic_vector(unsigned(SUM1_data_q11) - unsigned(SUM1_data_q10));
    sub_ln280_1_fu_1188_p2 <= std_logic_vector(unsigned(sub_ln280_fu_1182_p2) - unsigned(SUM1_data_q5));
    sub_ln280_fu_1182_p2 <= std_logic_vector(unsigned(SUM1_data_q7) - unsigned(SUM1_data_q6));
    sub_ln281_1_fu_1230_p2 <= std_logic_vector(unsigned(sub_ln281_fu_1224_p2) - unsigned(coord_10));
    sub_ln281_fu_1224_p2 <= std_logic_vector(unsigned(add_ln281_fu_1218_p2) - unsigned(coord_9));
    tmp1_fu_747_p3 <= (tmp_25_fu_739_p3 & or_ln233_1_fu_733_p2);
    tmp_17_fu_827_p3 <= (tr0_2_reg_1447 & ap_const_lv6_0);
    tmp_18_fu_870_p3 <= (add_ln225_reg_1476 & ap_const_lv8_0);
    tmp_19_fu_881_p3 <= (add_ln225_reg_1476 & ap_const_lv6_0);
    tmp_20_fu_919_p3 <= (tr1_2_reg_1465 & ap_const_lv8_0);
    tmp_21_fu_930_p3 <= (tr1_2_reg_1465 & ap_const_lv6_0);
    tmp_22_fu_973_p3 <= (add_ln230_reg_1482 & ap_const_lv8_0);
    tmp_23_fu_984_p3 <= (add_ln230_reg_1482 & ap_const_lv6_0);
    tmp_24_fu_713_p3 <= rectangles_array8_q0(4 downto 4);
    tmp_25_fu_739_p3 <= rectangles_array9_q0(4 downto 4);
    tmp_26_fu_1022_p3 <= (add_ln235_reg_1492 & ap_const_lv8_0);
    tmp_27_fu_1033_p3 <= (add_ln235_reg_1492 & ap_const_lv6_0);
    tmp_28_fu_1076_p3 <= (add_ln237_reg_1505 & ap_const_lv8_0);
    tmp_29_fu_1087_p3 <= (add_ln237_reg_1505 & ap_const_lv6_0);
    tmp_fu_721_p3 <= (tmp_24_fu_713_p3 & or_ln233_fu_707_p2);
    tmp_s_fu_816_p3 <= (tr0_2_reg_1447 & ap_const_lv8_0);
    tr0_2_fu_648_p2 <= std_logic_vector(unsigned(zext_ln210_fu_644_p1) + unsigned(pt_y_val));
    tr0_fu_639_p2 <= std_logic_vector(unsigned(zext_ln208_fu_635_p1) + unsigned(pt_x_val));
    tr1_2_fu_670_p2 <= std_logic_vector(unsigned(zext_ln215_fu_666_p1) + unsigned(pt_y_val));
    tr1_fu_661_p2 <= std_logic_vector(unsigned(zext_ln213_fu_657_p1) + unsigned(pt_x_val));
    tree_thresh_array_address0 <= zext_ln271_fu_1161_p1(12 - 1 downto 0);

    tree_thresh_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            tree_thresh_array_ce0 <= ap_const_logic_1;
        else 
            tree_thresh_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln200_fu_595_p1 <= haar_counter_fu_120(8 - 1 downto 0);
    trunc_ln233_1_fu_729_p1 <= rectangles_array9_q0(4 - 1 downto 0);
    trunc_ln233_fu_703_p1 <= rectangles_array8_q0(4 - 1 downto 0);
    trunc_ln248_fu_620_p1 <= haar_counter_fu_120(12 - 1 downto 0);
    weights_array0_address0 <= zext_ln271_fu_1161_p1(12 - 1 downto 0);

    weights_array0_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_array0_ce0 <= ap_const_logic_1;
        else 
            weights_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array1_address0 <= zext_ln271_fu_1161_p1(12 - 1 downto 0);

    weights_array1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_array1_ce0 <= ap_const_logic_1;
        else 
            weights_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array2_address0 <= zext_ln271_fu_1161_p1(12 - 1 downto 0);

    weights_array2_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            weights_array2_ce0 <= ap_const_logic_1;
        else 
            weights_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln193_1_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array3_q0),8));
    zext_ln193_2_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_1_reg_1460),17));
    zext_ln193_3_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array7_q0),8));
    zext_ln193_4_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array8_q0),17));
    zext_ln193_5_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_1_reg_1471),17));
    zext_ln193_6_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array9_q0),8));
    zext_ln193_7_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array11_q0),8));
    zext_ln193_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_1_reg_1442),17));
    zext_ln200_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(haar_counter_fu_120),64));
    zext_ln208_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array0_q0),17));
    zext_ln210_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array1_q0),8));
    zext_ln213_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array4_q0),17));
    zext_ln215_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array5_q0),8));
    zext_ln223_1_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_827_p3),17));
    zext_ln223_2_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_1_fu_844_p2),64));
    zext_ln223_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_816_p3),17));
    zext_ln224_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_1_fu_859_p2),64));
    zext_ln225_1_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_881_p3),17));
    zext_ln225_2_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_2_fu_898_p2),64));
    zext_ln225_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_870_p3),17));
    zext_ln226_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_fu_908_p2),64));
    zext_ln228_1_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_930_p3),17));
    zext_ln228_2_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln228_1_fu_947_p2),64));
    zext_ln228_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_919_p3),17));
    zext_ln229_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln229_1_fu_962_p2),64));
    zext_ln230_1_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_984_p3),17));
    zext_ln230_2_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln230_2_fu_1001_p2),64));
    zext_ln230_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_973_p3),17));
    zext_ln231_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_1011_p2),64));
    zext_ln235_1_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1033_p3),17));
    zext_ln235_2_fu_1055_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln235_3_fu_1050_p2),64));
    zext_ln235_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1022_p3),17));
    zext_ln236_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln236_1_fu_1065_p2),64));
    zext_ln237_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_1087_p3),17));
    zext_ln237_2_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln237_2_fu_1104_p2),64));
    zext_ln237_fu_1083_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1076_p3),17));
    zext_ln238_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln238_fu_1114_p2),64));
    zext_ln271_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln248_reg_1430_pp0_iter3_reg),64));
end behav;
