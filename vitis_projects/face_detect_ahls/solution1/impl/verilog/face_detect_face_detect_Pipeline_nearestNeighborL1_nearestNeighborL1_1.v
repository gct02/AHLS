// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_ratio,
        result_19,
        IMG1_data_address0,
        IMG1_data_ce0,
        IMG1_data_we0,
        IMG1_data_d0,
        result_18,
        sext_ln357_1,
        Data_address0,
        Data_ce0,
        Data_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] y_ratio;
input  [31:0] result_19;
output  [16:0] IMG1_data_address0;
output   IMG1_data_ce0;
output   IMG1_data_we0;
output  [7:0] IMG1_data_d0;
input  [31:0] result_18;
input  [27:0] sext_ln357_1;
output  [16:0] Data_address0;
output   Data_ce0;
input  [7:0] Data_q0;

reg ap_idle;
reg IMG1_data_ce0;
reg IMG1_data_we0;
reg Data_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln361_fu_164_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln357_1_cast_fu_142_p1;
reg  signed [31:0] sext_ln357_1_cast_reg_414;
wire   [8:0] select_ln347_fu_194_p3;
reg   [8:0] select_ln347_reg_423;
reg   [8:0] select_ln347_reg_423_pp0_iter2_reg;
wire   [7:0] select_ln361_fu_202_p3;
reg   [7:0] select_ln361_reg_429;
reg   [7:0] select_ln361_reg_429_pp0_iter2_reg;
wire   [0:0] slt_fu_214_p2;
reg   [0:0] slt_reg_436;
reg   [7:0] tmp_10_reg_441;
wire   [0:0] or_ln366_fu_278_p2;
reg   [0:0] or_ln366_reg_447;
reg   [0:0] or_ln366_reg_447_pp0_iter3_reg;
reg   [15:0] trunc_ln7_reg_451;
reg   [16:0] IMG1_data_addr_reg_456;
wire   [63:0] zext_ln368_5_fu_359_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln368_6_fu_373_p1;
reg   [8:0] j_fu_76;
wire   [8:0] add_ln364_fu_219_p2;
wire    ap_loop_init;
reg   [7:0] i_fu_80;
reg   [16:0] indvar_flatten_fu_84;
wire   [16:0] add_ln361_1_fu_170_p2;
wire   [8:0] mul_ln368_fu_138_p0;
wire   [31:0] zext_ln364_fu_263_p1;
wire  signed [27:0] mul_ln368_fu_138_p1;
wire   [0:0] icmp_ln364_fu_188_p2;
wire   [7:0] add_ln361_fu_182_p2;
wire   [31:0] zext_ln361_fu_210_p1;
wire   [7:0] empty_fu_243_p0;
wire   [23:0] empty_fu_243_p2;
wire   [0:0] icmp_ln366_fu_267_p2;
wire   [0:0] xor_ln366_fu_272_p2;
wire   [0:0] rev_fu_258_p2;
wire   [31:0] mul_ln368_fu_138_p2;
wire   [15:0] tmp_s_fu_294_p3;
wire   [13:0] tmp_9_fu_305_p3;
wire   [16:0] zext_ln368_fu_301_p1;
wire   [16:0] zext_ln368_1_fu_312_p1;
wire   [15:0] tmp_11_fu_322_p3;
wire   [13:0] tmp_12_fu_333_p3;
wire   [16:0] zext_ln368_2_fu_329_p1;
wire   [16:0] zext_ln368_3_fu_340_p1;
wire   [16:0] add_ln368_fu_316_p2;
wire   [16:0] zext_ln368_4_fu_350_p1;
wire   [16:0] add_ln368_2_fu_353_p2;
wire   [16:0] add_ln368_1_fu_344_p2;
wire  signed [16:0] sext_ln368_fu_364_p1;
wire   [16:0] add_ln368_3_fu_367_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] empty_fu_243_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_76 = 9'd0;
#0 i_fu_80 = 8'd0;
#0 indvar_flatten_fu_84 = 17'd0;
#0 ap_done_reg = 1'b0;
end

face_detect_mul_9ns_28s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_9ns_28s_32_1_1_U1(
    .din0(mul_ln368_fu_138_p0),
    .din1(mul_ln368_fu_138_p1),
    .dout(mul_ln368_fu_138_p2)
);

face_detect_mul_8ns_24s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mul_8ns_24s_24_1_1_U2(
    .din0(empty_fu_243_p0),
    .din1(y_ratio),
    .dout(empty_fu_243_p2)
);

face_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 8'd0;
        end else if (((icmp_ln361_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_80 <= select_ln361_fu_202_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 17'd0;
        end else if (((icmp_ln361_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_84 <= add_ln361_1_fu_170_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_76 <= 9'd0;
        end else if (((icmp_ln361_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_76 <= add_ln364_fu_219_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        IMG1_data_addr_reg_456 <= zext_ln368_5_fu_359_p1;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        or_ln366_reg_447 <= or_ln366_fu_278_p2;
        or_ln366_reg_447_pp0_iter3_reg <= or_ln366_reg_447;
        select_ln347_reg_423_pp0_iter2_reg <= select_ln347_reg_423;
        select_ln361_reg_429_pp0_iter2_reg <= select_ln361_reg_429;
        tmp_10_reg_441 <= {{empty_fu_243_p2[23:16]}};
        trunc_ln7_reg_451 <= {{mul_ln368_fu_138_p2[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        select_ln347_reg_423 <= select_ln347_fu_194_p3;
        select_ln361_reg_429 <= select_ln361_fu_202_p3;
        sext_ln357_1_cast_reg_414 <= sext_ln357_1_cast_fu_142_p1;
        slt_reg_436 <= slt_fu_214_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        IMG1_data_ce0 = 1'b1;
    end else begin
        IMG1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (or_ln366_reg_447_pp0_iter3_reg == 1'd0))) begin
        IMG1_data_we0 = 1'b1;
    end else begin
        IMG1_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln361_fu_164_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_address0 = zext_ln368_6_fu_373_p1;

assign IMG1_data_address0 = IMG1_data_addr_reg_456;

assign IMG1_data_d0 = Data_q0;

assign add_ln361_1_fu_170_p2 = (indvar_flatten_fu_84 + 17'd1);

assign add_ln361_fu_182_p2 = (i_fu_80 + 8'd1);

assign add_ln364_fu_219_p2 = (select_ln347_fu_194_p3 + 9'd1);

assign add_ln368_1_fu_344_p2 = (zext_ln368_2_fu_329_p1 + zext_ln368_3_fu_340_p1);

assign add_ln368_2_fu_353_p2 = (add_ln368_fu_316_p2 + zext_ln368_4_fu_350_p1);

assign add_ln368_3_fu_367_p2 = ($signed(add_ln368_1_fu_344_p2) + $signed(sext_ln368_fu_364_p1));

assign add_ln368_fu_316_p2 = (zext_ln368_fu_301_p1 + zext_ln368_1_fu_312_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_fu_243_p0 = empty_fu_243_p00;

assign empty_fu_243_p00 = select_ln361_reg_429;

assign icmp_ln361_fu_164_p2 = ((indvar_flatten_fu_84 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp_ln364_fu_188_p2 = ((j_fu_76 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln366_fu_267_p2 = (($signed(zext_ln364_fu_263_p1) < $signed(result_18)) ? 1'b1 : 1'b0);

assign mul_ln368_fu_138_p0 = zext_ln364_fu_263_p1;

assign mul_ln368_fu_138_p1 = sext_ln357_1_cast_reg_414;

assign or_ln366_fu_278_p2 = (xor_ln366_fu_272_p2 | rev_fu_258_p2);

assign rev_fu_258_p2 = (slt_reg_436 ^ 1'd1);

assign select_ln347_fu_194_p3 = ((icmp_ln364_fu_188_p2[0:0] == 1'b1) ? 9'd0 : j_fu_76);

assign select_ln361_fu_202_p3 = ((icmp_ln364_fu_188_p2[0:0] == 1'b1) ? add_ln361_fu_182_p2 : i_fu_80);

assign sext_ln357_1_cast_fu_142_p1 = $signed(sext_ln357_1);

assign sext_ln368_fu_364_p1 = $signed(trunc_ln7_reg_451);

assign slt_fu_214_p2 = (($signed(zext_ln361_fu_210_p1) < $signed(result_19)) ? 1'b1 : 1'b0);

assign tmp_11_fu_322_p3 = {{tmp_10_reg_441}, {8'd0}};

assign tmp_12_fu_333_p3 = {{tmp_10_reg_441}, {6'd0}};

assign tmp_9_fu_305_p3 = {{select_ln361_reg_429_pp0_iter2_reg}, {6'd0}};

assign tmp_s_fu_294_p3 = {{select_ln361_reg_429_pp0_iter2_reg}, {8'd0}};

assign xor_ln366_fu_272_p2 = (icmp_ln366_fu_267_p2 ^ 1'd1);

assign zext_ln361_fu_210_p1 = select_ln361_fu_202_p3;

assign zext_ln364_fu_263_p1 = select_ln347_reg_423;

assign zext_ln368_1_fu_312_p1 = tmp_9_fu_305_p3;

assign zext_ln368_2_fu_329_p1 = tmp_11_fu_322_p3;

assign zext_ln368_3_fu_340_p1 = tmp_12_fu_333_p3;

assign zext_ln368_4_fu_350_p1 = select_ln347_reg_423_pp0_iter2_reg;

assign zext_ln368_5_fu_359_p1 = add_ln368_2_fu_353_p2;

assign zext_ln368_6_fu_373_p1 = add_ln368_3_fu_367_p2;

assign zext_ln368_fu_301_p1 = tmp_s_fu_294_p3;

endmodule //face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1
