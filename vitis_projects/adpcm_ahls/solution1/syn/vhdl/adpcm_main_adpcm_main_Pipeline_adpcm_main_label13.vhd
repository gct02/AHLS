-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_adpcm_main_Pipeline_adpcm_main_label13 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    compressed_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    compressed_ce0 : OUT STD_LOGIC;
    compressed_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    result_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_we0 : OUT STD_LOGIC;
    result_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    result_ce1 : OUT STD_LOGIC;
    result_we1 : OUT STD_LOGIC;
    result_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt1_o_ap_vld : OUT STD_LOGIC;
    dec_al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_al1_o_ap_vld : OUT STD_LOGIC;
    dec_rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rlt2_o_ap_vld : OUT STD_LOGIC;
    dec_al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_al2_o_ap_vld : OUT STD_LOGIC;
    dec_detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_detl_o_ap_vld : OUT STD_LOGIC;
    il : IN STD_LOGIC_VECTOR (5 downto 0);
    dec_nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_nbl_o_ap_vld : OUT STD_LOGIC;
    dec_plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt1_o_ap_vld : OUT STD_LOGIC;
    dec_plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_plt2_o_ap_vld : OUT STD_LOGIC;
    dec_rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rh1_o_ap_vld : OUT STD_LOGIC;
    dec_ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_ah1_o_ap_vld : OUT STD_LOGIC;
    dec_rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    dec_rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    dec_rh2_o_ap_vld : OUT STD_LOGIC;
    dec_ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_ah2_o_ap_vld : OUT STD_LOGIC;
    dec_deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_deth_o_ap_vld : OUT STD_LOGIC;
    dec_nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
    dec_nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    dec_nbh_o_ap_vld : OUT STD_LOGIC;
    dec_ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph1_o_ap_vld : OUT STD_LOGIC;
    dec_ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ph2_o_ap_vld : OUT STD_LOGIC;
    dec_del_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bpl_ce0 : OUT STD_LOGIC;
    dec_del_bpl_we0 : OUT STD_LOGIC;
    dec_del_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bpl_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bpl_ce1 : OUT STD_LOGIC;
    dec_del_bpl_we1 : OUT STD_LOGIC;
    dec_del_bpl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bpl_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce0 : OUT STD_LOGIC;
    dec_del_dltx_we0 : OUT STD_LOGIC;
    dec_del_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dltx_ce1 : OUT STD_LOGIC;
    dec_del_dltx_we1 : OUT STD_LOGIC;
    dec_del_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dec_del_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dec_del_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bph_ce0 : OUT STD_LOGIC;
    dec_del_bph_we0 : OUT STD_LOGIC;
    dec_del_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bph_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_bph_ce1 : OUT STD_LOGIC;
    dec_del_bph_we1 : OUT STD_LOGIC;
    dec_del_bph_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_del_bph_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dec_del_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce0 : OUT STD_LOGIC;
    dec_del_dhx_we0 : OUT STD_LOGIC;
    dec_del_dhx_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    dec_del_dhx_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    dec_del_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dec_del_dhx_ce1 : OUT STD_LOGIC;
    dec_del_dhx_we1 : OUT STD_LOGIC;
    dec_del_dhx_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    dec_del_dhx_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumc_ce0 : OUT STD_LOGIC;
    accumc_we0 : OUT STD_LOGIC;
    accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    accumc_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumc_ce1 : OUT STD_LOGIC;
    accumc_we1 : OUT STD_LOGIC;
    accumc_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumc_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumd_ce0 : OUT STD_LOGIC;
    accumd_we0 : OUT STD_LOGIC;
    accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumd_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    accumd_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    accumd_ce1 : OUT STD_LOGIC;
    accumd_we1 : OUT STD_LOGIC;
    accumd_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    accumd_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of adpcm_main_adpcm_main_Pipeline_adpcm_main_label13 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1F40 : STD_LOGIC_VECTOR (12 downto 0) := "1111101000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln782_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal xout1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal xout2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_4_reg_279 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_4_reg_279_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln782_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln784_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln784_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_decode_fu_142_ap_start : STD_LOGIC;
    signal grp_decode_fu_142_ap_done : STD_LOGIC;
    signal grp_decode_fu_142_ap_idle : STD_LOGIC;
    signal grp_decode_fu_142_ap_ready : STD_LOGIC;
    signal grp_decode_fu_142_dec_rlt1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_142_dec_rlt1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_al1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_142_dec_al1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_rlt2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_142_dec_rlt2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_al2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_142_dec_al2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_detl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_142_dec_detl_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_nbl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_142_dec_nbl_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_plt1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_plt1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_plt2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_plt2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_rh1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_142_dec_rh1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_ah1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_142_dec_ah1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_rh2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_decode_fu_142_dec_rh2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_ah2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_142_dec_ah2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_deth_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_142_dec_deth_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_nbh_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_decode_fu_142_dec_nbh_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_ph1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_ph1_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_ph2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_ph2_o_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_xout1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_xout1_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_xout2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_xout2_ap_vld : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_bpl_ce0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bpl_we0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_del_bpl_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_bpl_ce1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bpl_we1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bpl_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_del_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_dltx_ce0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dltx_we0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_142_dec_del_dltx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_dltx_ce1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dltx_we1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dltx_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_decode_fu_142_dec_del_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_bph_ce0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bph_we0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_del_bph_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_bph_ce1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bph_we1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_bph_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_dec_del_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_dhx_ce0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dhx_we0 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dhx_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_decode_fu_142_dec_del_dhx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decode_fu_142_dec_del_dhx_ce1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dhx_we1 : STD_LOGIC;
    signal grp_decode_fu_142_dec_del_dhx_d1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_decode_fu_142_accumc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_142_accumc_ce0 : STD_LOGIC;
    signal grp_decode_fu_142_accumc_we0 : STD_LOGIC;
    signal grp_decode_fu_142_accumc_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_accumc_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_142_accumc_ce1 : STD_LOGIC;
    signal grp_decode_fu_142_accumc_we1 : STD_LOGIC;
    signal grp_decode_fu_142_accumc_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_accumd_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_142_accumd_ce0 : STD_LOGIC;
    signal grp_decode_fu_142_accumd_we0 : STD_LOGIC;
    signal grp_decode_fu_142_accumd_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_accumd_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decode_fu_142_accumd_ce1 : STD_LOGIC;
    signal grp_decode_fu_142_accumd_we1 : STD_LOGIC;
    signal grp_decode_fu_142_accumd_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decode_fu_142_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln784_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln782_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln786_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln782_fu_238_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_219_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln786_fu_262_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_decode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (7 downto 0);
        dec_rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt1_o_ap_vld : OUT STD_LOGIC;
        dec_al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_al1_o_ap_vld : OUT STD_LOGIC;
        dec_rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rlt2_o_ap_vld : OUT STD_LOGIC;
        dec_al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_al2_o_ap_vld : OUT STD_LOGIC;
        dec_detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_detl_o_ap_vld : OUT STD_LOGIC;
        il : IN STD_LOGIC_VECTOR (5 downto 0);
        dec_nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_nbl_o_ap_vld : OUT STD_LOGIC;
        dec_plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_plt1_o_ap_vld : OUT STD_LOGIC;
        dec_plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_plt2_o_ap_vld : OUT STD_LOGIC;
        dec_rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rh1_o_ap_vld : OUT STD_LOGIC;
        dec_ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_ah1_o_ap_vld : OUT STD_LOGIC;
        dec_rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        dec_rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        dec_rh2_o_ap_vld : OUT STD_LOGIC;
        dec_ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_ah2_o_ap_vld : OUT STD_LOGIC;
        dec_deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_deth_o_ap_vld : OUT STD_LOGIC;
        dec_nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
        dec_nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        dec_nbh_o_ap_vld : OUT STD_LOGIC;
        dec_ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_ph1_o_ap_vld : OUT STD_LOGIC;
        dec_ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_ph2_o_ap_vld : OUT STD_LOGIC;
        xout1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xout1_ap_vld : OUT STD_LOGIC;
        xout2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        xout2_ap_vld : OUT STD_LOGIC;
        dec_del_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bpl_ce0 : OUT STD_LOGIC;
        dec_del_bpl_we0 : OUT STD_LOGIC;
        dec_del_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bpl_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bpl_ce1 : OUT STD_LOGIC;
        dec_del_bpl_we1 : OUT STD_LOGIC;
        dec_del_bpl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bpl_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_del_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dltx_ce0 : OUT STD_LOGIC;
        dec_del_dltx_we0 : OUT STD_LOGIC;
        dec_del_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dltx_ce1 : OUT STD_LOGIC;
        dec_del_dltx_we1 : OUT STD_LOGIC;
        dec_del_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dec_del_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dec_del_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bph_ce0 : OUT STD_LOGIC;
        dec_del_bph_we0 : OUT STD_LOGIC;
        dec_del_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bph_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_bph_ce1 : OUT STD_LOGIC;
        dec_del_bph_we1 : OUT STD_LOGIC;
        dec_del_bph_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dec_del_bph_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dec_del_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dhx_ce0 : OUT STD_LOGIC;
        dec_del_dhx_we0 : OUT STD_LOGIC;
        dec_del_dhx_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dec_del_dhx_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        dec_del_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        dec_del_dhx_ce1 : OUT STD_LOGIC;
        dec_del_dhx_we1 : OUT STD_LOGIC;
        dec_del_dhx_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dec_del_dhx_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        accumc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumc_ce0 : OUT STD_LOGIC;
        accumc_we0 : OUT STD_LOGIC;
        accumc_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumc_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        accumc_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumc_ce1 : OUT STD_LOGIC;
        accumc_we1 : OUT STD_LOGIC;
        accumc_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumc_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        accumd_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumd_ce0 : OUT STD_LOGIC;
        accumd_we0 : OUT STD_LOGIC;
        accumd_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumd_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        accumd_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        accumd_ce1 : OUT STD_LOGIC;
        accumd_we1 : OUT STD_LOGIC;
        accumd_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        accumd_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component adpcm_main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_decode_fu_142 : component adpcm_main_decode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_decode_fu_142_ap_start,
        ap_done => grp_decode_fu_142_ap_done,
        ap_idle => grp_decode_fu_142_ap_idle,
        ap_ready => grp_decode_fu_142_ap_ready,
        input_r => trunc_ln784_reg_295,
        dec_rlt1_i => dec_rlt1_i,
        dec_rlt1_o => grp_decode_fu_142_dec_rlt1_o,
        dec_rlt1_o_ap_vld => grp_decode_fu_142_dec_rlt1_o_ap_vld,
        dec_al1_i => dec_al1_i,
        dec_al1_o => grp_decode_fu_142_dec_al1_o,
        dec_al1_o_ap_vld => grp_decode_fu_142_dec_al1_o_ap_vld,
        dec_rlt2_i => dec_rlt2_i,
        dec_rlt2_o => grp_decode_fu_142_dec_rlt2_o,
        dec_rlt2_o_ap_vld => grp_decode_fu_142_dec_rlt2_o_ap_vld,
        dec_al2_i => dec_al2_i,
        dec_al2_o => grp_decode_fu_142_dec_al2_o,
        dec_al2_o_ap_vld => grp_decode_fu_142_dec_al2_o_ap_vld,
        dec_detl_i => dec_detl_i,
        dec_detl_o => grp_decode_fu_142_dec_detl_o,
        dec_detl_o_ap_vld => grp_decode_fu_142_dec_detl_o_ap_vld,
        il => il,
        dec_nbl_i => dec_nbl_i,
        dec_nbl_o => grp_decode_fu_142_dec_nbl_o,
        dec_nbl_o_ap_vld => grp_decode_fu_142_dec_nbl_o_ap_vld,
        dec_plt1_i => dec_plt1_i,
        dec_plt1_o => grp_decode_fu_142_dec_plt1_o,
        dec_plt1_o_ap_vld => grp_decode_fu_142_dec_plt1_o_ap_vld,
        dec_plt2_i => dec_plt2_i,
        dec_plt2_o => grp_decode_fu_142_dec_plt2_o,
        dec_plt2_o_ap_vld => grp_decode_fu_142_dec_plt2_o_ap_vld,
        dec_rh1_i => dec_rh1_i,
        dec_rh1_o => grp_decode_fu_142_dec_rh1_o,
        dec_rh1_o_ap_vld => grp_decode_fu_142_dec_rh1_o_ap_vld,
        dec_ah1_i => dec_ah1_i,
        dec_ah1_o => grp_decode_fu_142_dec_ah1_o,
        dec_ah1_o_ap_vld => grp_decode_fu_142_dec_ah1_o_ap_vld,
        dec_rh2_i => dec_rh2_i,
        dec_rh2_o => grp_decode_fu_142_dec_rh2_o,
        dec_rh2_o_ap_vld => grp_decode_fu_142_dec_rh2_o_ap_vld,
        dec_ah2_i => dec_ah2_i,
        dec_ah2_o => grp_decode_fu_142_dec_ah2_o,
        dec_ah2_o_ap_vld => grp_decode_fu_142_dec_ah2_o_ap_vld,
        dec_deth_i => dec_deth_i,
        dec_deth_o => grp_decode_fu_142_dec_deth_o,
        dec_deth_o_ap_vld => grp_decode_fu_142_dec_deth_o_ap_vld,
        dec_nbh_i => dec_nbh_i,
        dec_nbh_o => grp_decode_fu_142_dec_nbh_o,
        dec_nbh_o_ap_vld => grp_decode_fu_142_dec_nbh_o_ap_vld,
        dec_ph1_i => dec_ph1_i,
        dec_ph1_o => grp_decode_fu_142_dec_ph1_o,
        dec_ph1_o_ap_vld => grp_decode_fu_142_dec_ph1_o_ap_vld,
        dec_ph2_i => dec_ph2_i,
        dec_ph2_o => grp_decode_fu_142_dec_ph2_o,
        dec_ph2_o_ap_vld => grp_decode_fu_142_dec_ph2_o_ap_vld,
        xout1 => grp_decode_fu_142_xout1,
        xout1_ap_vld => grp_decode_fu_142_xout1_ap_vld,
        xout2 => grp_decode_fu_142_xout2,
        xout2_ap_vld => grp_decode_fu_142_xout2_ap_vld,
        dec_del_bpl_address0 => grp_decode_fu_142_dec_del_bpl_address0,
        dec_del_bpl_ce0 => grp_decode_fu_142_dec_del_bpl_ce0,
        dec_del_bpl_we0 => grp_decode_fu_142_dec_del_bpl_we0,
        dec_del_bpl_d0 => grp_decode_fu_142_dec_del_bpl_d0,
        dec_del_bpl_q0 => dec_del_bpl_q0,
        dec_del_bpl_address1 => grp_decode_fu_142_dec_del_bpl_address1,
        dec_del_bpl_ce1 => grp_decode_fu_142_dec_del_bpl_ce1,
        dec_del_bpl_we1 => grp_decode_fu_142_dec_del_bpl_we1,
        dec_del_bpl_d1 => grp_decode_fu_142_dec_del_bpl_d1,
        dec_del_bpl_q1 => dec_del_bpl_q1,
        dec_del_dltx_address0 => grp_decode_fu_142_dec_del_dltx_address0,
        dec_del_dltx_ce0 => grp_decode_fu_142_dec_del_dltx_ce0,
        dec_del_dltx_we0 => grp_decode_fu_142_dec_del_dltx_we0,
        dec_del_dltx_d0 => grp_decode_fu_142_dec_del_dltx_d0,
        dec_del_dltx_q0 => dec_del_dltx_q0,
        dec_del_dltx_address1 => grp_decode_fu_142_dec_del_dltx_address1,
        dec_del_dltx_ce1 => grp_decode_fu_142_dec_del_dltx_ce1,
        dec_del_dltx_we1 => grp_decode_fu_142_dec_del_dltx_we1,
        dec_del_dltx_d1 => grp_decode_fu_142_dec_del_dltx_d1,
        dec_del_dltx_q1 => dec_del_dltx_q1,
        dec_del_bph_address0 => grp_decode_fu_142_dec_del_bph_address0,
        dec_del_bph_ce0 => grp_decode_fu_142_dec_del_bph_ce0,
        dec_del_bph_we0 => grp_decode_fu_142_dec_del_bph_we0,
        dec_del_bph_d0 => grp_decode_fu_142_dec_del_bph_d0,
        dec_del_bph_q0 => dec_del_bph_q0,
        dec_del_bph_address1 => grp_decode_fu_142_dec_del_bph_address1,
        dec_del_bph_ce1 => grp_decode_fu_142_dec_del_bph_ce1,
        dec_del_bph_we1 => grp_decode_fu_142_dec_del_bph_we1,
        dec_del_bph_d1 => grp_decode_fu_142_dec_del_bph_d1,
        dec_del_bph_q1 => dec_del_bph_q1,
        dec_del_dhx_address0 => grp_decode_fu_142_dec_del_dhx_address0,
        dec_del_dhx_ce0 => grp_decode_fu_142_dec_del_dhx_ce0,
        dec_del_dhx_we0 => grp_decode_fu_142_dec_del_dhx_we0,
        dec_del_dhx_d0 => grp_decode_fu_142_dec_del_dhx_d0,
        dec_del_dhx_q0 => dec_del_dhx_q0,
        dec_del_dhx_address1 => grp_decode_fu_142_dec_del_dhx_address1,
        dec_del_dhx_ce1 => grp_decode_fu_142_dec_del_dhx_ce1,
        dec_del_dhx_we1 => grp_decode_fu_142_dec_del_dhx_we1,
        dec_del_dhx_d1 => grp_decode_fu_142_dec_del_dhx_d1,
        dec_del_dhx_q1 => dec_del_dhx_q1,
        accumc_address0 => grp_decode_fu_142_accumc_address0,
        accumc_ce0 => grp_decode_fu_142_accumc_ce0,
        accumc_we0 => grp_decode_fu_142_accumc_we0,
        accumc_d0 => grp_decode_fu_142_accumc_d0,
        accumc_q0 => accumc_q0,
        accumc_address1 => grp_decode_fu_142_accumc_address1,
        accumc_ce1 => grp_decode_fu_142_accumc_ce1,
        accumc_we1 => grp_decode_fu_142_accumc_we1,
        accumc_d1 => grp_decode_fu_142_accumc_d1,
        accumc_q1 => accumc_q1,
        accumd_address0 => grp_decode_fu_142_accumd_address0,
        accumd_ce0 => grp_decode_fu_142_accumd_ce0,
        accumd_we0 => grp_decode_fu_142_accumd_we0,
        accumd_d0 => grp_decode_fu_142_accumd_d0,
        accumd_q0 => accumd_q0,
        accumd_address1 => grp_decode_fu_142_accumd_address1,
        accumd_ce1 => grp_decode_fu_142_accumd_ce1,
        accumd_we1 => grp_decode_fu_142_accumd_we1,
        accumd_d1 => grp_decode_fu_142_accumd_d1,
        accumd_q1 => accumd_q1);

    flow_control_loop_pipe_sequential_init_U : component adpcm_main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_decode_fu_142_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_decode_fu_142_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    grp_decode_fu_142_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decode_fu_142_ap_ready = ap_const_logic_1)) then 
                    grp_decode_fu_142_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_100 <= ap_const_lv13_0;
            elsif (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                i_fu_100 <= add_ln782_fu_238_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_4_reg_279 <= ap_sig_allocacmp_i_4;
                i_4_reg_279_pp0_iter1_reg <= i_4_reg_279;
                icmp_ln782_reg_286 <= icmp_ln782_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                trunc_ln784_reg_295 <= trunc_ln784_fu_234_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_xout1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                xout1 <= grp_decode_fu_142_xout1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (grp_decode_fu_142_xout2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                xout2 <= grp_decode_fu_142_xout2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage11_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    accumc_address0 <= grp_decode_fu_142_accumc_address0;
    accumc_address1 <= grp_decode_fu_142_accumc_address1;
    accumc_ce0 <= grp_decode_fu_142_accumc_ce0;
    accumc_ce1 <= grp_decode_fu_142_accumc_ce1;
    accumc_d0 <= grp_decode_fu_142_accumc_d0;
    accumc_d1 <= grp_decode_fu_142_accumc_d1;
    accumc_we0 <= grp_decode_fu_142_accumc_we0;
    accumc_we1 <= grp_decode_fu_142_accumc_we1;
    accumd_address0 <= grp_decode_fu_142_accumd_address0;
    accumd_address1 <= grp_decode_fu_142_accumd_address1;
    accumd_ce0 <= grp_decode_fu_142_accumd_ce0;
    accumd_ce1 <= grp_decode_fu_142_accumd_ce1;
    accumd_d0 <= grp_decode_fu_142_accumd_d0;
    accumd_d1 <= grp_decode_fu_142_accumd_d1;
    accumd_we0 <= grp_decode_fu_142_accumd_we0;
    accumd_we1 <= grp_decode_fu_142_accumd_we1;
    add_ln782_fu_238_p2 <= std_logic_vector(unsigned(i_4_reg_279) + unsigned(ap_const_lv13_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln782_reg_286)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_100, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_100;
        end if; 
    end process;

    compressed_address0 <= zext_ln784_fu_229_p1(12 - 1 downto 0);

    compressed_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            compressed_ce0 <= ap_const_logic_1;
        else 
            compressed_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dec_ah1_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln782_reg_286, dec_ah1_i, grp_decode_fu_142_dec_ah1_o, grp_decode_fu_142_dec_ah1_o_ap_vld, ap_block_pp0_stage0)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (grp_decode_fu_142_dec_ah1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dec_ah1_o <= grp_decode_fu_142_dec_ah1_o;
        else 
            dec_ah1_o <= dec_ah1_i;
        end if; 
    end process;

    dec_ah1_o_ap_vld <= grp_decode_fu_142_dec_ah1_o_ap_vld;

    dec_ah2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, ap_CS_fsm_pp0_stage11, dec_ah2_i, grp_decode_fu_142_dec_ah2_o, grp_decode_fu_142_dec_ah2_o_ap_vld, ap_block_pp0_stage11)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_ah2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            dec_ah2_o <= grp_decode_fu_142_dec_ah2_o;
        else 
            dec_ah2_o <= dec_ah2_i;
        end if; 
    end process;

    dec_ah2_o_ap_vld <= grp_decode_fu_142_dec_ah2_o_ap_vld;

    dec_al1_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln782_reg_286, dec_al1_i, grp_decode_fu_142_dec_al1_o, grp_decode_fu_142_dec_al1_o_ap_vld, ap_block_pp0_stage0)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (grp_decode_fu_142_dec_al1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dec_al1_o <= grp_decode_fu_142_dec_al1_o;
        else 
            dec_al1_o <= dec_al1_i;
        end if; 
    end process;

    dec_al1_o_ap_vld <= grp_decode_fu_142_dec_al1_o_ap_vld;

    dec_al2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, ap_CS_fsm_pp0_stage11, dec_al2_i, grp_decode_fu_142_dec_al2_o, grp_decode_fu_142_dec_al2_o_ap_vld, ap_block_pp0_stage11)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_al2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            dec_al2_o <= grp_decode_fu_142_dec_al2_o;
        else 
            dec_al2_o <= dec_al2_i;
        end if; 
    end process;

    dec_al2_o_ap_vld <= grp_decode_fu_142_dec_al2_o_ap_vld;
    dec_del_bph_address0 <= grp_decode_fu_142_dec_del_bph_address0;
    dec_del_bph_address1 <= grp_decode_fu_142_dec_del_bph_address1;
    dec_del_bph_ce0 <= grp_decode_fu_142_dec_del_bph_ce0;
    dec_del_bph_ce1 <= grp_decode_fu_142_dec_del_bph_ce1;
    dec_del_bph_d0 <= grp_decode_fu_142_dec_del_bph_d0;
    dec_del_bph_d1 <= grp_decode_fu_142_dec_del_bph_d1;
    dec_del_bph_we0 <= grp_decode_fu_142_dec_del_bph_we0;
    dec_del_bph_we1 <= grp_decode_fu_142_dec_del_bph_we1;
    dec_del_bpl_address0 <= grp_decode_fu_142_dec_del_bpl_address0;
    dec_del_bpl_address1 <= grp_decode_fu_142_dec_del_bpl_address1;
    dec_del_bpl_ce0 <= grp_decode_fu_142_dec_del_bpl_ce0;
    dec_del_bpl_ce1 <= grp_decode_fu_142_dec_del_bpl_ce1;
    dec_del_bpl_d0 <= grp_decode_fu_142_dec_del_bpl_d0;
    dec_del_bpl_d1 <= grp_decode_fu_142_dec_del_bpl_d1;
    dec_del_bpl_we0 <= grp_decode_fu_142_dec_del_bpl_we0;
    dec_del_bpl_we1 <= grp_decode_fu_142_dec_del_bpl_we1;
    dec_del_dhx_address0 <= grp_decode_fu_142_dec_del_dhx_address0;
    dec_del_dhx_address1 <= grp_decode_fu_142_dec_del_dhx_address1;
    dec_del_dhx_ce0 <= grp_decode_fu_142_dec_del_dhx_ce0;
    dec_del_dhx_ce1 <= grp_decode_fu_142_dec_del_dhx_ce1;
    dec_del_dhx_d0 <= grp_decode_fu_142_dec_del_dhx_d0;
    dec_del_dhx_d1 <= grp_decode_fu_142_dec_del_dhx_d1;
    dec_del_dhx_we0 <= grp_decode_fu_142_dec_del_dhx_we0;
    dec_del_dhx_we1 <= grp_decode_fu_142_dec_del_dhx_we1;
    dec_del_dltx_address0 <= grp_decode_fu_142_dec_del_dltx_address0;
    dec_del_dltx_address1 <= grp_decode_fu_142_dec_del_dltx_address1;
    dec_del_dltx_ce0 <= grp_decode_fu_142_dec_del_dltx_ce0;
    dec_del_dltx_ce1 <= grp_decode_fu_142_dec_del_dltx_ce1;
    dec_del_dltx_d0 <= grp_decode_fu_142_dec_del_dltx_d0;
    dec_del_dltx_d1 <= grp_decode_fu_142_dec_del_dltx_d1;
    dec_del_dltx_we0 <= grp_decode_fu_142_dec_del_dltx_we0;
    dec_del_dltx_we1 <= grp_decode_fu_142_dec_del_dltx_we1;

    dec_deth_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_deth_i, grp_decode_fu_142_dec_deth_o, grp_decode_fu_142_dec_deth_o_ap_vld, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_deth_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            dec_deth_o <= grp_decode_fu_142_dec_deth_o;
        else 
            dec_deth_o <= dec_deth_i;
        end if; 
    end process;

    dec_deth_o_ap_vld <= grp_decode_fu_142_dec_deth_o_ap_vld;

    dec_detl_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_detl_i, grp_decode_fu_142_dec_detl_o, grp_decode_fu_142_dec_detl_o_ap_vld, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_detl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            dec_detl_o <= grp_decode_fu_142_dec_detl_o;
        else 
            dec_detl_o <= dec_detl_i;
        end if; 
    end process;

    dec_detl_o_ap_vld <= grp_decode_fu_142_dec_detl_o_ap_vld;

    dec_nbh_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_nbh_i, grp_decode_fu_142_dec_nbh_o, grp_decode_fu_142_dec_nbh_o_ap_vld, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_nbh_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dec_nbh_o <= grp_decode_fu_142_dec_nbh_o;
        else 
            dec_nbh_o <= dec_nbh_i;
        end if; 
    end process;

    dec_nbh_o_ap_vld <= grp_decode_fu_142_dec_nbh_o_ap_vld;

    dec_nbl_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_nbl_i, grp_decode_fu_142_dec_nbl_o, grp_decode_fu_142_dec_nbl_o_ap_vld, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_nbl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            dec_nbl_o <= grp_decode_fu_142_dec_nbl_o;
        else 
            dec_nbl_o <= dec_nbl_i;
        end if; 
    end process;

    dec_nbl_o_ap_vld <= grp_decode_fu_142_dec_nbl_o_ap_vld;

    dec_ph1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_ph1_i, grp_decode_fu_142_dec_ph1_o, grp_decode_fu_142_dec_ph1_o_ap_vld, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_ph1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dec_ph1_o <= grp_decode_fu_142_dec_ph1_o;
        else 
            dec_ph1_o <= dec_ph1_i;
        end if; 
    end process;

    dec_ph1_o_ap_vld <= grp_decode_fu_142_dec_ph1_o_ap_vld;

    dec_ph2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_ph2_i, grp_decode_fu_142_dec_ph2_o, grp_decode_fu_142_dec_ph2_o_ap_vld, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_ph2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dec_ph2_o <= grp_decode_fu_142_dec_ph2_o;
        else 
            dec_ph2_o <= dec_ph2_i;
        end if; 
    end process;

    dec_ph2_o_ap_vld <= grp_decode_fu_142_dec_ph2_o_ap_vld;

    dec_plt1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_plt1_i, grp_decode_fu_142_dec_plt1_o, grp_decode_fu_142_dec_plt1_o_ap_vld, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_plt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dec_plt1_o <= grp_decode_fu_142_dec_plt1_o;
        else 
            dec_plt1_o <= dec_plt1_i;
        end if; 
    end process;

    dec_plt1_o_ap_vld <= grp_decode_fu_142_dec_plt1_o_ap_vld;

    dec_plt2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_plt2_i, grp_decode_fu_142_dec_plt2_o, grp_decode_fu_142_dec_plt2_o_ap_vld, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_plt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dec_plt2_o <= grp_decode_fu_142_dec_plt2_o;
        else 
            dec_plt2_o <= dec_plt2_i;
        end if; 
    end process;

    dec_plt2_o_ap_vld <= grp_decode_fu_142_dec_plt2_o_ap_vld;

    dec_rh1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_rh1_i, grp_decode_fu_142_dec_rh1_o, grp_decode_fu_142_dec_rh1_o_ap_vld, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_rh1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dec_rh1_o <= grp_decode_fu_142_dec_rh1_o;
        else 
            dec_rh1_o <= dec_rh1_i;
        end if; 
    end process;

    dec_rh1_o_ap_vld <= grp_decode_fu_142_dec_rh1_o_ap_vld;

    dec_rh2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_rh2_i, grp_decode_fu_142_dec_rh2_o, grp_decode_fu_142_dec_rh2_o_ap_vld, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_rh2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            dec_rh2_o <= grp_decode_fu_142_dec_rh2_o;
        else 
            dec_rh2_o <= dec_rh2_i;
        end if; 
    end process;

    dec_rh2_o_ap_vld <= grp_decode_fu_142_dec_rh2_o_ap_vld;

    dec_rlt1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_rlt1_i, grp_decode_fu_142_dec_rlt1_o, grp_decode_fu_142_dec_rlt1_o_ap_vld, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_rlt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dec_rlt1_o <= grp_decode_fu_142_dec_rlt1_o;
        else 
            dec_rlt1_o <= dec_rlt1_i;
        end if; 
    end process;

    dec_rlt1_o_ap_vld <= grp_decode_fu_142_dec_rlt1_o_ap_vld;

    dec_rlt2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln782_reg_286, dec_rlt2_i, grp_decode_fu_142_dec_rlt2_o, grp_decode_fu_142_dec_rlt2_o_ap_vld, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((icmp_ln782_reg_286 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_decode_fu_142_dec_rlt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            dec_rlt2_o <= grp_decode_fu_142_dec_rlt2_o;
        else 
            dec_rlt2_o <= dec_rlt2_i;
        end if; 
    end process;

    dec_rlt2_o_ap_vld <= grp_decode_fu_142_dec_rlt2_o_ap_vld;
    grp_decode_fu_142_ap_start <= grp_decode_fu_142_ap_start_reg;
    icmp_ln782_fu_213_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_4) < unsigned(ap_const_lv13_1F40)) else "0";
    or_ln786_fu_262_p2 <= (i_4_reg_279_pp0_iter1_reg or ap_const_lv13_1);
    result_address0 <= zext_ln786_fu_267_p1(13 - 1 downto 0);
    result_address1 <= zext_ln782_fu_248_p1(13 - 1 downto 0);

    result_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_ce1 <= ap_const_logic_1;
        else 
            result_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    result_d0 <= xout2;
    result_d1 <= xout1;

    result_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_we0 <= ap_const_logic_1;
        else 
            result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_we1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            result_we1 <= ap_const_logic_1;
        else 
            result_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_219_p4 <= ap_sig_allocacmp_i_4(12 downto 1);
    trunc_ln784_fu_234_p1 <= compressed_q0(8 - 1 downto 0);
    zext_ln782_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_279_pp0_iter1_reg),64));
    zext_ln784_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_219_p4),64));
    zext_ln786_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln786_fu_262_p2),64));
end behav;
