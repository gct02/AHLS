// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_adpcm_main_Pipeline_adpcm_main_label12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_samples_address0,
        input_samples_ce0,
        input_samples_q0,
        input_samples_address1,
        input_samples_ce1,
        input_samples_q1,
        compressed_address0,
        compressed_ce0,
        compressed_we0,
        compressed_d0,
        rlt1_i,
        rlt1_o,
        rlt1_o_ap_vld,
        al1_i,
        al1_o,
        al1_o_ap_vld,
        rlt2_i,
        rlt2_o,
        rlt2_o_ap_vld,
        al2_i,
        al2_o,
        al2_o_ap_vld,
        detl_i,
        detl_o,
        detl_o_ap_vld,
        il,
        il_ap_vld,
        nbl_i,
        nbl_o,
        nbl_o_ap_vld,
        plt1_i,
        plt1_o,
        plt1_o_ap_vld,
        plt2_i,
        plt2_o,
        plt2_o_ap_vld,
        rh1_i,
        rh1_o,
        rh1_o_ap_vld,
        ah1_i,
        ah1_o,
        ah1_o_ap_vld,
        rh2_i,
        rh2_o,
        rh2_o_ap_vld,
        ah2_i,
        ah2_o,
        ah2_o_ap_vld,
        deth_i,
        deth_o,
        deth_o_ap_vld,
        nbh_i,
        nbh_o,
        nbh_o_ap_vld,
        ph1_i,
        ph1_o,
        ph1_o_ap_vld,
        ph2_i,
        ph2_o,
        ph2_o_ap_vld,
        tqmf_address0,
        tqmf_ce0,
        tqmf_we0,
        tqmf_d0,
        tqmf_q0,
        tqmf_address1,
        tqmf_ce1,
        tqmf_we1,
        tqmf_d1,
        tqmf_q1,
        delay_bpl_address0,
        delay_bpl_ce0,
        delay_bpl_we0,
        delay_bpl_d0,
        delay_bpl_q0,
        delay_bpl_address1,
        delay_bpl_ce1,
        delay_bpl_we1,
        delay_bpl_d1,
        delay_bpl_q1,
        delay_dltx_address0,
        delay_dltx_ce0,
        delay_dltx_we0,
        delay_dltx_d0,
        delay_dltx_q0,
        delay_dltx_address1,
        delay_dltx_ce1,
        delay_dltx_we1,
        delay_dltx_d1,
        delay_dltx_q1,
        delay_bph_address0,
        delay_bph_ce0,
        delay_bph_we0,
        delay_bph_d0,
        delay_bph_q0,
        delay_bph_address1,
        delay_bph_ce1,
        delay_bph_we1,
        delay_bph_d1,
        delay_bph_q1,
        delay_dhx_address0,
        delay_dhx_ce0,
        delay_dhx_we0,
        delay_dhx_d0,
        delay_dhx_q0,
        delay_dhx_address1,
        delay_dhx_ce1,
        delay_dhx_we1,
        delay_dhx_d1,
        delay_dhx_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 25'd1;
parameter    ap_ST_fsm_pp0_stage1 = 25'd2;
parameter    ap_ST_fsm_pp0_stage2 = 25'd4;
parameter    ap_ST_fsm_pp0_stage3 = 25'd8;
parameter    ap_ST_fsm_pp0_stage4 = 25'd16;
parameter    ap_ST_fsm_pp0_stage5 = 25'd32;
parameter    ap_ST_fsm_pp0_stage6 = 25'd64;
parameter    ap_ST_fsm_pp0_stage7 = 25'd128;
parameter    ap_ST_fsm_pp0_stage8 = 25'd256;
parameter    ap_ST_fsm_pp0_stage9 = 25'd512;
parameter    ap_ST_fsm_pp0_stage10 = 25'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 25'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 25'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 25'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 25'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 25'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 25'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 25'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 25'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 25'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 25'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 25'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 25'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 25'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_samples_address0;
output   input_samples_ce0;
input  [31:0] input_samples_q0;
output  [12:0] input_samples_address1;
output   input_samples_ce1;
input  [31:0] input_samples_q1;
output  [11:0] compressed_address0;
output   compressed_ce0;
output   compressed_we0;
output  [31:0] compressed_d0;
input  [30:0] rlt1_i;
output  [30:0] rlt1_o;
output   rlt1_o_ap_vld;
input  [15:0] al1_i;
output  [15:0] al1_o;
output   al1_o_ap_vld;
input  [30:0] rlt2_i;
output  [30:0] rlt2_o;
output   rlt2_o_ap_vld;
input  [14:0] al2_i;
output  [14:0] al2_o;
output   al2_o_ap_vld;
input  [14:0] detl_i;
output  [14:0] detl_o;
output   detl_o_ap_vld;
output  [5:0] il;
output   il_ap_vld;
input  [14:0] nbl_i;
output  [14:0] nbl_o;
output   nbl_o_ap_vld;
input  [31:0] plt1_i;
output  [31:0] plt1_o;
output   plt1_o_ap_vld;
input  [31:0] plt2_i;
output  [31:0] plt2_o;
output   plt2_o_ap_vld;
input  [30:0] rh1_i;
output  [30:0] rh1_o;
output   rh1_o_ap_vld;
input  [15:0] ah1_i;
output  [15:0] ah1_o;
output   ah1_o_ap_vld;
input  [30:0] rh2_i;
output  [30:0] rh2_o;
output   rh2_o_ap_vld;
input  [14:0] ah2_i;
output  [14:0] ah2_o;
output   ah2_o_ap_vld;
input  [14:0] deth_i;
output  [14:0] deth_o;
output   deth_o_ap_vld;
input  [14:0] nbh_i;
output  [14:0] nbh_o;
output   nbh_o_ap_vld;
input  [31:0] ph1_i;
output  [31:0] ph1_o;
output   ph1_o_ap_vld;
input  [31:0] ph2_i;
output  [31:0] ph2_o;
output   ph2_o_ap_vld;
output  [4:0] tqmf_address0;
output   tqmf_ce0;
output   tqmf_we0;
output  [31:0] tqmf_d0;
input  [31:0] tqmf_q0;
output  [4:0] tqmf_address1;
output   tqmf_ce1;
output   tqmf_we1;
output  [31:0] tqmf_d1;
input  [31:0] tqmf_q1;
output  [2:0] delay_bpl_address0;
output   delay_bpl_ce0;
output   delay_bpl_we0;
output  [31:0] delay_bpl_d0;
input  [31:0] delay_bpl_q0;
output  [2:0] delay_bpl_address1;
output   delay_bpl_ce1;
output   delay_bpl_we1;
output  [31:0] delay_bpl_d1;
input  [31:0] delay_bpl_q1;
output  [2:0] delay_dltx_address0;
output   delay_dltx_ce0;
output   delay_dltx_we0;
output  [15:0] delay_dltx_d0;
input  [15:0] delay_dltx_q0;
output  [2:0] delay_dltx_address1;
output   delay_dltx_ce1;
output   delay_dltx_we1;
output  [15:0] delay_dltx_d1;
input  [15:0] delay_dltx_q1;
output  [2:0] delay_bph_address0;
output   delay_bph_ce0;
output   delay_bph_we0;
output  [31:0] delay_bph_d0;
input  [31:0] delay_bph_q0;
output  [2:0] delay_bph_address1;
output   delay_bph_ce1;
output   delay_bph_we1;
output  [31:0] delay_bph_d1;
input  [31:0] delay_bph_q1;
output  [2:0] delay_dhx_address0;
output   delay_dhx_ce0;
output   delay_dhx_we0;
output  [13:0] delay_dhx_d0;
input  [13:0] delay_dhx_q0;
output  [2:0] delay_dhx_address1;
output   delay_dhx_ce1;
output   delay_dhx_we1;
output  [13:0] delay_dhx_d1;
input  [13:0] delay_dhx_q1;

reg ap_idle;
reg input_samples_ce0;
reg input_samples_ce1;
reg compressed_ce0;
reg compressed_we0;
reg[30:0] rlt1_o;
reg[15:0] al1_o;
reg[30:0] rlt2_o;
reg[14:0] al2_o;
reg[14:0] detl_o;
reg[14:0] nbl_o;
reg[31:0] plt1_o;
reg[31:0] plt2_o;
reg[30:0] rh1_o;
reg[15:0] ah1_o;
reg[30:0] rh2_o;
reg[14:0] ah2_o;
reg[14:0] deth_o;
reg[14:0] nbh_o;
reg[31:0] ph1_o;
reg[31:0] ph2_o;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln778_reg_271;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_pp0_stage24_subdone;
reg   [12:0] i_reg_265;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln778_fu_208_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [11:0] tmp_s_reg_290;
wire    ap_block_pp0_stage24_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    grp_encode_fu_138_ap_start;
wire    grp_encode_fu_138_ap_done;
wire    grp_encode_fu_138_ap_idle;
wire    grp_encode_fu_138_ap_ready;
wire   [30:0] grp_encode_fu_138_rlt1_o;
wire    grp_encode_fu_138_rlt1_o_ap_vld;
wire   [15:0] grp_encode_fu_138_al1_o;
wire    grp_encode_fu_138_al1_o_ap_vld;
wire   [30:0] grp_encode_fu_138_rlt2_o;
wire    grp_encode_fu_138_rlt2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_al2_o;
wire    grp_encode_fu_138_al2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_detl_o;
wire    grp_encode_fu_138_detl_o_ap_vld;
wire   [5:0] grp_encode_fu_138_il;
wire    grp_encode_fu_138_il_ap_vld;
wire   [14:0] grp_encode_fu_138_nbl_o;
wire    grp_encode_fu_138_nbl_o_ap_vld;
wire   [31:0] grp_encode_fu_138_plt1_o;
wire    grp_encode_fu_138_plt1_o_ap_vld;
wire   [31:0] grp_encode_fu_138_plt2_o;
wire    grp_encode_fu_138_plt2_o_ap_vld;
wire   [30:0] grp_encode_fu_138_rh1_o;
wire    grp_encode_fu_138_rh1_o_ap_vld;
wire   [15:0] grp_encode_fu_138_ah1_o;
wire    grp_encode_fu_138_ah1_o_ap_vld;
wire   [30:0] grp_encode_fu_138_rh2_o;
wire    grp_encode_fu_138_rh2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_ah2_o;
wire    grp_encode_fu_138_ah2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_deth_o;
wire    grp_encode_fu_138_deth_o_ap_vld;
wire   [14:0] grp_encode_fu_138_nbh_o;
wire    grp_encode_fu_138_nbh_o_ap_vld;
wire   [31:0] grp_encode_fu_138_ph1_o;
wire    grp_encode_fu_138_ph1_o_ap_vld;
wire   [31:0] grp_encode_fu_138_ph2_o;
wire    grp_encode_fu_138_ph2_o_ap_vld;
wire   [4:0] grp_encode_fu_138_tqmf_address0;
wire    grp_encode_fu_138_tqmf_ce0;
wire    grp_encode_fu_138_tqmf_we0;
wire   [31:0] grp_encode_fu_138_tqmf_d0;
wire   [4:0] grp_encode_fu_138_tqmf_address1;
wire    grp_encode_fu_138_tqmf_ce1;
wire    grp_encode_fu_138_tqmf_we1;
wire   [31:0] grp_encode_fu_138_tqmf_d1;
wire   [2:0] grp_encode_fu_138_delay_bpl_address0;
wire    grp_encode_fu_138_delay_bpl_ce0;
wire    grp_encode_fu_138_delay_bpl_we0;
wire   [31:0] grp_encode_fu_138_delay_bpl_d0;
wire   [2:0] grp_encode_fu_138_delay_bpl_address1;
wire    grp_encode_fu_138_delay_bpl_ce1;
wire    grp_encode_fu_138_delay_bpl_we1;
wire   [31:0] grp_encode_fu_138_delay_bpl_d1;
wire   [2:0] grp_encode_fu_138_delay_dltx_address0;
wire    grp_encode_fu_138_delay_dltx_ce0;
wire    grp_encode_fu_138_delay_dltx_we0;
wire   [15:0] grp_encode_fu_138_delay_dltx_d0;
wire   [2:0] grp_encode_fu_138_delay_dltx_address1;
wire    grp_encode_fu_138_delay_dltx_ce1;
wire    grp_encode_fu_138_delay_dltx_we1;
wire   [15:0] grp_encode_fu_138_delay_dltx_d1;
wire   [2:0] grp_encode_fu_138_delay_bph_address0;
wire    grp_encode_fu_138_delay_bph_ce0;
wire    grp_encode_fu_138_delay_bph_we0;
wire   [31:0] grp_encode_fu_138_delay_bph_d0;
wire   [2:0] grp_encode_fu_138_delay_bph_address1;
wire    grp_encode_fu_138_delay_bph_ce1;
wire    grp_encode_fu_138_delay_bph_we1;
wire   [31:0] grp_encode_fu_138_delay_bph_d1;
wire   [2:0] grp_encode_fu_138_delay_dhx_address0;
wire    grp_encode_fu_138_delay_dhx_ce0;
wire    grp_encode_fu_138_delay_dhx_we0;
wire   [13:0] grp_encode_fu_138_delay_dhx_d0;
wire   [2:0] grp_encode_fu_138_delay_dhx_address1;
wire    grp_encode_fu_138_delay_dhx_ce1;
wire    grp_encode_fu_138_delay_dhx_we1;
wire   [13:0] grp_encode_fu_138_delay_dhx_d1;
wire   [7:0] grp_encode_fu_138_ap_return;
reg    grp_encode_fu_138_ap_start_reg;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_pp0_stage22;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage24;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_pp0_stage18;
wire   [63:0] zext_ln778_fu_214_p1;
wire   [63:0] zext_ln780_fu_225_p1;
wire   [63:0] zext_ln780_1_fu_254_p1;
reg   [12:0] i_4_fu_96;
wire   [12:0] add_ln778_fu_239_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage2_11001;
wire   [12:0] or_ln780_fu_219_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [24:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_encode_fu_138_ap_start_reg = 1'b0;
#0 i_4_fu_96 = 13'd0;
#0 ap_done_reg = 1'b0;
end

adpcm_main_encode grp_encode_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_encode_fu_138_ap_start),
    .ap_done(grp_encode_fu_138_ap_done),
    .ap_idle(grp_encode_fu_138_ap_idle),
    .ap_ready(grp_encode_fu_138_ap_ready),
    .xin1(input_samples_q1),
    .xin2(input_samples_q0),
    .rlt1_i(rlt1_i),
    .rlt1_o(grp_encode_fu_138_rlt1_o),
    .rlt1_o_ap_vld(grp_encode_fu_138_rlt1_o_ap_vld),
    .al1_i(al1_i),
    .al1_o(grp_encode_fu_138_al1_o),
    .al1_o_ap_vld(grp_encode_fu_138_al1_o_ap_vld),
    .rlt2_i(rlt2_i),
    .rlt2_o(grp_encode_fu_138_rlt2_o),
    .rlt2_o_ap_vld(grp_encode_fu_138_rlt2_o_ap_vld),
    .al2_i(al2_i),
    .al2_o(grp_encode_fu_138_al2_o),
    .al2_o_ap_vld(grp_encode_fu_138_al2_o_ap_vld),
    .detl_i(detl_i),
    .detl_o(grp_encode_fu_138_detl_o),
    .detl_o_ap_vld(grp_encode_fu_138_detl_o_ap_vld),
    .il(grp_encode_fu_138_il),
    .il_ap_vld(grp_encode_fu_138_il_ap_vld),
    .nbl_i(nbl_i),
    .nbl_o(grp_encode_fu_138_nbl_o),
    .nbl_o_ap_vld(grp_encode_fu_138_nbl_o_ap_vld),
    .plt1_i(plt1_i),
    .plt1_o(grp_encode_fu_138_plt1_o),
    .plt1_o_ap_vld(grp_encode_fu_138_plt1_o_ap_vld),
    .plt2_i(plt2_i),
    .plt2_o(grp_encode_fu_138_plt2_o),
    .plt2_o_ap_vld(grp_encode_fu_138_plt2_o_ap_vld),
    .rh1_i(rh1_i),
    .rh1_o(grp_encode_fu_138_rh1_o),
    .rh1_o_ap_vld(grp_encode_fu_138_rh1_o_ap_vld),
    .ah1_i(ah1_i),
    .ah1_o(grp_encode_fu_138_ah1_o),
    .ah1_o_ap_vld(grp_encode_fu_138_ah1_o_ap_vld),
    .rh2_i(rh2_i),
    .rh2_o(grp_encode_fu_138_rh2_o),
    .rh2_o_ap_vld(grp_encode_fu_138_rh2_o_ap_vld),
    .ah2_i(ah2_i),
    .ah2_o(grp_encode_fu_138_ah2_o),
    .ah2_o_ap_vld(grp_encode_fu_138_ah2_o_ap_vld),
    .deth_i(deth_i),
    .deth_o(grp_encode_fu_138_deth_o),
    .deth_o_ap_vld(grp_encode_fu_138_deth_o_ap_vld),
    .nbh_i(nbh_i),
    .nbh_o(grp_encode_fu_138_nbh_o),
    .nbh_o_ap_vld(grp_encode_fu_138_nbh_o_ap_vld),
    .ph1_i(ph1_i),
    .ph1_o(grp_encode_fu_138_ph1_o),
    .ph1_o_ap_vld(grp_encode_fu_138_ph1_o_ap_vld),
    .ph2_i(ph2_i),
    .ph2_o(grp_encode_fu_138_ph2_o),
    .ph2_o_ap_vld(grp_encode_fu_138_ph2_o_ap_vld),
    .tqmf_address0(grp_encode_fu_138_tqmf_address0),
    .tqmf_ce0(grp_encode_fu_138_tqmf_ce0),
    .tqmf_we0(grp_encode_fu_138_tqmf_we0),
    .tqmf_d0(grp_encode_fu_138_tqmf_d0),
    .tqmf_q0(tqmf_q0),
    .tqmf_address1(grp_encode_fu_138_tqmf_address1),
    .tqmf_ce1(grp_encode_fu_138_tqmf_ce1),
    .tqmf_we1(grp_encode_fu_138_tqmf_we1),
    .tqmf_d1(grp_encode_fu_138_tqmf_d1),
    .tqmf_q1(tqmf_q1),
    .delay_bpl_address0(grp_encode_fu_138_delay_bpl_address0),
    .delay_bpl_ce0(grp_encode_fu_138_delay_bpl_ce0),
    .delay_bpl_we0(grp_encode_fu_138_delay_bpl_we0),
    .delay_bpl_d0(grp_encode_fu_138_delay_bpl_d0),
    .delay_bpl_q0(delay_bpl_q0),
    .delay_bpl_address1(grp_encode_fu_138_delay_bpl_address1),
    .delay_bpl_ce1(grp_encode_fu_138_delay_bpl_ce1),
    .delay_bpl_we1(grp_encode_fu_138_delay_bpl_we1),
    .delay_bpl_d1(grp_encode_fu_138_delay_bpl_d1),
    .delay_bpl_q1(delay_bpl_q1),
    .delay_dltx_address0(grp_encode_fu_138_delay_dltx_address0),
    .delay_dltx_ce0(grp_encode_fu_138_delay_dltx_ce0),
    .delay_dltx_we0(grp_encode_fu_138_delay_dltx_we0),
    .delay_dltx_d0(grp_encode_fu_138_delay_dltx_d0),
    .delay_dltx_q0(delay_dltx_q0),
    .delay_dltx_address1(grp_encode_fu_138_delay_dltx_address1),
    .delay_dltx_ce1(grp_encode_fu_138_delay_dltx_ce1),
    .delay_dltx_we1(grp_encode_fu_138_delay_dltx_we1),
    .delay_dltx_d1(grp_encode_fu_138_delay_dltx_d1),
    .delay_dltx_q1(delay_dltx_q1),
    .delay_bph_address0(grp_encode_fu_138_delay_bph_address0),
    .delay_bph_ce0(grp_encode_fu_138_delay_bph_ce0),
    .delay_bph_we0(grp_encode_fu_138_delay_bph_we0),
    .delay_bph_d0(grp_encode_fu_138_delay_bph_d0),
    .delay_bph_q0(delay_bph_q0),
    .delay_bph_address1(grp_encode_fu_138_delay_bph_address1),
    .delay_bph_ce1(grp_encode_fu_138_delay_bph_ce1),
    .delay_bph_we1(grp_encode_fu_138_delay_bph_we1),
    .delay_bph_d1(grp_encode_fu_138_delay_bph_d1),
    .delay_bph_q1(delay_bph_q1),
    .delay_dhx_address0(grp_encode_fu_138_delay_dhx_address0),
    .delay_dhx_ce0(grp_encode_fu_138_delay_dhx_ce0),
    .delay_dhx_we0(grp_encode_fu_138_delay_dhx_we0),
    .delay_dhx_d0(grp_encode_fu_138_delay_dhx_d0),
    .delay_dhx_q0(delay_dhx_q0),
    .delay_dhx_address1(grp_encode_fu_138_delay_dhx_address1),
    .delay_dhx_ce1(grp_encode_fu_138_delay_dhx_ce1),
    .delay_dhx_we1(grp_encode_fu_138_delay_dhx_we1),
    .delay_dhx_d1(grp_encode_fu_138_delay_dhx_d1),
    .delay_dhx_q1(delay_dhx_q1),
    .ap_return(grp_encode_fu_138_ap_return)
);

adpcm_main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage24_subdone) & (1'b1 == ap_CS_fsm_pp0_stage24))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_encode_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln778_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_encode_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_encode_fu_138_ap_ready == 1'b1)) begin
            grp_encode_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_4_fu_96 <= 13'd0;
    end else if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage24_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24))) begin
        i_4_fu_96 <= add_ln778_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_265 <= ap_sig_allocacmp_i;
        icmp_ln778_reg_271 <= icmp_ln778_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage24_11001) & (1'b1 == ap_CS_fsm_pp0_stage24))) begin
        tmp_s_reg_290 <= {{i_reg_265[12:1]}};
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage21) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_ah1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21))) begin
        ah1_o = grp_encode_fu_138_ah1_o;
    end else begin
        ah1_o = ah1_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_ah2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20))) begin
        ah2_o = grp_encode_fu_138_ah2_o;
    end else begin
        ah2_o = ah2_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (grp_encode_fu_138_al1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        al1_o = grp_encode_fu_138_al1_o;
    end else begin
        al1_o = al1_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (grp_encode_fu_138_al2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        al2_o = grp_encode_fu_138_al2_o;
    end else begin
        al2_o = al2_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage24_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 13'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        compressed_ce0 = 1'b1;
    end else begin
        compressed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        compressed_we0 = 1'b1;
    end else begin
        compressed_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_deth_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17))) begin
        deth_o = grp_encode_fu_138_deth_o;
    end else begin
        deth_o = deth_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_detl_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23))) begin
        detl_o = grp_encode_fu_138_detl_o;
    end else begin
        detl_o = detl_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_samples_ce0 = 1'b1;
    end else begin
        input_samples_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_samples_ce1 = 1'b1;
    end else begin
        input_samples_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_nbh_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
        nbh_o = grp_encode_fu_138_nbh_o;
    end else begin
        nbh_o = nbh_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_nbl_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22))) begin
        nbl_o = grp_encode_fu_138_nbl_o;
    end else begin
        nbl_o = nbl_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_ph1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17))) begin
        ph1_o = grp_encode_fu_138_ph1_o;
    end else begin
        ph1_o = ph1_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_ph2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17))) begin
        ph2_o = grp_encode_fu_138_ph2_o;
    end else begin
        ph2_o = ph2_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_plt1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23))) begin
        plt1_o = grp_encode_fu_138_plt1_o;
    end else begin
        plt1_o = plt1_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_plt2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23))) begin
        plt2_o = grp_encode_fu_138_plt2_o;
    end else begin
        plt2_o = plt2_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_rh1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
        rh1_o = grp_encode_fu_138_rh1_o;
    end else begin
        rh1_o = rh1_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_rh2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rh2_o = grp_encode_fu_138_rh2_o;
    end else begin
        rh2_o = rh2_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_rlt1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22))) begin
        rlt1_o = grp_encode_fu_138_rlt1_o;
    end else begin
        rlt1_o = rlt1_i;
    end
end

always @ (*) begin
    if (((icmp_ln778_reg_271 == 1'd1) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (grp_encode_fu_138_rlt2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        rlt2_o = grp_encode_fu_138_rlt2_o;
    end else begin
        rlt2_o = rlt2_i;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln778_fu_239_p2 = (i_reg_265 + 13'd2);

assign ah1_o_ap_vld = grp_encode_fu_138_ah1_o_ap_vld;

assign ah2_o_ap_vld = grp_encode_fu_138_ah2_o_ap_vld;

assign al1_o_ap_vld = grp_encode_fu_138_al1_o_ap_vld;

assign al2_o_ap_vld = grp_encode_fu_138_al2_o_ap_vld;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign compressed_address0 = zext_ln780_1_fu_254_p1;

assign compressed_d0 = grp_encode_fu_138_ap_return;

assign delay_bph_address0 = grp_encode_fu_138_delay_bph_address0;

assign delay_bph_address1 = grp_encode_fu_138_delay_bph_address1;

assign delay_bph_ce0 = grp_encode_fu_138_delay_bph_ce0;

assign delay_bph_ce1 = grp_encode_fu_138_delay_bph_ce1;

assign delay_bph_d0 = grp_encode_fu_138_delay_bph_d0;

assign delay_bph_d1 = grp_encode_fu_138_delay_bph_d1;

assign delay_bph_we0 = grp_encode_fu_138_delay_bph_we0;

assign delay_bph_we1 = grp_encode_fu_138_delay_bph_we1;

assign delay_bpl_address0 = grp_encode_fu_138_delay_bpl_address0;

assign delay_bpl_address1 = grp_encode_fu_138_delay_bpl_address1;

assign delay_bpl_ce0 = grp_encode_fu_138_delay_bpl_ce0;

assign delay_bpl_ce1 = grp_encode_fu_138_delay_bpl_ce1;

assign delay_bpl_d0 = grp_encode_fu_138_delay_bpl_d0;

assign delay_bpl_d1 = grp_encode_fu_138_delay_bpl_d1;

assign delay_bpl_we0 = grp_encode_fu_138_delay_bpl_we0;

assign delay_bpl_we1 = grp_encode_fu_138_delay_bpl_we1;

assign delay_dhx_address0 = grp_encode_fu_138_delay_dhx_address0;

assign delay_dhx_address1 = grp_encode_fu_138_delay_dhx_address1;

assign delay_dhx_ce0 = grp_encode_fu_138_delay_dhx_ce0;

assign delay_dhx_ce1 = grp_encode_fu_138_delay_dhx_ce1;

assign delay_dhx_d0 = grp_encode_fu_138_delay_dhx_d0;

assign delay_dhx_d1 = grp_encode_fu_138_delay_dhx_d1;

assign delay_dhx_we0 = grp_encode_fu_138_delay_dhx_we0;

assign delay_dhx_we1 = grp_encode_fu_138_delay_dhx_we1;

assign delay_dltx_address0 = grp_encode_fu_138_delay_dltx_address0;

assign delay_dltx_address1 = grp_encode_fu_138_delay_dltx_address1;

assign delay_dltx_ce0 = grp_encode_fu_138_delay_dltx_ce0;

assign delay_dltx_ce1 = grp_encode_fu_138_delay_dltx_ce1;

assign delay_dltx_d0 = grp_encode_fu_138_delay_dltx_d0;

assign delay_dltx_d1 = grp_encode_fu_138_delay_dltx_d1;

assign delay_dltx_we0 = grp_encode_fu_138_delay_dltx_we0;

assign delay_dltx_we1 = grp_encode_fu_138_delay_dltx_we1;

assign deth_o_ap_vld = grp_encode_fu_138_deth_o_ap_vld;

assign detl_o_ap_vld = grp_encode_fu_138_detl_o_ap_vld;

assign grp_encode_fu_138_ap_start = grp_encode_fu_138_ap_start_reg;

assign icmp_ln778_fu_208_p2 = ((ap_sig_allocacmp_i < 13'd8000) ? 1'b1 : 1'b0);

assign il = grp_encode_fu_138_il;

assign il_ap_vld = grp_encode_fu_138_il_ap_vld;

assign input_samples_address0 = zext_ln780_fu_225_p1;

assign input_samples_address1 = zext_ln778_fu_214_p1;

assign nbh_o_ap_vld = grp_encode_fu_138_nbh_o_ap_vld;

assign nbl_o_ap_vld = grp_encode_fu_138_nbl_o_ap_vld;

assign or_ln780_fu_219_p2 = (ap_sig_allocacmp_i | 13'd1);

assign ph1_o_ap_vld = grp_encode_fu_138_ph1_o_ap_vld;

assign ph2_o_ap_vld = grp_encode_fu_138_ph2_o_ap_vld;

assign plt1_o_ap_vld = grp_encode_fu_138_plt1_o_ap_vld;

assign plt2_o_ap_vld = grp_encode_fu_138_plt2_o_ap_vld;

assign rh1_o_ap_vld = grp_encode_fu_138_rh1_o_ap_vld;

assign rh2_o_ap_vld = grp_encode_fu_138_rh2_o_ap_vld;

assign rlt1_o_ap_vld = grp_encode_fu_138_rlt1_o_ap_vld;

assign rlt2_o_ap_vld = grp_encode_fu_138_rlt2_o_ap_vld;

assign tqmf_address0 = grp_encode_fu_138_tqmf_address0;

assign tqmf_address1 = grp_encode_fu_138_tqmf_address1;

assign tqmf_ce0 = grp_encode_fu_138_tqmf_ce0;

assign tqmf_ce1 = grp_encode_fu_138_tqmf_ce1;

assign tqmf_d0 = grp_encode_fu_138_tqmf_d0;

assign tqmf_d1 = grp_encode_fu_138_tqmf_d1;

assign tqmf_we0 = grp_encode_fu_138_tqmf_we0;

assign tqmf_we1 = grp_encode_fu_138_tqmf_we1;

assign zext_ln778_fu_214_p1 = ap_sig_allocacmp_i;

assign zext_ln780_1_fu_254_p1 = tmp_s_reg_290;

assign zext_ln780_fu_225_p1 = or_ln780_fu_219_p2;

endmodule //adpcm_main_adpcm_main_Pipeline_adpcm_main_label12
