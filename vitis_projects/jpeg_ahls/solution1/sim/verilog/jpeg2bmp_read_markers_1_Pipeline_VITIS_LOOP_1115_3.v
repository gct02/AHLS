// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_read_markers_1_Pipeline_VITIS_LOOP_1115_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        add_ln1104,
        count_reload,
        p_xhtbl_huffval_2,
        p_jinfo_ac_xhuff_tbl_huffval_address0,
        p_jinfo_ac_xhuff_tbl_huffval_ce0,
        p_jinfo_ac_xhuff_tbl_huffval_we0,
        p_jinfo_ac_xhuff_tbl_huffval_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] add_ln1104;
input  [11:0] count_reload;
input  [12:0] p_xhtbl_huffval_2;
output  [10:0] p_jinfo_ac_xhuff_tbl_huffval_address0;
output   p_jinfo_ac_xhuff_tbl_huffval_ce0;
output   p_jinfo_ac_xhuff_tbl_huffval_we0;
output  [7:0] p_jinfo_ac_xhuff_tbl_huffval_d0;

reg ap_idle;
reg p_jinfo_ac_xhuff_tbl_huffval_ce0;
reg p_jinfo_ac_xhuff_tbl_huffval_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1115_fu_102_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln1116_fu_152_p1;
reg   [11:0] i_fu_50;
wire   [11:0] add_ln1115_fu_108_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_i_1;
reg   [7:0] inc_i16_i98_fu_54;
wire   [7:0] add_ln878_fu_118_p2;
reg   [7:0] ap_sig_allocacmp_inc_i16_i98_load;
wire   [10:0] trunc_ln1116_fu_124_p1;
wire   [12:0] shl_ln6_fu_128_p3;
wire   [12:0] add_ln1116_fu_136_p2;
wire   [10:0] lshr_ln1_fu_142_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_fu_50 = 12'd0;
#0 inc_i16_i98_fu_54 = 8'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln1115_fu_102_p2 == 1'd0)) begin
            i_fu_50 <= add_ln1115_fu_108_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln1115_fu_102_p2 == 1'd0)) begin
            inc_i16_i98_fu_54 <= add_ln878_fu_118_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            inc_i16_i98_fu_54 <= add_ln1104;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1115_fu_102_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_50;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_inc_i16_i98_load = add_ln1104;
    end else begin
        ap_sig_allocacmp_inc_i16_i98_load = inc_i16_i98_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_jinfo_ac_xhuff_tbl_huffval_ce0 = 1'b1;
    end else begin
        p_jinfo_ac_xhuff_tbl_huffval_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1115_fu_102_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        p_jinfo_ac_xhuff_tbl_huffval_we0 = 1'b1;
    end else begin
        p_jinfo_ac_xhuff_tbl_huffval_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1115_fu_108_p2 = (ap_sig_allocacmp_i_1 + 12'd1);

assign add_ln1116_fu_136_p2 = (shl_ln6_fu_128_p3 + p_xhtbl_huffval_2);

assign add_ln878_fu_118_p2 = (ap_sig_allocacmp_inc_i16_i98_load + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1115_fu_102_p2 = ((ap_sig_allocacmp_i_1 == count_reload) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_142_p4 = {{add_ln1116_fu_136_p2[12:2]}};

assign p_jinfo_ac_xhuff_tbl_huffval_address0 = zext_ln1116_fu_152_p1;

assign p_jinfo_ac_xhuff_tbl_huffval_d0 = ap_sig_allocacmp_inc_i16_i98_load;

assign shl_ln6_fu_128_p3 = {{trunc_ln1116_fu_124_p1}, {2'd0}};

assign trunc_ln1116_fu_124_p1 = ap_sig_allocacmp_i_1[10:0];

assign zext_ln1116_fu_152_p1 = lshr_ln1_fu_142_p4;

endmodule //jpeg2bmp_read_markers_1_Pipeline_VITIS_LOOP_1115_3
