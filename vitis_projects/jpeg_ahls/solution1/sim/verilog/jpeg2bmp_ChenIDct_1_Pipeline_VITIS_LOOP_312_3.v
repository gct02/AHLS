// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_ChenIDct_1_Pipeline_VITIS_LOOP_312_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        IDCTBuff_address0,
        IDCTBuff_ce0,
        IDCTBuff_we0,
        IDCTBuff_d0,
        IDCTBuff_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] y;
output  [8:0] IDCTBuff_address0;
output   IDCTBuff_ce0;
output   IDCTBuff_we0;
output  [31:0] IDCTBuff_d0;
input  [31:0] IDCTBuff_q0;

reg ap_idle;
reg[8:0] IDCTBuff_address0;
reg IDCTBuff_ce0;
reg IDCTBuff_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln312_fu_107_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln312_reg_294;
wire    ap_block_pp0_stage1_11001;
reg   [8:0] IDCTBuff_addr_reg_298;
reg   [8:0] IDCTBuff_addr_reg_298_pp0_iter1_reg;
wire   [0:0] addr_cmp_fu_158_p2;
reg   [0:0] addr_cmp_reg_303;
reg   [31:0] IDCTBuff_load_reg_308;
reg   [0:0] tmp_12_reg_313;
reg   [27:0] tmp_s_reg_318;
reg   [27:0] tmp_1_reg_323;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln313_fu_150_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] reuse_addr_reg_fu_58;
wire    ap_loop_init;
reg   [31:0] reuse_reg_fu_62;
wire  signed [31:0] sext_ln313_fu_258_p1;
reg   [6:0] i_fu_66;
wire   [6:0] i_11_fu_113_p2;
wire    ap_block_pp0_stage0;
wire   [5:0] trunc_ln172_fu_119_p1;
wire   [7:0] shl_ln_fu_123_p3;
wire   [9:0] zext_ln172_fu_131_p1;
wire   [9:0] aptr_fu_135_p2;
wire   [7:0] lshr_ln_fu_140_p4;
wire   [31:0] reuse_select_fu_177_p3;
wire   [0:0] tmp_fu_183_p3;
wire   [31:0] select_ln313_fu_191_p3;
wire   [31:0] add_ln313_fu_199_p2;
wire   [31:0] sub_ln313_fu_213_p2;
wire   [28:0] zext_ln313_1_fu_239_p1;
wire   [28:0] sub_ln313_1_fu_242_p2;
wire   [28:0] zext_ln313_2_fu_248_p1;
wire   [28:0] select_ln313_1_fu_251_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    ap_idle_pp0_0to0;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to2;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 reuse_addr_reg_fu_58 = 64'd0;
#0 reuse_reg_fu_62 = 32'd0;
#0 i_fu_66 = 7'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_66 <= 7'd0;
    end else if (((icmp_ln312_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_66 <= i_11_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        reuse_addr_reg_fu_58 <= 64'd18446744073709551615;
    end else if (((icmp_ln312_fu_107_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reuse_addr_reg_fu_58 <= zext_ln313_fu_150_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            reuse_reg_fu_62 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            reuse_reg_fu_62 <= sext_ln313_fu_258_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IDCTBuff_addr_reg_298[7 : 0] <= zext_ln313_fu_150_p1[7 : 0];
        IDCTBuff_addr_reg_298_pp0_iter1_reg[7 : 0] <= IDCTBuff_addr_reg_298[7 : 0];
        addr_cmp_reg_303 <= addr_cmp_fu_158_p2;
        icmp_ln312_reg_294 <= icmp_ln312_fu_107_p2;
        tmp_12_reg_313 <= add_ln313_fu_199_p2[32'd31];
        tmp_1_reg_323 <= {{add_ln313_fu_199_p2[31:4]}};
        tmp_s_reg_318 <= {{sub_ln313_fu_213_p2[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDCTBuff_load_reg_308 <= IDCTBuff_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDCTBuff_address0 = IDCTBuff_addr_reg_298_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IDCTBuff_address0 = zext_ln313_fu_150_p1;
    end else begin
        IDCTBuff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        IDCTBuff_ce0 = 1'b1;
    end else begin
        IDCTBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDCTBuff_we0 = 1'b1;
    end else begin
        IDCTBuff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln312_fu_107_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln312_reg_294 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to0 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IDCTBuff_d0 = $signed(select_ln313_1_fu_251_p3);

assign add_ln313_fu_199_p2 = (reuse_select_fu_177_p3 + select_ln313_fu_191_p3);

assign addr_cmp_fu_158_p2 = ((reuse_addr_reg_fu_58 == zext_ln313_fu_150_p1) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign aptr_fu_135_p2 = (zext_ln172_fu_131_p1 + y);

assign i_11_fu_113_p2 = (i_fu_66 + 7'd1);

assign icmp_ln312_fu_107_p2 = ((i_fu_66 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln_fu_140_p4 = {{aptr_fu_135_p2[9:2]}};

assign reuse_select_fu_177_p3 = ((addr_cmp_reg_303[0:0] == 1'b1) ? reuse_reg_fu_62 : IDCTBuff_load_reg_308);

assign select_ln313_1_fu_251_p3 = ((tmp_12_reg_313[0:0] == 1'b1) ? sub_ln313_1_fu_242_p2 : zext_ln313_2_fu_248_p1);

assign select_ln313_fu_191_p3 = ((tmp_fu_183_p3[0:0] == 1'b1) ? 32'd4294967288 : 32'd8);

assign sext_ln313_fu_258_p1 = $signed(select_ln313_1_fu_251_p3);

assign shl_ln_fu_123_p3 = {{trunc_ln172_fu_119_p1}, {2'd0}};

assign sub_ln313_1_fu_242_p2 = (29'd0 - zext_ln313_1_fu_239_p1);

assign sub_ln313_fu_213_p2 = (32'd0 - add_ln313_fu_199_p2);

assign tmp_fu_183_p3 = reuse_select_fu_177_p3[32'd31];

assign trunc_ln172_fu_119_p1 = i_fu_66[5:0];

assign zext_ln172_fu_131_p1 = shl_ln_fu_123_p3;

assign zext_ln313_1_fu_239_p1 = tmp_s_reg_318;

assign zext_ln313_2_fu_248_p1 = tmp_1_reg_323;

assign zext_ln313_fu_150_p1 = lshr_ln_fu_140_p4;

always @ (posedge ap_clk) begin
    IDCTBuff_addr_reg_298[8] <= 1'b0;
    IDCTBuff_addr_reg_298_pp0_iter1_reg[8] <= 1'b0;
end

endmodule //jpeg2bmp_ChenIDct_1_Pipeline_VITIS_LOOP_312_3
