// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_322_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_buf,
        HuffBuff_address0,
        HuffBuff_ce0,
        HuffBuff_q0,
        QuantBuff_address0,
        QuantBuff_ce0,
        QuantBuff_we0,
        QuantBuff_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] out_buf;
output  [7:0] HuffBuff_address0;
output   HuffBuff_ce0;
input  [31:0] HuffBuff_q0;
output  [5:0] QuantBuff_address0;
output   QuantBuff_ce0;
output   QuantBuff_we0;
output  [31:0] QuantBuff_d0;

reg ap_idle;
reg HuffBuff_ce0;
reg QuantBuff_ce0;
reg QuantBuff_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln322_fu_104_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] zigzag_index_address0;
reg    zigzag_index_ce0;
wire   [5:0] zigzag_index_q0;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln322_fu_116_p1;
reg   [63:0] zext_ln322_reg_174;
reg   [63:0] zext_ln322_reg_174_pp0_iter1_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln323_1_fu_153_p1;
reg   [6:0] i_fu_46;
wire   [6:0] add_ln322_fu_110_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_6;
wire   [7:0] shl_ln8_fu_126_p3;
wire   [9:0] zext_ln323_fu_134_p1;
wire   [9:0] add_ln323_fu_138_p2;
wire   [7:0] lshr_ln4_fu_143_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_46 = 7'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_322_1_zigzag_index_ROM_AUTO_1R #(
    .DataWidth( 6 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
zigzag_index_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(zigzag_index_address0),
    .ce0(zigzag_index_ce0),
    .q0(zigzag_index_q0)
);

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln322_fu_104_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_46 <= add_ln322_fu_110_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_46 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln322_reg_174[6 : 0] <= zext_ln322_fu_116_p1[6 : 0];
        zext_ln322_reg_174_pp0_iter1_reg[6 : 0] <= zext_ln322_reg_174[6 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        HuffBuff_ce0 = 1'b1;
    end else begin
        HuffBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        QuantBuff_ce0 = 1'b1;
    end else begin
        QuantBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        QuantBuff_we0 = 1'b1;
    end else begin
        QuantBuff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln322_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_6 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_6 = i_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zigzag_index_ce0 = 1'b1;
    end else begin
        zigzag_index_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HuffBuff_address0 = zext_ln323_1_fu_153_p1;

assign QuantBuff_address0 = zext_ln322_reg_174_pp0_iter1_reg;

assign QuantBuff_d0 = HuffBuff_q0;

assign add_ln322_fu_110_p2 = (ap_sig_allocacmp_i_6 + 7'd1);

assign add_ln323_fu_138_p2 = (zext_ln323_fu_134_p1 + out_buf);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln322_fu_104_p2 = ((ap_sig_allocacmp_i_6 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln4_fu_143_p4 = {{add_ln323_fu_138_p2[9:2]}};

assign shl_ln8_fu_126_p3 = {{zigzag_index_q0}, {2'd0}};

assign zext_ln322_fu_116_p1 = ap_sig_allocacmp_i_6;

assign zext_ln323_1_fu_153_p1 = lshr_ln4_fu_143_p4;

assign zext_ln323_fu_134_p1 = shl_ln8_fu_126_p3;

assign zigzag_index_address0 = zext_ln322_fu_116_p1;

always @ (posedge ap_clk) begin
    zext_ln322_reg_174[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln322_reg_174_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_322_1
