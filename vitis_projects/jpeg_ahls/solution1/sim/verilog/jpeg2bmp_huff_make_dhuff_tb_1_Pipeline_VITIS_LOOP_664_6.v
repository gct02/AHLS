// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_huff_make_dhuff_tb_1_Pipeline_VITIS_LOOP_664_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln671,
        p_dhtbl_maxcode_address0,
        p_dhtbl_maxcode_ce0,
        p_dhtbl_maxcode_we0,
        p_dhtbl_maxcode_d0,
        p_dhtbl_maxcode_address1,
        p_dhtbl_maxcode_ce1,
        p_dhtbl_maxcode_we1,
        p_dhtbl_maxcode_d1,
        select_ln669,
        p_dhtbl_mincode_address0,
        p_dhtbl_mincode_ce0,
        p_dhtbl_mincode_we0,
        p_dhtbl_mincode_d0,
        select_ln668,
        p_dhtbl_valptr_address0,
        p_dhtbl_valptr_ce0,
        p_dhtbl_valptr_we0,
        p_dhtbl_valptr_d0,
        p_xhtbl_bits_offset,
        huffcode_address0,
        huffcode_ce0,
        huffcode_q0,
        huffcode_address1,
        huffcode_ce1,
        huffcode_q1,
        p_dhtbl_ml_out,
        p_dhtbl_ml_out_ap_vld,
        p_jinfo_dc_xhuff_tbl_bits_address0,
        p_jinfo_dc_xhuff_tbl_bits_ce0,
        p_jinfo_dc_xhuff_tbl_bits_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] select_ln671;
output  [6:0] p_dhtbl_maxcode_address0;
output   p_dhtbl_maxcode_ce0;
output   p_dhtbl_maxcode_we0;
output  [31:0] p_dhtbl_maxcode_d0;
output  [6:0] p_dhtbl_maxcode_address1;
output   p_dhtbl_maxcode_ce1;
output   p_dhtbl_maxcode_we1;
output  [31:0] p_dhtbl_maxcode_d1;
input  [5:0] select_ln669;
output  [6:0] p_dhtbl_mincode_address0;
output   p_dhtbl_mincode_ce0;
output   p_dhtbl_mincode_we0;
output  [10:0] p_dhtbl_mincode_d0;
input  [5:0] select_ln668;
output  [6:0] p_dhtbl_valptr_address0;
output   p_dhtbl_valptr_ce0;
output   p_dhtbl_valptr_we0;
output  [10:0] p_dhtbl_valptr_d0;
input  [9:0] p_xhtbl_bits_offset;
output  [8:0] huffcode_address0;
output   huffcode_ce0;
input  [31:0] huffcode_q0;
output  [8:0] huffcode_address1;
output   huffcode_ce1;
input  [31:0] huffcode_q1;
output  [31:0] p_dhtbl_ml_out;
output   p_dhtbl_ml_out_ap_vld;
output  [7:0] p_jinfo_dc_xhuff_tbl_bits_address0;
output   p_jinfo_dc_xhuff_tbl_bits_ce0;
input  [7:0] p_jinfo_dc_xhuff_tbl_bits_q0;

reg ap_idle;
reg p_dhtbl_maxcode_ce0;
reg p_dhtbl_maxcode_we0;
reg p_dhtbl_maxcode_ce1;
reg p_dhtbl_maxcode_we1;
reg p_dhtbl_mincode_ce0;
reg p_dhtbl_mincode_we0;
reg p_dhtbl_valptr_ce0;
reg p_dhtbl_valptr_we0;
reg huffcode_ce0;
reg huffcode_ce1;
reg p_dhtbl_ml_out_ap_vld;
reg p_jinfo_dc_xhuff_tbl_bits_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln664_fu_208_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] l_reg_402;
reg   [0:0] icmp_ln664_reg_408;
reg   [6:0] p_dhtbl_maxcode_addr_reg_417;
wire   [5:0] add_ln669_fu_274_p2;
reg   [5:0] add_ln669_reg_422;
wire   [0:0] icmp_ln665_fu_306_p2;
reg   [0:0] icmp_ln665_reg_427;
wire   [63:0] zext_ln665_2_fu_242_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln671_2_fu_269_p1;
wire   [63:0] zext_ln668_fu_284_p1;
wire   [63:0] zext_ln669_fu_312_p1;
wire   [63:0] zext_ln671_fu_329_p1;
wire   [63:0] zext_ln669_1_fu_353_p1;
reg   [4:0] p_dhtbl_ml_4_fu_64;
wire   [4:0] add_ln664_fu_247_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_l;
reg   [31:0] p_fu_68;
wire   [31:0] p_5_fu_334_p2;
reg   [31:0] p_dhtbl_ml_fu_72;
wire   [31:0] l_cast8_fu_340_p1;
wire    ap_block_pp0_stage0_01001;
wire   [6:0] shl_ln_fu_214_p3;
wire   [9:0] zext_ln665_fu_222_p1;
wire   [9:0] add_ln665_fu_226_p2;
wire   [7:0] lshr_ln_fu_232_p4;
wire   [5:0] zext_ln671_1_fu_261_p1;
wire   [5:0] add_ln671_fu_264_p2;
wire   [5:0] add_ln668_fu_279_p2;
wire   [8:0] trunc_ln664_fu_289_p1;
wire   [8:0] add_ln670_fu_317_p2;
wire   [8:0] zext_ln665_4_fu_302_p1;
wire   [8:0] p_4_fu_323_p2;
wire   [31:0] zext_ln665_3_fu_298_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 p_dhtbl_ml_4_fu_64 = 5'd0;
#0 p_fu_68 = 32'd0;
#0 p_dhtbl_ml_fu_72 = 32'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln664_fu_208_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            p_dhtbl_ml_4_fu_64 <= add_ln664_fu_247_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            p_dhtbl_ml_4_fu_64 <= 5'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
                        p_dhtbl_ml_fu_72[0] <= 1'b1;
            p_dhtbl_ml_fu_72[1] <= 1'b0;
            p_dhtbl_ml_fu_72[2] <= 1'b0;
            p_dhtbl_ml_fu_72[3] <= 1'b0;
            p_dhtbl_ml_fu_72[4] <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln665_fu_306_p2 == 1'd0))) begin
                        p_dhtbl_ml_fu_72[4 : 0] <= l_cast8_fu_340_p1[4 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_fu_68 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln665_fu_306_p2 == 1'd0))) begin
            p_fu_68 <= p_5_fu_334_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln669_reg_422 <= add_ln669_fu_274_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln664_reg_408 <= icmp_ln664_fu_208_p2;
        icmp_ln665_reg_427 <= icmp_ln665_fu_306_p2;
        l_reg_402 <= ap_sig_allocacmp_l;
        p_dhtbl_maxcode_addr_reg_417[5 : 0] <= zext_ln671_2_fu_269_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln664_fu_208_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_l = 5'd1;
    end else begin
        ap_sig_allocacmp_l = p_dhtbl_ml_4_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffcode_ce0 = 1'b1;
    end else begin
        huffcode_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        huffcode_ce1 = 1'b1;
    end else begin
        huffcode_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dhtbl_maxcode_ce0 = 1'b1;
    end else begin
        p_dhtbl_maxcode_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dhtbl_maxcode_ce1 = 1'b1;
    end else begin
        p_dhtbl_maxcode_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln665_reg_427 == 1'd0))) begin
        p_dhtbl_maxcode_we0 = 1'b1;
    end else begin
        p_dhtbl_maxcode_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln665_fu_306_p2 == 1'd1))) begin
        p_dhtbl_maxcode_we1 = 1'b1;
    end else begin
        p_dhtbl_maxcode_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_dhtbl_mincode_ce0 = 1'b1;
    end else begin
        p_dhtbl_mincode_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln665_reg_427 == 1'd0))) begin
        p_dhtbl_mincode_we0 = 1'b1;
    end else begin
        p_dhtbl_mincode_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln664_reg_408 == 1'd1))) begin
        p_dhtbl_ml_out_ap_vld = 1'b1;
    end else begin
        p_dhtbl_ml_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dhtbl_valptr_ce0 = 1'b1;
    end else begin
        p_dhtbl_valptr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln665_fu_306_p2 == 1'd0))) begin
        p_dhtbl_valptr_we0 = 1'b1;
    end else begin
        p_dhtbl_valptr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_jinfo_dc_xhuff_tbl_bits_ce0 = 1'b1;
    end else begin
        p_jinfo_dc_xhuff_tbl_bits_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln664_fu_247_p2 = (ap_sig_allocacmp_l + 5'd1);

assign add_ln665_fu_226_p2 = (zext_ln665_fu_222_p1 + p_xhtbl_bits_offset);

assign add_ln668_fu_279_p2 = (select_ln668 + zext_ln671_1_fu_261_p1);

assign add_ln669_fu_274_p2 = (select_ln669 + zext_ln671_1_fu_261_p1);

assign add_ln670_fu_317_p2 = ($signed(trunc_ln664_fu_289_p1) + $signed(9'd511));

assign add_ln671_fu_264_p2 = (select_ln671 + zext_ln671_1_fu_261_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign huffcode_address0 = zext_ln671_fu_329_p1;

assign huffcode_address1 = zext_ln669_fu_312_p1;

assign icmp_ln664_fu_208_p2 = ((ap_sig_allocacmp_l == 5'd17) ? 1'b1 : 1'b0);

assign icmp_ln665_fu_306_p2 = ((p_jinfo_dc_xhuff_tbl_bits_q0 == 8'd0) ? 1'b1 : 1'b0);

assign l_cast8_fu_340_p1 = l_reg_402;

assign lshr_ln_fu_232_p4 = {{add_ln665_fu_226_p2[9:2]}};

assign p_4_fu_323_p2 = (add_ln670_fu_317_p2 + zext_ln665_4_fu_302_p1);

assign p_5_fu_334_p2 = (zext_ln665_3_fu_298_p1 + p_fu_68);

assign p_dhtbl_maxcode_address0 = p_dhtbl_maxcode_addr_reg_417;

assign p_dhtbl_maxcode_address1 = zext_ln671_2_fu_269_p1;

assign p_dhtbl_maxcode_d0 = huffcode_q0;

assign p_dhtbl_maxcode_d1 = 32'd4294967295;

assign p_dhtbl_mincode_address0 = zext_ln669_1_fu_353_p1;

assign p_dhtbl_mincode_d0 = huffcode_q1[10:0];

assign p_dhtbl_ml_out = p_dhtbl_ml_fu_72;

assign p_dhtbl_valptr_address0 = zext_ln668_fu_284_p1;

assign p_dhtbl_valptr_d0 = p_fu_68[10:0];

assign p_jinfo_dc_xhuff_tbl_bits_address0 = zext_ln665_2_fu_242_p1;

assign shl_ln_fu_214_p3 = {{ap_sig_allocacmp_l}, {2'd0}};

assign trunc_ln664_fu_289_p1 = p_fu_68[8:0];

assign zext_ln665_2_fu_242_p1 = lshr_ln_fu_232_p4;

assign zext_ln665_3_fu_298_p1 = p_jinfo_dc_xhuff_tbl_bits_q0;

assign zext_ln665_4_fu_302_p1 = p_jinfo_dc_xhuff_tbl_bits_q0;

assign zext_ln665_fu_222_p1 = shl_ln_fu_214_p3;

assign zext_ln668_fu_284_p1 = add_ln668_fu_279_p2;

assign zext_ln669_1_fu_353_p1 = add_ln669_reg_422;

assign zext_ln669_fu_312_p1 = p_fu_68;

assign zext_ln671_1_fu_261_p1 = l_reg_402;

assign zext_ln671_2_fu_269_p1 = add_ln671_fu_264_p2;

assign zext_ln671_fu_329_p1 = p_4_fu_323_p2;

always @ (posedge ap_clk) begin
    p_dhtbl_maxcode_addr_reg_417[6] <= 1'b0;
    p_dhtbl_ml_fu_72[31:5] <= 27'b000000000000000000000000000;
end

endmodule //jpeg2bmp_huff_make_dhuff_tb_1_Pipeline_VITIS_LOOP_664_6
