// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_buf_getv_Pipeline_VITIS_LOOP_594_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        read_position_load,
        CurHuffReadBuf_load,
        p,
        temp_out,
        temp_out_ap_vld,
        p_03_out,
        p_03_out_ap_vld,
        current_read_byte_load_out,
        current_read_byte_load_out_ap_vld,
        select_ln555_out,
        select_ln555_out_ap_vld,
        current_read_byte_i,
        current_read_byte_o,
        current_read_byte_o_ap_vld,
        read_position,
        read_position_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] read_position_load;
input  [7:0] CurHuffReadBuf_load;
input  [30:0] p;
output  [7:0] temp_out;
output   temp_out_ap_vld;
output  [31:0] p_03_out;
output   p_03_out_ap_vld;
output  [31:0] current_read_byte_load_out;
output   current_read_byte_load_out_ap_vld;
output  [7:0] select_ln555_out;
output   select_ln555_out_ap_vld;
input  [31:0] current_read_byte_i;
output  [31:0] current_read_byte_o;
output   current_read_byte_o_ap_vld;
output  [31:0] read_position;
output   read_position_ap_vld;
output  [0:0] ap_return;

reg ap_idle;
reg[7:0] temp_out;
reg temp_out_ap_vld;
reg p_03_out_ap_vld;
reg current_read_byte_load_out_ap_vld;
reg select_ln555_out_ap_vld;
reg[31:0] current_read_byte_o;
reg current_read_byte_o_ap_vld;
reg read_position_ap_vld;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln595_fu_171_p2;
wire   [0:0] icmp_ln594_fu_161_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_127_p4;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
wire   [31:0] or_ln_fu_207_p3;
wire   [31:0] add_ln605_fu_221_p2;
reg   [31:0] p_03_fu_66;
wire   [31:0] p_9_fu_233_p2;
wire   [31:0] p_cast_fu_135_p1;
wire    ap_loop_init;
reg   [7:0] temp_fu_70;
wire   [7:0] select_ln555_fu_194_p3;
wire   [7:0] temp_load_1_load_fu_254_p1;
reg   [31:0] empty_fu_74;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln555_fu_188_p2;
wire   [7:0] add_ln555_fu_182_p2;
wire   [23:0] trunc_ln604_fu_203_p1;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_79;
reg    ap_condition_208;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 p_03_fu_66 = 32'd0;
#0 temp_fu_70 = 8'd0;
#0 empty_fu_74 = 32'd0;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln594_fu_161_p2 == 1'd0) | (icmp_ln595_fu_171_p2 == 1'd1)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_127_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_74 <= read_position_load;
        end else if ((1'b1 == ap_condition_208)) begin
            empty_fu_74 <= add_ln605_fu_221_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_03_fu_66 <= p_cast_fu_135_p1;
        end else if ((1'b1 == ap_condition_208)) begin
            p_03_fu_66 <= p_9_fu_233_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            temp_fu_70 <= CurHuffReadBuf_load;
        end else if ((1'b1 == ap_condition_208)) begin
            temp_fu_70 <= select_ln555_fu_194_p3;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln594_fu_161_p2 == 1'd0) | (icmp_ln595_fu_171_p2 == 1'd1)))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_79)) begin
        if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd1))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 = 1'd0;
        end else if ((icmp_ln594_fu_161_p2 == 1'd0)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln594_fu_161_p2 == 1'd0) | (icmp_ln595_fu_171_p2 == 1'd1)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_127_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_read_byte_load_out_ap_vld = 1'b1;
    end else begin
        current_read_byte_load_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_read_byte_o = or_ln_fu_207_p3;
    end else begin
        current_read_byte_o = current_read_byte_i;
    end
end

always @ (*) begin
    if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        current_read_byte_o_ap_vld = 1'b1;
    end else begin
        current_read_byte_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln594_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        p_03_out_ap_vld = 1'b1;
    end else begin
        p_03_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        read_position_ap_vld = 1'b1;
    end else begin
        read_position_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln555_out_ap_vld = 1'b1;
    end else begin
        select_ln555_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((icmp_ln594_fu_161_p2 == 1'd0)) begin
            temp_out = temp_load_1_load_fu_254_p1;
        end else if (((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd1))) begin
            temp_out = temp_fu_70;
        end else begin
            temp_out = 'bx;
        end
    end else begin
        temp_out = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln594_fu_161_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        temp_out_ap_vld = 1'b1;
    end else begin
        temp_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln555_fu_182_p2 = (temp_fu_70 + 8'd1);

assign add_ln605_fu_221_p2 = (empty_fu_74 + 32'd8);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_208 = ((icmp_ln594_fu_161_p2 == 1'd1) & (icmp_ln595_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_79 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign current_read_byte_load_out = current_read_byte_i;

assign icmp_ln555_fu_188_p2 = ((temp_fu_70 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln594_fu_161_p2 = (($signed(p_03_fu_66) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln595_fu_171_p2 = (($signed(empty_fu_74) > $signed(32'd23)) ? 1'b1 : 1'b0);

assign or_ln_fu_207_p3 = {{trunc_ln604_fu_203_p1}, {temp_fu_70}};

assign p_03_out = p_03_fu_66;

assign p_9_fu_233_p2 = ($signed(p_03_fu_66) + $signed(32'd4294967288));

assign p_cast_fu_135_p1 = p;

assign read_position = (empty_fu_74 + 32'd8);

assign select_ln555_fu_194_p3 = ((icmp_ln555_fu_188_p2[0:0] == 1'b1) ? 8'd1 : add_ln555_fu_182_p2);

assign select_ln555_out = ((icmp_ln555_fu_188_p2[0:0] == 1'b1) ? 8'd1 : add_ln555_fu_182_p2);

assign temp_load_1_load_fu_254_p1 = temp_fu_70;

assign trunc_ln604_fu_203_p1 = current_read_byte_i[23:0];

endmodule //jpeg2bmp_buf_getv_Pipeline_VITIS_LOOP_594_1
