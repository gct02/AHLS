-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_huff_make_dhuff_tb_2_Pipeline_VITIS_LOOP_664_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    huffcode_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    huffcode_ce0 : OUT STD_LOGIC;
    huffcode_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    huffcode_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    huffcode_ce1 : OUT STD_LOGIC;
    huffcode_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dhtbl_ml_out : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_dhtbl_ml_out_ap_vld : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_jinfo_ac_dhuff_tbl_maxcode_ce0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_we0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_jinfo_ac_dhuff_tbl_maxcode_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_jinfo_ac_dhuff_tbl_maxcode_ce1 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_we1 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_jinfo_dc_xhuff_tbl_bits_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_jinfo_dc_xhuff_tbl_bits_ce0 : OUT STD_LOGIC;
    p_jinfo_dc_xhuff_tbl_bits_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_jinfo_ac_dhuff_tbl_valptr_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_jinfo_ac_dhuff_tbl_valptr_ce0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_valptr_we0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_valptr_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_jinfo_ac_dhuff_tbl_mincode_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_jinfo_ac_dhuff_tbl_mincode_ce0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_mincode_we0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_mincode_d0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of jpeg2bmp_huff_make_dhuff_tb_2_Pipeline_VITIS_LOOP_664_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln664_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal l_reg_285 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln664_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal p_jinfo_ac_dhuff_tbl_valptr_addr_reg_305 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln665_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln664_fu_165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln669_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln671_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_dhtbl_ml_1_fu_42 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln664_fu_173_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_l : STD_LOGIC_VECTOR (4 downto 0);
    signal p_fu_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_2_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_dhtbl_ml_fu_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal l_cast7_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln664_1_fu_195_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln670_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln665_1_fu_208_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_1_fu_229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln665_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_262 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    p_dhtbl_ml_1_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln664_fu_159_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_dhtbl_ml_1_fu_42 <= add_ln664_fu_173_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    p_dhtbl_ml_1_fu_42 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    p_dhtbl_ml_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_dhtbl_ml_fu_50(0) <= '1';
                    p_dhtbl_ml_fu_50(1) <= '0';
                    p_dhtbl_ml_fu_50(2) <= '0';
                    p_dhtbl_ml_fu_50(3) <= '0';
                    p_dhtbl_ml_fu_50(4) <= '0';
                elsif ((ap_const_boolean_1 = ap_condition_262)) then 
                                        p_dhtbl_ml_fu_50(4 downto 0) <= l_cast7_fu_246_p1(4 downto 0);
                end if;
            end if; 
        end if;
    end process;

    p_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_fu_46 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_262)) then 
                    p_fu_46 <= p_2_fu_240_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln664_reg_290 <= icmp_ln664_fu_159_p2;
                icmp_ln665_reg_315 <= icmp_ln665_fu_212_p2;
                l_reg_285 <= ap_sig_allocacmp_l;
                    p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294(4 downto 0) <= zext_ln664_fu_165_p1(7 - 1 downto 0)(4 downto 0);
                    p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294_pp0_iter1_reg(4 downto 0) <= p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294(4 downto 0);
                    p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300(4 downto 0) <= zext_ln664_fu_165_p1(7 - 1 downto 0)(4 downto 0);
                    p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300_pp0_iter1_reg(4 downto 0) <= p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300(4 downto 0);
                    p_jinfo_ac_dhuff_tbl_valptr_addr_reg_305(4 downto 0) <= zext_ln664_fu_165_p1(7 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;
    p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294(6 downto 5) <= "00";
    p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294_pp0_iter1_reg(6 downto 5) <= "00";
    p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300(6 downto 5) <= "00";
    p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300_pp0_iter1_reg(6 downto 5) <= "00";
    p_jinfo_ac_dhuff_tbl_valptr_addr_reg_305(6 downto 5) <= "00";
    p_dhtbl_ml_fu_50(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln664_fu_173_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_l) + unsigned(ap_const_lv5_1));
    add_ln670_fu_223_p2 <= std_logic_vector(unsigned(trunc_ln664_1_fu_195_p1) + unsigned(ap_const_lv9_1FF));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_262_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln664_reg_290, icmp_ln665_fu_212_p2)
    begin
                ap_condition_262 <= ((icmp_ln664_reg_290 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln665_fu_212_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln664_fu_159_p2)
    begin
        if (((icmp_ln664_fu_159_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln664_reg_290)
    begin
        if (((icmp_ln664_reg_290 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_l_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, p_dhtbl_ml_1_fu_42, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_l <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_l <= p_dhtbl_ml_1_fu_42;
        end if; 
    end process;

    huffcode_address0 <= zext_ln671_fu_235_p1(9 - 1 downto 0);
    huffcode_address1 <= zext_ln669_fu_218_p1(9 - 1 downto 0);

    huffcode_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffcode_ce0 <= ap_const_logic_1;
        else 
            huffcode_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    huffcode_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffcode_ce1 <= ap_const_logic_1;
        else 
            huffcode_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln664_fu_159_p2 <= "1" when (ap_sig_allocacmp_l = ap_const_lv5_11) else "0";
    icmp_ln665_fu_212_p2 <= "1" when (p_jinfo_dc_xhuff_tbl_bits_q0 = ap_const_lv8_0) else "0";
    l_cast7_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_285),32));
    p_1_fu_229_p2 <= std_logic_vector(unsigned(add_ln670_fu_223_p2) + unsigned(zext_ln665_1_fu_208_p1));
    p_2_fu_240_p2 <= std_logic_vector(unsigned(zext_ln665_fu_204_p1) + unsigned(p_fu_46));
    p_dhtbl_ml_out <= p_dhtbl_ml_fu_50(7 - 1 downto 0);

    p_dhtbl_ml_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln664_reg_290)
    begin
        if (((icmp_ln664_reg_290 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dhtbl_ml_out_ap_vld <= ap_const_logic_1;
        else 
            p_dhtbl_ml_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_maxcode_address0 <= p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294_pp0_iter1_reg;
    p_jinfo_ac_dhuff_tbl_maxcode_address1 <= p_jinfo_ac_dhuff_tbl_maxcode_addr_reg_294;

    p_jinfo_ac_dhuff_tbl_maxcode_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_jinfo_ac_dhuff_tbl_maxcode_ce0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_maxcode_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_jinfo_ac_dhuff_tbl_maxcode_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_jinfo_ac_dhuff_tbl_maxcode_ce1 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_maxcode_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_maxcode_d0 <= huffcode_q0;
    p_jinfo_ac_dhuff_tbl_maxcode_d1 <= ap_const_lv32_FFFFFFFF;

    p_jinfo_ac_dhuff_tbl_maxcode_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln665_reg_315)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln665_reg_315 = ap_const_lv1_0))) then 
            p_jinfo_ac_dhuff_tbl_maxcode_we0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_maxcode_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_jinfo_ac_dhuff_tbl_maxcode_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln664_reg_290, icmp_ln665_fu_212_p2)
    begin
        if (((icmp_ln664_reg_290 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln665_fu_212_p2 = ap_const_lv1_1))) then 
            p_jinfo_ac_dhuff_tbl_maxcode_we1 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_maxcode_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_mincode_address0 <= p_jinfo_ac_dhuff_tbl_mincode_addr_reg_300_pp0_iter1_reg;

    p_jinfo_ac_dhuff_tbl_mincode_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_jinfo_ac_dhuff_tbl_mincode_ce0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_mincode_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_mincode_d0 <= huffcode_q1(11 - 1 downto 0);

    p_jinfo_ac_dhuff_tbl_mincode_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln665_reg_315)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln665_reg_315 = ap_const_lv1_0))) then 
            p_jinfo_ac_dhuff_tbl_mincode_we0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_mincode_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_valptr_address0 <= p_jinfo_ac_dhuff_tbl_valptr_addr_reg_305;

    p_jinfo_ac_dhuff_tbl_valptr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_jinfo_ac_dhuff_tbl_valptr_ce0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_valptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_valptr_d0 <= p_fu_46(11 - 1 downto 0);

    p_jinfo_ac_dhuff_tbl_valptr_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln664_reg_290, icmp_ln665_fu_212_p2)
    begin
        if (((icmp_ln664_reg_290 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln665_fu_212_p2 = ap_const_lv1_0))) then 
            p_jinfo_ac_dhuff_tbl_valptr_we0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_valptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_dc_xhuff_tbl_bits_address0 <= zext_ln664_fu_165_p1(8 - 1 downto 0);

    p_jinfo_dc_xhuff_tbl_bits_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_jinfo_dc_xhuff_tbl_bits_ce0 <= ap_const_logic_1;
        else 
            p_jinfo_dc_xhuff_tbl_bits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln664_1_fu_195_p1 <= p_fu_46(9 - 1 downto 0);
    zext_ln664_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_l),64));
    zext_ln665_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_jinfo_dc_xhuff_tbl_bits_q0),9));
    zext_ln665_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_jinfo_dc_xhuff_tbl_bits_q0),32));
    zext_ln669_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_fu_46),64));
    zext_ln671_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_fu_229_p2),64));
end behav;
