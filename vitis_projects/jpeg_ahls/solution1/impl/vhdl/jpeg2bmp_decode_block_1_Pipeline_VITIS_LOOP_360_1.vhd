-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_360_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_buf : IN STD_LOGIC_VECTOR (9 downto 0);
    IDCTBuff_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    IDCTBuff_ce0 : OUT STD_LOGIC;
    IDCTBuff_we0 : OUT STD_LOGIC;
    IDCTBuff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IDCTBuff_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_360_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln360_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln360_reg_167 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln360_fu_93_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln360_reg_171 : STD_LOGIC_VECTOR (6 downto 0);
    signal IDCTBuff_addr_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_132_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_181 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln363_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln363_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln361_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx36_fu_54 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_idx36_load : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_99_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln359_fu_107_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mptr_fu_111_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln6_fu_117_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_140_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    idx36_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                idx36_fu_54 <= ap_const_lv7_0;
            elsif (((icmp_ln360_reg_167 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                idx36_fu_54 <= add_ln360_reg_171;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    IDCTBuff_addr_reg_176(7 downto 0) <= zext_ln361_fu_127_p1(9 - 1 downto 0)(7 downto 0);
                add_ln360_reg_171 <= add_ln360_fu_93_p2;
                icmp_ln360_reg_167 <= icmp_ln360_fu_87_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln363_reg_185 <= icmp_ln363_fu_150_p2;
                tmp_reg_181 <= IDCTBuff_q0(31 downto 31);
            end if;
        end if;
    end process;
    IDCTBuff_addr_reg_176(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln360_fu_87_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln360_fu_87_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    IDCTBuff_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln360_fu_87_p2, ap_CS_fsm_state3, icmp_ln360_reg_167, IDCTBuff_addr_reg_176, tmp_fu_132_p3, tmp_reg_181, ap_CS_fsm_state2, icmp_ln363_reg_185, zext_ln361_fu_127_p1)
    begin
        if ((((icmp_ln363_reg_185 = ap_const_lv1_1) and (tmp_reg_181 = ap_const_lv1_0) and (icmp_ln360_reg_167 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_fu_132_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IDCTBuff_address0 <= IDCTBuff_addr_reg_176;
        elsif (((icmp_ln360_fu_87_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IDCTBuff_address0 <= zext_ln361_fu_127_p1(9 - 1 downto 0);
        else 
            IDCTBuff_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    IDCTBuff_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln360_fu_87_p2, ap_CS_fsm_state3, icmp_ln360_reg_167, tmp_fu_132_p3, tmp_reg_181, ap_CS_fsm_state2, icmp_ln363_reg_185)
    begin
        if ((((icmp_ln363_reg_185 = ap_const_lv1_1) and (tmp_reg_181 = ap_const_lv1_0) and (icmp_ln360_reg_167 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_fu_132_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln360_fu_87_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            IDCTBuff_ce0 <= ap_const_logic_1;
        else 
            IDCTBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IDCTBuff_d0_assign_proc : process(ap_CS_fsm_state3, icmp_ln360_reg_167, tmp_fu_132_p3, tmp_reg_181, ap_CS_fsm_state2, icmp_ln363_reg_185)
    begin
        if (((icmp_ln363_reg_185 = ap_const_lv1_1) and (tmp_reg_181 = ap_const_lv1_0) and (icmp_ln360_reg_167 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            IDCTBuff_d0 <= ap_const_lv32_FF;
        elsif (((tmp_fu_132_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IDCTBuff_d0 <= ap_const_lv32_0;
        else 
            IDCTBuff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IDCTBuff_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln360_reg_167, tmp_fu_132_p3, tmp_reg_181, ap_CS_fsm_state2, icmp_ln363_reg_185)
    begin
        if ((((icmp_ln363_reg_185 = ap_const_lv1_1) and (tmp_reg_181 = ap_const_lv1_0) and (icmp_ln360_reg_167 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_fu_132_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            IDCTBuff_we0 <= ap_const_logic_1;
        else 
            IDCTBuff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln360_fu_93_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_idx36_load) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln360_fu_87_p2)
    begin
        if (((icmp_ln360_fu_87_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_idx36_load_assign_proc : process(ap_CS_fsm_state1, idx36_fu_54, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_idx36_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_idx36_load <= idx36_fu_54;
        end if; 
    end process;

    icmp_ln360_fu_87_p2 <= "1" when (ap_sig_allocacmp_idx36_load = ap_const_lv7_40) else "0";
    icmp_ln363_fu_150_p2 <= "1" when (signed(tmp_4_fu_140_p4) > signed(ap_const_lv24_0)) else "0";
    lshr_ln6_fu_117_p4 <= mptr_fu_111_p2(9 downto 2);
    mptr_fu_111_p2 <= std_logic_vector(unsigned(zext_ln359_fu_107_p1) + unsigned(out_buf));
    shl_ln_fu_99_p3 <= (ap_sig_allocacmp_idx36_load & ap_const_lv2_0);
    tmp_4_fu_140_p4 <= IDCTBuff_q0(31 downto 8);
    tmp_fu_132_p3 <= IDCTBuff_q0(31 downto 31);
    zext_ln359_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_99_p3),10));
    zext_ln361_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_fu_117_p4),64));
end behav;
