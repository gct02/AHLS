-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_huff_make_dhuff_tb_1_Pipeline_VITIS_LOOP_664_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln671 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_dhtbl_maxcode_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_dhtbl_maxcode_ce0 : OUT STD_LOGIC;
    p_dhtbl_maxcode_we0 : OUT STD_LOGIC;
    p_dhtbl_maxcode_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_dhtbl_maxcode_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_dhtbl_maxcode_ce1 : OUT STD_LOGIC;
    p_dhtbl_maxcode_we1 : OUT STD_LOGIC;
    p_dhtbl_maxcode_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    select_ln669 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_dhtbl_mincode_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_dhtbl_mincode_ce0 : OUT STD_LOGIC;
    p_dhtbl_mincode_we0 : OUT STD_LOGIC;
    p_dhtbl_mincode_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    select_ln668 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_dhtbl_valptr_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_dhtbl_valptr_ce0 : OUT STD_LOGIC;
    p_dhtbl_valptr_we0 : OUT STD_LOGIC;
    p_dhtbl_valptr_d0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    p_xhtbl_bits_offset : IN STD_LOGIC_VECTOR (9 downto 0);
    huffcode_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    huffcode_ce0 : OUT STD_LOGIC;
    huffcode_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    huffcode_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    huffcode_ce1 : OUT STD_LOGIC;
    huffcode_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dhtbl_ml_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_dhtbl_ml_out_ap_vld : OUT STD_LOGIC;
    p_jinfo_dc_xhuff_tbl_bits_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_jinfo_dc_xhuff_tbl_bits_ce0 : OUT STD_LOGIC;
    p_jinfo_dc_xhuff_tbl_bits_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of jpeg2bmp_huff_make_dhuff_tb_1_Pipeline_VITIS_LOOP_664_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln664_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l_reg_402 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln664_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dhtbl_maxcode_addr_reg_417 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln669_fu_274_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln669_reg_422 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln665_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln665_reg_427 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln665_2_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln671_2_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln668_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln669_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln671_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln669_1_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_dhtbl_ml_4_fu_64 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln664_fu_247_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_l : STD_LOGIC_VECTOR (4 downto 0);
    signal p_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_5_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_dhtbl_ml_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal l_cast8_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal shl_ln_fu_214_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln665_fu_222_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln665_fu_226_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln671_1_fu_261_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln671_fu_264_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln668_fu_279_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln664_fu_289_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln670_fu_317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln665_4_fu_302_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_4_fu_323_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln665_3_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    p_dhtbl_ml_4_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln664_fu_208_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    p_dhtbl_ml_4_fu_64 <= add_ln664_fu_247_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    p_dhtbl_ml_4_fu_64 <= ap_const_lv5_1;
                end if;
            end if; 
        end if;
    end process;

    p_dhtbl_ml_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_dhtbl_ml_fu_72(0) <= '1';
                    p_dhtbl_ml_fu_72(1) <= '0';
                    p_dhtbl_ml_fu_72(2) <= '0';
                    p_dhtbl_ml_fu_72(3) <= '0';
                    p_dhtbl_ml_fu_72(4) <= '0';
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln665_fu_306_p2 = ap_const_lv1_0))) then 
                                        p_dhtbl_ml_fu_72(4 downto 0) <= l_cast8_fu_340_p1(4 downto 0);
                end if;
            end if; 
        end if;
    end process;

    p_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_fu_68 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln665_fu_306_p2 = ap_const_lv1_0))) then 
                    p_fu_68 <= p_5_fu_334_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln669_reg_422 <= add_ln669_fu_274_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln664_reg_408 <= icmp_ln664_fu_208_p2;
                icmp_ln665_reg_427 <= icmp_ln665_fu_306_p2;
                l_reg_402 <= ap_sig_allocacmp_l;
                    p_dhtbl_maxcode_addr_reg_417(5 downto 0) <= zext_ln671_2_fu_269_p1(7 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    p_dhtbl_maxcode_addr_reg_417(6) <= '0';
    p_dhtbl_ml_fu_72(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln664_fu_247_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_l) + unsigned(ap_const_lv5_1));
    add_ln665_fu_226_p2 <= std_logic_vector(unsigned(zext_ln665_fu_222_p1) + unsigned(p_xhtbl_bits_offset));
    add_ln668_fu_279_p2 <= std_logic_vector(unsigned(select_ln668) + unsigned(zext_ln671_1_fu_261_p1));
    add_ln669_fu_274_p2 <= std_logic_vector(unsigned(select_ln669) + unsigned(zext_ln671_1_fu_261_p1));
    add_ln670_fu_317_p2 <= std_logic_vector(unsigned(trunc_ln664_fu_289_p1) + unsigned(ap_const_lv9_1FF));
    add_ln671_fu_264_p2 <= std_logic_vector(unsigned(select_ln671) + unsigned(zext_ln671_1_fu_261_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln664_fu_208_p2)
    begin
        if (((icmp_ln664_fu_208_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_l_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, p_dhtbl_ml_4_fu_64, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_l <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_l <= p_dhtbl_ml_4_fu_64;
        end if; 
    end process;

    huffcode_address0 <= zext_ln671_fu_329_p1(9 - 1 downto 0);
    huffcode_address1 <= zext_ln669_fu_312_p1(9 - 1 downto 0);

    huffcode_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffcode_ce0 <= ap_const_logic_1;
        else 
            huffcode_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    huffcode_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            huffcode_ce1 <= ap_const_logic_1;
        else 
            huffcode_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln664_fu_208_p2 <= "1" when (ap_sig_allocacmp_l = ap_const_lv5_11) else "0";
    icmp_ln665_fu_306_p2 <= "1" when (p_jinfo_dc_xhuff_tbl_bits_q0 = ap_const_lv8_0) else "0";
    l_cast8_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_402),32));
    lshr_ln_fu_232_p4 <= add_ln665_fu_226_p2(9 downto 2);
    p_4_fu_323_p2 <= std_logic_vector(unsigned(add_ln670_fu_317_p2) + unsigned(zext_ln665_4_fu_302_p1));
    p_5_fu_334_p2 <= std_logic_vector(unsigned(zext_ln665_3_fu_298_p1) + unsigned(p_fu_68));
    p_dhtbl_maxcode_address0 <= p_dhtbl_maxcode_addr_reg_417;
    p_dhtbl_maxcode_address1 <= zext_ln671_2_fu_269_p1(7 - 1 downto 0);

    p_dhtbl_maxcode_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dhtbl_maxcode_ce0 <= ap_const_logic_1;
        else 
            p_dhtbl_maxcode_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    p_dhtbl_maxcode_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dhtbl_maxcode_ce1 <= ap_const_logic_1;
        else 
            p_dhtbl_maxcode_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_dhtbl_maxcode_d0 <= huffcode_q0;
    p_dhtbl_maxcode_d1 <= ap_const_lv32_FFFFFFFF;

    p_dhtbl_maxcode_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln665_reg_427)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln665_reg_427 = ap_const_lv1_0))) then 
            p_dhtbl_maxcode_we0 <= ap_const_logic_1;
        else 
            p_dhtbl_maxcode_we0 <= ap_const_logic_0;
        end if; 
    end process;


    p_dhtbl_maxcode_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln665_fu_306_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln665_fu_306_p2 = ap_const_lv1_1))) then 
            p_dhtbl_maxcode_we1 <= ap_const_logic_1;
        else 
            p_dhtbl_maxcode_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_dhtbl_mincode_address0 <= zext_ln669_1_fu_353_p1(7 - 1 downto 0);

    p_dhtbl_mincode_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            p_dhtbl_mincode_ce0 <= ap_const_logic_1;
        else 
            p_dhtbl_mincode_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_dhtbl_mincode_d0 <= huffcode_q1(11 - 1 downto 0);

    p_dhtbl_mincode_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln665_reg_427)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln665_reg_427 = ap_const_lv1_0))) then 
            p_dhtbl_mincode_we0 <= ap_const_logic_1;
        else 
            p_dhtbl_mincode_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_dhtbl_ml_out <= p_dhtbl_ml_fu_72;

    p_dhtbl_ml_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln664_reg_408)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln664_reg_408 = ap_const_lv1_1))) then 
            p_dhtbl_ml_out_ap_vld <= ap_const_logic_1;
        else 
            p_dhtbl_ml_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_dhtbl_valptr_address0 <= zext_ln668_fu_284_p1(7 - 1 downto 0);

    p_dhtbl_valptr_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_dhtbl_valptr_ce0 <= ap_const_logic_1;
        else 
            p_dhtbl_valptr_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_dhtbl_valptr_d0 <= p_fu_68(11 - 1 downto 0);

    p_dhtbl_valptr_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln665_fu_306_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln665_fu_306_p2 = ap_const_lv1_0))) then 
            p_dhtbl_valptr_we0 <= ap_const_logic_1;
        else 
            p_dhtbl_valptr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_dc_xhuff_tbl_bits_address0 <= zext_ln665_2_fu_242_p1(8 - 1 downto 0);

    p_jinfo_dc_xhuff_tbl_bits_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_jinfo_dc_xhuff_tbl_bits_ce0 <= ap_const_logic_1;
        else 
            p_jinfo_dc_xhuff_tbl_bits_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_214_p3 <= (ap_sig_allocacmp_l & ap_const_lv2_0);
    trunc_ln664_fu_289_p1 <= p_fu_68(9 - 1 downto 0);
    zext_ln665_2_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_232_p4),64));
    zext_ln665_3_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_jinfo_dc_xhuff_tbl_bits_q0),32));
    zext_ln665_4_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_jinfo_dc_xhuff_tbl_bits_q0),9));
    zext_ln665_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_214_p3),10));
    zext_ln668_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln668_fu_279_p2),64));
    zext_ln669_1_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln669_reg_422),64));
    zext_ln669_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_fu_68),64));
    zext_ln671_1_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_reg_402),6));
    zext_ln671_2_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln671_fu_264_p2),64));
    zext_ln671_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4_fu_323_p2),64));
end behav;
