-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_DecodeHuffman_2_Pipeline_VITIS_LOOP_688_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln577_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    l_out : OUT STD_LOGIC_VECTOR (6 downto 0);
    l_out_ap_vld : OUT STD_LOGIC;
    code_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    code_6_out_ap_vld : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    p_jinfo_ac_dhuff_tbl_maxcode_ce0 : OUT STD_LOGIC;
    p_jinfo_ac_dhuff_tbl_maxcode_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    current_read_byte_i : IN STD_LOGIC_VECTOR (31 downto 0);
    current_read_byte_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_read_byte_o_ap_vld : OUT STD_LOGIC;
    read_position_i : IN STD_LOGIC_VECTOR (31 downto 0);
    read_position_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    read_position_o_ap_vld : OUT STD_LOGIC;
    CurHuffReadBuf_i : IN STD_LOGIC_VECTOR (7 downto 0);
    CurHuffReadBuf_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    CurHuffReadBuf_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of jpeg2bmp_DecodeHuffman_2_Pipeline_VITIS_LOOP_688_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln688_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal bit_set_mask_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bit_set_mask_ce0 : STD_LOGIC;
    signal bit_set_mask_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_1_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln688_fu_134_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln688_reg_279 : STD_LOGIC_VECTOR (6 downto 0);
    signal code_reg_289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_fu_153_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_empty_phi_fu_109_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln577_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln555_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln577_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln555_fu_181_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal code_6_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal code_7_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln577_1_cast_fu_116_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal l_fu_56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln688_fu_218_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_l_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal icmp_ln555_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln555_fu_165_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln577_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln689_fu_244_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln577_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_DecodeHuffman_1_Pipeline_VITIS_LOOP_688_1_bit_set_mask_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    bit_set_mask_U : component jpeg2bmp_DecodeHuffman_1_Pipeline_VITIS_LOOP_688_1_bit_set_mask_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit_set_mask_address0,
        ce0 => bit_set_mask_ce0,
        q0 => bit_set_mask_q0);

    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    code_6_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    code_6_fu_52 <= zext_ln577_1_cast_fu_116_p1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    code_6_fu_52 <= code_7_fu_247_p3;
                end if;
            end if; 
        end if;
    end process;

    l_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                l_fu_56 <= ap_const_lv64_1;
            elsif (((icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                l_fu_56 <= add_ln688_fu_218_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                code_reg_289 <= code_6_fu_52;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                l_1_reg_274 <= ap_sig_allocacmp_l_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln688_reg_279 <= trunc_ln688_fu_134_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    CurHuffReadBuf_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, CurHuffReadBuf_i, tmp_fu_153_p3, ap_block_pp0_stage1, select_ln555_fu_181_p3)
    begin
        if (((tmp_fu_153_p3 = ap_const_lv1_1) and (icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            CurHuffReadBuf_o <= select_ln555_fu_181_p3;
        else 
            CurHuffReadBuf_o <= CurHuffReadBuf_i;
        end if; 
    end process;


    CurHuffReadBuf_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, ap_block_pp0_stage1_11001, tmp_fu_153_p3)
    begin
        if (((tmp_fu_153_p3 = ap_const_lv1_1) and (icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            CurHuffReadBuf_o_ap_vld <= ap_const_logic_1;
        else 
            CurHuffReadBuf_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln555_fu_165_p2 <= std_logic_vector(unsigned(CurHuffReadBuf_i) + unsigned(ap_const_lv8_1));
    add_ln577_fu_201_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_phi_fu_109_p4) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln688_fu_218_p2 <= std_logic_vector(unsigned(l_1_reg_274) + unsigned(ap_const_lv64_1));
    and_ln577_fu_232_p2 <= (current_read_byte_i and bit_set_mask_q0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln688_fu_142_p2)
    begin
        if (((icmp_ln688_fu_142_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_empty_phi_fu_109_p4_assign_proc : process(icmp_ln688_fu_142_p2, read_position_i, tmp_fu_153_p3, ap_phi_reg_pp0_iter0_empty_reg_106)
    begin
        if ((icmp_ln688_fu_142_p2 = ap_const_lv1_1)) then
            if ((tmp_fu_153_p3 = ap_const_lv1_0)) then 
                ap_phi_mux_empty_phi_fu_109_p4 <= read_position_i;
            elsif ((tmp_fu_153_p3 = ap_const_lv1_1)) then 
                ap_phi_mux_empty_phi_fu_109_p4 <= ap_const_lv32_7;
            else 
                ap_phi_mux_empty_phi_fu_109_p4 <= ap_phi_reg_pp0_iter0_empty_reg_106;
            end if;
        else 
            ap_phi_mux_empty_phi_fu_109_p4 <= ap_phi_reg_pp0_iter0_empty_reg_106;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_reg_106 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_l_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, l_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_l_1 <= ap_const_lv64_1;
        else 
            ap_sig_allocacmp_l_1 <= l_fu_56;
        end if; 
    end process;

    bit_set_mask_address0 <= zext_ln577_fu_213_p1(5 - 1 downto 0);

    bit_set_mask_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bit_set_mask_ce0 <= ap_const_logic_1;
        else 
            bit_set_mask_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    code_6_out <= code_6_fu_52;

    code_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln688_fu_142_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            code_6_out_ap_vld <= ap_const_logic_1;
        else 
            code_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    code_7_fu_247_p3 <= (trunc_ln689_fu_244_p1 & icmp_ln577_fu_238_p2);

    current_read_byte_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, current_read_byte_i, tmp_fu_153_p3, ap_block_pp0_stage1, zext_ln555_fu_171_p1)
    begin
        if (((tmp_fu_153_p3 = ap_const_lv1_1) and (icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            current_read_byte_o <= zext_ln555_fu_171_p1;
        else 
            current_read_byte_o <= current_read_byte_i;
        end if; 
    end process;


    current_read_byte_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, ap_block_pp0_stage1_11001, tmp_fu_153_p3)
    begin
        if (((tmp_fu_153_p3 = ap_const_lv1_1) and (icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            current_read_byte_o_ap_vld <= ap_const_logic_1;
        else 
            current_read_byte_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln555_fu_175_p2 <= "1" when (CurHuffReadBuf_i = ap_const_lv8_FF) else "0";
    icmp_ln577_fu_238_p2 <= "0" when (and_ln577_fu_232_p2 = ap_const_lv32_0) else "1";
    icmp_ln688_fu_142_p2 <= "1" when (signed(code_6_fu_52) > signed(p_jinfo_ac_dhuff_tbl_maxcode_q0)) else "0";
    l_out <= trunc_ln688_reg_279;

    l_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln688_fu_142_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            l_out_ap_vld <= ap_const_logic_1;
        else 
            l_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_jinfo_ac_dhuff_tbl_maxcode_address0 <= ap_sig_allocacmp_l_1(7 - 1 downto 0);

    p_jinfo_ac_dhuff_tbl_maxcode_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_jinfo_ac_dhuff_tbl_maxcode_ce0 <= ap_const_logic_1;
        else 
            p_jinfo_ac_dhuff_tbl_maxcode_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    read_position_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, read_position_i, ap_block_pp0_stage1, add_ln577_fu_201_p2)
    begin
        if (((icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            read_position_o <= add_ln577_fu_201_p2;
        else 
            read_position_o <= read_position_i;
        end if; 
    end process;


    read_position_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln688_fu_142_p2, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln688_fu_142_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            read_position_o_ap_vld <= ap_const_logic_1;
        else 
            read_position_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln555_fu_181_p3 <= 
        ap_const_lv8_1 when (icmp_ln555_fu_175_p2(0) = '1') else 
        add_ln555_fu_165_p2;
    tmp_fu_153_p3 <= read_position_i(31 downto 31);
    trunc_ln688_fu_134_p1 <= ap_sig_allocacmp_l_1(7 - 1 downto 0);
    trunc_ln689_fu_244_p1 <= code_reg_289(31 - 1 downto 0);
    zext_ln555_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CurHuffReadBuf_i),32));
    zext_ln577_1_cast_fu_116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln577_1),32));
    zext_ln577_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_empty_phi_fu_109_p4),64));
end behav;
