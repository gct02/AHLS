// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_814_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_data_comp_vpos_0_out,
        out_data_comp_vpos_0_out_ap_vld,
        out_data_comp_vpos12_0_out,
        out_data_comp_vpos12_0_out_ap_vld,
        out_data_comp_vpos2_0_out,
        out_data_comp_vpos2_0_out_ap_vld,
        out_data_comp_hpos_0_out,
        out_data_comp_hpos_0_out_ap_vld,
        out_data_comp_hpos3_0_out,
        out_data_comp_hpos3_0_out_ap_vld,
        out_data_comp_hpos4_0_out,
        out_data_comp_hpos4_0_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [28:0] out_data_comp_vpos_0_out;
output   out_data_comp_vpos_0_out_ap_vld;
output  [28:0] out_data_comp_vpos12_0_out;
output   out_data_comp_vpos12_0_out_ap_vld;
output  [28:0] out_data_comp_vpos2_0_out;
output   out_data_comp_vpos2_0_out_ap_vld;
output  [28:0] out_data_comp_hpos_0_out;
output   out_data_comp_hpos_0_out_ap_vld;
output  [31:0] out_data_comp_hpos3_0_out;
output   out_data_comp_hpos3_0_out_ap_vld;
output  [31:0] out_data_comp_hpos4_0_out;
output   out_data_comp_hpos4_0_out_ap_vld;

reg ap_idle;
reg out_data_comp_vpos_0_out_ap_vld;
reg out_data_comp_vpos12_0_out_ap_vld;
reg out_data_comp_vpos2_0_out_ap_vld;
reg out_data_comp_hpos_0_out_ap_vld;
reg[31:0] out_data_comp_hpos3_0_out;
reg out_data_comp_hpos3_0_out_ap_vld;
reg[31:0] out_data_comp_hpos4_0_out;
reg out_data_comp_hpos4_0_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln814_fu_140_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_loop_init;
wire   [1:0] i_load_fu_105_p1;
reg   [1:0] i_4_fu_40;
wire   [1:0] add_ln814_fu_146_p2;
reg   [1:0] ap_sig_allocacmp_i;
wire   [31:0] out_data_comp_hpos_0_fu_44;
wire   [31:0] out_data_comp_vpos2_0_fu_48;
wire   [31:0] out_data_comp_vpos12_0_fu_52;
wire   [31:0] out_data_comp_vpos_0_fu_56;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_64;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 i_4_fu_40 = 2'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln814_fu_140_p2 == 1'd0)) begin
            i_4_fu_40 <= add_ln814_fu_146_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_4_fu_40 <= 2'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln814_fu_140_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_40;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((i_load_fu_105_p1 == 2'd1) & (icmp_ln814_fu_140_p2 == 1'd0))) begin
            out_data_comp_hpos3_0_out = 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            out_data_comp_hpos3_0_out = 'bx;
        end else begin
            out_data_comp_hpos3_0_out = 'bx;
        end
    end else begin
        out_data_comp_hpos3_0_out = 'bx;
    end
end

always @ (*) begin
    if ((((i_load_fu_105_p1 == 2'd1) & (icmp_ln814_fu_140_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_data_comp_hpos3_0_out_ap_vld = 1'b1;
    end else begin
        out_data_comp_hpos3_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_64)) begin
            out_data_comp_hpos4_0_out = 32'd0;
        end else if ((ap_loop_init == 1'b1)) begin
            out_data_comp_hpos4_0_out = 'bx;
        end else begin
            out_data_comp_hpos4_0_out = 'bx;
        end
    end else begin
        out_data_comp_hpos4_0_out = 'bx;
    end
end

always @ (*) begin
    if (((~(i_load_fu_105_p1 == 2'd0) & ~(i_load_fu_105_p1 == 2'd1) & (icmp_ln814_fu_140_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_data_comp_hpos4_0_out_ap_vld = 1'b1;
    end else begin
        out_data_comp_hpos4_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln814_fu_140_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_data_comp_hpos_0_out_ap_vld = 1'b1;
    end else begin
        out_data_comp_hpos_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln814_fu_140_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_data_comp_vpos12_0_out_ap_vld = 1'b1;
    end else begin
        out_data_comp_vpos12_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln814_fu_140_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_data_comp_vpos2_0_out_ap_vld = 1'b1;
    end else begin
        out_data_comp_vpos2_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln814_fu_140_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        out_data_comp_vpos_0_out_ap_vld = 1'b1;
    end else begin
        out_data_comp_vpos_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln814_fu_146_p2 = (ap_sig_allocacmp_i + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_64 = (~(i_load_fu_105_p1 == 2'd0) & ~(i_load_fu_105_p1 == 2'd1) & (icmp_ln814_fu_140_p2 == 1'd0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_load_fu_105_p1 = ap_sig_allocacmp_i;

assign icmp_ln814_fu_140_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign out_data_comp_hpos_0_fu_44 = 32'd0;

assign out_data_comp_hpos_0_out = out_data_comp_hpos_0_fu_44[28:0];

assign out_data_comp_vpos12_0_fu_52 = 32'd0;

assign out_data_comp_vpos12_0_out = out_data_comp_vpos12_0_fu_52[28:0];

assign out_data_comp_vpos2_0_fu_48 = 32'd0;

assign out_data_comp_vpos2_0_out = out_data_comp_vpos2_0_fu_48[28:0];

assign out_data_comp_vpos_0_fu_56 = 32'd0;

assign out_data_comp_vpos_0_out = out_data_comp_vpos_0_fu_56[28:0];

endmodule //jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_814_2
