// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_334_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        QuantBuff_address0,
        QuantBuff_ce0,
        QuantBuff_we0,
        QuantBuff_d0,
        QuantBuff_address1,
        QuantBuff_ce1,
        QuantBuff_q1,
        p_jinfo_quant_tbl_quantval_address0,
        p_jinfo_quant_tbl_quantval_ce0,
        p_jinfo_quant_tbl_quantval_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] QuantBuff_address0;
output   QuantBuff_ce0;
output   QuantBuff_we0;
output  [31:0] QuantBuff_d0;
output  [5:0] QuantBuff_address1;
output   QuantBuff_ce1;
input  [31:0] QuantBuff_q1;
output  [7:0] p_jinfo_quant_tbl_quantval_address0;
output   p_jinfo_quant_tbl_quantval_ce0;
input  [15:0] p_jinfo_quant_tbl_quantval_q0;

reg ap_idle;
reg QuantBuff_ce0;
reg QuantBuff_we0;
reg QuantBuff_ce1;
reg p_jinfo_quant_tbl_quantval_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln334_fu_76_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [5:0] QuantBuff_addr_reg_129;
reg   [5:0] QuantBuff_addr_reg_129_pp0_iter1_reg;
reg   [5:0] QuantBuff_addr_reg_129_pp0_iter2_reg;
reg   [5:0] QuantBuff_addr_reg_129_pp0_iter3_reg;
reg  signed [31:0] QuantBuff_load_reg_135;
reg   [15:0] p_jinfo_quant_tbl_quantval_load_reg_140;
wire   [31:0] grp_fu_64_p2;
reg   [31:0] mul_ln335_reg_150;
wire   [63:0] zext_ln333_1_fu_99_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln333_fu_88_p1;
reg   [6:0] idx29_fu_30;
wire   [6:0] add_ln334_fu_82_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_idx29_load;
wire   [15:0] grp_fu_64_p0;
wire   [6:0] xor_ln333_fu_93_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] grp_fu_64_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 idx29_fu_30 = 7'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_mul_16ns_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_16ns_32s_32_2_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_64_p0),
    .din1(QuantBuff_load_reg_135),
    .ce(1'b1),
    .dout(grp_fu_64_p2)
);

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln334_fu_76_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            idx29_fu_30 <= add_ln334_fu_82_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            idx29_fu_30 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QuantBuff_addr_reg_129 <= zext_ln333_fu_88_p1;
        QuantBuff_addr_reg_129_pp0_iter1_reg <= QuantBuff_addr_reg_129;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        p_jinfo_quant_tbl_quantval_load_reg_140 <= p_jinfo_quant_tbl_quantval_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        QuantBuff_addr_reg_129_pp0_iter2_reg <= QuantBuff_addr_reg_129_pp0_iter1_reg;
        QuantBuff_addr_reg_129_pp0_iter3_reg <= QuantBuff_addr_reg_129_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln335_reg_150 <= grp_fu_64_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QuantBuff_load_reg_135 <= QuantBuff_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        QuantBuff_ce0 = 1'b1;
    end else begin
        QuantBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QuantBuff_ce1 = 1'b1;
    end else begin
        QuantBuff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        QuantBuff_we0 = 1'b1;
    end else begin
        QuantBuff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln334_fu_76_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_idx29_load = 7'd0;
    end else begin
        ap_sig_allocacmp_idx29_load = idx29_fu_30;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_jinfo_quant_tbl_quantval_ce0 = 1'b1;
    end else begin
        p_jinfo_quant_tbl_quantval_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign QuantBuff_address0 = QuantBuff_addr_reg_129_pp0_iter3_reg;

assign QuantBuff_address1 = zext_ln333_fu_88_p1;

assign QuantBuff_d0 = mul_ln335_reg_150;

assign add_ln334_fu_82_p2 = (ap_sig_allocacmp_idx29_load + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_64_p0 = grp_fu_64_p00;

assign grp_fu_64_p00 = p_jinfo_quant_tbl_quantval_load_reg_140;

assign icmp_ln334_fu_76_p2 = ((ap_sig_allocacmp_idx29_load == 7'd64) ? 1'b1 : 1'b0);

assign p_jinfo_quant_tbl_quantval_address0 = zext_ln333_1_fu_99_p1;

assign xor_ln333_fu_93_p2 = (ap_sig_allocacmp_idx29_load ^ 7'd64);

assign zext_ln333_1_fu_99_p1 = xor_ln333_fu_93_p2;

assign zext_ln333_fu_88_p1 = ap_sig_allocacmp_idx29_load;

endmodule //jpeg2bmp_decode_block_1_Pipeline_VITIS_LOOP_334_1
