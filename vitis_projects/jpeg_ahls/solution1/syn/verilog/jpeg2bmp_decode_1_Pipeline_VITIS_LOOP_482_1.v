// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_482_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        IDCTBuff_address0,
        IDCTBuff_ce0,
        IDCTBuff_q0,
        IDCTBuff_address1,
        IDCTBuff_ce1,
        IDCTBuff_q1,
        rgb_buf_address0,
        rgb_buf_ce0,
        rgb_buf_we0,
        rgb_buf_d0,
        rgb_buf_address1,
        rgb_buf_ce1,
        rgb_buf_we1,
        rgb_buf_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] IDCTBuff_address0;
output   IDCTBuff_ce0;
input  [31:0] IDCTBuff_q0;
output  [8:0] IDCTBuff_address1;
output   IDCTBuff_ce1;
input  [31:0] IDCTBuff_q1;
output  [9:0] rgb_buf_address0;
output   rgb_buf_ce0;
output   rgb_buf_we0;
output  [7:0] rgb_buf_d0;
output  [9:0] rgb_buf_address1;
output   rgb_buf_ce1;
output   rgb_buf_we1;
output  [7:0] rgb_buf_d1;

reg ap_idle;
reg[8:0] IDCTBuff_address0;
reg IDCTBuff_ce0;
reg IDCTBuff_ce1;
reg[9:0] rgb_buf_address0;
reg rgb_buf_ce0;
reg rgb_buf_we0;
reg[7:0] rgb_buf_d0;
reg rgb_buf_ce1;
reg rgb_buf_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln482_reg_454;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] reg_152;
wire    ap_block_pp0_stage1_11001;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_reg_449;
reg   [6:0] i_reg_449_pp0_iter1_reg;
wire   [0:0] icmp_ln482_fu_164_p2;
reg   [0:0] icmp_ln482_reg_454_pp0_iter1_reg;
wire   [63:0] zext_ln484_fu_188_p1;
reg   [63:0] zext_ln484_reg_458;
reg   [63:0] zext_ln484_reg_458_pp0_iter1_reg;
reg   [63:0] zext_ln484_reg_458_pp0_iter2_reg;
wire   [63:0] zext_ln485_fu_201_p1;
reg   [63:0] zext_ln485_reg_468;
reg   [63:0] zext_ln485_reg_468_pp0_iter1_reg;
reg   [63:0] zext_ln485_reg_468_pp0_iter2_reg;
wire  signed [31:0] u_fu_211_p2;
reg  signed [31:0] u_reg_478;
wire  signed [31:0] v_fu_217_p2;
reg  signed [31:0] v_reg_484;
wire   [63:0] zext_ln482_fu_223_p1;
reg   [63:0] zext_ln482_reg_490;
wire   [31:0] grp_fu_146_p2;
reg   [31:0] mul_ln488_reg_500;
wire   [31:0] or_ln487_fu_233_p2;
reg   [31:0] or_ln487_reg_505;
wire   [31:0] add_ln487_fu_239_p2;
reg   [31:0] add_ln487_reg_511;
reg   [31:0] mul_ln488_1_reg_516;
reg   [0:0] tmp_reg_521;
wire   [0:0] icmp_ln493_fu_263_p2;
reg   [0:0] icmp_ln493_reg_527;
wire   [7:0] g_fu_382_p3;
reg   [7:0] g_reg_532;
wire   [7:0] b_fu_434_p3;
reg   [7:0] b_reg_537;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [6:0] i_6_fu_70;
wire   [6:0] add_ln482_fu_170_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i;
wire   [7:0] r_fu_329_p3;
reg  signed [31:0] grp_fu_140_p0;
reg   [9:0] grp_fu_140_p1;
reg  signed [31:0] grp_fu_146_p0;
reg  signed [8:0] grp_fu_146_p1;
wire   [5:0] trunc_ln484_fu_176_p1;
wire   [6:0] zext_ln_fu_180_p3;
wire   [7:0] zext_ln1_fu_193_p3;
wire   [31:0] shl_ln487_fu_227_p2;
wire   [15:0] tmp_7_fu_253_p4;
wire   [31:0] add_ln488_fu_278_p2;
wire   [31:0] add_ln488_1_fu_282_p2;
wire   [31:0] add_ln489_fu_297_p2;
wire   [0:0] xor_ln491_fu_312_p2;
wire   [0:0] or_ln491_fu_325_p2;
wire   [7:0] select_ln491_fu_317_p3;
wire   [7:0] trunc_ln8_fu_269_p4;
wire   [15:0] tmp_9_fu_346_p4;
wire   [0:0] tmp_8_fu_338_p3;
wire   [0:0] xor_ln496_fu_362_p2;
wire   [0:0] icmp_ln498_fu_356_p2;
wire   [0:0] or_ln496_fu_376_p2;
wire   [7:0] select_ln496_fu_368_p3;
wire   [7:0] trunc_ln478_1_fu_287_p4;
wire   [15:0] tmp_11_fu_398_p4;
wire   [0:0] tmp_10_fu_390_p3;
wire   [0:0] xor_ln501_fu_414_p2;
wire   [0:0] icmp_ln503_fu_408_p2;
wire   [0:0] or_ln501_fu_428_p2;
wire   [7:0] select_ln501_fu_420_p3;
wire   [7:0] trunc_ln478_2_fu_302_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_6_fu_70 = 7'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_mul_32s_10ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 32 ))
mul_32s_10ns_32_2_1_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_140_p0),
    .din1(grp_fu_140_p1),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

jpeg2bmp_mul_32s_9s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 32 ))
mul_32s_9s_32_2_1_U195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_146_p0),
    .din1(grp_fu_146_p1),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln482_fu_164_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_6_fu_70 <= add_ln482_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_6_fu_70 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln487_reg_511 <= add_ln487_fu_239_p2;
        i_reg_449 <= ap_sig_allocacmp_i;
        i_reg_449_pp0_iter1_reg <= i_reg_449;
        icmp_ln482_reg_454 <= icmp_ln482_fu_164_p2;
        icmp_ln482_reg_454_pp0_iter1_reg <= icmp_ln482_reg_454;
        icmp_ln493_reg_527 <= icmp_ln493_fu_263_p2;
        or_ln487_reg_505[31 : 8] <= or_ln487_fu_233_p2[31 : 8];
        tmp_reg_521 <= add_ln487_fu_239_p2[32'd31];
        zext_ln484_reg_458[5 : 0] <= zext_ln484_fu_188_p1[5 : 0];
        zext_ln484_reg_458_pp0_iter1_reg[5 : 0] <= zext_ln484_reg_458[5 : 0];
        zext_ln484_reg_458_pp0_iter2_reg[5 : 0] <= zext_ln484_reg_458_pp0_iter1_reg[5 : 0];
        zext_ln485_reg_468[5 : 0] <= zext_ln485_fu_201_p1[5 : 0];
        zext_ln485_reg_468_pp0_iter1_reg[5 : 0] <= zext_ln485_reg_468[5 : 0];
        zext_ln485_reg_468_pp0_iter2_reg[5 : 0] <= zext_ln485_reg_468_pp0_iter1_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_reg_537 <= b_fu_434_p3;
        g_reg_532 <= g_fu_382_p3;
        u_reg_478 <= u_fu_211_p2;
        v_reg_484 <= v_fu_217_p2;
        zext_ln482_reg_490[6 : 0] <= zext_ln482_fu_223_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln488_1_reg_516 <= grp_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln488_reg_500 <= grp_fu_146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_152 <= grp_fu_140_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IDCTBuff_address0 = zext_ln482_fu_223_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDCTBuff_address0 = zext_ln485_fu_201_p1;
    end else begin
        IDCTBuff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        IDCTBuff_ce0 = 1'b1;
    end else begin
        IDCTBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        IDCTBuff_ce1 = 1'b1;
    end else begin
        IDCTBuff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln482_reg_454 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln482_reg_454_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 7'd0;
    end else begin
        ap_sig_allocacmp_i = i_6_fu_70;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p0 = u_reg_478;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p0 = v_reg_484;
        end else begin
            grp_fu_140_p0 = 'bx;
        end
    end else begin
        grp_fu_140_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_140_p1 = 32'd454;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_140_p1 = 32'd359;
        end else begin
            grp_fu_140_p1 = 'bx;
        end
    end else begin
        grp_fu_140_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_146_p0 = v_reg_484;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_146_p0 = u_reg_478;
        end else begin
            grp_fu_146_p0 = 'bx;
        end
    end else begin
        grp_fu_146_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_146_p1 = 32'd4294967114;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_146_p1 = 32'd4294967208;
        end else begin
            grp_fu_146_p1 = 'bx;
        end
    end else begin
        grp_fu_146_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_buf_address0 = zext_ln485_reg_468_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rgb_buf_address0 = zext_ln482_reg_490;
    end else begin
        rgb_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rgb_buf_ce0 = 1'b1;
    end else begin
        rgb_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_buf_ce1 = 1'b1;
    end else begin
        rgb_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_buf_d0 = b_reg_537;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        rgb_buf_d0 = r_fu_329_p3;
    end else begin
        rgb_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        rgb_buf_we0 = 1'b1;
    end else begin
        rgb_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_buf_we1 = 1'b1;
    end else begin
        rgb_buf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IDCTBuff_address1 = zext_ln484_fu_188_p1;

assign add_ln482_fu_170_p2 = (ap_sig_allocacmp_i + 7'd1);

assign add_ln487_fu_239_p2 = (reg_152 + or_ln487_fu_233_p2);

assign add_ln488_1_fu_282_p2 = (add_ln488_fu_278_p2 + mul_ln488_reg_500);

assign add_ln488_fu_278_p2 = (or_ln487_reg_505 + mul_ln488_1_reg_516);

assign add_ln489_fu_297_p2 = (reg_152 + or_ln487_reg_505);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign b_fu_434_p3 = ((or_ln501_fu_428_p2[0:0] == 1'b1) ? select_ln501_fu_420_p3 : trunc_ln478_2_fu_302_p4);

assign g_fu_382_p3 = ((or_ln496_fu_376_p2[0:0] == 1'b1) ? select_ln496_fu_368_p3 : trunc_ln478_1_fu_287_p4);

assign icmp_ln482_fu_164_p2 = ((ap_sig_allocacmp_i == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln493_fu_263_p2 = (($signed(tmp_7_fu_253_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln498_fu_356_p2 = (($signed(tmp_9_fu_346_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln503_fu_408_p2 = (($signed(tmp_11_fu_398_p4) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign or_ln487_fu_233_p2 = (shl_ln487_fu_227_p2 | 32'd128);

assign or_ln491_fu_325_p2 = (tmp_reg_521 | icmp_ln493_reg_527);

assign or_ln496_fu_376_p2 = (tmp_8_fu_338_p3 | icmp_ln498_fu_356_p2);

assign or_ln501_fu_428_p2 = (tmp_10_fu_390_p3 | icmp_ln503_fu_408_p2);

assign r_fu_329_p3 = ((or_ln491_fu_325_p2[0:0] == 1'b1) ? select_ln491_fu_317_p3 : trunc_ln8_fu_269_p4);

assign rgb_buf_address1 = zext_ln484_reg_458_pp0_iter2_reg;

assign rgb_buf_d1 = g_reg_532;

assign select_ln491_fu_317_p3 = ((xor_ln491_fu_312_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln496_fu_368_p3 = ((xor_ln496_fu_362_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln501_fu_420_p3 = ((xor_ln501_fu_414_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign shl_ln487_fu_227_p2 = IDCTBuff_q0 << 32'd8;

assign tmp_10_fu_390_p3 = add_ln489_fu_297_p2[32'd31];

assign tmp_11_fu_398_p4 = {{add_ln489_fu_297_p2[31:16]}};

assign tmp_7_fu_253_p4 = {{add_ln487_fu_239_p2[31:16]}};

assign tmp_8_fu_338_p3 = add_ln488_1_fu_282_p2[32'd31];

assign tmp_9_fu_346_p4 = {{add_ln488_1_fu_282_p2[31:16]}};

assign trunc_ln478_1_fu_287_p4 = {{add_ln488_1_fu_282_p2[15:8]}};

assign trunc_ln478_2_fu_302_p4 = {{add_ln489_fu_297_p2[15:8]}};

assign trunc_ln484_fu_176_p1 = ap_sig_allocacmp_i[5:0];

assign trunc_ln8_fu_269_p4 = {{add_ln487_reg_511[15:8]}};

assign u_fu_211_p2 = ($signed(IDCTBuff_q1) + $signed(32'd4294967168));

assign v_fu_217_p2 = ($signed(IDCTBuff_q0) + $signed(32'd4294967168));

assign xor_ln491_fu_312_p2 = (tmp_reg_521 ^ 1'd1);

assign xor_ln496_fu_362_p2 = (tmp_8_fu_338_p3 ^ 1'd1);

assign xor_ln501_fu_414_p2 = (tmp_10_fu_390_p3 ^ 1'd1);

assign zext_ln1_fu_193_p3 = {{2'd2}, {trunc_ln484_fu_176_p1}};

assign zext_ln482_fu_223_p1 = i_reg_449_pp0_iter1_reg;

assign zext_ln484_fu_188_p1 = zext_ln_fu_180_p3;

assign zext_ln485_fu_201_p1 = zext_ln1_fu_193_p3;

assign zext_ln_fu_180_p3 = {{1'd1}, {trunc_ln484_fu_176_p1}};

always @ (posedge ap_clk) begin
    zext_ln484_reg_458[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000001;
    zext_ln484_reg_458_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000001;
    zext_ln484_reg_458_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000001;
    zext_ln485_reg_468[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000010;
    zext_ln485_reg_468_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000010;
    zext_ln485_reg_468_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000010;
    zext_ln482_reg_490[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    or_ln487_reg_505[7:0] <= 8'b10000000;
end

endmodule //jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_482_1
