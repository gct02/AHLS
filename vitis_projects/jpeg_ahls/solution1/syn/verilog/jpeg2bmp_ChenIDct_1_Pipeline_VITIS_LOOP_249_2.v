// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_ChenIDct_1_Pipeline_VITIS_LOOP_249_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        IDCTBuff_address0,
        IDCTBuff_ce0,
        IDCTBuff_we0,
        IDCTBuff_d0,
        IDCTBuff_q0,
        IDCTBuff_address1,
        IDCTBuff_ce1,
        IDCTBuff_we1,
        IDCTBuff_d1,
        IDCTBuff_q1,
        grp_fu_51_p_din0,
        grp_fu_51_p_din1,
        grp_fu_51_p_dout0,
        grp_fu_51_p_ce,
        grp_fu_55_p_din0,
        grp_fu_55_p_din1,
        grp_fu_55_p_dout0,
        grp_fu_55_p_ce,
        grp_fu_59_p_din0,
        grp_fu_59_p_din1,
        grp_fu_59_p_dout0,
        grp_fu_59_p_ce,
        grp_fu_63_p_din0,
        grp_fu_63_p_din1,
        grp_fu_63_p_dout0,
        grp_fu_63_p_ce
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] y;
output  [8:0] IDCTBuff_address0;
output   IDCTBuff_ce0;
output   IDCTBuff_we0;
output  [31:0] IDCTBuff_d0;
input  [31:0] IDCTBuff_q0;
output  [8:0] IDCTBuff_address1;
output   IDCTBuff_ce1;
output   IDCTBuff_we1;
output  [31:0] IDCTBuff_d1;
input  [31:0] IDCTBuff_q1;
output  [31:0] grp_fu_51_p_din0;
output  [7:0] grp_fu_51_p_din1;
input  [39:0] grp_fu_51_p_dout0;
output   grp_fu_51_p_ce;
output  [31:0] grp_fu_55_p_din0;
output  [9:0] grp_fu_55_p_din1;
input  [40:0] grp_fu_55_p_dout0;
output   grp_fu_55_p_ce;
output  [31:0] grp_fu_59_p_din0;
output  [9:0] grp_fu_59_p_din1;
input  [40:0] grp_fu_59_p_dout0;
output   grp_fu_59_p_ce;
output  [31:0] grp_fu_63_p_din0;
output  [9:0] grp_fu_63_p_din1;
input  [40:0] grp_fu_63_p_dout0;
output   grp_fu_63_p_ce;

reg ap_idle;
reg[8:0] IDCTBuff_address0;
reg IDCTBuff_ce0;
reg IDCTBuff_we0;
reg[31:0] IDCTBuff_d0;
reg[8:0] IDCTBuff_address1;
reg IDCTBuff_ce1;
reg IDCTBuff_we1;
reg[31:0] IDCTBuff_d1;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln249_fu_247_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state15;
reg  signed [31:0] reg_215;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg  signed [31:0] reg_219;
reg   [40:0] reg_223;
wire    ap_CS_fsm_state6;
reg   [40:0] reg_227;
reg   [40:0] reg_231;
reg   [31:0] reg_235;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire   [7:0] shl_ln_fu_263_p3;
reg   [7:0] shl_ln_reg_794;
reg   [8:0] IDCTBuff_addr_3_reg_802;
reg   [8:0] IDCTBuff_addr_5_reg_807;
reg   [7:0] lshr_ln_reg_813;
reg   [7:0] lshr_ln2_reg_818;
reg   [7:0] lshr_ln4_reg_823;
reg   [8:0] IDCTBuff_addr_7_reg_828;
reg   [7:0] lshr_ln6_reg_833;
reg   [8:0] IDCTBuff_addr_9_reg_838;
reg   [8:0] IDCTBuff_addr_4_reg_844;
reg   [8:0] IDCTBuff_addr_8_reg_850;
wire  signed [40:0] sext_ln268_fu_500_p1;
wire  signed [39:0] sext_ln265_fu_505_p1;
wire  signed [40:0] sext_ln266_1_fu_510_p1;
reg   [8:0] IDCTBuff_addr_reg_871;
reg   [8:0] IDCTBuff_addr_6_reg_877;
reg   [39:0] mul_ln265_reg_882;
wire  signed [39:0] sext_ln265_2_fu_524_p1;
wire  signed [40:0] sext_ln265_3_fu_529_p1;
wire  signed [40:0] sext_ln266_fu_534_p1;
reg   [40:0] mul_ln265_1_reg_903;
wire    ap_CS_fsm_state5;
reg   [40:0] mul_ln266_reg_908;
reg   [40:0] mul_ln267_1_reg_913;
reg   [39:0] mul_ln268_1_reg_918;
wire   [31:0] add_ln272_fu_540_p2;
reg   [31:0] add_ln272_reg_923;
wire   [31:0] sub_ln273_fu_546_p2;
reg   [31:0] sub_ln273_reg_928;
wire  signed [40:0] sext_ln276_fu_552_p1;
wire  signed [40:0] sext_ln275_fu_558_p1;
wire  signed [40:0] sext_ln272_fu_631_p1;
wire  signed [40:0] sext_ln273_fu_635_p1;
wire   [40:0] grp_fu_181_p2;
reg   [40:0] mul_ln276_1_reg_955;
wire   [31:0] a0_3_fu_639_p2;
reg   [31:0] a0_3_reg_960;
wire   [31:0] a3_3_fu_657_p2;
reg   [31:0] a3_3_reg_966;
wire   [31:0] sub_ln293_fu_663_p2;
reg   [31:0] sub_ln293_reg_972;
wire   [31:0] add_ln294_fu_669_p2;
reg   [31:0] add_ln294_reg_977;
reg   [31:0] a1_1_reg_982;
reg   [31:0] a2_1_reg_988;
reg   [31:0] a3_1_reg_994;
wire  signed [40:0] sext_ln293_fu_706_p1;
wire  signed [40:0] sext_ln294_fu_710_p1;
wire   [31:0] b3_1_fu_719_p2;
reg   [31:0] b3_1_reg_1010;
reg   [31:0] c2_1_reg_1016;
wire   [31:0] sub_ln305_fu_730_p2;
reg   [31:0] sub_ln305_reg_1022;
wire   [31:0] b2_1_fu_739_p2;
reg   [31:0] b2_1_reg_1027;
wire    ap_CS_fsm_state9;
wire   [31:0] sub_ln304_fu_749_p2;
reg   [31:0] sub_ln304_reg_1033;
wire   [31:0] sub_ln303_fu_760_p2;
reg   [31:0] sub_ln303_reg_1038;
wire    ap_CS_fsm_state10;
wire   [31:0] sub_ln302_fu_770_p2;
reg   [31:0] sub_ln302_reg_1043;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln252_2_fu_297_p1;
wire   [63:0] zext_ln254_1_fu_328_p1;
wire   [63:0] zext_ln256_1_fu_448_p1;
wire   [63:0] zext_ln258_fu_487_p1;
wire   [63:0] zext_ln253_1_fu_492_p1;
wire   [63:0] zext_ln257_1_fu_496_p1;
wire   [63:0] zext_ln251_1_fu_516_p1;
wire   [63:0] zext_ln255_1_fu_520_p1;
reg   [3:0] i_10_fu_80;
wire   [3:0] add_ln249_fu_253_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i;
wire   [31:0] add_ln298_fu_724_p2;
wire   [31:0] add_ln299_fu_743_p2;
wire   [31:0] add_ln300_fu_754_p2;
wire   [31:0] add_ln301_fu_765_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg  signed [31:0] grp_fu_163_p0;
reg  signed [31:0] grp_fu_168_p0;
reg   [9:0] grp_fu_168_p1;
reg  signed [31:0] grp_fu_173_p0;
reg   [9:0] grp_fu_173_p1;
wire   [8:0] grp_fu_181_p1;
reg  signed [31:0] grp_fu_188_p0;
reg  signed [9:0] grp_fu_188_p1;
wire   [2:0] trunc_ln250_fu_259_p1;
wire   [7:0] or_ln251_fu_271_p2;
wire   [9:0] zext_ln251_fu_277_p1;
wire   [9:0] aptr_1_fu_281_p2;
wire   [7:0] lshr_ln1_fu_287_p4;
wire   [7:0] or_ln253_fu_302_p2;
wire   [9:0] zext_ln253_fu_308_p1;
wire   [9:0] aptr_3_fu_312_p2;
wire   [7:0] lshr_ln3_fu_318_p4;
wire   [9:0] zext_ln250_fu_338_p1;
wire   [9:0] aptr_fu_341_p2;
wire   [7:0] or_ln252_fu_356_p2;
wire   [9:0] zext_ln252_1_fu_365_p1;
wire   [9:0] aptr_2_fu_369_p2;
wire   [8:0] zext_ln252_fu_361_p1;
wire   [8:0] add_ln254_fu_384_p2;
wire   [9:0] zext_ln254_fu_390_p1;
wire   [8:0] add_ln255_fu_399_p2;
wire   [9:0] zext_ln255_fu_405_p1;
wire   [9:0] aptr_4_fu_394_p2;
wire   [7:0] or_ln256_fu_424_p2;
wire   [9:0] zext_ln256_fu_429_p1;
wire   [9:0] aptr_5_fu_409_p2;
wire   [7:0] lshr_ln5_fu_438_p4;
wire   [7:0] or_ln257_fu_453_p2;
wire   [9:0] zext_ln257_fu_458_p1;
wire   [9:0] aptr_6_fu_433_p2;
wire   [9:0] aptr_7_fu_462_p2;
wire   [7:0] lshr_ln7_fu_477_p4;
wire  signed [40:0] sext_ln265_1_fu_564_p1;
wire   [40:0] add_ln265_fu_567_p2;
wire   [40:0] add_ln266_fu_582_p2;
wire   [40:0] add_ln267_fu_597_p2;
wire  signed [40:0] sext_ln268_1_fu_612_p1;
wire   [40:0] add_ln268_fu_615_p2;
wire   [31:0] c0_fu_572_p4;
wire   [31:0] c1_fu_587_p4;
wire   [31:0] c3_fu_621_p4;
wire   [31:0] c2_fu_602_p4;
wire   [31:0] a2_2_fu_651_p2;
wire   [31:0] a1_2_fu_645_p2;
wire   [40:0] add_ln275_fu_675_p2;
wire   [40:0] add_ln276_fu_691_p2;
wire   [31:0] b0_1_fu_714_p2;
wire   [31:0] b1_1_fu_735_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [14:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 i_10_fu_80 = 4'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_mul_32s_9ns_41_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 41 ))
mul_32s_9ns_41_2_1_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_219),
    .din1(grp_fu_181_p1),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln249_fu_247_p2 == 1'd0)) begin
            i_10_fu_80 <= add_ln249_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_10_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        IDCTBuff_addr_3_reg_802[7 : 0] <= zext_ln252_2_fu_297_p1[7 : 0];
        IDCTBuff_addr_5_reg_807[7 : 0] <= zext_ln254_1_fu_328_p1[7 : 0];
        shl_ln_reg_794[7 : 5] <= shl_ln_fu_263_p3[7 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        IDCTBuff_addr_4_reg_844[7 : 0] <= zext_ln253_1_fu_492_p1[7 : 0];
        IDCTBuff_addr_8_reg_850[7 : 0] <= zext_ln257_1_fu_496_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        IDCTBuff_addr_6_reg_877[7 : 0] <= zext_ln255_1_fu_520_p1[7 : 0];
        IDCTBuff_addr_reg_871[7 : 0] <= zext_ln251_1_fu_516_p1[7 : 0];
        mul_ln265_reg_882 <= grp_fu_51_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        IDCTBuff_addr_7_reg_828[7 : 0] <= zext_ln256_1_fu_448_p1[7 : 0];
        IDCTBuff_addr_9_reg_838[7 : 0] <= zext_ln258_fu_487_p1[7 : 0];
        lshr_ln2_reg_818 <= {{aptr_2_fu_369_p2[9:2]}};
        lshr_ln4_reg_823 <= {{aptr_4_fu_394_p2[9:2]}};
        lshr_ln6_reg_833 <= {{aptr_6_fu_433_p2[9:2]}};
        lshr_ln_reg_813 <= {{aptr_fu_341_p2[9:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        a0_3_reg_960 <= a0_3_fu_639_p2;
        a3_3_reg_966 <= a3_3_fu_657_p2;
        add_ln294_reg_977 <= add_ln294_fu_669_p2;
        mul_ln276_1_reg_955 <= grp_fu_181_p2;
        sub_ln293_reg_972 <= sub_ln293_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        a1_1_reg_982 <= {{grp_fu_59_p_dout0[40:9]}};
        a2_1_reg_988 <= {{add_ln275_fu_675_p2[40:9]}};
        a3_1_reg_994 <= {{add_ln276_fu_691_p2[40:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln272_reg_923 <= add_ln272_fu_540_p2;
        mul_ln265_1_reg_903 <= grp_fu_63_p_dout0;
        mul_ln266_reg_908 <= grp_fu_55_p_dout0;
        mul_ln267_1_reg_913 <= grp_fu_59_p_dout0;
        mul_ln268_1_reg_918 <= grp_fu_51_p_dout0;
        sub_ln273_reg_928 <= sub_ln273_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        b2_1_reg_1027 <= b2_1_fu_739_p2;
        sub_ln304_reg_1033 <= sub_ln304_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        b3_1_reg_1010 <= b3_1_fu_719_p2;
        c2_1_reg_1016 <= {{grp_fu_59_p_dout0[40:9]}};
        sub_ln305_reg_1022 <= sub_ln305_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_215 <= IDCTBuff_q1;
        reg_219 <= IDCTBuff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_223 <= grp_fu_63_p_dout0;
        reg_227 <= grp_fu_55_p_dout0;
        reg_231 <= grp_fu_59_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_235 <= {{grp_fu_55_p_dout0[40:9]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sub_ln302_reg_1043 <= sub_ln302_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        sub_ln303_reg_1038 <= sub_ln303_fu_760_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        IDCTBuff_address0 = IDCTBuff_addr_8_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        IDCTBuff_address0 = IDCTBuff_addr_6_reg_877;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        IDCTBuff_address0 = IDCTBuff_addr_4_reg_844;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        IDCTBuff_address0 = IDCTBuff_addr_reg_871;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        IDCTBuff_address0 = zext_ln255_1_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        IDCTBuff_address0 = zext_ln257_1_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        IDCTBuff_address0 = zext_ln258_fu_487_p1;
    end else if (((icmp_ln249_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        IDCTBuff_address0 = zext_ln254_1_fu_328_p1;
    end else begin
        IDCTBuff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        IDCTBuff_address1 = IDCTBuff_addr_9_reg_838;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        IDCTBuff_address1 = IDCTBuff_addr_7_reg_828;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        IDCTBuff_address1 = IDCTBuff_addr_5_reg_807;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        IDCTBuff_address1 = IDCTBuff_addr_3_reg_802;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        IDCTBuff_address1 = zext_ln251_1_fu_516_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        IDCTBuff_address1 = zext_ln253_1_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        IDCTBuff_address1 = zext_ln256_1_fu_448_p1;
    end else if (((icmp_ln249_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        IDCTBuff_address1 = zext_ln252_2_fu_297_p1;
    end else begin
        IDCTBuff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | ((icmp_ln249_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        IDCTBuff_ce0 = 1'b1;
    end else begin
        IDCTBuff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((icmp_ln249_fu_247_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        IDCTBuff_ce1 = 1'b1;
    end else begin
        IDCTBuff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        IDCTBuff_d0 = sub_ln304_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        IDCTBuff_d0 = sub_ln302_reg_1043;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        IDCTBuff_d0 = add_ln300_fu_754_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        IDCTBuff_d0 = add_ln298_fu_724_p2;
    end else begin
        IDCTBuff_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        IDCTBuff_d1 = sub_ln305_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        IDCTBuff_d1 = sub_ln303_reg_1038;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        IDCTBuff_d1 = add_ln301_fu_765_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        IDCTBuff_d1 = add_ln299_fu_743_p2;
    end else begin
        IDCTBuff_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        IDCTBuff_we0 = 1'b1;
    end else begin
        IDCTBuff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        IDCTBuff_we1 = 1'b1;
    end else begin
        IDCTBuff_we1 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln249_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_10_fu_80;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_163_p0 = sext_ln265_2_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_163_p0 = sext_ln265_fu_505_p1;
    end else begin
        grp_fu_163_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_168_p0 = sext_ln293_fu_706_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_168_p0 = sext_ln272_fu_631_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_168_p0 = sext_ln276_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_168_p0 = sext_ln266_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_168_p0 = sext_ln266_1_fu_510_p1;
    end else begin
        grp_fu_168_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_168_p1 = 41'd362;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_168_p1 = 41'd196;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        grp_fu_168_p1 = 41'd426;
    end else begin
        grp_fu_168_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_173_p0 = sext_ln294_fu_710_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_173_p0 = sext_ln273_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_173_p0 = sext_ln276_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_173_p0 = sext_ln266_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_173_p0 = sext_ln268_fu_500_p1;
    end else begin
        grp_fu_173_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_173_p1 = 41'd362;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_173_p1 = 41'd473;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_173_p1 = 41'd284;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_173_p1 = 41'd502;
    end else begin
        grp_fu_173_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_188_p0 = sext_ln275_fu_558_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_188_p0 = sext_ln265_3_fu_529_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_188_p0 = sext_ln266_1_fu_510_p1;
    end else begin
        grp_fu_188_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_188_p1 = 41'd2199023255079;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_188_p1 = 41'd2199023255050;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_188_p1 = 41'd2199023255268;
    end else begin
        grp_fu_188_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln249_fu_247_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a0_3_fu_639_p2 = (c0_fu_572_p4 + c1_fu_587_p4);

assign a1_2_fu_645_p2 = (c0_fu_572_p4 - c1_fu_587_p4);

assign a2_2_fu_651_p2 = (c3_fu_621_p4 - c2_fu_602_p4);

assign a3_3_fu_657_p2 = (c3_fu_621_p4 + c2_fu_602_p4);

assign add_ln249_fu_253_p2 = (ap_sig_allocacmp_i + 4'd1);

assign add_ln254_fu_384_p2 = (zext_ln252_fu_361_p1 + 9'd8);

assign add_ln255_fu_399_p2 = (zext_ln252_fu_361_p1 + 9'd12);

assign add_ln265_fu_567_p2 = ($signed(mul_ln265_1_reg_903) + $signed(sext_ln265_1_fu_564_p1));

assign add_ln266_fu_582_p2 = (mul_ln266_reg_908 + reg_223);

assign add_ln267_fu_597_p2 = (mul_ln267_1_reg_913 + reg_227);

assign add_ln268_fu_615_p2 = ($signed(sext_ln268_1_fu_612_p1) + $signed(reg_231));

assign add_ln272_fu_540_p2 = (IDCTBuff_q0 + IDCTBuff_q1);

assign add_ln275_fu_675_p2 = (reg_223 + reg_227);

assign add_ln276_fu_691_p2 = (mul_ln276_1_reg_955 + reg_231);

assign add_ln294_fu_669_p2 = (a2_2_fu_651_p2 + a1_2_fu_645_p2);

assign add_ln298_fu_724_p2 = (a3_3_reg_966 + b0_1_fu_714_p2);

assign add_ln299_fu_743_p2 = (c2_1_reg_1016 + b1_1_fu_735_p2);

assign add_ln300_fu_754_p2 = (reg_235 + b2_1_reg_1027);

assign add_ln301_fu_765_p2 = (a0_3_reg_960 + b3_1_reg_1010);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign aptr_1_fu_281_p2 = (zext_ln251_fu_277_p1 + y);

assign aptr_2_fu_369_p2 = (zext_ln252_1_fu_365_p1 + y);

assign aptr_3_fu_312_p2 = (zext_ln253_fu_308_p1 + y);

assign aptr_4_fu_394_p2 = (zext_ln254_fu_390_p1 + y);

assign aptr_5_fu_409_p2 = (zext_ln255_fu_405_p1 + y);

assign aptr_6_fu_433_p2 = (zext_ln256_fu_429_p1 + y);

assign aptr_7_fu_462_p2 = (zext_ln257_fu_458_p1 + y);

assign aptr_fu_341_p2 = (zext_ln250_fu_338_p1 + y);

assign b0_1_fu_714_p2 = (a3_1_reg_994 + reg_235);

assign b1_1_fu_735_p2 = (a2_1_reg_988 + a1_1_reg_982);

assign b2_1_fu_739_p2 = (a1_1_reg_982 - a2_1_reg_988);

assign b3_1_fu_719_p2 = (reg_235 - a3_1_reg_994);

assign c0_fu_572_p4 = {{add_ln265_fu_567_p2[40:9]}};

assign c1_fu_587_p4 = {{add_ln266_fu_582_p2[40:9]}};

assign c2_fu_602_p4 = {{add_ln267_fu_597_p2[40:9]}};

assign c3_fu_621_p4 = {{add_ln268_fu_615_p2[40:9]}};

assign grp_fu_181_p1 = 41'd196;

assign grp_fu_51_p_ce = 1'b1;

assign grp_fu_51_p_din0 = grp_fu_163_p0;

assign grp_fu_51_p_din1 = 40'd100;

assign grp_fu_55_p_ce = 1'b1;

assign grp_fu_55_p_din0 = grp_fu_168_p0;

assign grp_fu_55_p_din1 = grp_fu_168_p1;

assign grp_fu_59_p_ce = 1'b1;

assign grp_fu_59_p_din0 = grp_fu_173_p0;

assign grp_fu_59_p_din1 = grp_fu_173_p1;

assign grp_fu_63_p_ce = 1'b1;

assign grp_fu_63_p_din0 = grp_fu_188_p0;

assign grp_fu_63_p_din1 = grp_fu_188_p1;

assign icmp_ln249_fu_247_p2 = ((ap_sig_allocacmp_i == 4'd8) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_287_p4 = {{aptr_1_fu_281_p2[9:2]}};

assign lshr_ln3_fu_318_p4 = {{aptr_3_fu_312_p2[9:2]}};

assign lshr_ln5_fu_438_p4 = {{aptr_5_fu_409_p2[9:2]}};

assign lshr_ln7_fu_477_p4 = {{aptr_7_fu_462_p2[9:2]}};

assign or_ln251_fu_271_p2 = (shl_ln_fu_263_p3 | 8'd4);

assign or_ln252_fu_356_p2 = (shl_ln_reg_794 | 8'd8);

assign or_ln253_fu_302_p2 = (shl_ln_fu_263_p3 | 8'd12);

assign or_ln256_fu_424_p2 = (shl_ln_reg_794 | 8'd24);

assign or_ln257_fu_453_p2 = (shl_ln_reg_794 | 8'd28);

assign sext_ln265_1_fu_564_p1 = $signed(mul_ln265_reg_882);

assign sext_ln265_2_fu_524_p1 = reg_219;

assign sext_ln265_3_fu_529_p1 = reg_219;

assign sext_ln265_fu_505_p1 = reg_215;

assign sext_ln266_1_fu_510_p1 = reg_219;

assign sext_ln266_fu_534_p1 = reg_215;

assign sext_ln268_1_fu_612_p1 = $signed(mul_ln268_1_reg_918);

assign sext_ln268_fu_500_p1 = reg_215;

assign sext_ln272_fu_631_p1 = $signed(add_ln272_reg_923);

assign sext_ln273_fu_635_p1 = $signed(sub_ln273_reg_928);

assign sext_ln275_fu_558_p1 = reg_219;

assign sext_ln276_fu_552_p1 = reg_215;

assign sext_ln293_fu_706_p1 = $signed(sub_ln293_reg_972);

assign sext_ln294_fu_710_p1 = $signed(add_ln294_reg_977);

assign shl_ln_fu_263_p3 = {{trunc_ln250_fu_259_p1}, {5'd0}};

assign sub_ln273_fu_546_p2 = (IDCTBuff_q1 - IDCTBuff_q0);

assign sub_ln293_fu_663_p2 = (a2_2_fu_651_p2 - a1_2_fu_645_p2);

assign sub_ln302_fu_770_p2 = (b3_1_reg_1010 - a0_3_reg_960);

assign sub_ln303_fu_760_p2 = (b2_1_reg_1027 - reg_235);

assign sub_ln304_fu_749_p2 = (b1_1_fu_735_p2 - c2_1_reg_1016);

assign sub_ln305_fu_730_p2 = (b0_1_fu_714_p2 - a3_3_reg_966);

assign trunc_ln250_fu_259_p1 = ap_sig_allocacmp_i[2:0];

assign zext_ln250_fu_338_p1 = shl_ln_reg_794;

assign zext_ln251_1_fu_516_p1 = lshr_ln_reg_813;

assign zext_ln251_fu_277_p1 = or_ln251_fu_271_p2;

assign zext_ln252_1_fu_365_p1 = or_ln252_fu_356_p2;

assign zext_ln252_2_fu_297_p1 = lshr_ln1_fu_287_p4;

assign zext_ln252_fu_361_p1 = or_ln252_fu_356_p2;

assign zext_ln253_1_fu_492_p1 = lshr_ln2_reg_818;

assign zext_ln253_fu_308_p1 = or_ln253_fu_302_p2;

assign zext_ln254_1_fu_328_p1 = lshr_ln3_fu_318_p4;

assign zext_ln254_fu_390_p1 = add_ln254_fu_384_p2;

assign zext_ln255_1_fu_520_p1 = lshr_ln4_reg_823;

assign zext_ln255_fu_405_p1 = add_ln255_fu_399_p2;

assign zext_ln256_1_fu_448_p1 = lshr_ln5_fu_438_p4;

assign zext_ln256_fu_429_p1 = or_ln256_fu_424_p2;

assign zext_ln257_1_fu_496_p1 = lshr_ln6_reg_833;

assign zext_ln257_fu_458_p1 = or_ln257_fu_453_p2;

assign zext_ln258_fu_487_p1 = lshr_ln7_fu_477_p4;

always @ (posedge ap_clk) begin
    shl_ln_reg_794[4:0] <= 5'b00000;
    IDCTBuff_addr_3_reg_802[8] <= 1'b0;
    IDCTBuff_addr_5_reg_807[8] <= 1'b0;
    IDCTBuff_addr_7_reg_828[8] <= 1'b0;
    IDCTBuff_addr_9_reg_838[8] <= 1'b0;
    IDCTBuff_addr_4_reg_844[8] <= 1'b0;
    IDCTBuff_addr_8_reg_850[8] <= 1'b0;
    IDCTBuff_addr_reg_871[8] <= 1'b0;
    IDCTBuff_addr_6_reg_877[8] <= 1'b0;
end

endmodule //jpeg2bmp_ChenIDct_1_Pipeline_VITIS_LOOP_249_2
