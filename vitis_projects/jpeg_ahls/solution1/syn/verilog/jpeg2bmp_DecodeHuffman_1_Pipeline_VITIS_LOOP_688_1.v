// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_DecodeHuffman_1_Pipeline_VITIS_LOOP_688_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln577_3,
        l_out,
        l_out_ap_vld,
        code_8_out,
        code_8_out_ap_vld,
        p_jinfo_dc_dhuff_tbl_maxcode_address0,
        p_jinfo_dc_dhuff_tbl_maxcode_ce0,
        p_jinfo_dc_dhuff_tbl_maxcode_q0,
        current_read_byte_i,
        current_read_byte_o,
        current_read_byte_o_ap_vld,
        read_position_i,
        read_position_o,
        read_position_o_ap_vld,
        CurHuffReadBuf_i,
        CurHuffReadBuf_o,
        CurHuffReadBuf_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] zext_ln577_3;
output  [6:0] l_out;
output   l_out_ap_vld;
output  [31:0] code_8_out;
output   code_8_out_ap_vld;
output  [6:0] p_jinfo_dc_dhuff_tbl_maxcode_address0;
output   p_jinfo_dc_dhuff_tbl_maxcode_ce0;
input  [31:0] p_jinfo_dc_dhuff_tbl_maxcode_q0;
input  [31:0] current_read_byte_i;
output  [31:0] current_read_byte_o;
output   current_read_byte_o_ap_vld;
input  [31:0] read_position_i;
output  [31:0] read_position_o;
output   read_position_o_ap_vld;
input  [7:0] CurHuffReadBuf_i;
output  [7:0] CurHuffReadBuf_o;
output   CurHuffReadBuf_o_ap_vld;

reg ap_idle;
reg l_out_ap_vld;
reg code_8_out_ap_vld;
reg p_jinfo_dc_dhuff_tbl_maxcode_ce0;
reg[31:0] current_read_byte_o;
reg current_read_byte_o_ap_vld;
reg[31:0] read_position_o;
reg read_position_o_ap_vld;
reg[7:0] CurHuffReadBuf_o;
reg CurHuffReadBuf_o_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln688_fu_142_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] bit_set_mask_address0;
reg    bit_set_mask_ce0;
wire   [31:0] bit_set_mask_q0;
reg   [63:0] l_2_reg_274;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] trunc_ln688_fu_134_p1;
reg   [6:0] trunc_ln688_reg_279;
reg   [31:0] code_reg_289;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] tmp_fu_153_p3;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_empty_phi_fu_109_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_reg_106;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln577_fu_213_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] zext_ln555_fu_171_p1;
wire   [31:0] add_ln577_fu_201_p2;
wire   [7:0] select_ln555_fu_181_p3;
reg   [31:0] code_8_fu_52;
wire   [31:0] code_9_fu_247_p3;
wire   [31:0] zext_ln577_3_cast_fu_116_p1;
wire    ap_loop_init;
reg   [63:0] l_fu_56;
wire   [63:0] add_ln688_fu_218_p2;
reg   [63:0] ap_sig_allocacmp_l_2;
wire    ap_block_pp0_stage1_01001;
wire   [0:0] icmp_ln555_fu_175_p2;
wire   [7:0] add_ln555_fu_165_p2;
wire   [31:0] and_ln577_fu_232_p2;
wire   [30:0] trunc_ln689_fu_244_p1;
wire   [0:0] icmp_ln577_fu_238_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 code_8_fu_52 = 32'd0;
#0 l_fu_56 = 64'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_DecodeHuffman_1_Pipeline_VITIS_LOOP_688_1_bit_set_mask_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
bit_set_mask_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bit_set_mask_address0),
    .ce0(bit_set_mask_ce0),
    .q0(bit_set_mask_q0)
);

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            code_8_fu_52 <= zext_ln577_3_cast_fu_116_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            code_8_fu_52 <= code_9_fu_247_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        l_fu_56 <= 64'd1;
    end else if (((icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        l_fu_56 <= add_ln688_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        code_reg_289 <= code_8_fu_52;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        l_2_reg_274 <= ap_sig_allocacmp_l_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln688_reg_279 <= trunc_ln688_fu_134_p1;
    end
end

always @ (*) begin
    if (((tmp_fu_153_p3 == 1'd1) & (icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        CurHuffReadBuf_o = select_ln555_fu_181_p3;
    end else begin
        CurHuffReadBuf_o = CurHuffReadBuf_i;
    end
end

always @ (*) begin
    if (((tmp_fu_153_p3 == 1'd1) & (icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        CurHuffReadBuf_o_ap_vld = 1'b1;
    end else begin
        CurHuffReadBuf_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln688_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln688_fu_142_p2 == 1'd1)) begin
        if ((tmp_fu_153_p3 == 1'd0)) begin
            ap_phi_mux_empty_phi_fu_109_p4 = read_position_i;
        end else if ((tmp_fu_153_p3 == 1'd1)) begin
            ap_phi_mux_empty_phi_fu_109_p4 = 32'd7;
        end else begin
            ap_phi_mux_empty_phi_fu_109_p4 = ap_phi_reg_pp0_iter0_empty_reg_106;
        end
    end else begin
        ap_phi_mux_empty_phi_fu_109_p4 = ap_phi_reg_pp0_iter0_empty_reg_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_l_2 = 64'd1;
    end else begin
        ap_sig_allocacmp_l_2 = l_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bit_set_mask_ce0 = 1'b1;
    end else begin
        bit_set_mask_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln688_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        code_8_out_ap_vld = 1'b1;
    end else begin
        code_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_153_p3 == 1'd1) & (icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        current_read_byte_o = zext_ln555_fu_171_p1;
    end else begin
        current_read_byte_o = current_read_byte_i;
    end
end

always @ (*) begin
    if (((tmp_fu_153_p3 == 1'd1) & (icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        current_read_byte_o_ap_vld = 1'b1;
    end else begin
        current_read_byte_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln688_fu_142_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        l_out_ap_vld = 1'b1;
    end else begin
        l_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_jinfo_dc_dhuff_tbl_maxcode_ce0 = 1'b1;
    end else begin
        p_jinfo_dc_dhuff_tbl_maxcode_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        read_position_o = add_ln577_fu_201_p2;
    end else begin
        read_position_o = read_position_i;
    end
end

always @ (*) begin
    if (((icmp_ln688_fu_142_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        read_position_o_ap_vld = 1'b1;
    end else begin
        read_position_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln555_fu_165_p2 = (CurHuffReadBuf_i + 8'd1);

assign add_ln577_fu_201_p2 = ($signed(ap_phi_mux_empty_phi_fu_109_p4) + $signed(32'd4294967295));

assign add_ln688_fu_218_p2 = (l_2_reg_274 + 64'd1);

assign and_ln577_fu_232_p2 = (current_read_byte_i & bit_set_mask_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_empty_reg_106 = 'bx;

assign bit_set_mask_address0 = zext_ln577_fu_213_p1;

assign code_8_out = code_8_fu_52;

assign code_9_fu_247_p3 = {{trunc_ln689_fu_244_p1}, {icmp_ln577_fu_238_p2}};

assign icmp_ln555_fu_175_p2 = ((CurHuffReadBuf_i == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln577_fu_238_p2 = ((and_ln577_fu_232_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln688_fu_142_p2 = (($signed(code_8_fu_52) > $signed(p_jinfo_dc_dhuff_tbl_maxcode_q0)) ? 1'b1 : 1'b0);

assign l_out = trunc_ln688_reg_279;

assign p_jinfo_dc_dhuff_tbl_maxcode_address0 = ap_sig_allocacmp_l_2;

assign select_ln555_fu_181_p3 = ((icmp_ln555_fu_175_p2[0:0] == 1'b1) ? 8'd1 : add_ln555_fu_165_p2);

assign tmp_fu_153_p3 = read_position_i[32'd31];

assign trunc_ln688_fu_134_p1 = ap_sig_allocacmp_l_2[6:0];

assign trunc_ln689_fu_244_p1 = code_reg_289[30:0];

assign zext_ln555_fu_171_p1 = CurHuffReadBuf_i;

assign zext_ln577_3_cast_fu_116_p1 = zext_ln577_3;

assign zext_ln577_fu_213_p1 = ap_phi_mux_empty_phi_fu_109_p4;

endmodule //jpeg2bmp_DecodeHuffman_1_Pipeline_VITIS_LOOP_688_1
