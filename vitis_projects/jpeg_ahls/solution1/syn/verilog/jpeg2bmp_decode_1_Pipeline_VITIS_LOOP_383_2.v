// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_383_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hoffs,
        add3_i_i,
        mul_ln376,
        zext_ln385_3,
        outputVector_address0,
        outputVector_ce0,
        outputVector_we0,
        outputVector_d0,
        store_assign_1,
        sext_ln379,
        idx_out,
        idx_out_ap_vld,
        add_ln376_out,
        add_ln376_out_ap_vld,
        rgb_buf_address0,
        rgb_buf_ce0,
        rgb_buf_q0,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] hoffs;
input  [31:0] add3_i_i;
input  [15:0] mul_ln376;
input  [15:0] zext_ln385_3;
output  [15:0] outputVector_address0;
output   outputVector_ce0;
output   outputVector_we0;
output  [7:0] outputVector_d0;
input  [63:0] store_assign_1;
input  [15:0] sext_ln379;
output  [31:0] idx_out;
output   idx_out_ap_vld;
output  [63:0] add_ln376_out;
output   add_ln376_out_ap_vld;
output  [9:0] rgb_buf_address0;
output   rgb_buf_ce0;
input  [7:0] rgb_buf_q0;
output  [0:0] ap_return;

reg ap_idle;
reg outputVector_ce0;
reg outputVector_we0;
reg idx_out_ap_vld;
reg add_ln376_out_ap_vld;
reg rgb_buf_ce0;
reg[0:0] ap_return;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln384_fu_220_p2;
wire   [0:0] icmp_ln383_fu_187_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln379_cast_fu_166_p1;
reg  signed [31:0] sext_ln379_cast_reg_304;
wire   [15:0] add_ln385_2_fu_245_p2;
reg   [15:0] add_ln385_2_reg_322;
reg   [0:0] ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln385_fu_235_p1;
wire   [63:0] zext_ln385_1_fu_266_p1;
reg   [31:0] idx_fu_70;
wire   [31:0] add_ln385_fu_192_p2;
wire    ap_loop_init;
reg   [31:0] e_fu_74;
wire   [31:0] add_ln383_fu_250_p2;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] add_ln376_fu_214_p2;
wire   [33:0] shl_ln_fu_202_p3;
wire   [63:0] zext_ln376_fu_210_p1;
wire   [9:0] lshr_ln_fu_225_p4;
wire   [15:0] trunc_ln383_fu_198_p1;
wire   [15:0] add_ln385_1_fu_240_p2;
reg   [0:0] ap_return_preg;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_106;
reg    ap_condition_234;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 idx_fu_70 = 32'd0;
#0 e_fu_74 = 32'd0;
#0 ap_return_preg = 1'd0;
#0 ap_done_reg = 1'b0;
end

jpeg2bmp_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln383_fu_187_p2 == 1'd0) | (icmp_ln384_fu_220_p2 == 1'd0)))) begin
            ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            e_fu_74 <= hoffs;
        end else if ((1'b1 == ap_condition_234)) begin
            e_fu_74 <= add_ln383_fu_250_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            idx_fu_70 <= 32'd0;
        end else if ((1'b1 == ap_condition_234)) begin
            idx_fu_70 <= add_ln385_fu_192_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln385_2_reg_322 <= add_ln385_2_fu_245_p2;
        sext_ln379_cast_reg_304 <= sext_ln379_cast_fu_166_p1;
    end
end

always @ (*) begin
    if (((icmp_ln383_fu_187_p2 == 1'd1) & (icmp_ln384_fu_220_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln376_out_ap_vld = 1'b1;
    end else begin
        add_ln376_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln383_fu_187_p2 == 1'd0) | (icmp_ln384_fu_220_p2 == 1'd0)))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_106)) begin
        if (((icmp_ln383_fu_187_p2 == 1'd1) & (icmp_ln384_fu_220_p2 == 1'd0))) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 = 1'd0;
        end else if ((icmp_ln383_fu_187_p2 == 1'd0)) begin
            ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 = 1'd1;
        end else begin
            ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln383_fu_187_p2 == 1'd0) | (icmp_ln384_fu_220_p2 == 1'd0)))) begin
        ap_return = ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((((icmp_ln383_fu_187_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln383_fu_187_p2 == 1'd1) & (icmp_ln384_fu_220_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        idx_out_ap_vld = 1'b1;
    end else begin
        idx_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outputVector_ce0 = 1'b1;
    end else begin
        outputVector_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outputVector_we0 = 1'b1;
    end else begin
        outputVector_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rgb_buf_ce0 = 1'b1;
    end else begin
        rgb_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln376_fu_214_p2 = (zext_ln376_fu_210_p1 + store_assign_1);

assign add_ln376_out = add_ln376_fu_214_p2;

assign add_ln383_fu_250_p2 = (e_fu_74 + 32'd1);

assign add_ln385_1_fu_240_p2 = (trunc_ln383_fu_198_p1 + mul_ln376);

assign add_ln385_2_fu_245_p2 = (zext_ln385_3 + add_ln385_1_fu_240_p2);

assign add_ln385_fu_192_p2 = (idx_fu_70 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_106 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_234 = ((icmp_ln383_fu_187_p2 == 1'd1) & (icmp_ln384_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln383_fu_187_p2 = (($signed(e_fu_74) < $signed(add3_i_i)) ? 1'b1 : 1'b0);

assign icmp_ln384_fu_220_p2 = (($signed(e_fu_74) < $signed(sext_ln379_cast_reg_304)) ? 1'b1 : 1'b0);

assign idx_out = idx_fu_70;

assign lshr_ln_fu_225_p4 = {{add_ln376_fu_214_p2[11:2]}};

assign outputVector_address0 = zext_ln385_1_fu_266_p1;

assign outputVector_d0 = rgb_buf_q0;

assign rgb_buf_address0 = zext_ln385_fu_235_p1;

assign sext_ln379_cast_fu_166_p1 = $signed(sext_ln379);

assign shl_ln_fu_202_p3 = {{idx_fu_70}, {2'd0}};

assign trunc_ln383_fu_198_p1 = e_fu_74[15:0];

assign zext_ln376_fu_210_p1 = shl_ln_fu_202_p3;

assign zext_ln385_1_fu_266_p1 = add_ln385_2_reg_322;

assign zext_ln385_fu_235_p1 = lshr_ln_fu_225_p4;

endmodule //jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_383_2
