-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_huff_make_dhuff_tb_1_Pipeline_VITIS_LOOP_650_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln650 : IN STD_LOGIC_VECTOR (31 downto 0);
    code : IN STD_LOGIC_VECTOR (31 downto 0);
    huffcode_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    huffcode_ce0 : OUT STD_LOGIC;
    huffcode_we0 : OUT STD_LOGIC;
    huffcode_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    huffsize_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    huffsize_ce0 : OUT STD_LOGIC;
    huffsize_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    size_4 : IN STD_LOGIC_VECTOR (4 downto 0);
    code_4_out : OUT STD_LOGIC_VECTOR (30 downto 0);
    code_4_out_ap_vld : OUT STD_LOGIC;
    add_ln651_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    add_ln651_out_ap_vld : OUT STD_LOGIC;
    huffsize_load_out : OUT STD_LOGIC_VECTOR (4 downto 0);
    huffsize_load_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of jpeg2bmp_huff_make_dhuff_tb_1_Pipeline_VITIS_LOOP_650_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv34_1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_const_lv34_101 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln652_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal trunc_ln628_fu_152_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln628_reg_216 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln651_fu_162_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln651_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln652_2_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln652_2_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln628_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln651_fu_166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal code_1_fu_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal code_7_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_code_6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_fu_50 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    signal sext_ln650_cast_fu_120_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln651_fu_156_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_sig_allocacmp_p_6 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln652_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    code_1_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                code_1_fu_46 <= code_7_fu_146_p2;
            end if;
        end if;
    end process;

    p_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                p_fu_50 <= add_ln651_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln652_2_reg_231 <= icmp_ln652_2_fu_171_p2;
                trunc_ln628_reg_216 <= trunc_ln628_fu_152_p1;
                trunc_ln651_reg_221 <= trunc_ln651_fu_162_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln651_fu_156_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_p_6) + unsigned(ap_const_lv34_1));
    add_ln651_out <= trunc_ln651_reg_221;

    add_ln651_out_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln652_fu_192_p2)
    begin
        if (((ap_const_lv1_0 = and_ln652_fu_192_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            add_ln651_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln651_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    and_ln652_fu_192_p2 <= (icmp_ln652_fu_187_p2 and icmp_ln652_2_reg_231);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_CS_fsm_state2, and_ln652_fu_192_p2)
    begin
        if (((ap_const_lv1_0 = and_ln652_fu_192_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state2, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_code_6_assign_proc : process(ap_CS_fsm_state1, code, code_1_fu_46, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_code_6 <= code;
        else 
            ap_sig_allocacmp_code_6 <= code_1_fu_46;
        end if; 
    end process;


    ap_sig_allocacmp_p_6_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, p_fu_50, sext_ln650_cast_fu_120_p1)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_p_6 <= sext_ln650_cast_fu_120_p1;
        else 
            ap_sig_allocacmp_p_6 <= p_fu_50;
        end if; 
    end process;

    code_4_out <= trunc_ln628_reg_216;

    code_4_out_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln652_fu_192_p2)
    begin
        if (((ap_const_lv1_0 = and_ln652_fu_192_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            code_4_out_ap_vld <= ap_const_logic_1;
        else 
            code_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    code_7_fu_146_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_code_6) + unsigned(ap_const_lv32_1));
    huffcode_address0 <= zext_ln628_fu_141_p1(9 - 1 downto 0);

    huffcode_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffcode_ce0 <= ap_const_logic_1;
        else 
            huffcode_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    huffcode_d0 <= ap_sig_allocacmp_code_6;

    huffcode_we0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffcode_we0 <= ap_const_logic_1;
        else 
            huffcode_we0 <= ap_const_logic_0;
        end if; 
    end process;

    huffsize_address0 <= zext_ln651_fu_166_p1(9 - 1 downto 0);

    huffsize_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            huffsize_ce0 <= ap_const_logic_1;
        else 
            huffsize_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    huffsize_load_out <= huffsize_q0;

    huffsize_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state2, and_ln652_fu_192_p2)
    begin
        if (((ap_const_lv1_0 = and_ln652_fu_192_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            huffsize_load_out_ap_vld <= ap_const_logic_1;
        else 
            huffsize_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln652_2_fu_171_p2 <= "1" when (signed(add_ln651_fu_156_p2) < signed(ap_const_lv34_101)) else "0";
    icmp_ln652_fu_187_p2 <= "1" when (huffsize_q0 = size_4) else "0";
        sext_ln650_cast_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln650),34));

    trunc_ln628_fu_152_p1 <= code_7_fu_146_p2(31 - 1 downto 0);
    trunc_ln651_fu_162_p1 <= add_ln651_fu_156_p2(32 - 1 downto 0);
    zext_ln628_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_p_6),64));
    zext_ln651_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln651_fu_156_p2),64));
end behav;
