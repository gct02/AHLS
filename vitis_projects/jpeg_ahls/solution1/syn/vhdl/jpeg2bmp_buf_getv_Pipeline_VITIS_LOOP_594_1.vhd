-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_buf_getv_Pipeline_VITIS_LOOP_594_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    read_position_load : IN STD_LOGIC_VECTOR (31 downto 0);
    CurHuffReadBuf_load : IN STD_LOGIC_VECTOR (7 downto 0);
    p : IN STD_LOGIC_VECTOR (30 downto 0);
    temp_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_out_ap_vld : OUT STD_LOGIC;
    p_03_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_03_out_ap_vld : OUT STD_LOGIC;
    current_read_byte_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_read_byte_load_out_ap_vld : OUT STD_LOGIC;
    select_ln555_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    select_ln555_out_ap_vld : OUT STD_LOGIC;
    current_read_byte_i : IN STD_LOGIC_VECTOR (31 downto 0);
    current_read_byte_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    current_read_byte_o_ap_vld : OUT STD_LOGIC;
    read_position : OUT STD_LOGIC_VECTOR (31 downto 0);
    read_position_ap_vld : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of jpeg2bmp_buf_getv_Pipeline_VITIS_LOOP_594_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_FFFFFFF8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln595_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln594_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_ln_fu_207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln605_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_03_fu_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_9_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal temp_fu_70 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln555_fu_194_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_load_1_load_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln555_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln555_fu_182_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln604_fu_203_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_79 : BOOLEAN;
    signal ap_condition_208 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln594_fu_161_p2 = ap_const_lv1_0) or (icmp_ln595_fu_171_p2 = ap_const_lv1_1)))) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_127_p4;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    empty_fu_74 <= read_position_load;
                elsif ((ap_const_boolean_1 = ap_condition_208)) then 
                    empty_fu_74 <= add_ln605_fu_221_p2;
                end if;
            end if; 
        end if;
    end process;

    p_03_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_03_fu_66 <= p_cast_fu_135_p1;
                elsif ((ap_const_boolean_1 = ap_condition_208)) then 
                    p_03_fu_66 <= p_9_fu_233_p2;
                end if;
            end if; 
        end if;
    end process;

    temp_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    temp_fu_70 <= CurHuffReadBuf_load;
                elsif ((ap_const_boolean_1 = ap_condition_208)) then 
                    temp_fu_70 <= select_ln555_fu_194_p3;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln555_fu_182_p2 <= std_logic_vector(unsigned(temp_fu_70) + unsigned(ap_const_lv8_1));
    add_ln605_fu_221_p2 <= std_logic_vector(unsigned(empty_fu_74) + unsigned(ap_const_lv32_8));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_208_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2)
    begin
                ap_condition_208 <= ((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_79_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_79 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln594_fu_161_p2 = ap_const_lv1_0) or (icmp_ln595_fu_171_p2 = ap_const_lv1_1)))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_UnifiedRetVal_phi_fu_127_p4_assign_proc : process(icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_condition_79)
    begin
        if ((ap_const_boolean_1 = ap_condition_79)) then
            if (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 <= ap_const_lv1_0;
            elsif ((icmp_ln594_fu_161_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 <= "X";
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_127_p4 <= "X";
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_phi_mux_UnifiedRetVal_phi_fu_127_p4, ap_block_pp0_stage0_11001, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln594_fu_161_p2 = ap_const_lv1_0) or (icmp_ln595_fu_171_p2 = ap_const_lv1_1)))) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_127_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    current_read_byte_load_out <= current_read_byte_i;

    current_read_byte_load_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_read_byte_load_out_ap_vld <= ap_const_logic_1;
        else 
            current_read_byte_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    current_read_byte_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, current_read_byte_i, ap_block_pp0_stage0, or_ln_fu_207_p3)
    begin
        if (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_read_byte_o <= or_ln_fu_207_p3;
        else 
            current_read_byte_o <= current_read_byte_i;
        end if; 
    end process;


    current_read_byte_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            current_read_byte_o_ap_vld <= ap_const_logic_1;
        else 
            current_read_byte_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln555_fu_188_p2 <= "1" when (temp_fu_70 = ap_const_lv8_FF) else "0";
    icmp_ln594_fu_161_p2 <= "1" when (signed(p_03_fu_66) > signed(ap_const_lv32_0)) else "0";
    icmp_ln595_fu_171_p2 <= "1" when (signed(empty_fu_74) > signed(ap_const_lv32_17)) else "0";
    or_ln_fu_207_p3 <= (trunc_ln604_fu_203_p1 & temp_fu_70);
    p_03_out <= p_03_fu_66;

    p_03_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln594_fu_161_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            p_03_out_ap_vld <= ap_const_logic_1;
        else 
            p_03_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_9_fu_233_p2 <= std_logic_vector(unsigned(p_03_fu_66) + unsigned(ap_const_lv32_FFFFFFF8));
    p_cast_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p),32));
    read_position <= std_logic_vector(unsigned(empty_fu_74) + unsigned(ap_const_lv32_8));

    read_position_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            read_position_ap_vld <= ap_const_logic_1;
        else 
            read_position_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln555_fu_194_p3 <= 
        ap_const_lv8_1 when (icmp_ln555_fu_188_p2(0) = '1') else 
        add_ln555_fu_182_p2;
    select_ln555_out <= 
        ap_const_lv8_1 when (icmp_ln555_fu_188_p2(0) = '1') else 
        add_ln555_fu_182_p2;

    select_ln555_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            select_ln555_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln555_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_load_1_load_fu_254_p1 <= temp_fu_70;

    temp_out_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, temp_fu_70, temp_load_1_load_fu_254_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((icmp_ln594_fu_161_p2 = ap_const_lv1_0)) then 
                temp_out <= temp_load_1_load_fu_254_p1;
            elsif (((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_1))) then 
                temp_out <= temp_fu_70;
            else 
                temp_out <= "XXXXXXXX";
            end if;
        else 
            temp_out <= "XXXXXXXX";
        end if; 
    end process;


    temp_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln595_fu_171_p2, icmp_ln594_fu_161_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln594_fu_161_p2 = ap_const_lv1_1) and (icmp_ln595_fu_171_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln594_fu_161_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            temp_out_ap_vld <= ap_const_logic_1;
        else 
            temp_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln604_fu_203_p1 <= current_read_byte_i(24 - 1 downto 0);
end behav;
