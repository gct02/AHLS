-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_ChenIDct_1_Pipeline_VITIS_LOOP_249_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y : IN STD_LOGIC_VECTOR (9 downto 0);
    IDCTBuff_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    IDCTBuff_ce0 : OUT STD_LOGIC;
    IDCTBuff_we0 : OUT STD_LOGIC;
    IDCTBuff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IDCTBuff_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    IDCTBuff_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    IDCTBuff_ce1 : OUT STD_LOGIC;
    IDCTBuff_we1 : OUT STD_LOGIC;
    IDCTBuff_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IDCTBuff_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_51_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_51_p_din1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    grp_fu_51_p_dout0 : IN STD_LOGIC_VECTOR (39 downto 0);
    grp_fu_51_p_ce : OUT STD_LOGIC;
    grp_fu_55_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_55_p_din1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_55_p_dout0 : IN STD_LOGIC_VECTOR (40 downto 0);
    grp_fu_55_p_ce : OUT STD_LOGIC;
    grp_fu_59_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_59_p_din1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_59_p_dout0 : IN STD_LOGIC_VECTOR (40 downto 0);
    grp_fu_59_p_ce : OUT STD_LOGIC;
    grp_fu_63_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_63_p_din1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_63_p_dout0 : IN STD_LOGIC_VECTOR (40 downto 0);
    grp_fu_63_p_ce : OUT STD_LOGIC );
end;


architecture behav of jpeg2bmp_ChenIDct_1_Pipeline_VITIS_LOOP_249_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv40_64 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001100100";
    constant ap_const_lv41_1AA : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000110101010";
    constant ap_const_lv41_C4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000011000100";
    constant ap_const_lv41_16A : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000101101010";
    constant ap_const_lv41_1F6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000111110110";
    constant ap_const_lv41_11C : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100011100";
    constant ap_const_lv41_1D9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000111011001";
    constant ap_const_lv41_1FFFFFFFEE4 : STD_LOGIC_VECTOR (40 downto 0) := "11111111111111111111111111111111011100100";
    constant ap_const_lv41_1FFFFFFFE0A : STD_LOGIC_VECTOR (40 downto 0) := "11111111111111111111111111111111000001010";
    constant ap_const_lv41_1FFFFFFFE27 : STD_LOGIC_VECTOR (40 downto 0) := "11111111111111111111111111111111000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_C : STD_LOGIC_VECTOR (7 downto 0) := "00001100";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv9_8 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_const_lv9_C : STD_LOGIC_VECTOR (8 downto 0) := "000001100";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv8_1C : STD_LOGIC_VECTOR (7 downto 0) := "00011100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln249_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_223 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_227 : STD_LOGIC_VECTOR (40 downto 0);
    signal reg_231 : STD_LOGIC_VECTOR (40 downto 0);
    signal reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal shl_ln_fu_263_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_794 : STD_LOGIC_VECTOR (7 downto 0);
    signal IDCTBuff_addr_3_reg_802 : STD_LOGIC_VECTOR (8 downto 0);
    signal IDCTBuff_addr_5_reg_807 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_reg_813 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln4_reg_823 : STD_LOGIC_VECTOR (7 downto 0);
    signal IDCTBuff_addr_7_reg_828 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln6_reg_833 : STD_LOGIC_VECTOR (7 downto 0);
    signal IDCTBuff_addr_9_reg_838 : STD_LOGIC_VECTOR (8 downto 0);
    signal IDCTBuff_addr_4_reg_844 : STD_LOGIC_VECTOR (8 downto 0);
    signal IDCTBuff_addr_8_reg_850 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln268_fu_500_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln265_fu_505_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln266_1_fu_510_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal IDCTBuff_addr_reg_871 : STD_LOGIC_VECTOR (8 downto 0);
    signal IDCTBuff_addr_6_reg_877 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln265_reg_882 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln265_2_fu_524_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln265_3_fu_529_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln266_fu_534_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln265_1_reg_903 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mul_ln266_reg_908 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln267_1_reg_913 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln268_1_reg_918 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln272_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln272_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln273_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln273_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln276_fu_552_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln275_fu_558_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln272_fu_631_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln273_fu_635_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln276_1_reg_955 : STD_LOGIC_VECTOR (40 downto 0);
    signal a0_3_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a0_3_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal a3_3_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a3_3_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln293_fu_663_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln293_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln294_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln294_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_1_reg_982 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_1_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal a3_1_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln293_fu_706_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln294_fu_710_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal b3_1_fu_719_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b3_1_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_1_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln305_fu_730_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln305_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_1_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_1_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sub_ln304_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln304_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln303_fu_760_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln303_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sub_ln302_fu_770_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln302_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln252_2_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln254_1_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln256_1_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln258_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln253_1_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_1_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_1_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_10_fu_80 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln249_fu_253_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln298_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln299_fu_743_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln300_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln301_fu_765_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_188_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln250_fu_259_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln251_fu_271_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln251_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_1_fu_281_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln1_fu_287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln253_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln253_fu_308_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_3_fu_312_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln3_fu_318_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln250_fu_338_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln252_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln252_1_fu_365_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_2_fu_369_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln252_fu_361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln254_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln254_fu_390_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln255_fu_399_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln255_fu_405_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_4_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln256_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln256_fu_429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_5_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln5_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln257_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln257_fu_458_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_6_fu_433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal aptr_7_fu_462_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln7_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln265_1_fu_564_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln265_fu_567_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln266_fu_582_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln267_fu_597_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln268_1_fu_612_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln268_fu_615_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal c0_fu_572_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal c1_fu_587_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal c3_fu_621_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_fu_602_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2_2_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_2_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln275_fu_675_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln276_fu_691_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal b0_1_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_1_fu_735_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_mul_32s_8ns_40_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component jpeg2bmp_mul_32s_10ns_41_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component jpeg2bmp_mul_32s_9ns_41_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component jpeg2bmp_mul_32s_10s_41_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_9ns_41_2_1_U156 : component jpeg2bmp_mul_32s_9ns_41_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_219,
        din1 => grp_fu_181_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);

    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_10_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln249_fu_247_p2 = ap_const_lv1_0)) then 
                    i_10_fu_80 <= add_ln249_fu_253_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_10_fu_80 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    IDCTBuff_addr_3_reg_802(7 downto 0) <= zext_ln252_2_fu_297_p1(9 - 1 downto 0)(7 downto 0);
                    IDCTBuff_addr_5_reg_807(7 downto 0) <= zext_ln254_1_fu_328_p1(9 - 1 downto 0)(7 downto 0);
                    shl_ln_reg_794(7 downto 5) <= shl_ln_fu_263_p3(7 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    IDCTBuff_addr_4_reg_844(7 downto 0) <= zext_ln253_1_fu_492_p1(9 - 1 downto 0)(7 downto 0);
                    IDCTBuff_addr_8_reg_850(7 downto 0) <= zext_ln257_1_fu_496_p1(9 - 1 downto 0)(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    IDCTBuff_addr_6_reg_877(7 downto 0) <= zext_ln255_1_fu_520_p1(9 - 1 downto 0)(7 downto 0);
                    IDCTBuff_addr_reg_871(7 downto 0) <= zext_ln251_1_fu_516_p1(9 - 1 downto 0)(7 downto 0);
                mul_ln265_reg_882 <= grp_fu_51_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    IDCTBuff_addr_7_reg_828(7 downto 0) <= zext_ln256_1_fu_448_p1(9 - 1 downto 0)(7 downto 0);
                    IDCTBuff_addr_9_reg_838(7 downto 0) <= zext_ln258_fu_487_p1(9 - 1 downto 0)(7 downto 0);
                lshr_ln2_reg_818 <= aptr_2_fu_369_p2(9 downto 2);
                lshr_ln4_reg_823 <= aptr_4_fu_394_p2(9 downto 2);
                lshr_ln6_reg_833 <= aptr_6_fu_433_p2(9 downto 2);
                lshr_ln_reg_813 <= aptr_fu_341_p2(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                a0_3_reg_960 <= a0_3_fu_639_p2;
                a3_3_reg_966 <= a3_3_fu_657_p2;
                add_ln294_reg_977 <= add_ln294_fu_669_p2;
                mul_ln276_1_reg_955 <= grp_fu_181_p2;
                sub_ln293_reg_972 <= sub_ln293_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                a1_1_reg_982 <= grp_fu_59_p_dout0(40 downto 9);
                a2_1_reg_988 <= add_ln275_fu_675_p2(40 downto 9);
                a3_1_reg_994 <= add_ln276_fu_691_p2(40 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln272_reg_923 <= add_ln272_fu_540_p2;
                mul_ln265_1_reg_903 <= grp_fu_63_p_dout0;
                mul_ln266_reg_908 <= grp_fu_55_p_dout0;
                mul_ln267_1_reg_913 <= grp_fu_59_p_dout0;
                mul_ln268_1_reg_918 <= grp_fu_51_p_dout0;
                sub_ln273_reg_928 <= sub_ln273_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                b2_1_reg_1027 <= b2_1_fu_739_p2;
                sub_ln304_reg_1033 <= sub_ln304_fu_749_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                b3_1_reg_1010 <= b3_1_fu_719_p2;
                c2_1_reg_1016 <= grp_fu_59_p_dout0(40 downto 9);
                sub_ln305_reg_1022 <= sub_ln305_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_215 <= IDCTBuff_q1;
                reg_219 <= IDCTBuff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_223 <= grp_fu_63_p_dout0;
                reg_227 <= grp_fu_55_p_dout0;
                reg_231 <= grp_fu_59_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_235 <= grp_fu_55_p_dout0(40 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                sub_ln302_reg_1043 <= sub_ln302_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                sub_ln303_reg_1038 <= sub_ln303_fu_760_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_794(4 downto 0) <= "00000";
    IDCTBuff_addr_3_reg_802(8) <= '0';
    IDCTBuff_addr_5_reg_807(8) <= '0';
    IDCTBuff_addr_7_reg_828(8) <= '0';
    IDCTBuff_addr_9_reg_838(8) <= '0';
    IDCTBuff_addr_4_reg_844(8) <= '0';
    IDCTBuff_addr_8_reg_850(8) <= '0';
    IDCTBuff_addr_reg_871(8) <= '0';
    IDCTBuff_addr_6_reg_877(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln249_fu_247_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln249_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    IDCTBuff_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln249_fu_247_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, IDCTBuff_addr_4_reg_844, IDCTBuff_addr_8_reg_850, IDCTBuff_addr_reg_871, IDCTBuff_addr_6_reg_877, ap_CS_fsm_state10, zext_ln254_1_fu_328_p1, zext_ln258_fu_487_p1, zext_ln257_1_fu_496_p1, zext_ln255_1_fu_520_p1, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            IDCTBuff_address0 <= IDCTBuff_addr_8_reg_850;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            IDCTBuff_address0 <= IDCTBuff_addr_6_reg_877;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            IDCTBuff_address0 <= IDCTBuff_addr_4_reg_844;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            IDCTBuff_address0 <= IDCTBuff_addr_reg_871;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IDCTBuff_address0 <= zext_ln255_1_fu_520_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IDCTBuff_address0 <= zext_ln257_1_fu_496_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IDCTBuff_address0 <= zext_ln258_fu_487_p1(9 - 1 downto 0);
        elsif (((icmp_ln249_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IDCTBuff_address0 <= zext_ln254_1_fu_328_p1(9 - 1 downto 0);
        else 
            IDCTBuff_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    IDCTBuff_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln249_fu_247_p2, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, IDCTBuff_addr_3_reg_802, IDCTBuff_addr_5_reg_807, IDCTBuff_addr_7_reg_828, IDCTBuff_addr_9_reg_838, ap_CS_fsm_state9, ap_CS_fsm_state11, zext_ln252_2_fu_297_p1, zext_ln256_1_fu_448_p1, zext_ln253_1_fu_492_p1, zext_ln251_1_fu_516_p1, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            IDCTBuff_address1 <= IDCTBuff_addr_9_reg_838;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            IDCTBuff_address1 <= IDCTBuff_addr_7_reg_828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            IDCTBuff_address1 <= IDCTBuff_addr_5_reg_807;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            IDCTBuff_address1 <= IDCTBuff_addr_3_reg_802;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            IDCTBuff_address1 <= zext_ln251_1_fu_516_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            IDCTBuff_address1 <= zext_ln253_1_fu_492_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            IDCTBuff_address1 <= zext_ln256_1_fu_448_p1(9 - 1 downto 0);
        elsif (((icmp_ln249_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IDCTBuff_address1 <= zext_ln252_2_fu_297_p1(9 - 1 downto 0);
        else 
            IDCTBuff_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    IDCTBuff_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln249_fu_247_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((icmp_ln249_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            IDCTBuff_ce0 <= ap_const_logic_1;
        else 
            IDCTBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IDCTBuff_ce1_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln249_fu_247_p2, ap_CS_fsm_state15, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln249_fu_247_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            IDCTBuff_ce1 <= ap_const_logic_1;
        else 
            IDCTBuff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    IDCTBuff_d0_assign_proc : process(ap_CS_fsm_state8, sub_ln304_reg_1033, ap_CS_fsm_state10, sub_ln302_reg_1043, add_ln298_fu_724_p2, add_ln300_fu_754_p2, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            IDCTBuff_d0 <= sub_ln304_reg_1033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            IDCTBuff_d0 <= sub_ln302_reg_1043;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            IDCTBuff_d0 <= add_ln300_fu_754_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            IDCTBuff_d0 <= add_ln298_fu_724_p2;
        else 
            IDCTBuff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IDCTBuff_d1_assign_proc : process(ap_CS_fsm_state15, sub_ln305_reg_1022, ap_CS_fsm_state9, sub_ln303_reg_1038, ap_CS_fsm_state11, add_ln299_fu_743_p2, add_ln301_fu_765_p2, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            IDCTBuff_d1 <= sub_ln305_reg_1022;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            IDCTBuff_d1 <= sub_ln303_reg_1038;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            IDCTBuff_d1 <= add_ln301_fu_765_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            IDCTBuff_d1 <= add_ln299_fu_743_p2;
        else 
            IDCTBuff_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IDCTBuff_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            IDCTBuff_we0 <= ap_const_logic_1;
        else 
            IDCTBuff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    IDCTBuff_we1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            IDCTBuff_we1 <= ap_const_logic_1;
        else 
            IDCTBuff_we1 <= ap_const_logic_0;
        end if; 
    end process;

    a0_3_fu_639_p2 <= std_logic_vector(unsigned(c0_fu_572_p4) + unsigned(c1_fu_587_p4));
    a1_2_fu_645_p2 <= std_logic_vector(unsigned(c0_fu_572_p4) - unsigned(c1_fu_587_p4));
    a2_2_fu_651_p2 <= std_logic_vector(unsigned(c3_fu_621_p4) - unsigned(c2_fu_602_p4));
    a3_3_fu_657_p2 <= std_logic_vector(unsigned(c3_fu_621_p4) + unsigned(c2_fu_602_p4));
    add_ln249_fu_253_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv4_1));
    add_ln254_fu_384_p2 <= std_logic_vector(unsigned(zext_ln252_fu_361_p1) + unsigned(ap_const_lv9_8));
    add_ln255_fu_399_p2 <= std_logic_vector(unsigned(zext_ln252_fu_361_p1) + unsigned(ap_const_lv9_C));
    add_ln265_fu_567_p2 <= std_logic_vector(unsigned(mul_ln265_1_reg_903) + unsigned(sext_ln265_1_fu_564_p1));
    add_ln266_fu_582_p2 <= std_logic_vector(unsigned(mul_ln266_reg_908) + unsigned(reg_223));
    add_ln267_fu_597_p2 <= std_logic_vector(unsigned(mul_ln267_1_reg_913) + unsigned(reg_227));
    add_ln268_fu_615_p2 <= std_logic_vector(signed(sext_ln268_1_fu_612_p1) + signed(reg_231));
    add_ln272_fu_540_p2 <= std_logic_vector(unsigned(IDCTBuff_q0) + unsigned(IDCTBuff_q1));
    add_ln275_fu_675_p2 <= std_logic_vector(unsigned(reg_223) + unsigned(reg_227));
    add_ln276_fu_691_p2 <= std_logic_vector(unsigned(mul_ln276_1_reg_955) + unsigned(reg_231));
    add_ln294_fu_669_p2 <= std_logic_vector(unsigned(a2_2_fu_651_p2) + unsigned(a1_2_fu_645_p2));
    add_ln298_fu_724_p2 <= std_logic_vector(unsigned(a3_3_reg_966) + unsigned(b0_1_fu_714_p2));
    add_ln299_fu_743_p2 <= std_logic_vector(unsigned(c2_1_reg_1016) + unsigned(b1_1_fu_735_p2));
    add_ln300_fu_754_p2 <= std_logic_vector(unsigned(reg_235) + unsigned(b2_1_reg_1027));
    add_ln301_fu_765_p2 <= std_logic_vector(unsigned(a0_3_reg_960) + unsigned(b3_1_reg_1010));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln249_fu_247_p2)
    begin
        if (((icmp_ln249_fu_247_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_10_fu_80, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i <= i_10_fu_80;
        end if; 
    end process;

    aptr_1_fu_281_p2 <= std_logic_vector(unsigned(zext_ln251_fu_277_p1) + unsigned(y));
    aptr_2_fu_369_p2 <= std_logic_vector(unsigned(zext_ln252_1_fu_365_p1) + unsigned(y));
    aptr_3_fu_312_p2 <= std_logic_vector(unsigned(zext_ln253_fu_308_p1) + unsigned(y));
    aptr_4_fu_394_p2 <= std_logic_vector(unsigned(zext_ln254_fu_390_p1) + unsigned(y));
    aptr_5_fu_409_p2 <= std_logic_vector(unsigned(zext_ln255_fu_405_p1) + unsigned(y));
    aptr_6_fu_433_p2 <= std_logic_vector(unsigned(zext_ln256_fu_429_p1) + unsigned(y));
    aptr_7_fu_462_p2 <= std_logic_vector(unsigned(zext_ln257_fu_458_p1) + unsigned(y));
    aptr_fu_341_p2 <= std_logic_vector(unsigned(zext_ln250_fu_338_p1) + unsigned(y));
    b0_1_fu_714_p2 <= std_logic_vector(unsigned(a3_1_reg_994) + unsigned(reg_235));
    b1_1_fu_735_p2 <= std_logic_vector(unsigned(a2_1_reg_988) + unsigned(a1_1_reg_982));
    b2_1_fu_739_p2 <= std_logic_vector(unsigned(a1_1_reg_982) - unsigned(a2_1_reg_988));
    b3_1_fu_719_p2 <= std_logic_vector(unsigned(reg_235) - unsigned(a3_1_reg_994));
    c0_fu_572_p4 <= add_ln265_fu_567_p2(40 downto 9);
    c1_fu_587_p4 <= add_ln266_fu_582_p2(40 downto 9);
    c2_fu_602_p4 <= add_ln267_fu_597_p2(40 downto 9);
    c3_fu_621_p4 <= add_ln268_fu_615_p2(40 downto 9);

    grp_fu_163_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln265_fu_505_p1, sext_ln265_2_fu_524_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_163_p0 <= sext_ln265_2_fu_524_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_163_p0 <= sext_ln265_fu_505_p1(32 - 1 downto 0);
        else 
            grp_fu_163_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln266_1_fu_510_p1, sext_ln266_fu_534_p1, ap_CS_fsm_state5, sext_ln276_fu_552_p1, sext_ln272_fu_631_p1, sext_ln293_fu_706_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_168_p0 <= sext_ln293_fu_706_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_168_p0 <= sext_ln272_fu_631_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_168_p0 <= sext_ln276_fu_552_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_168_p0 <= sext_ln266_fu_534_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_168_p0 <= sext_ln266_1_fu_510_p1(32 - 1 downto 0);
        else 
            grp_fu_168_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_168_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_168_p1 <= ap_const_lv41_16A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_168_p1 <= ap_const_lv41_C4(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_168_p1 <= ap_const_lv41_1AA(10 - 1 downto 0);
        else 
            grp_fu_168_p1 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_fu_173_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, sext_ln268_fu_500_p1, sext_ln266_fu_534_p1, ap_CS_fsm_state5, sext_ln276_fu_552_p1, sext_ln273_fu_635_p1, sext_ln294_fu_710_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_173_p0 <= sext_ln294_fu_710_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_173_p0 <= sext_ln273_fu_635_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_173_p0 <= sext_ln276_fu_552_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_173_p0 <= sext_ln266_fu_534_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_173_p0 <= sext_ln268_fu_500_p1(32 - 1 downto 0);
        else 
            grp_fu_173_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_173_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_fu_173_p1 <= ap_const_lv41_16A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_173_p1 <= ap_const_lv41_1D9(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_173_p1 <= ap_const_lv41_11C(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_173_p1 <= ap_const_lv41_1F6(10 - 1 downto 0);
        else 
            grp_fu_173_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_181_p1 <= ap_const_lv41_C4(9 - 1 downto 0);

    grp_fu_188_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln266_1_fu_510_p1, sext_ln265_3_fu_529_p1, ap_CS_fsm_state5, sext_ln275_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_188_p0 <= sext_ln275_fu_558_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_188_p0 <= sext_ln265_3_fu_529_p1(32 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_188_p0 <= sext_ln266_1_fu_510_p1(32 - 1 downto 0);
        else 
            grp_fu_188_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_188_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_188_p1 <= ap_const_lv41_1FFFFFFFE27(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_188_p1 <= ap_const_lv41_1FFFFFFFE0A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_188_p1 <= ap_const_lv41_1FFFFFFFEE4(10 - 1 downto 0);
        else 
            grp_fu_188_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_51_p_ce <= ap_const_logic_1;
    grp_fu_51_p_din0 <= grp_fu_163_p0;
    grp_fu_51_p_din1 <= ap_const_lv40_64(8 - 1 downto 0);
    grp_fu_55_p_ce <= ap_const_logic_1;
    grp_fu_55_p_din0 <= grp_fu_168_p0;
    grp_fu_55_p_din1 <= grp_fu_168_p1;
    grp_fu_59_p_ce <= ap_const_logic_1;
    grp_fu_59_p_din0 <= grp_fu_173_p0;
    grp_fu_59_p_din1 <= grp_fu_173_p1;
    grp_fu_63_p_ce <= ap_const_logic_1;
    grp_fu_63_p_din0 <= grp_fu_188_p0;
    grp_fu_63_p_din1 <= grp_fu_188_p1;
    icmp_ln249_fu_247_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv4_8) else "0";
    lshr_ln1_fu_287_p4 <= aptr_1_fu_281_p2(9 downto 2);
    lshr_ln3_fu_318_p4 <= aptr_3_fu_312_p2(9 downto 2);
    lshr_ln5_fu_438_p4 <= aptr_5_fu_409_p2(9 downto 2);
    lshr_ln7_fu_477_p4 <= aptr_7_fu_462_p2(9 downto 2);
    or_ln251_fu_271_p2 <= (shl_ln_fu_263_p3 or ap_const_lv8_4);
    or_ln252_fu_356_p2 <= (shl_ln_reg_794 or ap_const_lv8_8);
    or_ln253_fu_302_p2 <= (shl_ln_fu_263_p3 or ap_const_lv8_C);
    or_ln256_fu_424_p2 <= (shl_ln_reg_794 or ap_const_lv8_18);
    or_ln257_fu_453_p2 <= (shl_ln_reg_794 or ap_const_lv8_1C);
        sext_ln265_1_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln265_reg_882),41));

        sext_ln265_2_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_219),40));

        sext_ln265_3_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_219),41));

        sext_ln265_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),40));

        sext_ln266_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_219),41));

        sext_ln266_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),41));

        sext_ln268_1_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln268_1_reg_918),41));

        sext_ln268_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),41));

        sext_ln272_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln272_reg_923),41));

        sext_ln273_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln273_reg_928),41));

        sext_ln275_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_219),41));

        sext_ln276_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_215),41));

        sext_ln293_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln293_reg_972),41));

        sext_ln294_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln294_reg_977),41));

    shl_ln_fu_263_p3 <= (trunc_ln250_fu_259_p1 & ap_const_lv5_0);
    sub_ln273_fu_546_p2 <= std_logic_vector(unsigned(IDCTBuff_q1) - unsigned(IDCTBuff_q0));
    sub_ln293_fu_663_p2 <= std_logic_vector(unsigned(a2_2_fu_651_p2) - unsigned(a1_2_fu_645_p2));
    sub_ln302_fu_770_p2 <= std_logic_vector(unsigned(b3_1_reg_1010) - unsigned(a0_3_reg_960));
    sub_ln303_fu_760_p2 <= std_logic_vector(unsigned(b2_1_reg_1027) - unsigned(reg_235));
    sub_ln304_fu_749_p2 <= std_logic_vector(unsigned(b1_1_fu_735_p2) - unsigned(c2_1_reg_1016));
    sub_ln305_fu_730_p2 <= std_logic_vector(unsigned(b0_1_fu_714_p2) - unsigned(a3_3_reg_966));
    trunc_ln250_fu_259_p1 <= ap_sig_allocacmp_i(3 - 1 downto 0);
    zext_ln250_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_794),10));
    zext_ln251_1_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_813),64));
    zext_ln251_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln251_fu_271_p2),10));
    zext_ln252_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln252_fu_356_p2),10));
    zext_ln252_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_287_p4),64));
    zext_ln252_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln252_fu_356_p2),9));
    zext_ln253_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_818),64));
    zext_ln253_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln253_fu_302_p2),10));
    zext_ln254_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_318_p4),64));
    zext_ln254_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln254_fu_384_p2),10));
    zext_ln255_1_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln4_reg_823),64));
    zext_ln255_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln255_fu_399_p2),10));
    zext_ln256_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln5_fu_438_p4),64));
    zext_ln256_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln256_fu_424_p2),10));
    zext_ln257_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln6_reg_833),64));
    zext_ln257_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln257_fu_453_p2),10));
    zext_ln258_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln7_fu_477_p4),64));
end behav;
