-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_482_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    IDCTBuff_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    IDCTBuff_ce0 : OUT STD_LOGIC;
    IDCTBuff_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    IDCTBuff_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    IDCTBuff_ce1 : OUT STD_LOGIC;
    IDCTBuff_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rgb_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rgb_buf_ce0 : OUT STD_LOGIC;
    rgb_buf_we0 : OUT STD_LOGIC;
    rgb_buf_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    rgb_buf_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rgb_buf_ce1 : OUT STD_LOGIC;
    rgb_buf_we1 : OUT STD_LOGIC;
    rgb_buf_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_482_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_167 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100111";
    constant ap_const_lv32_1C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000110";
    constant ap_const_lv32_FFFFFFA8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110101000";
    constant ap_const_lv32_FFFFFF4A : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111101001010";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_FFFFFF80 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln482_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_449 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_449_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln482_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln482_reg_454_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln484_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln484_reg_458 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln484_reg_458_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln484_reg_458_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln485_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln485_reg_468 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln485_reg_468_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln485_reg_468_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal u_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln482_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln482_reg_490 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln488_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln487_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln487_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln487_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln487_reg_511 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln488_1_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_521 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln493_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln493_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal g_fu_382_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_434_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_6_fu_70 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln482_fu_170_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (6 downto 0);
    signal r_fu_329_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_140_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_140_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_146_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_146_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln484_fu_176_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln_fu_180_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1_fu_193_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln487_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_253_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln488_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln488_1_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln489_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln491_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln491_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln491_fu_317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln8_fu_269_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_346_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln496_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln498_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln496_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln496_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln478_1_fu_287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_398_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_390_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln501_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln503_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln501_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln501_fu_420_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln478_2_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_mul_32s_10ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jpeg2bmp_mul_32s_9s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_10ns_32_2_1_U194 : component jpeg2bmp_mul_32s_10ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 10,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_140_p0,
        din1 => grp_fu_140_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    mul_32s_9s_32_2_1_U195 : component jpeg2bmp_mul_32s_9s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_146_p0,
        din1 => grp_fu_146_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    i_6_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln482_fu_164_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_6_fu_70 <= add_ln482_fu_170_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_6_fu_70 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln487_reg_511 <= add_ln487_fu_239_p2;
                i_reg_449 <= ap_sig_allocacmp_i;
                i_reg_449_pp0_iter1_reg <= i_reg_449;
                icmp_ln482_reg_454 <= icmp_ln482_fu_164_p2;
                icmp_ln482_reg_454_pp0_iter1_reg <= icmp_ln482_reg_454;
                icmp_ln493_reg_527 <= icmp_ln493_fu_263_p2;
                    or_ln487_reg_505(31 downto 8) <= or_ln487_fu_233_p2(31 downto 8);
                tmp_reg_521 <= add_ln487_fu_239_p2(31 downto 31);
                    zext_ln484_reg_458(5 downto 0) <= zext_ln484_fu_188_p1(5 downto 0);
                    zext_ln484_reg_458_pp0_iter1_reg(5 downto 0) <= zext_ln484_reg_458(5 downto 0);
                    zext_ln484_reg_458_pp0_iter2_reg(5 downto 0) <= zext_ln484_reg_458_pp0_iter1_reg(5 downto 0);
                    zext_ln485_reg_468(5 downto 0) <= zext_ln485_fu_201_p1(5 downto 0);
                    zext_ln485_reg_468_pp0_iter1_reg(5 downto 0) <= zext_ln485_reg_468(5 downto 0);
                    zext_ln485_reg_468_pp0_iter2_reg(5 downto 0) <= zext_ln485_reg_468_pp0_iter1_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_reg_537 <= b_fu_434_p3;
                g_reg_532 <= g_fu_382_p3;
                u_reg_478 <= u_fu_211_p2;
                v_reg_484 <= v_fu_217_p2;
                    zext_ln482_reg_490(6 downto 0) <= zext_ln482_fu_223_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln488_1_reg_516 <= grp_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln488_reg_500 <= grp_fu_146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_152 <= grp_fu_140_p2;
            end if;
        end if;
    end process;
    zext_ln484_reg_458(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000001";
    zext_ln484_reg_458_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000001";
    zext_ln484_reg_458_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000001";
    zext_ln485_reg_468(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000010";
    zext_ln485_reg_468_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000010";
    zext_ln485_reg_468_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000010";
    zext_ln482_reg_490(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    or_ln487_reg_505(7 downto 0) <= "10000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage0, ap_idle_pp0_0to1, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    IDCTBuff_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, zext_ln485_fu_201_p1, zext_ln482_fu_223_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            IDCTBuff_address0 <= zext_ln482_fu_223_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IDCTBuff_address0 <= zext_ln485_fu_201_p1(9 - 1 downto 0);
        else 
            IDCTBuff_address0 <= "XXXXXXXXX";
        end if; 
    end process;

    IDCTBuff_address1 <= zext_ln484_fu_188_p1(9 - 1 downto 0);

    IDCTBuff_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            IDCTBuff_ce0 <= ap_const_logic_1;
        else 
            IDCTBuff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IDCTBuff_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IDCTBuff_ce1 <= ap_const_logic_1;
        else 
            IDCTBuff_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln482_fu_170_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv7_1));
    add_ln487_fu_239_p2 <= std_logic_vector(unsigned(reg_152) + unsigned(or_ln487_fu_233_p2));
    add_ln488_1_fu_282_p2 <= std_logic_vector(unsigned(add_ln488_fu_278_p2) + unsigned(mul_ln488_reg_500));
    add_ln488_fu_278_p2 <= std_logic_vector(unsigned(or_ln487_reg_505) + unsigned(mul_ln488_1_reg_516));
    add_ln489_fu_297_p2 <= std_logic_vector(unsigned(reg_152) + unsigned(or_ln487_reg_505));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln482_reg_454)
    begin
        if (((icmp_ln482_reg_454 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln482_reg_454_pp0_iter1_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln482_reg_454_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_6_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i <= i_6_fu_70;
        end if; 
    end process;

    b_fu_434_p3 <= 
        select_ln501_fu_420_p3 when (or_ln501_fu_428_p2(0) = '1') else 
        trunc_ln478_2_fu_302_p4;
    g_fu_382_p3 <= 
        select_ln496_fu_368_p3 when (or_ln496_fu_376_p2(0) = '1') else 
        trunc_ln478_1_fu_287_p4;

    grp_fu_140_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, u_reg_478, v_reg_484, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_140_p0 <= u_reg_478;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_140_p0 <= v_reg_484;
            else 
                grp_fu_140_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_140_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_140_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_140_p1 <= ap_const_lv32_1C6(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_140_p1 <= ap_const_lv32_167(10 - 1 downto 0);
            else 
                grp_fu_140_p1 <= "XXXXXXXXXX";
            end if;
        else 
            grp_fu_140_p1 <= "XXXXXXXXXX";
        end if; 
    end process;


    grp_fu_146_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, u_reg_478, v_reg_484, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_146_p0 <= v_reg_484;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_146_p0 <= u_reg_478;
            else 
                grp_fu_146_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_146_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_146_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_146_p1 <= ap_const_lv32_FFFFFF4A(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_146_p1 <= ap_const_lv32_FFFFFFA8(9 - 1 downto 0);
            else 
                grp_fu_146_p1 <= "XXXXXXXXX";
            end if;
        else 
            grp_fu_146_p1 <= "XXXXXXXXX";
        end if; 
    end process;

    icmp_ln482_fu_164_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv7_40) else "0";
    icmp_ln493_fu_263_p2 <= "1" when (signed(tmp_7_fu_253_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln498_fu_356_p2 <= "1" when (signed(tmp_9_fu_346_p4) > signed(ap_const_lv16_0)) else "0";
    icmp_ln503_fu_408_p2 <= "1" when (signed(tmp_11_fu_398_p4) > signed(ap_const_lv16_0)) else "0";
    or_ln487_fu_233_p2 <= (shl_ln487_fu_227_p2 or ap_const_lv32_80);
    or_ln491_fu_325_p2 <= (tmp_reg_521 or icmp_ln493_reg_527);
    or_ln496_fu_376_p2 <= (tmp_8_fu_338_p3 or icmp_ln498_fu_356_p2);
    or_ln501_fu_428_p2 <= (tmp_10_fu_390_p3 or icmp_ln503_fu_408_p2);
    r_fu_329_p3 <= 
        select_ln491_fu_317_p3 when (or_ln491_fu_325_p2(0) = '1') else 
        trunc_ln8_fu_269_p4;

    rgb_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, zext_ln485_reg_468_pp0_iter2_reg, zext_ln482_reg_490, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb_buf_address0 <= zext_ln485_reg_468_pp0_iter2_reg(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rgb_buf_address0 <= zext_ln482_reg_490(10 - 1 downto 0);
        else 
            rgb_buf_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    rgb_buf_address1 <= zext_ln484_reg_458_pp0_iter2_reg(10 - 1 downto 0);

    rgb_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rgb_buf_ce0 <= ap_const_logic_1;
        else 
            rgb_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rgb_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb_buf_ce1 <= ap_const_logic_1;
        else 
            rgb_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rgb_buf_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, b_reg_537, ap_block_pp0_stage0, ap_block_pp0_stage1, r_fu_329_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb_buf_d0 <= b_reg_537;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rgb_buf_d0 <= r_fu_329_p3;
        else 
            rgb_buf_d0 <= "XXXXXXXX";
        end if; 
    end process;

    rgb_buf_d1 <= g_reg_532;

    rgb_buf_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            rgb_buf_we0 <= ap_const_logic_1;
        else 
            rgb_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rgb_buf_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb_buf_we1 <= ap_const_logic_1;
        else 
            rgb_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln491_fu_317_p3 <= 
        ap_const_lv8_FF when (xor_ln491_fu_312_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln496_fu_368_p3 <= 
        ap_const_lv8_FF when (xor_ln496_fu_362_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln501_fu_420_p3 <= 
        ap_const_lv8_FF when (xor_ln501_fu_414_p2(0) = '1') else 
        ap_const_lv8_0;
    shl_ln487_fu_227_p2 <= std_logic_vector(shift_left(unsigned(IDCTBuff_q0),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_10_fu_390_p3 <= add_ln489_fu_297_p2(31 downto 31);
    tmp_11_fu_398_p4 <= add_ln489_fu_297_p2(31 downto 16);
    tmp_7_fu_253_p4 <= add_ln487_fu_239_p2(31 downto 16);
    tmp_8_fu_338_p3 <= add_ln488_1_fu_282_p2(31 downto 31);
    tmp_9_fu_346_p4 <= add_ln488_1_fu_282_p2(31 downto 16);
    trunc_ln478_1_fu_287_p4 <= add_ln488_1_fu_282_p2(15 downto 8);
    trunc_ln478_2_fu_302_p4 <= add_ln489_fu_297_p2(15 downto 8);
    trunc_ln484_fu_176_p1 <= ap_sig_allocacmp_i(6 - 1 downto 0);
    trunc_ln8_fu_269_p4 <= add_ln487_reg_511(15 downto 8);
    u_fu_211_p2 <= std_logic_vector(unsigned(IDCTBuff_q1) + unsigned(ap_const_lv32_FFFFFF80));
    v_fu_217_p2 <= std_logic_vector(unsigned(IDCTBuff_q0) + unsigned(ap_const_lv32_FFFFFF80));
    xor_ln491_fu_312_p2 <= (tmp_reg_521 xor ap_const_lv1_1);
    xor_ln496_fu_362_p2 <= (tmp_8_fu_338_p3 xor ap_const_lv1_1);
    xor_ln501_fu_414_p2 <= (tmp_10_fu_390_p3 xor ap_const_lv1_1);
    zext_ln1_fu_193_p3 <= (ap_const_lv2_2 & trunc_ln484_fu_176_p1);
    zext_ln482_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_449_pp0_iter1_reg),64));
    zext_ln484_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln_fu_180_p3),64));
    zext_ln485_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1_fu_193_p3),64));
    zext_ln_fu_180_p3 <= (ap_const_lv1_1 & trunc_ln484_fu_176_p1);
end behav;
