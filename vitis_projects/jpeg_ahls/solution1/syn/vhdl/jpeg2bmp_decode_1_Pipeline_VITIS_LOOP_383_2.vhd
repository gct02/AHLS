-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_383_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    hoffs : IN STD_LOGIC_VECTOR (31 downto 0);
    add3_i_i : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln376 : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln385_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    outputVector_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    outputVector_ce0 : OUT STD_LOGIC;
    outputVector_we0 : OUT STD_LOGIC;
    outputVector_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    store_assign_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    sext_ln379 : IN STD_LOGIC_VECTOR (15 downto 0);
    idx_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    idx_out_ap_vld : OUT STD_LOGIC;
    add_ln376_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    add_ln376_out_ap_vld : OUT STD_LOGIC;
    rgb_buf_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    rgb_buf_ce0 : OUT STD_LOGIC;
    rgb_buf_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of jpeg2bmp_decode_1_Pipeline_VITIS_LOOP_383_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln384_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln383_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln379_cast_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln379_cast_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln385_2_fu_245_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln385_2_reg_322 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln385_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln385_1_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_fu_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln385_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal e_fu_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln383_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln376_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_202_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal zext_ln376_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln_fu_225_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln383_fu_198_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln385_1_fu_240_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_106 : BOOLEAN;
    signal ap_condition_234 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component jpeg2bmp_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component jpeg2bmp_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln383_fu_187_p2 = ap_const_lv1_0) or (icmp_ln384_fu_220_p2 = ap_const_lv1_0)))) then 
                    ap_return_preg <= ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
                end if; 
            end if;
        end if;
    end process;


    e_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    e_fu_74 <= hoffs;
                elsif ((ap_const_boolean_1 = ap_condition_234)) then 
                    e_fu_74 <= add_ln383_fu_250_p2;
                end if;
            end if; 
        end if;
    end process;

    idx_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    idx_fu_70 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_234)) then 
                    idx_fu_70 <= add_ln385_fu_192_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln385_2_reg_322 <= add_ln385_2_fu_245_p2;
                sext_ln379_cast_reg_304 <= sext_ln379_cast_fu_166_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln376_fu_214_p2 <= std_logic_vector(unsigned(zext_ln376_fu_210_p1) + unsigned(store_assign_1));
    add_ln376_out <= add_ln376_fu_214_p2;

    add_ln376_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln384_fu_220_p2, icmp_ln383_fu_187_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln383_fu_187_p2 = ap_const_lv1_1) and (icmp_ln384_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            add_ln376_out_ap_vld <= ap_const_logic_1;
        else 
            add_ln376_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln383_fu_250_p2 <= std_logic_vector(unsigned(e_fu_74) + unsigned(ap_const_lv32_1));
    add_ln385_1_fu_240_p2 <= std_logic_vector(unsigned(trunc_ln383_fu_198_p1) + unsigned(mul_ln376));
    add_ln385_2_fu_245_p2 <= std_logic_vector(unsigned(zext_ln385_3) + unsigned(add_ln385_1_fu_240_p2));
    add_ln385_fu_192_p2 <= std_logic_vector(unsigned(idx_fu_70) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_106_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_106 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_234_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln384_fu_220_p2, icmp_ln383_fu_187_p2)
    begin
                ap_condition_234 <= ((icmp_ln383_fu_187_p2 = ap_const_lv1_1) and (icmp_ln384_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln384_fu_220_p2, icmp_ln383_fu_187_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln383_fu_187_p2 = ap_const_lv1_0) or (icmp_ln384_fu_220_p2 = ap_const_lv1_0)))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_UnifiedRetVal_phi_fu_158_p4_assign_proc : process(icmp_ln384_fu_220_p2, icmp_ln383_fu_187_p2, ap_condition_106)
    begin
        if ((ap_const_boolean_1 = ap_condition_106)) then
            if (((icmp_ln383_fu_187_p2 = ap_const_lv1_1) and (icmp_ln384_fu_220_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 <= ap_const_lv1_0;
            elsif ((icmp_ln383_fu_187_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 <= "X";
            end if;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_158_p4 <= "X";
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln384_fu_220_p2, icmp_ln383_fu_187_p2, ap_block_pp0_stage0_11001, ap_phi_mux_UnifiedRetVal_phi_fu_158_p4, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln383_fu_187_p2 = ap_const_lv1_0) or (icmp_ln384_fu_220_p2 = ap_const_lv1_0)))) then 
            ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_158_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln383_fu_187_p2 <= "1" when (signed(e_fu_74) < signed(add3_i_i)) else "0";
    icmp_ln384_fu_220_p2 <= "1" when (signed(e_fu_74) < signed(sext_ln379_cast_reg_304)) else "0";
    idx_out <= idx_fu_70;

    idx_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln384_fu_220_p2, icmp_ln383_fu_187_p2, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln383_fu_187_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln383_fu_187_p2 = ap_const_lv1_1) and (icmp_ln384_fu_220_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            idx_out_ap_vld <= ap_const_logic_1;
        else 
            idx_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_225_p4 <= add_ln376_fu_214_p2(11 downto 2);
    outputVector_address0 <= zext_ln385_1_fu_266_p1(16 - 1 downto 0);

    outputVector_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outputVector_ce0 <= ap_const_logic_1;
        else 
            outputVector_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputVector_d0 <= rgb_buf_q0;

    outputVector_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outputVector_we0 <= ap_const_logic_1;
        else 
            outputVector_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rgb_buf_address0 <= zext_ln385_fu_235_p1(10 - 1 downto 0);

    rgb_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rgb_buf_ce0 <= ap_const_logic_1;
        else 
            rgb_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln379_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln379),32));

    shl_ln_fu_202_p3 <= (idx_fu_70 & ap_const_lv2_0);
    trunc_ln383_fu_198_p1 <= e_fu_74(16 - 1 downto 0);
    zext_ln376_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_202_p3),64));
    zext_ln385_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln385_2_reg_322),64));
    zext_ln385_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_225_p4),64));
end behav;
