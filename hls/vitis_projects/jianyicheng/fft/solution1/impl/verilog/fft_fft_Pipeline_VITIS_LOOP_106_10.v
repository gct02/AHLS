// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fft_fft_Pipeline_VITIS_LOOP_106_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        numBF_4,
        zext_ln106,
        cos_coefficients_table_address0,
        cos_coefficients_table_ce0,
        cos_coefficients_table_q0,
        sin_coefficients_table_address0,
        sin_coefficients_table_ce0,
        sin_coefficients_table_q0,
        select_ln103_1,
        X_R_4_address0,
        X_R_4_ce0,
        X_R_4_we0,
        X_R_4_d0,
        X_R_4_q0,
        X_R_4_address1,
        X_R_4_ce1,
        X_R_4_q1,
        X_I_4_address0,
        X_I_4_ce0,
        X_I_4_we0,
        X_I_4_d0,
        X_I_4_q0,
        X_I_4_address1,
        X_I_4_ce1,
        X_I_4_q1,
        grp_fu_1608_p_din0,
        grp_fu_1608_p_din1,
        grp_fu_1608_p_opcode,
        grp_fu_1608_p_dout0,
        grp_fu_1608_p_ce,
        grp_fu_1612_p_din0,
        grp_fu_1612_p_din1,
        grp_fu_1612_p_opcode,
        grp_fu_1612_p_dout0,
        grp_fu_1612_p_ce,
        grp_fu_1616_p_din0,
        grp_fu_1616_p_din1,
        grp_fu_1616_p_dout0,
        grp_fu_1616_p_ce,
        grp_fu_1620_p_din0,
        grp_fu_1620_p_din1,
        grp_fu_1620_p_dout0,
        grp_fu_1620_p_ce,
        grp_fu_1624_p_din0,
        grp_fu_1624_p_din1,
        grp_fu_1624_p_dout0,
        grp_fu_1624_p_ce,
        grp_fu_1628_p_din0,
        grp_fu_1628_p_din1,
        grp_fu_1628_p_dout0,
        grp_fu_1628_p_ce
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_state5 = 25'd16;
parameter    ap_ST_fsm_state6 = 25'd32;
parameter    ap_ST_fsm_state7 = 25'd64;
parameter    ap_ST_fsm_state8 = 25'd128;
parameter    ap_ST_fsm_state9 = 25'd256;
parameter    ap_ST_fsm_state10 = 25'd512;
parameter    ap_ST_fsm_state11 = 25'd1024;
parameter    ap_ST_fsm_state12 = 25'd2048;
parameter    ap_ST_fsm_state13 = 25'd4096;
parameter    ap_ST_fsm_state14 = 25'd8192;
parameter    ap_ST_fsm_state15 = 25'd16384;
parameter    ap_ST_fsm_state16 = 25'd32768;
parameter    ap_ST_fsm_state17 = 25'd65536;
parameter    ap_ST_fsm_state18 = 25'd131072;
parameter    ap_ST_fsm_state19 = 25'd262144;
parameter    ap_ST_fsm_state20 = 25'd524288;
parameter    ap_ST_fsm_state21 = 25'd1048576;
parameter    ap_ST_fsm_state22 = 25'd2097152;
parameter    ap_ST_fsm_state23 = 25'd4194304;
parameter    ap_ST_fsm_state24 = 25'd8388608;
parameter    ap_ST_fsm_state25 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] numBF_4;
input  [3:0] zext_ln106;
output  [8:0] cos_coefficients_table_address0;
output   cos_coefficients_table_ce0;
input  [31:0] cos_coefficients_table_q0;
output  [8:0] sin_coefficients_table_address0;
output   sin_coefficients_table_ce0;
input  [31:0] sin_coefficients_table_q0;
input  [0:0] select_ln103_1;
output  [9:0] X_R_4_address0;
output   X_R_4_ce0;
output   X_R_4_we0;
output  [31:0] X_R_4_d0;
input  [31:0] X_R_4_q0;
output  [9:0] X_R_4_address1;
output   X_R_4_ce1;
input  [31:0] X_R_4_q1;
output  [9:0] X_I_4_address0;
output   X_I_4_ce0;
output   X_I_4_we0;
output  [31:0] X_I_4_d0;
input  [31:0] X_I_4_q0;
output  [9:0] X_I_4_address1;
output   X_I_4_ce1;
input  [31:0] X_I_4_q1;
output  [31:0] grp_fu_1608_p_din0;
output  [31:0] grp_fu_1608_p_din1;
output  [1:0] grp_fu_1608_p_opcode;
input  [31:0] grp_fu_1608_p_dout0;
output   grp_fu_1608_p_ce;
output  [31:0] grp_fu_1612_p_din0;
output  [31:0] grp_fu_1612_p_din1;
output  [1:0] grp_fu_1612_p_opcode;
input  [31:0] grp_fu_1612_p_dout0;
output   grp_fu_1612_p_ce;
output  [31:0] grp_fu_1616_p_din0;
output  [31:0] grp_fu_1616_p_din1;
input  [31:0] grp_fu_1616_p_dout0;
output   grp_fu_1616_p_ce;
output  [31:0] grp_fu_1620_p_din0;
output  [31:0] grp_fu_1620_p_din1;
input  [31:0] grp_fu_1620_p_dout0;
output   grp_fu_1620_p_ce;
output  [31:0] grp_fu_1624_p_din0;
output  [31:0] grp_fu_1624_p_din1;
input  [31:0] grp_fu_1624_p_dout0;
output   grp_fu_1624_p_ce;
output  [31:0] grp_fu_1628_p_din0;
output  [31:0] grp_fu_1628_p_din1;
input  [31:0] grp_fu_1628_p_dout0;
output   grp_fu_1628_p_ce;

reg ap_idle;
reg cos_coefficients_table_ce0;
reg sin_coefficients_table_ce0;
reg[9:0] X_R_4_address0;
reg X_R_4_ce0;
reg X_R_4_we0;
reg[31:0] X_R_4_d0;
reg[9:0] X_R_4_address1;
reg X_R_4_ce1;
reg[9:0] X_I_4_address0;
reg X_I_4_ce0;
reg X_I_4_we0;
reg[31:0] X_I_4_d0;
reg[9:0] X_I_4_address1;
reg X_I_4_ce1;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln106_fu_206_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state25;
reg   [31:0] reg_176;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state19;
reg   [31:0] reg_180;
reg   [31:0] reg_184;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state24;
reg   [31:0] reg_189;
reg   [9:0] X_R_4_addr_reg_359;
reg   [9:0] X_I_4_addr_reg_365;
reg   [9:0] X_R_4_addr_1_reg_371;
reg   [9:0] X_I_4_addr_1_reg_377;
reg   [31:0] cos_coefficients_table_load_reg_383;
reg   [31:0] sin_coefficients_table_load_reg_388;
reg   [31:0] X_R_4_load_1_reg_393;
reg   [31:0] X_I_4_load_1_reg_398;
wire   [31:0] c_fu_281_p1;
wire   [31:0] s_fu_286_p1;
wire   [31:0] bitcast_ln111_fu_291_p1;
wire   [31:0] bitcast_ln111_1_fu_297_p1;
reg   [31:0] mul_reg_427;
wire    ap_CS_fsm_state6;
reg   [31:0] mul14_reg_432;
reg   [31:0] mul15_reg_437;
reg   [31:0] mul16_reg_442;
wire   [31:0] bitcast_ln114_fu_303_p1;
wire    ap_CS_fsm_state12;
wire   [31:0] bitcast_ln115_fu_307_p1;
reg   [31:0] sub8_reg_457;
wire    ap_CS_fsm_state16;
reg   [31:0] sub_reg_462;
wire   [31:0] bitcast_ln116_fu_319_p1;
wire    ap_CS_fsm_state20;
wire   [31:0] bitcast_ln117_fu_324_p1;
wire   [63:0] zext_ln107_fu_232_p1;
wire   [63:0] zext_ln111_fu_254_p1;
wire   [63:0] zext_ln114_fu_270_p1;
reg   [7:0] j_4_fu_54;
wire   [7:0] add_ln106_fu_212_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_j;
wire    ap_CS_fsm_state17;
wire   [31:0] bitcast_ln114_1_fu_311_p1;
wire    ap_CS_fsm_state18;
wire   [31:0] bitcast_ln116_1_fu_329_p1;
wire   [31:0] bitcast_ln115_1_fu_315_p1;
wire   [31:0] bitcast_ln117_1_fu_334_p1;
reg   [31:0] grp_fu_152_p0;
reg   [31:0] grp_fu_152_p1;
wire    ap_CS_fsm_state7;
reg   [31:0] grp_fu_156_p0;
reg   [31:0] grp_fu_156_p1;
wire   [6:0] trunc_ln107_fu_218_p1;
wire   [8:0] zext_ln107_1_fu_222_p1;
wire   [8:0] zext_ln106_cast_fu_194_p1;
wire   [8:0] shl_ln107_fu_226_p2;
wire   [7:0] add_ln111_fu_238_p2;
wire   [9:0] add_ln8_fu_244_p4;
wire   [9:0] add_ln9_fu_260_p4;
reg   [1:0] grp_fu_152_opcode;
reg   [1:0] grp_fu_156_opcode;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [24:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 j_4_fu_54 = 8'd0;
#0 ap_done_reg = 1'b0;
end

fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln106_fu_206_p2 == 1'd0)) begin
            j_4_fu_54 <= add_ln106_fu_212_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_4_fu_54 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        X_I_4_addr_1_reg_377[7 : 0] <= zext_ln114_fu_270_p1[7 : 0];
X_I_4_addr_1_reg_377[9] <= zext_ln114_fu_270_p1[9];
        X_I_4_addr_reg_365[7 : 0] <= zext_ln111_fu_254_p1[7 : 0];
X_I_4_addr_reg_365[9] <= zext_ln111_fu_254_p1[9];
        X_R_4_addr_1_reg_371[7 : 0] <= zext_ln114_fu_270_p1[7 : 0];
X_R_4_addr_1_reg_371[9] <= zext_ln114_fu_270_p1[9];
        X_R_4_addr_reg_359[7 : 0] <= zext_ln111_fu_254_p1[7 : 0];
X_R_4_addr_reg_359[9] <= zext_ln111_fu_254_p1[9];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        X_I_4_load_1_reg_398 <= X_I_4_q0;
        X_R_4_load_1_reg_393 <= X_R_4_q0;
        cos_coefficients_table_load_reg_383 <= cos_coefficients_table_q0;
        sin_coefficients_table_load_reg_388 <= sin_coefficients_table_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mul14_reg_432 <= grp_fu_1620_p_dout0;
        mul15_reg_437 <= grp_fu_1624_p_dout0;
        mul16_reg_442 <= grp_fu_1628_p_dout0;
        mul_reg_427 <= grp_fu_1616_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_176 <= X_R_4_q1;
        reg_180 <= X_I_4_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_184 <= grp_fu_1608_p_dout0;
        reg_189 <= grp_fu_1612_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        sub8_reg_457 <= grp_fu_1608_p_dout0;
        sub_reg_462 <= grp_fu_1612_p_dout0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        X_I_4_address0 = X_I_4_addr_1_reg_377;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        X_I_4_address0 = X_I_4_addr_reg_365;
    end else if (((icmp_ln106_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        X_I_4_address0 = zext_ln114_fu_270_p1;
    end else begin
        X_I_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        X_I_4_address1 = X_I_4_addr_1_reg_377;
    end else if (((icmp_ln106_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        X_I_4_address1 = zext_ln111_fu_254_p1;
    end else begin
        X_I_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | ((icmp_ln106_fu_206_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        X_I_4_ce0 = 1'b1;
    end else begin
        X_I_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((icmp_ln106_fu_206_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        X_I_4_ce1 = 1'b1;
    end else begin
        X_I_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        X_I_4_d0 = bitcast_ln117_1_fu_334_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        X_I_4_d0 = bitcast_ln115_1_fu_315_p1;
    end else begin
        X_I_4_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17))) begin
        X_I_4_we0 = 1'b1;
    end else begin
        X_I_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        X_R_4_address0 = X_R_4_addr_1_reg_371;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        X_R_4_address0 = X_R_4_addr_reg_359;
    end else if (((icmp_ln106_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        X_R_4_address0 = zext_ln114_fu_270_p1;
    end else begin
        X_R_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        X_R_4_address1 = X_R_4_addr_1_reg_371;
    end else if (((icmp_ln106_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        X_R_4_address1 = zext_ln111_fu_254_p1;
    end else begin
        X_R_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | ((icmp_ln106_fu_206_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        X_R_4_ce0 = 1'b1;
    end else begin
        X_R_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((icmp_ln106_fu_206_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1)))) begin
        X_R_4_ce1 = 1'b1;
    end else begin
        X_R_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        X_R_4_d0 = bitcast_ln116_1_fu_329_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        X_R_4_d0 = bitcast_ln114_1_fu_311_p1;
    end else begin
        X_R_4_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17))) begin
        X_R_4_we0 = 1'b1;
    end else begin
        X_R_4_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln106_fu_206_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_j = 8'd0;
    end else begin
        ap_sig_allocacmp_j = j_4_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        cos_coefficients_table_ce0 = 1'b1;
    end else begin
        cos_coefficients_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_152_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_152_opcode = 2'd0;
    end else begin
        grp_fu_152_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_152_p0 = bitcast_ln116_fu_319_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_152_p0 = bitcast_ln114_fu_303_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_152_p0 = mul_reg_427;
    end else begin
        grp_fu_152_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_152_p1 = reg_184;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_152_p1 = mul14_reg_432;
    end else begin
        grp_fu_152_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_156_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_fu_156_opcode = 2'd0;
    end else begin
        grp_fu_156_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_156_p0 = bitcast_ln117_fu_324_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_156_p0 = bitcast_ln115_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_156_p0 = mul15_reg_437;
    end else begin
        grp_fu_156_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_fu_156_p1 = reg_189;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_156_p1 = mul16_reg_442;
    end else begin
        grp_fu_156_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        sin_coefficients_table_ce0 = 1'b1;
    end else begin
        sin_coefficients_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln106_fu_206_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln106_fu_212_p2 = (ap_sig_allocacmp_j + 8'd1);

assign add_ln111_fu_238_p2 = (ap_sig_allocacmp_j + numBF_4);

assign add_ln8_fu_244_p4 = {{{select_ln103_1}, {1'd0}}, {add_ln111_fu_238_p2}};

assign add_ln9_fu_260_p4 = {{{select_ln103_1}, {1'd0}}, {ap_sig_allocacmp_j}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln111_1_fu_297_p1 = reg_180;

assign bitcast_ln111_fu_291_p1 = reg_176;

assign bitcast_ln114_1_fu_311_p1 = sub8_reg_457;

assign bitcast_ln114_fu_303_p1 = X_R_4_load_1_reg_393;

assign bitcast_ln115_1_fu_315_p1 = sub_reg_462;

assign bitcast_ln115_fu_307_p1 = X_I_4_load_1_reg_398;

assign bitcast_ln116_1_fu_329_p1 = reg_184;

assign bitcast_ln116_fu_319_p1 = reg_176;

assign bitcast_ln117_1_fu_334_p1 = reg_189;

assign bitcast_ln117_fu_324_p1 = reg_180;

assign c_fu_281_p1 = cos_coefficients_table_load_reg_383;

assign cos_coefficients_table_address0 = zext_ln107_fu_232_p1;

assign grp_fu_1608_p_ce = 1'b1;

assign grp_fu_1608_p_din0 = grp_fu_152_p0;

assign grp_fu_1608_p_din1 = grp_fu_152_p1;

assign grp_fu_1608_p_opcode = grp_fu_152_opcode;

assign grp_fu_1612_p_ce = 1'b1;

assign grp_fu_1612_p_din0 = grp_fu_156_p0;

assign grp_fu_1612_p_din1 = grp_fu_156_p1;

assign grp_fu_1612_p_opcode = grp_fu_156_opcode;

assign grp_fu_1616_p_ce = 1'b1;

assign grp_fu_1616_p_din0 = bitcast_ln111_fu_291_p1;

assign grp_fu_1616_p_din1 = c_fu_281_p1;

assign grp_fu_1620_p_ce = 1'b1;

assign grp_fu_1620_p_din0 = bitcast_ln111_1_fu_297_p1;

assign grp_fu_1620_p_din1 = s_fu_286_p1;

assign grp_fu_1624_p_ce = 1'b1;

assign grp_fu_1624_p_din0 = bitcast_ln111_1_fu_297_p1;

assign grp_fu_1624_p_din1 = c_fu_281_p1;

assign grp_fu_1628_p_ce = 1'b1;

assign grp_fu_1628_p_din0 = bitcast_ln111_fu_291_p1;

assign grp_fu_1628_p_din1 = s_fu_286_p1;

assign icmp_ln106_fu_206_p2 = ((ap_sig_allocacmp_j == numBF_4) ? 1'b1 : 1'b0);

assign s_fu_286_p1 = sin_coefficients_table_load_reg_388;

assign shl_ln107_fu_226_p2 = zext_ln107_1_fu_222_p1 << zext_ln106_cast_fu_194_p1;

assign sin_coefficients_table_address0 = zext_ln107_fu_232_p1;

assign trunc_ln107_fu_218_p1 = ap_sig_allocacmp_j[6:0];

assign zext_ln106_cast_fu_194_p1 = zext_ln106;

assign zext_ln107_1_fu_222_p1 = trunc_ln107_fu_218_p1;

assign zext_ln107_fu_232_p1 = shl_ln107_fu_226_p2;

assign zext_ln111_fu_254_p1 = add_ln8_fu_244_p4;

assign zext_ln114_fu_270_p1 = add_ln9_fu_260_p4;

always @ (posedge ap_clk) begin
    X_R_4_addr_reg_359[8] <= 1'b0;
    X_I_4_addr_reg_365[8] <= 1'b0;
    X_R_4_addr_1_reg_371[8] <= 1'b0;
    X_I_4_addr_1_reg_377[8] <= 1'b0;
end

endmodule //fft_fft_Pipeline_VITIS_LOOP_106_10
