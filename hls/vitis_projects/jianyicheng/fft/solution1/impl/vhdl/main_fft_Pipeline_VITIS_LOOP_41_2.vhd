-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_fft_Pipeline_VITIS_LOOP_41_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    numBF : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln41 : IN STD_LOGIC_VECTOR (3 downto 0);
    select_ln38_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    X_R_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_0_ce0 : OUT STD_LOGIC;
    X_R_0_we0 : OUT STD_LOGIC;
    X_R_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_0_ce1 : OUT STD_LOGIC;
    X_R_0_we1 : OUT STD_LOGIC;
    X_R_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_0_ce0 : OUT STD_LOGIC;
    X_I_0_we0 : OUT STD_LOGIC;
    X_I_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_0_ce1 : OUT STD_LOGIC;
    X_I_0_we1 : OUT STD_LOGIC;
    X_I_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    cos_coefficients_table_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    cos_coefficients_table_ce0 : OUT STD_LOGIC;
    cos_coefficients_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sin_coefficients_table_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    sin_coefficients_table_ce0 : OUT STD_LOGIC;
    sin_coefficients_table_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1648_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1648_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1648_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1648_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1648_p_ce : OUT STD_LOGIC;
    grp_fu_1652_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1652_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1652_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_1652_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1652_p_ce : OUT STD_LOGIC;
    grp_fu_1656_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1656_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1656_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1656_p_ce : OUT STD_LOGIC;
    grp_fu_1660_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1660_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1660_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1660_p_ce : OUT STD_LOGIC;
    grp_fu_1664_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1664_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1664_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1664_p_ce : OUT STD_LOGIC;
    grp_fu_1668_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1668_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1668_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_1668_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_fft_Pipeline_VITIS_LOOP_41_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (43 downto 0) := "00000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (43 downto 0) := "00000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (43 downto 0) := "00000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (43 downto 0) := "00000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (43 downto 0) := "00000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage37 : STD_LOGIC_VECTOR (43 downto 0) := "00000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage38 : STD_LOGIC_VECTOR (43 downto 0) := "00000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage39 : STD_LOGIC_VECTOR (43 downto 0) := "00001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage40 : STD_LOGIC_VECTOR (43 downto 0) := "00010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage41 : STD_LOGIC_VECTOR (43 downto 0) := "00100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage42 : STD_LOGIC_VECTOR (43 downto 0) := "01000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage43 : STD_LOGIC_VECTOR (43 downto 0) := "10000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (43 downto 0) := "00000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln41_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage43 : signal is "none";
    signal ap_block_pp0_stage43_subdone : BOOLEAN;
    signal reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage33 : signal is "none";
    signal ap_block_pp0_stage33_11001 : BOOLEAN;
    signal reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_pp0_stage43_11001 : BOOLEAN;
    signal reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_3_reg_294 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln41_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln42_fu_226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln42_reg_304 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln46_fu_232_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_reg_309 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal X_R_0_addr_reg_324 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_0_addr_reg_329 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_0_addr_1_reg_334 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_0_addr_1_reg_339 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_350 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_0_load_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_0_load_1_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal mul1_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage30 : signal is "none";
    signal ap_block_pp0_stage30_11001 : BOOLEAN;
    signal sub1_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln42_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln46_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_50 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln41_fu_238_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_block_pp0_stage31_11001 : BOOLEAN;
    signal ap_block_pp0_stage31 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage32 : signal is "none";
    signal ap_block_pp0_stage32_11001 : BOOLEAN;
    signal ap_block_pp0_stage32 : BOOLEAN;
    signal grp_fu_148_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage34 : signal is "none";
    signal ap_block_pp0_stage34 : BOOLEAN;
    signal grp_fu_152_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal trunc_ln42_fu_218_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_1_fu_222_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_cast_fu_200_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln_fu_248_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1_fu_262_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_148_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage34_00001 : BOOLEAN;
    signal ap_block_pp0_stage11_00001 : BOOLEAN;
    signal ap_block_pp0_stage21_00001 : BOOLEAN;
    signal grp_fu_152_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (43 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_block_pp0_stage37_subdone : BOOLEAN;
    signal ap_block_pp0_stage38_subdone : BOOLEAN;
    signal ap_block_pp0_stage39_subdone : BOOLEAN;
    signal ap_block_pp0_stage40_subdone : BOOLEAN;
    signal ap_block_pp0_stage41_subdone : BOOLEAN;
    signal ap_block_pp0_stage42_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_faddfsub_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage43_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage43))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_50 <= ap_const_lv8_0;
            elsif (((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_50 <= add_ln41_fu_238_p2;
            end if; 
        end if;
    end process;

    reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage33_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage33))) then 
                    reg_172 <= X_R_0_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_172 <= X_R_0_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage33_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage33))) then 
                    reg_180 <= X_I_0_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    reg_180 <= X_I_0_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    X_I_0_addr_1_reg_339(7 downto 0) <= zext_ln49_fu_270_p1(10 - 1 downto 0)(7 downto 0);    X_I_0_addr_1_reg_339(9) <= zext_ln49_fu_270_p1(10 - 1 downto 0)(9);
                    X_I_0_addr_reg_329(7 downto 0) <= zext_ln46_fu_256_p1(10 - 1 downto 0)(7 downto 0);    X_I_0_addr_reg_329(9) <= zext_ln46_fu_256_p1(10 - 1 downto 0)(9);
                    X_R_0_addr_1_reg_334(7 downto 0) <= zext_ln49_fu_270_p1(10 - 1 downto 0)(7 downto 0);    X_R_0_addr_1_reg_334(9) <= zext_ln49_fu_270_p1(10 - 1 downto 0)(9);
                    X_R_0_addr_reg_324(7 downto 0) <= zext_ln46_fu_256_p1(10 - 1 downto 0)(7 downto 0);    X_R_0_addr_reg_324(9) <= zext_ln46_fu_256_p1(10 - 1 downto 0)(9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                X_I_0_load_1_reg_361 <= X_I_0_q0;
                X_R_0_load_1_reg_356 <= X_R_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln46_reg_309 <= add_ln46_fu_232_p2;
                icmp_ln41_reg_300 <= icmp_ln41_fu_212_p2;
                j_3_reg_294 <= ap_sig_allocacmp_j_3;
                shl_ln42_reg_304 <= shl_ln42_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                c_reg_344 <= cos_coefficients_table_q0;
                s_reg_350 <= sin_coefficients_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                mul1_reg_371 <= grp_fu_1660_p_dout0;
                mul2_reg_376 <= grp_fu_1664_p_dout0;
                mul3_reg_381 <= grp_fu_1668_p_dout0;
                mul_reg_366 <= grp_fu_1656_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage43_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage43)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)))) then
                reg_188 <= grp_fu_1648_p_dout0;
                reg_194 <= grp_fu_1652_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30))) then
                sub1_reg_391 <= grp_fu_1652_p_dout0;
                sub_reg_386 <= grp_fu_1648_p_dout0;
            end if;
        end if;
    end process;
    X_R_0_addr_reg_324(8) <= '0';
    X_I_0_addr_reg_329(8) <= '0';
    X_R_0_addr_1_reg_334(8) <= '0';
    X_I_0_addr_1_reg_339(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage43_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone, ap_block_pp0_stage36_subdone, ap_block_pp0_stage37_subdone, ap_block_pp0_stage38_subdone, ap_block_pp0_stage39_subdone, ap_block_pp0_stage40_subdone, ap_block_pp0_stage41_subdone, ap_block_pp0_stage42_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage37 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage37_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                end if;
            when ap_ST_fsm_pp0_stage38 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage38_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                end if;
            when ap_ST_fsm_pp0_stage39 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage39_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                end if;
            when ap_ST_fsm_pp0_stage40 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage40_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage40;
                end if;
            when ap_ST_fsm_pp0_stage41 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage41_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage41;
                end if;
            when ap_ST_fsm_pp0_stage42 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage42_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage42;
                end if;
            when ap_ST_fsm_pp0_stage43 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage43_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    X_I_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, X_I_0_addr_1_reg_339, ap_block_pp0_stage1, zext_ln49_fu_270_p1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage32)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage32) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_0_address0 <= X_I_0_addr_1_reg_339;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_I_0_address0 <= zext_ln49_fu_270_p1(10 - 1 downto 0);
        else 
            X_I_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_0_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, X_I_0_addr_reg_329, ap_block_pp0_stage1, zext_ln46_fu_256_p1, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31))) then 
                X_I_0_address1 <= X_I_0_addr_reg_329;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                X_I_0_address1 <= zext_ln46_fu_256_p1(10 - 1 downto 0);
            else 
                X_I_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            X_I_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage32_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage32_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_0_ce0 <= ap_const_logic_1;
        else 
            X_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            X_I_0_ce1 <= ap_const_logic_1;
        else 
            X_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_0_d0 <= reg_194;
    X_I_0_d1 <= sub1_reg_391;

    X_I_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_0_we0 <= ap_const_logic_1;
        else 
            X_I_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln41_reg_300, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31_11001)
    begin
        if (((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31))) then 
            X_I_0_we1 <= ap_const_logic_1;
        else 
            X_I_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, X_R_0_addr_1_reg_334, ap_block_pp0_stage1, zext_ln49_fu_270_p1, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage32)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage32) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_R_0_address0 <= X_R_0_addr_1_reg_334;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            X_R_0_address0 <= zext_ln49_fu_270_p1(10 - 1 downto 0);
        else 
            X_R_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_0_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, X_R_0_addr_reg_324, ap_block_pp0_stage1, zext_ln46_fu_256_p1, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31))) then 
                X_R_0_address1 <= X_R_0_addr_reg_324;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                X_R_0_address1 <= zext_ln46_fu_256_p1(10 - 1 downto 0);
            else 
                X_R_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            X_R_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage32, ap_block_pp0_stage32_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage32_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage32)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_R_0_ce0 <= ap_const_logic_1;
        else 
            X_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            X_R_0_ce1 <= ap_const_logic_1;
        else 
            X_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_0_d0 <= reg_188;
    X_R_0_d1 <= sub_reg_386;

    X_R_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_0_we0 <= ap_const_logic_1;
        else 
            X_R_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_we1_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln41_reg_300, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31_11001)
    begin
        if (((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage31_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31))) then 
            X_R_0_we1 <= ap_const_logic_1;
        else 
            X_R_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1_fu_262_p4 <= ((select_ln38_1 & ap_const_lv1_0) & j_3_reg_294);
    add_ln41_fu_238_p2 <= std_logic_vector(unsigned(j_3_reg_294) + unsigned(ap_const_lv8_1));
    add_ln46_fu_232_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_3) + unsigned(numBF));
    add_ln_fu_248_p4 <= ((select_ln38_1 & ap_const_lv1_0) & add_ln46_reg_309);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage30 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage32 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage33 <= ap_CS_fsm(33);
    ap_CS_fsm_pp0_stage34 <= ap_CS_fsm(34);
    ap_CS_fsm_pp0_stage43 <= ap_CS_fsm(43);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage38_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage40_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage41_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage42_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage43_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage43_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln41_reg_300)
    begin
        if (((icmp_ln41_reg_300 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage43, ap_block_pp0_stage43_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage43_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage43))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_3_assign_proc : process(ap_CS_fsm_pp0_stage0, j_fu_50, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_3 <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_3 <= j_fu_50;
        end if; 
    end process;

    cos_coefficients_table_address0 <= zext_ln42_fu_243_p1(9 - 1 downto 0);

    cos_coefficients_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            cos_coefficients_table_ce0 <= ap_const_logic_1;
        else 
            cos_coefficients_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_148_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln41_reg_300, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage34, ap_block_pp0_stage34_00001, ap_block_pp0_stage11_00001, ap_block_pp0_stage21_00001)
    begin
        if ((((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage21_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)))) then 
            grp_fu_148_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage34_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34))) then 
            grp_fu_148_opcode <= ap_const_lv2_0;
        else 
            grp_fu_148_opcode <= "XX";
        end if; 
    end process;


    grp_fu_148_p0_assign_proc : process(ap_enable_reg_pp0_iter0, reg_172, X_R_0_load_1_reg_356, mul_reg_366, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage34, ap_block_pp0_stage34)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage34) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34))) then 
                grp_fu_148_p0 <= reg_172;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
                grp_fu_148_p0 <= X_R_0_load_1_reg_356;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                grp_fu_148_p0 <= mul_reg_366;
            else 
                grp_fu_148_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_148_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_148_p1_assign_proc : process(ap_enable_reg_pp0_iter0, reg_188, mul1_reg_371, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage34, ap_block_pp0_stage34)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage34) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34)) or ((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)))) then 
            grp_fu_148_p1 <= reg_188;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_148_p1 <= mul1_reg_371;
        else 
            grp_fu_148_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_152_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln41_reg_300, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage34, ap_block_pp0_stage34_00001, ap_block_pp0_stage11_00001, ap_block_pp0_stage21_00001)
    begin
        if (((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage21_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_152_opcode <= ap_const_lv2_1;
        elsif ((((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((icmp_ln41_reg_300 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage34_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34)))) then 
            grp_fu_152_opcode <= ap_const_lv2_0;
        else 
            grp_fu_152_opcode <= "XX";
        end if; 
    end process;


    grp_fu_152_p0_assign_proc : process(ap_enable_reg_pp0_iter0, reg_180, X_I_0_load_1_reg_361, mul2_reg_376, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage34, ap_block_pp0_stage34)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage34) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34))) then 
                grp_fu_152_p0 <= reg_180;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
                grp_fu_152_p0 <= X_I_0_load_1_reg_361;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                grp_fu_152_p0 <= mul2_reg_376;
            else 
                grp_fu_152_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_152_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_152_p1_assign_proc : process(ap_enable_reg_pp0_iter0, reg_194, mul3_reg_381, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21, ap_CS_fsm_pp0_stage34, ap_block_pp0_stage34)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage34) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34)) or ((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)))) then 
            grp_fu_152_p1 <= reg_194;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_152_p1 <= mul3_reg_381;
        else 
            grp_fu_152_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1648_p_ce <= ap_const_logic_1;
    grp_fu_1648_p_din0 <= grp_fu_148_p0;
    grp_fu_1648_p_din1 <= grp_fu_148_p1;
    grp_fu_1648_p_opcode <= grp_fu_148_opcode;
    grp_fu_1652_p_ce <= ap_const_logic_1;
    grp_fu_1652_p_din0 <= grp_fu_152_p0;
    grp_fu_1652_p_din1 <= grp_fu_152_p1;
    grp_fu_1652_p_opcode <= grp_fu_152_opcode;
    grp_fu_1656_p_ce <= ap_const_logic_1;
    grp_fu_1656_p_din0 <= reg_172;
    grp_fu_1656_p_din1 <= c_reg_344;
    grp_fu_1660_p_ce <= ap_const_logic_1;
    grp_fu_1660_p_din0 <= reg_180;
    grp_fu_1660_p_din1 <= s_reg_350;
    grp_fu_1664_p_ce <= ap_const_logic_1;
    grp_fu_1664_p_din0 <= reg_180;
    grp_fu_1664_p_din1 <= c_reg_344;
    grp_fu_1668_p_ce <= ap_const_logic_1;
    grp_fu_1668_p_din0 <= reg_172;
    grp_fu_1668_p_din1 <= s_reg_350;
    icmp_ln41_fu_212_p2 <= "1" when (ap_sig_allocacmp_j_3 = numBF) else "0";
    shl_ln42_fu_226_p2 <= std_logic_vector(shift_left(unsigned(zext_ln42_1_fu_222_p1),to_integer(unsigned('0' & zext_ln41_cast_fu_200_p1(9-1 downto 0)))));
    sin_coefficients_table_address0 <= zext_ln42_fu_243_p1(9 - 1 downto 0);

    sin_coefficients_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            sin_coefficients_table_ce0 <= ap_const_logic_1;
        else 
            sin_coefficients_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln42_fu_218_p1 <= ap_sig_allocacmp_j_3(7 - 1 downto 0);
    zext_ln41_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln41),9));
    zext_ln42_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_fu_218_p1),9));
    zext_ln42_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln42_reg_304),64));
    zext_ln46_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_248_p4),64));
    zext_ln49_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1_fu_262_p4),64));
end behav;
