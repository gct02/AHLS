-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_177_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_0_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_0_ce0 : OUT STD_LOGIC;
    array_0_we0 : OUT STD_LOGIC;
    array_0_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_1_ce0 : OUT STD_LOGIC;
    array_1_we0 : OUT STD_LOGIC;
    array_1_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_2_ce0 : OUT STD_LOGIC;
    array_2_we0 : OUT STD_LOGIC;
    array_2_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_3_ce0 : OUT STD_LOGIC;
    array_3_we0 : OUT STD_LOGIC;
    array_3_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_4_ce0 : OUT STD_LOGIC;
    array_4_we0 : OUT STD_LOGIC;
    array_4_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_5_ce0 : OUT STD_LOGIC;
    array_5_we0 : OUT STD_LOGIC;
    array_5_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_6_ce0 : OUT STD_LOGIC;
    array_6_we0 : OUT STD_LOGIC;
    array_6_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    array_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_7_ce0 : OUT STD_LOGIC;
    array_7_we0 : OUT STD_LOGIC;
    array_7_d0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_177_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_ACE1 : STD_LOGIC_VECTOR (15 downto 0) := "1010110011100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv16_78 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001111000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln177_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_2_reg_737 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_737_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter9_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter11_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter12_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter13_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter14_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter15_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter16_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter17_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter18_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter19_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal i_2_reg_737_pp0_iter20_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln19_3_reg_746 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln19_2_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_2_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_762 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln19_5_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_5_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_777 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln19_8_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_8_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_791 : STD_LOGIC_VECTOR (11 downto 0);
    signal xor_ln19_10_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_10_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_804 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln19_12_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_12_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_816 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln19_14_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_14_reg_821 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_827 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln19_16_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_16_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_7_fu_538_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln19_7_reg_837 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln178_reg_877 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln179_reg_882 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln180_reg_887 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_618_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln181_reg_892 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_634_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln182_reg_897 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_651_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln183_reg_902 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_669_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln184_reg_907 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal urem_ln185_reg_912 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln177_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_104 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln177_fu_235_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (12 downto 0);
    signal lfsr_0_fu_108 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_sig_allocacmp_lfsr_0_load : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_1_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_248_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln19_fu_244_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_4_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_3_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_7_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_6_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_388_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_9_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_11_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_448_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_13_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_15_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_508_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_17_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln19_18_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_516_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_576_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_576_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_589_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_589_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_603_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_618_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_618_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_634_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_651_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_651_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_669_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_669_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_urem_16ns_8ns_7_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_16ns_8ns_7_20_1_U1 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_576_p0,
        din1 => grp_fu_576_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_576_p2);

    urem_16ns_8ns_7_20_1_U2 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_589_p0,
        din1 => grp_fu_589_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_589_p2);

    urem_16ns_8ns_7_20_1_U3 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_603_p0,
        din1 => grp_fu_603_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_603_p2);

    urem_16ns_8ns_7_20_1_U4 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_618_p0,
        din1 => grp_fu_618_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_618_p2);

    urem_16ns_8ns_7_20_1_U5 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_634_p0,
        din1 => grp_fu_634_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_634_p2);

    urem_16ns_8ns_7_20_1_U6 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_651_p0,
        din1 => grp_fu_651_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_651_p2);

    urem_16ns_8ns_7_20_1_U7 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_669_p0,
        din1 => grp_fu_669_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_669_p2);

    urem_16ns_8ns_7_20_1_U8 : component main_urem_16ns_8ns_7_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => or_ln19_7_reg_837,
        din1 => grp_fu_675_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_675_p2);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln177_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_104 <= add_ln177_fu_235_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_104 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    lfsr_0_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln177_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    lfsr_0_fu_108 <= or_ln19_7_fu_538_p10;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    lfsr_0_fu_108 <= ap_const_lv16_ACE1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_2_reg_737_pp0_iter10_reg <= i_2_reg_737_pp0_iter9_reg;
                i_2_reg_737_pp0_iter11_reg <= i_2_reg_737_pp0_iter10_reg;
                i_2_reg_737_pp0_iter12_reg <= i_2_reg_737_pp0_iter11_reg;
                i_2_reg_737_pp0_iter13_reg <= i_2_reg_737_pp0_iter12_reg;
                i_2_reg_737_pp0_iter14_reg <= i_2_reg_737_pp0_iter13_reg;
                i_2_reg_737_pp0_iter15_reg <= i_2_reg_737_pp0_iter14_reg;
                i_2_reg_737_pp0_iter16_reg <= i_2_reg_737_pp0_iter15_reg;
                i_2_reg_737_pp0_iter17_reg <= i_2_reg_737_pp0_iter16_reg;
                i_2_reg_737_pp0_iter18_reg <= i_2_reg_737_pp0_iter17_reg;
                i_2_reg_737_pp0_iter19_reg <= i_2_reg_737_pp0_iter18_reg;
                i_2_reg_737_pp0_iter20_reg <= i_2_reg_737_pp0_iter19_reg;
                i_2_reg_737_pp0_iter2_reg <= i_2_reg_737_pp0_iter1_reg;
                i_2_reg_737_pp0_iter3_reg <= i_2_reg_737_pp0_iter2_reg;
                i_2_reg_737_pp0_iter4_reg <= i_2_reg_737_pp0_iter3_reg;
                i_2_reg_737_pp0_iter5_reg <= i_2_reg_737_pp0_iter4_reg;
                i_2_reg_737_pp0_iter6_reg <= i_2_reg_737_pp0_iter5_reg;
                i_2_reg_737_pp0_iter7_reg <= i_2_reg_737_pp0_iter6_reg;
                i_2_reg_737_pp0_iter8_reg <= i_2_reg_737_pp0_iter7_reg;
                i_2_reg_737_pp0_iter9_reg <= i_2_reg_737_pp0_iter8_reg;
                urem_ln178_reg_877 <= grp_fu_576_p2;
                urem_ln179_reg_882 <= grp_fu_589_p2;
                urem_ln180_reg_887 <= grp_fu_603_p2;
                urem_ln181_reg_892 <= grp_fu_618_p2;
                urem_ln182_reg_897 <= grp_fu_634_p2;
                urem_ln183_reg_902 <= grp_fu_651_p2;
                urem_ln184_reg_907 <= grp_fu_669_p2;
                urem_ln185_reg_912 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_2_reg_737 <= ap_sig_allocacmp_i_2;
                i_2_reg_737_pp0_iter1_reg <= i_2_reg_737;
                lshr_ln19_3_reg_746 <= ap_sig_allocacmp_lfsr_0_load(15 downto 1);
                or_ln19_7_reg_837 <= or_ln19_7_fu_538_p10;
                tmp_1_reg_777 <= ap_sig_allocacmp_lfsr_0_load(15 downto 3);
                tmp_2_reg_791 <= ap_sig_allocacmp_lfsr_0_load(15 downto 4);
                tmp_3_reg_804 <= ap_sig_allocacmp_lfsr_0_load(15 downto 5);
                tmp_4_reg_816 <= ap_sig_allocacmp_lfsr_0_load(15 downto 6);
                tmp_5_reg_827 <= ap_sig_allocacmp_lfsr_0_load(15 downto 7);
                tmp_reg_762 <= ap_sig_allocacmp_lfsr_0_load(15 downto 2);
                xor_ln19_10_reg_796 <= xor_ln19_10_fu_412_p2;
                xor_ln19_12_reg_809 <= xor_ln19_12_fu_442_p2;
                xor_ln19_14_reg_821 <= xor_ln19_14_fu_472_p2;
                xor_ln19_16_reg_832 <= xor_ln19_16_fu_502_p2;
                xor_ln19_2_reg_751 <= xor_ln19_2_fu_294_p2;
                xor_ln19_5_reg_767 <= xor_ln19_5_fu_346_p2;
                xor_ln19_8_reg_782 <= xor_ln19_8_fu_382_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln177_fu_235_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv13_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln177_fu_229_p2)
    begin
        if (((icmp_ln177_fu_229_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_lfsr_0_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, lfsr_0_fu_108)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_lfsr_0_load <= ap_const_lv16_ACE1;
        else 
            ap_sig_allocacmp_lfsr_0_load <= lfsr_0_fu_108;
        end if; 
    end process;

    array_0_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_0_ce0 <= ap_const_logic_1;
        else 
            array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_0_d0 <= urem_ln178_reg_877(7 - 1 downto 0);

    array_0_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_0_we0 <= ap_const_logic_1;
        else 
            array_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_1_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_1_ce0 <= ap_const_logic_1;
        else 
            array_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_1_d0 <= urem_ln179_reg_882(7 - 1 downto 0);

    array_1_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_1_we0 <= ap_const_logic_1;
        else 
            array_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_2_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_2_ce0 <= ap_const_logic_1;
        else 
            array_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_2_d0 <= urem_ln180_reg_887(7 - 1 downto 0);

    array_2_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_2_we0 <= ap_const_logic_1;
        else 
            array_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_3_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_3_ce0 <= ap_const_logic_1;
        else 
            array_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_3_d0 <= urem_ln181_reg_892(7 - 1 downto 0);

    array_3_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_3_we0 <= ap_const_logic_1;
        else 
            array_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_4_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_4_ce0 <= ap_const_logic_1;
        else 
            array_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_4_d0 <= urem_ln182_reg_897(7 - 1 downto 0);

    array_4_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_4_we0 <= ap_const_logic_1;
        else 
            array_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_5_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_5_ce0 <= ap_const_logic_1;
        else 
            array_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_5_d0 <= urem_ln183_reg_902(7 - 1 downto 0);

    array_5_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_5_we0 <= ap_const_logic_1;
        else 
            array_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_6_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_6_ce0 <= ap_const_logic_1;
        else 
            array_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_6_d0 <= urem_ln184_reg_907(7 - 1 downto 0);

    array_6_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_6_we0 <= ap_const_logic_1;
        else 
            array_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    array_7_address0 <= zext_ln177_fu_680_p1(12 - 1 downto 0);

    array_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_7_ce0 <= ap_const_logic_1;
        else 
            array_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_7_d0 <= urem_ln185_reg_912(7 - 1 downto 0);

    array_7_we0_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            array_7_we0 <= ap_const_logic_1;
        else 
            array_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_576_p0 <= (xor_ln19_2_reg_751 & lshr_ln19_3_reg_746);
    grp_fu_576_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_589_p0 <= ((xor_ln19_5_reg_767 & xor_ln19_2_reg_751) & tmp_reg_762);
    grp_fu_589_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_603_p0 <= (((xor_ln19_8_reg_782 & xor_ln19_5_reg_767) & xor_ln19_2_reg_751) & tmp_1_reg_777);
    grp_fu_603_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_618_p0 <= ((((xor_ln19_10_reg_796 & xor_ln19_8_reg_782) & xor_ln19_5_reg_767) & xor_ln19_2_reg_751) & tmp_2_reg_791);
    grp_fu_618_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_634_p0 <= (((((xor_ln19_12_reg_809 & xor_ln19_10_reg_796) & xor_ln19_8_reg_782) & xor_ln19_5_reg_767) & xor_ln19_2_reg_751) & tmp_3_reg_804);
    grp_fu_634_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_651_p0 <= ((((((xor_ln19_14_reg_821 & xor_ln19_12_reg_809) & xor_ln19_10_reg_796) & xor_ln19_8_reg_782) & xor_ln19_5_reg_767) & xor_ln19_2_reg_751) & tmp_4_reg_816);
    grp_fu_651_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_669_p0 <= (((((((xor_ln19_16_reg_832 & xor_ln19_14_reg_821) & xor_ln19_12_reg_809) & xor_ln19_10_reg_796) & xor_ln19_8_reg_782) & xor_ln19_5_reg_767) & xor_ln19_2_reg_751) & tmp_5_reg_827);
    grp_fu_669_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    grp_fu_675_p1 <= ap_const_lv16_78(8 - 1 downto 0);
    icmp_ln177_fu_229_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv13_1000) else "0";
    or_ln19_7_fu_538_p10 <= ((((((((xor_ln19_18_fu_532_p2 & xor_ln19_16_fu_502_p2) & xor_ln19_14_fu_472_p2) & xor_ln19_12_fu_442_p2) & xor_ln19_10_fu_412_p2) & xor_ln19_8_fu_382_p2) & xor_ln19_5_fu_346_p2) & xor_ln19_2_fu_294_p2) & tmp_6_fu_516_p4);
    tmp_10_fu_300_p3 <= ap_sig_allocacmp_lfsr_0_load(1 downto 1);
    tmp_11_fu_308_p3 <= ap_sig_allocacmp_lfsr_0_load(4 downto 4);
    tmp_12_fu_316_p3 <= ap_sig_allocacmp_lfsr_0_load(6 downto 6);
    tmp_13_fu_352_p3 <= ap_sig_allocacmp_lfsr_0_load(7 downto 7);
    tmp_14_fu_388_p3 <= ap_sig_allocacmp_lfsr_0_load(8 downto 8);
    tmp_15_fu_418_p3 <= ap_sig_allocacmp_lfsr_0_load(9 downto 9);
    tmp_16_fu_448_p3 <= ap_sig_allocacmp_lfsr_0_load(10 downto 10);
    tmp_17_fu_478_p3 <= ap_sig_allocacmp_lfsr_0_load(11 downto 11);
    tmp_18_fu_508_p3 <= ap_sig_allocacmp_lfsr_0_load(12 downto 12);
    tmp_6_fu_516_p4 <= ap_sig_allocacmp_lfsr_0_load(15 downto 8);
    tmp_7_fu_248_p3 <= ap_sig_allocacmp_lfsr_0_load(2 downto 2);
    tmp_8_fu_256_p3 <= ap_sig_allocacmp_lfsr_0_load(3 downto 3);
    tmp_9_fu_264_p3 <= ap_sig_allocacmp_lfsr_0_load(5 downto 5);
    trunc_ln19_fu_244_p1 <= ap_sig_allocacmp_lfsr_0_load(1 - 1 downto 0);
    xor_ln19_10_fu_412_p2 <= (xor_ln19_9_fu_406_p2 xor xor_ln19_1_fu_282_p2);
    xor_ln19_11_fu_436_p2 <= (tmp_15_fu_418_p3 xor tmp_13_fu_352_p3);
    xor_ln19_12_fu_442_p2 <= (xor_ln19_4_fu_340_p2 xor xor_ln19_11_fu_436_p2);
    xor_ln19_13_fu_466_p2 <= (tmp_16_fu_448_p3 xor tmp_14_fu_388_p3);
    xor_ln19_14_fu_472_p2 <= (xor_ln19_7_fu_376_p2 xor xor_ln19_13_fu_466_p2);
    xor_ln19_15_fu_496_p2 <= (tmp_17_fu_478_p3 xor tmp_15_fu_418_p3);
    xor_ln19_16_fu_502_p2 <= (xor_ln19_9_fu_406_p2 xor xor_ln19_15_fu_496_p2);
    xor_ln19_17_fu_526_p2 <= (tmp_18_fu_508_p3 xor tmp_16_fu_448_p3);
    xor_ln19_18_fu_532_p2 <= (xor_ln19_17_fu_526_p2 xor xor_ln19_11_fu_436_p2);
    xor_ln19_1_fu_282_p2 <= (tmp_9_fu_264_p3 xor tmp_8_fu_256_p3);
    xor_ln19_2_fu_294_p2 <= (xor_ln19_fu_288_p2 xor trunc_ln19_fu_244_p1);
    xor_ln19_3_fu_334_p2 <= (tmp_8_fu_256_p3 xor tmp_10_fu_300_p3);
    xor_ln19_4_fu_340_p2 <= (tmp_12_fu_316_p3 xor tmp_11_fu_308_p3);
    xor_ln19_5_fu_346_p2 <= (xor_ln19_4_fu_340_p2 xor xor_ln19_3_fu_334_p2);
    xor_ln19_6_fu_370_p2 <= (tmp_7_fu_248_p3 xor tmp_11_fu_308_p3);
    xor_ln19_7_fu_376_p2 <= (tmp_9_fu_264_p3 xor tmp_13_fu_352_p3);
    xor_ln19_8_fu_382_p2 <= (xor_ln19_7_fu_376_p2 xor xor_ln19_6_fu_370_p2);
    xor_ln19_9_fu_406_p2 <= (tmp_14_fu_388_p3 xor tmp_12_fu_316_p3);
    xor_ln19_fu_288_p2 <= (xor_ln19_1_fu_282_p2 xor tmp_7_fu_248_p3);
    zext_ln177_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_737_pp0_iter20_reg),64));
end behav;
