-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity histogram_histogram_Pipeline_loop_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    results_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    results_4_ce0 : OUT STD_LOGIC;
    results_4_we0 : OUT STD_LOGIC;
    results_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    results_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    array_4_ce0 : OUT STD_LOGIC;
    array_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of histogram_histogram_Pipeline_loop_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln90_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln90_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal results_4_addr_reg_248 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal results_4_addr_1_reg_253 : STD_LOGIC_VECTOR (2 downto 0);
    signal results_4_addr_2_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal results_4_addr_3_reg_263 : STD_LOGIC_VECTOR (2 downto 0);
    signal results_4_addr_4_reg_268 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln92_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln94_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln98_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln98_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln90_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_4_fu_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln90_fu_144_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln92_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_1_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln94_1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_1_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component histogram_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component histogram_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln90_fu_138_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_4_fu_56 <= add_ln90_fu_144_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_4_fu_56 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln92_reg_273 <= and_ln92_fu_172_p2;
                and_ln94_reg_277 <= and_ln94_fu_190_p2;
                and_ln96_reg_281 <= and_ln96_fu_208_p2;
                and_ln98_reg_285 <= and_ln98_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln90_reg_239 <= icmp_ln90_fu_138_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln90_fu_144_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv13_1));
    and_ln92_fu_172_p2 <= (icmp_ln92_fu_160_p2 and icmp_ln92_1_fu_166_p2);
    and_ln94_fu_190_p2 <= (icmp_ln94_fu_178_p2 and icmp_ln94_1_fu_184_p2);
    and_ln96_fu_208_p2 <= (icmp_ln96_fu_196_p2 and icmp_ln96_1_fu_202_p2);
    and_ln98_fu_226_p2 <= (icmp_ln98_fu_214_p2 and icmp_ln98_1_fu_220_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln90_fu_138_p2)
    begin
        if (((icmp_ln90_fu_138_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_4_fu_56, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i <= i_4_fu_56;
        end if; 
    end process;

    array_4_address0 <= zext_ln90_fu_150_p1(12 - 1 downto 0);

    array_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            array_4_ce0 <= ap_const_logic_1;
        else 
            array_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln90_fu_138_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv13_1000) else "0";
    icmp_ln92_1_fu_166_p2 <= "1" when (signed(array_4_q0) < signed(ap_const_lv32_15)) else "0";
    icmp_ln92_fu_160_p2 <= "1" when (signed(array_4_q0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln94_1_fu_184_p2 <= "1" when (signed(array_4_q0) < signed(ap_const_lv32_29)) else "0";
    icmp_ln94_fu_178_p2 <= "1" when (signed(array_4_q0) > signed(ap_const_lv32_14)) else "0";
    icmp_ln96_1_fu_202_p2 <= "1" when (signed(array_4_q0) < signed(ap_const_lv32_3D)) else "0";
    icmp_ln96_fu_196_p2 <= "1" when (signed(array_4_q0) > signed(ap_const_lv32_28)) else "0";
    icmp_ln98_1_fu_220_p2 <= "1" when (signed(array_4_q0) < signed(ap_const_lv32_51)) else "0";
    icmp_ln98_fu_214_p2 <= "1" when (signed(array_4_q0) > signed(ap_const_lv32_3C)) else "0";
    results_4_addr_1_reg_253 <= ap_const_lv64_1(3 - 1 downto 0);
    results_4_addr_2_reg_258 <= ap_const_lv64_2(3 - 1 downto 0);
    results_4_addr_3_reg_263 <= ap_const_lv64_3(3 - 1 downto 0);
    results_4_addr_4_reg_268 <= ap_const_lv64_4(3 - 1 downto 0);
    results_4_addr_reg_248 <= ap_const_lv64_0(3 - 1 downto 0);

    results_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln90_reg_239, results_4_addr_reg_248, results_4_addr_1_reg_253, results_4_addr_2_reg_258, results_4_addr_3_reg_263, results_4_addr_4_reg_268, and_ln92_fu_172_p2, and_ln92_reg_273, and_ln94_fu_190_p2, and_ln94_reg_277, and_ln96_fu_208_p2, and_ln96_reg_281, and_ln98_fu_226_p2, and_ln98_reg_285, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_lv1_1 = and_ln92_reg_273) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            results_4_address0 <= results_4_addr_reg_248;
        elsif (((ap_const_lv1_1 = and_ln94_reg_277) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln92_reg_273))) then 
            results_4_address0 <= results_4_addr_1_reg_253;
        elsif (((ap_const_lv1_1 = and_ln96_reg_281) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273))) then 
            results_4_address0 <= results_4_addr_2_reg_258;
        elsif (((ap_const_lv1_1 = and_ln98_reg_285) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln96_reg_281) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273))) then 
            results_4_address0 <= results_4_addr_3_reg_263;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln98_reg_285) and (ap_const_lv1_0 = and_ln96_reg_281) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273))) then 
            results_4_address0 <= results_4_addr_4_reg_268;
        elsif (((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln92_fu_172_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            results_4_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln94_fu_190_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln92_fu_172_p2))) then 
            results_4_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln96_fu_208_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln94_fu_190_p2) and (ap_const_lv1_0 = and_ln92_fu_172_p2))) then 
            results_4_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln98_fu_226_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln96_fu_208_p2) and (ap_const_lv1_0 = and_ln94_fu_190_p2) and (ap_const_lv1_0 = and_ln92_fu_172_p2))) then 
            results_4_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln98_fu_226_p2) and (ap_const_lv1_0 = and_ln96_fu_208_p2) and (ap_const_lv1_0 = and_ln94_fu_190_p2) and (ap_const_lv1_0 = and_ln92_fu_172_p2))) then 
            results_4_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        else 
            results_4_address0 <= "XXX";
        end if; 
    end process;


    results_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln90_reg_239, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, and_ln92_fu_172_p2, and_ln92_reg_273, and_ln94_fu_190_p2, and_ln94_reg_277, and_ln96_fu_208_p2, and_ln96_reg_281, and_ln98_fu_226_p2, and_ln98_reg_285)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln98_reg_285) and (ap_const_lv1_0 = and_ln96_reg_281) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((ap_const_lv1_1 = and_ln92_reg_273) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv1_1 = and_ln94_reg_277) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((ap_const_lv1_1 = and_ln96_reg_281) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((ap_const_lv1_1 = and_ln98_reg_285) 
    and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln96_reg_281) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln98_fu_226_p2) and (ap_const_lv1_0 = and_ln96_fu_208_p2) and (ap_const_lv1_0 = and_ln94_fu_190_p2) and (ap_const_lv1_0 = and_ln92_fu_172_p2)) or ((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln92_fu_172_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln94_fu_190_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = 
    ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln92_fu_172_p2)) or ((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln96_fu_208_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln94_fu_190_p2) and (ap_const_lv1_0 = and_ln92_fu_172_p2)) or ((icmp_ln90_reg_239 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln98_fu_226_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_0 = and_ln96_fu_208_p2) and (ap_const_lv1_0 = and_ln94_fu_190_p2) and (ap_const_lv1_0 = and_ln92_fu_172_p2)))) then 
            results_4_ce0 <= ap_const_logic_1;
        else 
            results_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    results_4_d0 <= std_logic_vector(unsigned(results_4_q0) + unsigned(ap_const_lv32_1));

    results_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, and_ln92_reg_273, and_ln94_reg_277, and_ln96_reg_281, and_ln98_reg_285)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln98_reg_285) and (ap_const_lv1_0 = and_ln96_reg_281) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((ap_const_lv1_1 = and_ln92_reg_273) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_lv1_1 = and_ln94_reg_277) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((ap_const_lv1_1 = and_ln96_reg_281) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273)) or ((ap_const_lv1_1 = and_ln98_reg_285) 
    and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = and_ln96_reg_281) and (ap_const_lv1_0 = and_ln94_reg_277) and (ap_const_lv1_0 = and_ln92_reg_273)))) then 
            results_4_we0 <= ap_const_logic_1;
        else 
            results_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln90_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
end behav;
