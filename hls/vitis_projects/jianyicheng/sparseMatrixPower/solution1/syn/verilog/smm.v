// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="smm_smm,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.893000,HLS_SYN_LAT=10601,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=412,HLS_SYN_LUT=375,HLS_VERSION=2023_2}" *)

module smm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        data_q0,
        data_address1,
        data_ce1,
        data_q1,
        all_zero_address0,
        all_zero_ce0,
        all_zero_q0,
        w_address0,
        w_ce0,
        w_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] data_address0;
output   data_ce0;
output   data_we0;
output  [31:0] data_d0;
input  [31:0] data_q0;
output  [7:0] data_address1;
output   data_ce1;
input  [31:0] data_q1;
output  [6:0] all_zero_address0;
output   all_zero_ce0;
input  [31:0] all_zero_q0;
output  [13:0] w_address0;
output   w_ce0;
input  [31:0] w_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg all_zero_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln15_fu_84_p2;
reg   [6:0] add_ln15_reg_118;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln18_fu_95_p2;
reg   [0:0] icmp_ln18_reg_128;
wire    ap_CS_fsm_state3;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_done;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_idle;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_ready;
wire   [13:0] grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_w_address0;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_w_ce0;
wire   [7:0] grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_address0;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_ce0;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_we0;
wire   [31:0] grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_d0;
wire   [7:0] grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_address1;
wire    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_ce1;
reg    grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [63:0] zext_ln15_fu_90_p1;
wire   [0:0] icmp_ln15_fu_78_p2;
reg   [6:0] j_fu_44;
reg    ap_block_state5_on_subcall_done;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start_reg = 1'b0;
#0 j_fu_44 = 7'd0;
end

smm_smm_Pipeline_VITIS_LOOP_15_1 grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start),
    .ap_done(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_done),
    .ap_idle(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_idle),
    .ap_ready(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_ready),
    .zext_ln15_1(j_fu_44),
    .w_address0(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_w_address0),
    .w_ce0(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_w_ce0),
    .w_q0(w_q0),
    .data_address0(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_address0),
    .data_ce0(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_ce0),
    .data_we0(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_we0),
    .data_d0(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_d0),
    .data_q0(data_q0),
    .data_address1(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_address1),
    .data_ce1(grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_ce1),
    .data_q1(data_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start_reg <= 1'b1;
        end else if ((grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_ready == 1'b1)) begin
            grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_44 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        j_fu_44 <= add_ln15_reg_118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln15_reg_118 <= add_ln15_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln18_reg_128 <= icmp_ln18_fu_95_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        all_zero_ce0 = 1'b1;
    end else begin
        all_zero_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state5_on_subcall_done)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln15_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln18_fu_95_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_84_p2 = (j_fu_44 + 7'd1);

assign all_zero_address0 = zext_ln15_fu_90_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_done == 1'b0) & (icmp_ln18_reg_128 == 1'd1));
end

assign data_address0 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_address0;

assign data_address1 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_address1;

assign data_ce0 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_ce0;

assign data_ce1 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_ce1;

assign data_d0 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_d0;

assign data_we0 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_data_we0;

assign grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_ap_start_reg;

assign icmp_ln15_fu_78_p2 = ((j_fu_44 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_95_p2 = (($signed(all_zero_q0) < $signed(32'd10)) ? 1'b1 : 1'b0);

assign w_address0 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_w_address0;

assign w_ce0 = grp_smm_Pipeline_VITIS_LOOP_15_1_fu_61_w_ce0;

assign zext_ln15_fu_90_p1 = j_fu_44;

endmodule //smm
