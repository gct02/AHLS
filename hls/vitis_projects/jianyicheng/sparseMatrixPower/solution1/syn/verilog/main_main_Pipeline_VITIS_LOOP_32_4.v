// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_32_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln29_1,
        data_address0,
        data_ce0,
        data_q0,
        data_1_address0,
        data_1_ce0,
        data_1_q0,
        data_2_address0,
        data_2_ce0,
        data_2_q0,
        w_address0,
        w_ce0,
        w_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] zext_ln29_1;
output  [6:0] data_address0;
output   data_ce0;
input  [31:0] data_q0;
output  [6:0] data_1_address0;
output   data_1_ce0;
input  [31:0] data_1_q0;
output  [6:0] data_2_address0;
output   data_2_ce0;
input  [31:0] data_2_q0;
output  [13:0] w_address0;
output   w_ce0;
input  [3:0] w_q0;

reg ap_idle;
reg data_ce0;
reg data_1_ce0;
reg data_2_ce0;
reg w_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln32_fu_189_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [13:0] zext_ln29_1_cast_fu_162_p1;
reg   [13:0] zext_ln29_1_cast_reg_357;
reg   [6:0] i_1_reg_362;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln32_reg_368;
reg   [0:0] icmp_ln32_reg_368_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_368_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_368_pp0_iter3_reg;
wire   [6:0] add_ln32_1_fu_204_p2;
reg   [6:0] add_ln32_1_reg_372;
wire   [1:0] trunc_ln32_fu_233_p1;
reg   [1:0] trunc_ln32_reg_378;
wire   [13:0] add_ln33_fu_243_p2;
reg   [13:0] add_ln33_reg_383;
wire   [6:0] select_ln32_fu_268_p3;
reg   [6:0] select_ln32_reg_403;
reg   [31:0] data_load_reg_413;
reg   [31:0] data_1_load_reg_418;
reg   [31:0] data_2_load_reg_423;
reg   [3:0] w_load_reg_428;
wire  signed [31:0] tmp_2_fu_287_p9;
reg  signed [31:0] tmp_2_reg_433;
wire   [7:0] add_ln33_1_fu_303_p2;
reg   [7:0] add_ln33_1_reg_438;
reg   [7:0] add_ln33_1_reg_438_pp0_iter2_reg;
reg   [7:0] data1_addr_reg_448;
reg   [7:0] data1_addr_reg_448_pp0_iter4_reg;
wire   [31:0] data1_q1;
reg   [31:0] data1_load_reg_454;
wire   [31:0] grp_fu_316_p2;
reg   [31:0] mul_ln33_reg_459;
wire   [31:0] add_ln33_2_fu_325_p2;
reg   [31:0] add_ln33_2_reg_464;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
reg    data1_ce0;
reg    data1_we0;
wire   [7:0] data1_address1;
reg    data1_ce1;
wire   [63:0] zext_ln32_1_fu_226_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln33_fu_275_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln33_2_fu_321_p1;
reg   [6:0] phi_urem22_fu_68;
reg   [6:0] ap_sig_allocacmp_phi_urem22_load;
wire    ap_loop_init;
reg   [13:0] phi_mul20_fu_72;
wire   [13:0] add_ln33_3_fu_237_p2;
reg   [14:0] phi_mul18_fu_76;
wire   [14:0] add_ln32_2_fu_210_p2;
reg   [6:0] i_fu_80;
wire   [6:0] add_ln32_fu_258_p2;
wire   [5:0] tmp_fu_216_p4;
wire   [0:0] icmp_ln32_1_fu_263_p2;
wire   [31:0] tmp_2_fu_287_p7;
wire   [7:0] zext_ln32_fu_284_p1;
wire   [3:0] grp_fu_316_p0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] grp_fu_316_p00;
wire   [1:0] tmp_2_fu_287_p1;
wire   [1:0] tmp_2_fu_287_p3;
wire  signed [1:0] tmp_2_fu_287_p5;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 phi_urem22_fu_68 = 7'd0;
#0 phi_mul20_fu_72 = 14'd0;
#0 phi_mul18_fu_76 = 15'd0;
#0 i_fu_80 = 7'd0;
#0 ap_done_reg = 1'b0;
end

main_main_Pipeline_VITIS_LOOP_32_4_data1_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
data1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data1_addr_reg_448_pp0_iter4_reg),
    .ce0(data1_ce0),
    .we0(data1_we0),
    .d0(add_ln33_2_reg_464),
    .address1(data1_address1),
    .ce1(data1_ce1),
    .q1(data1_q1)
);

main_sparsemux_7_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_U24(
    .din0(data_load_reg_413),
    .din1(data_1_load_reg_418),
    .din2(data_2_load_reg_423),
    .def(tmp_2_fu_287_p7),
    .sel(trunc_ln32_reg_378),
    .dout(tmp_2_fu_287_p9)
);

main_mul_4ns_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_4ns_32s_32_5_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_316_p0),
    .din1(tmp_2_reg_433),
    .ce(1'b1),
    .dout(grp_fu_316_p2)
);

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln32_reg_368 == 1'd0))) begin
            i_fu_80 <= add_ln32_fu_258_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_mul18_fu_76 <= 15'd0;
    end else if (((icmp_ln32_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_mul18_fu_76 <= add_ln32_2_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_mul20_fu_72 <= 14'd0;
    end else if (((icmp_ln32_fu_189_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_mul20_fu_72 <= add_ln33_3_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_urem22_fu_68 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        phi_urem22_fu_68 <= select_ln32_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln32_1_reg_372 <= add_ln32_1_fu_204_p2;
        add_ln33_1_reg_438 <= add_ln33_1_fu_303_p2;
        add_ln33_1_reg_438_pp0_iter2_reg <= add_ln33_1_reg_438;
        add_ln33_2_reg_464 <= add_ln33_2_fu_325_p2;
        add_ln33_reg_383 <= add_ln33_fu_243_p2;
        i_1_reg_362 <= i_fu_80;
        icmp_ln32_reg_368 <= icmp_ln32_fu_189_p2;
        icmp_ln32_reg_368_pp0_iter1_reg <= icmp_ln32_reg_368;
        icmp_ln32_reg_368_pp0_iter2_reg <= icmp_ln32_reg_368_pp0_iter1_reg;
        icmp_ln32_reg_368_pp0_iter3_reg <= icmp_ln32_reg_368_pp0_iter2_reg;
        tmp_2_reg_433 <= tmp_2_fu_287_p9;
        trunc_ln32_reg_378 <= trunc_ln32_fu_233_p1;
        w_load_reg_428 <= w_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_addr_reg_448 <= zext_ln33_2_fu_321_p1;
        data1_addr_reg_448_pp0_iter4_reg <= data1_addr_reg_448;
        data_1_load_reg_418 <= data_1_q0;
        data_2_load_reg_423 <= data_2_q0;
        data_load_reg_413 <= data_q0;
        mul_ln33_reg_459 <= grp_fu_316_p2;
        select_ln32_reg_403 <= select_ln32_fu_268_p3;
        zext_ln29_1_cast_reg_357[6 : 0] <= zext_ln29_1_cast_fu_162_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data1_load_reg_454 <= data1_q1;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_368 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_368_pp0_iter3_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_phi_urem22_load = select_ln32_reg_403;
    end else begin
        ap_sig_allocacmp_phi_urem22_load = phi_urem22_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_ce0 = 1'b1;
    end else begin
        data1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_ce1 = 1'b1;
    end else begin
        data1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_we0 = 1'b1;
    end else begin
        data1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_1_ce0 = 1'b1;
    end else begin
        data_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_2_ce0 = 1'b1;
    end else begin
        data_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_204_p2 = (ap_sig_allocacmp_phi_urem22_load + 7'd1);

assign add_ln32_2_fu_210_p2 = (phi_mul18_fu_76 + 15'd171);

assign add_ln32_fu_258_p2 = (i_1_reg_362 + 7'd1);

assign add_ln33_1_fu_303_p2 = (zext_ln32_fu_284_p1 + 8'd100);

assign add_ln33_2_fu_325_p2 = (data1_load_reg_454 + mul_ln33_reg_459);

assign add_ln33_3_fu_237_p2 = (phi_mul20_fu_72 + 14'd100);

assign add_ln33_fu_243_p2 = (phi_mul20_fu_72 + zext_ln29_1_cast_reg_357);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign data1_address1 = zext_ln33_2_fu_321_p1;

assign data_1_address0 = zext_ln32_1_fu_226_p1;

assign data_2_address0 = zext_ln32_1_fu_226_p1;

assign data_address0 = zext_ln32_1_fu_226_p1;

assign grp_fu_316_p0 = grp_fu_316_p00;

assign grp_fu_316_p00 = w_load_reg_428;

assign icmp_ln32_1_fu_263_p2 = ((add_ln32_1_reg_372 < 7'd3) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_189_p2 = ((i_fu_80 == 7'd100) ? 1'b1 : 1'b0);

assign select_ln32_fu_268_p3 = ((icmp_ln32_1_fu_263_p2[0:0] == 1'b1) ? add_ln32_1_reg_372 : 7'd0);

assign tmp_2_fu_287_p7 = 'bx;

assign tmp_fu_216_p4 = {{phi_mul18_fu_76[14:9]}};

assign trunc_ln32_fu_233_p1 = ap_sig_allocacmp_phi_urem22_load[1:0];

assign w_address0 = zext_ln33_fu_275_p1;

assign zext_ln29_1_cast_fu_162_p1 = zext_ln29_1;

assign zext_ln32_1_fu_226_p1 = tmp_fu_216_p4;

assign zext_ln32_fu_284_p1 = i_1_reg_362;

assign zext_ln33_2_fu_321_p1 = add_ln33_1_reg_438_pp0_iter2_reg;

assign zext_ln33_fu_275_p1 = add_ln33_reg_383;

always @ (posedge ap_clk) begin
    zext_ln29_1_cast_reg_357[13:7] <= 7'b0000000;
end

endmodule //main_main_Pipeline_VITIS_LOOP_32_4
