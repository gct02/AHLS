-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_46_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    result_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    result_ce0 : OUT STD_LOGIC;
    result_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gold_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    gold_ce0 : OUT STD_LOGIC;
    gold_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    check_out : OUT STD_LOGIC_VECTOR (16 downto 0);
    check_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_46_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln46_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln46_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_237_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_237_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_237_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_237_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_237_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln46_fu_108_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln46_reg_241 : STD_LOGIC_VECTOR (16 downto 0);
    signal result_load_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal gold_load_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln47_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_268 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_268_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_268_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_268_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_273 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_273_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_273_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_1_reg_273_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_reg_278_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_reg_278_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_2_reg_278_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_reg_283_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_reg_283_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_3_reg_283_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal check_1_fu_208_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal check_1_reg_293 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln46_fu_114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal check_fu_44 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_sig_allocacmp_check_load : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_48 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bitcast_ln47_fu_124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln47_1_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_127_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_fu_137_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_2_fu_144_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln47_1_fu_154_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln47_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln47_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_fu_204_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fcmp_32ns_32ns_1_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_4_no_dsp_1_U16 : component main_fcmp_32ns_32ns_1_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => result_load_reg_256,
        din1 => gold_load_reg_262,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_85_p2);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    check_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    check_fu_44 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    check_fu_44 <= check_1_reg_293;
                end if;
            end if; 
        end if;
    end process;

    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_48 <= ap_const_lv17_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_48 <= add_ln46_reg_241;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln46_reg_241 <= add_ln46_fu_108_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                gold_load_reg_262 <= gold_q0;
                icmp_ln46_reg_237 <= icmp_ln46_fu_102_p2;
                icmp_ln46_reg_237_pp0_iter1_reg <= icmp_ln46_reg_237;
                result_load_reg_256 <= result_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                check_1_reg_293 <= check_1_fu_208_p2;
                icmp_ln46_reg_237_pp0_iter2_reg <= icmp_ln46_reg_237_pp0_iter1_reg;
                icmp_ln46_reg_237_pp0_iter3_reg <= icmp_ln46_reg_237_pp0_iter2_reg;
                icmp_ln46_reg_237_pp0_iter4_reg <= icmp_ln46_reg_237_pp0_iter3_reg;
                icmp_ln46_reg_237_pp0_iter5_reg <= icmp_ln46_reg_237_pp0_iter4_reg;
                icmp_ln47_1_reg_273 <= icmp_ln47_1_fu_164_p2;
                icmp_ln47_1_reg_273_pp0_iter3_reg <= icmp_ln47_1_reg_273;
                icmp_ln47_1_reg_273_pp0_iter4_reg <= icmp_ln47_1_reg_273_pp0_iter3_reg;
                icmp_ln47_1_reg_273_pp0_iter5_reg <= icmp_ln47_1_reg_273_pp0_iter4_reg;
                icmp_ln47_2_reg_278 <= icmp_ln47_2_fu_170_p2;
                icmp_ln47_2_reg_278_pp0_iter3_reg <= icmp_ln47_2_reg_278;
                icmp_ln47_2_reg_278_pp0_iter4_reg <= icmp_ln47_2_reg_278_pp0_iter3_reg;
                icmp_ln47_2_reg_278_pp0_iter5_reg <= icmp_ln47_2_reg_278_pp0_iter4_reg;
                icmp_ln47_3_reg_283 <= icmp_ln47_3_fu_176_p2;
                icmp_ln47_3_reg_283_pp0_iter3_reg <= icmp_ln47_3_reg_283;
                icmp_ln47_3_reg_283_pp0_iter4_reg <= icmp_ln47_3_reg_283_pp0_iter3_reg;
                icmp_ln47_3_reg_283_pp0_iter5_reg <= icmp_ln47_3_reg_283_pp0_iter4_reg;
                icmp_ln47_reg_268 <= icmp_ln47_fu_158_p2;
                icmp_ln47_reg_268_pp0_iter3_reg <= icmp_ln47_reg_268;
                icmp_ln47_reg_268_pp0_iter4_reg <= icmp_ln47_reg_268_pp0_iter3_reg;
                icmp_ln47_reg_268_pp0_iter5_reg <= icmp_ln47_reg_268_pp0_iter4_reg;
                tmp_3_reg_288 <= grp_fu_85_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln46_fu_108_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv17_1));
    and_ln47_1_fu_199_p2 <= (tmp_3_reg_288 and and_ln47_fu_193_p2);
    and_ln47_fu_193_p2 <= (or_ln47_fu_185_p2 and or_ln47_1_fu_189_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln46_fu_102_p2)
    begin
        if (((icmp_ln46_fu_102_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_check_load_assign_proc : process(ap_enable_reg_pp0_iter7, check_1_reg_293, ap_block_pp0_stage0, check_fu_44)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_sig_allocacmp_check_load <= check_1_reg_293;
        else 
            ap_sig_allocacmp_check_load <= check_fu_44;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln46_reg_241, ap_block_pp0_stage0, ap_loop_init, i_fu_48)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_1 <= ap_const_lv17_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_1 <= add_ln46_reg_241;
            else 
                ap_sig_allocacmp_i_1 <= i_fu_48;
            end if;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_48;
        end if; 
    end process;

    bitcast_ln47_1_fu_141_p1 <= gold_load_reg_262;
    bitcast_ln47_fu_124_p1 <= result_load_reg_256;
    check_1_fu_208_p2 <= std_logic_vector(unsigned(zext_ln47_fu_204_p1) + unsigned(ap_sig_allocacmp_check_load));
    check_out <= check_fu_44;

    check_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln46_reg_237_pp0_iter5_reg)
    begin
        if (((icmp_ln46_reg_237_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            check_out_ap_vld <= ap_const_logic_1;
        else 
            check_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    gold_address0 <= zext_ln46_fu_114_p1(16 - 1 downto 0);

    gold_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gold_ce0 <= ap_const_logic_1;
        else 
            gold_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln46_fu_102_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv17_10000) else "0";
    icmp_ln47_1_fu_164_p2 <= "1" when (trunc_ln47_fu_137_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_2_fu_170_p2 <= "0" when (tmp_2_fu_144_p4 = ap_const_lv8_FF) else "1";
    icmp_ln47_3_fu_176_p2 <= "1" when (trunc_ln47_1_fu_154_p1 = ap_const_lv23_0) else "0";
    icmp_ln47_fu_158_p2 <= "0" when (tmp_1_fu_127_p4 = ap_const_lv8_FF) else "1";
    or_ln47_1_fu_189_p2 <= (icmp_ln47_3_reg_283_pp0_iter5_reg or icmp_ln47_2_reg_278_pp0_iter5_reg);
    or_ln47_fu_185_p2 <= (icmp_ln47_reg_268_pp0_iter5_reg or icmp_ln47_1_reg_273_pp0_iter5_reg);
    result_address0 <= zext_ln46_fu_114_p1(16 - 1 downto 0);

    result_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            result_ce0 <= ap_const_logic_1;
        else 
            result_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_127_p4 <= bitcast_ln47_fu_124_p1(30 downto 23);
    tmp_2_fu_144_p4 <= bitcast_ln47_1_fu_141_p1(30 downto 23);
    trunc_ln47_1_fu_154_p1 <= bitcast_ln47_1_fu_141_p1(23 - 1 downto 0);
    trunc_ln47_fu_137_p1 <= bitcast_ln47_fu_124_p1(23 - 1 downto 0);
    zext_ln46_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln47_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln47_1_fu_199_p2),17));
end behav;
