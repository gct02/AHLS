-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity trVecAccum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    r_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    r_ce0 : OUT STD_LOGIC;
    r_we0 : OUT STD_LOGIC;
    r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of trVecAccum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "trVecAccum_trVecAccum,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.579000,HLS_SYN_LAT=164609,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=406,HLS_SYN_LUT=474,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_100 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln12_fu_107_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln12_reg_198 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln12_1_fu_111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_1_reg_203 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_fu_132_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start : STD_LOGIC;
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done : STD_LOGIC;
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_ap_idle : STD_LOGIC;
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_ap_ready : STD_LOGIC;
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_a_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_a_ce0 : STD_LOGIC;
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out_ap_vld : STD_LOGIC;
    signal grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln12_fu_127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_1_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ii_fu_48 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln18_fu_136_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_52 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln12_fu_121_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_169_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_169_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_169_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_169_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_169_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component trVecAccum_trVecAccum_Pipeline_loop_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s : IN STD_LOGIC_VECTOR (31 downto 0);
        i : IN STD_LOGIC_VECTOR (7 downto 0);
        ii : IN STD_LOGIC_VECTOR (15 downto 0);
        a_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component trVecAccum_mac_muladd_9ns_9ns_3ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_trVecAccum_Pipeline_loop_1_fu_81 : component trVecAccum_trVecAccum_Pipeline_loop_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start,
        ap_done => grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done,
        ap_idle => grp_trVecAccum_Pipeline_loop_1_fu_81_ap_idle,
        ap_ready => grp_trVecAccum_Pipeline_loop_1_fu_81_ap_ready,
        s => s_reg_222,
        i => trunc_ln12_1_reg_203,
        ii => trunc_ln12_reg_198,
        a_address0 => grp_trVecAccum_Pipeline_loop_1_fu_81_a_address0,
        a_ce0 => grp_trVecAccum_Pipeline_loop_1_fu_81_a_ce0,
        a_q0 => a_q0,
        s_1_out => grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out,
        s_1_out_ap_vld => grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out_ap_vld);

    mac_muladd_9ns_9ns_3ns_16_4_1_U8 : component trVecAccum_mac_muladd_9ns_9ns_3ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_169_p0,
        din1 => grp_fu_169_p1,
        din2 => grp_fu_169_p2,
        ce => grp_fu_169_ce,
        dout => grp_fu_169_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_ready = ap_const_logic_1)) then 
                    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_52 <= ap_const_lv9_0;
            elsif (((icmp_ln12_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_52 <= add_ln12_fu_121_p2;
            end if; 
        end if;
    end process;

    ii_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_fu_48 <= ap_const_lv17_0;
            elsif (((icmp_ln12_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ii_fu_48 <= add_ln18_fu_136_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                s_reg_222 <= s_fu_152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln12_1_reg_203 <= trunc_ln12_1_fu_111_p1;
                trunc_ln12_reg_198 <= trunc_ln12_fu_107_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done, ap_CS_fsm_state4, icmp_ln12_fu_115_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln12_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_address0 <= grp_trVecAccum_Pipeline_loop_1_fu_81_a_address0;
    a_ce0 <= grp_trVecAccum_Pipeline_loop_1_fu_81_a_ce0;
    add_ln12_fu_121_p2 <= std_logic_vector(unsigned(i_fu_52) + unsigned(ap_const_lv9_1));
    add_ln18_fu_136_p2 <= std_logic_vector(unsigned(ii_fu_48) + unsigned(ap_const_lv17_100));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done)
    begin
        if ((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_115_p2)
    begin
        if (((icmp_ln12_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln12_fu_115_p2)
    begin
        if (((icmp_ln12_fu_115_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_169_ce_assign_proc : process(ap_CS_fsm_state1, grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            grp_fu_169_ce <= ap_const_logic_0;
        else 
            grp_fu_169_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_169_p0 <= zext_ln17_fu_132_p1(9 - 1 downto 0);
    grp_fu_169_p1 <= zext_ln17_fu_132_p1(9 - 1 downto 0);
    grp_fu_169_p2 <= ap_const_lv16_7(3 - 1 downto 0);
    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start <= grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg;
    icmp_ln12_fu_115_p2 <= "1" when (i_fu_52 = ap_const_lv9_100) else "0";

    r_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln12_fu_127_p1, zext_ln17_1_fu_160_p1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_address0 <= zext_ln17_1_fu_160_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            r_address0 <= zext_ln12_fu_127_p1(16 - 1 downto 0);
        else 
            r_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            r_ce0 <= ap_const_logic_1;
        else 
            r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_d0 <= grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out;

    r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            r_we0 <= ap_const_logic_1;
        else 
            r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    s_fu_152_p1 <= r_q0;
    trunc_ln12_1_fu_111_p1 <= i_fu_52(8 - 1 downto 0);
    trunc_ln12_fu_107_p1 <= ii_fu_48(16 - 1 downto 0);
    zext_ln12_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_52),64));
    zext_ln17_1_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_169_p3),64));
    zext_ln17_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_52),16));
end behav;
