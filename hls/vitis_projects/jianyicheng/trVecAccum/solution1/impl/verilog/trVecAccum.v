// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="trVecAccum_trVecAccum,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.579000,HLS_SYN_LAT=164609,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=406,HLS_SYN_LUT=474,HLS_VERSION=2023_2}" *)

module trVecAccum (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        r_address0,
        r_ce0,
        r_we0,
        r_d0,
        r_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] a_address0;
output   a_ce0;
input  [31:0] a_q0;
output  [15:0] r_address0;
output   r_ce0;
output   r_we0;
output  [31:0] r_d0;
input  [31:0] r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] r_address0;
reg r_ce0;
reg r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [15:0] trunc_ln12_fu_107_p1;
reg   [15:0] trunc_ln12_reg_198;
wire    ap_CS_fsm_state2;
wire   [7:0] trunc_ln12_1_fu_111_p1;
reg   [7:0] trunc_ln12_1_reg_203;
wire   [15:0] zext_ln17_fu_132_p1;
wire   [31:0] s_fu_152_p1;
reg   [31:0] s_reg_222;
wire    ap_CS_fsm_state3;
wire    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start;
wire    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done;
wire    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_idle;
wire    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_ready;
wire   [15:0] grp_trVecAccum_Pipeline_loop_1_fu_81_a_address0;
wire    grp_trVecAccum_Pipeline_loop_1_fu_81_a_ce0;
wire   [31:0] grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out;
wire    grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out_ap_vld;
reg    grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln12_fu_127_p1;
wire   [0:0] icmp_ln12_fu_115_p2;
wire   [63:0] zext_ln17_1_fu_160_p1;
wire    ap_CS_fsm_state5;
reg   [16:0] ii_fu_48;
wire   [16:0] add_ln18_fu_136_p2;
reg   [8:0] i_fu_52;
wire   [8:0] add_ln12_fu_121_p2;
wire   [15:0] grp_fu_169_p3;
wire   [8:0] grp_fu_169_p0;
wire   [8:0] grp_fu_169_p1;
wire   [2:0] grp_fu_169_p2;
reg    grp_fu_169_ce;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg = 1'b0;
#0 ii_fu_48 = 17'd0;
#0 i_fu_52 = 9'd0;
end

trVecAccum_trVecAccum_Pipeline_loop_1 grp_trVecAccum_Pipeline_loop_1_fu_81(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start),
    .ap_done(grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done),
    .ap_idle(grp_trVecAccum_Pipeline_loop_1_fu_81_ap_idle),
    .ap_ready(grp_trVecAccum_Pipeline_loop_1_fu_81_ap_ready),
    .s(s_reg_222),
    .i(trunc_ln12_1_reg_203),
    .ii(trunc_ln12_reg_198),
    .a_address0(grp_trVecAccum_Pipeline_loop_1_fu_81_a_address0),
    .a_ce0(grp_trVecAccum_Pipeline_loop_1_fu_81_a_ce0),
    .a_q0(a_q0),
    .s_1_out(grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out),
    .s_1_out_ap_vld(grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out_ap_vld)
);

trVecAccum_mac_muladd_9ns_9ns_3ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
mac_muladd_9ns_9ns_3ns_16_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_169_p0),
    .din1(grp_fu_169_p1),
    .din2(grp_fu_169_p2),
    .ce(grp_fu_169_ce),
    .dout(grp_fu_169_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg <= 1'b1;
        end else if ((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_ready == 1'b1)) begin
            grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_52 <= 9'd0;
    end else if (((icmp_ln12_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_52 <= add_ln12_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ii_fu_48 <= 17'd0;
    end else if (((icmp_ln12_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ii_fu_48 <= add_ln18_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        s_reg_222 <= s_fu_152_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln12_1_reg_203 <= trunc_ln12_1_fu_111_p1;
        trunc_ln12_reg_198 <= trunc_ln12_fu_107_p1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln12_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | ((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_169_ce = 1'b0;
    end else begin
        grp_fu_169_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_address0 = zext_ln17_1_fu_160_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        r_address0 = zext_ln12_fu_127_p1;
    end else begin
        r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2))) begin
        r_ce0 = 1'b1;
    end else begin
        r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_we0 = 1'b1;
    end else begin
        r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln12_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_trVecAccum_Pipeline_loop_1_fu_81_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = grp_trVecAccum_Pipeline_loop_1_fu_81_a_address0;

assign a_ce0 = grp_trVecAccum_Pipeline_loop_1_fu_81_a_ce0;

assign add_ln12_fu_121_p2 = (i_fu_52 + 9'd1);

assign add_ln18_fu_136_p2 = (ii_fu_48 + 17'd256);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign grp_fu_169_p0 = zext_ln17_fu_132_p1;

assign grp_fu_169_p1 = zext_ln17_fu_132_p1;

assign grp_fu_169_p2 = 16'd7;

assign grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start = grp_trVecAccum_Pipeline_loop_1_fu_81_ap_start_reg;

assign icmp_ln12_fu_115_p2 = ((i_fu_52 == 9'd256) ? 1'b1 : 1'b0);

assign r_d0 = grp_trVecAccum_Pipeline_loop_1_fu_81_s_1_out;

assign s_fu_152_p1 = r_q0;

assign trunc_ln12_1_fu_111_p1 = i_fu_52[7:0];

assign trunc_ln12_fu_107_p1 = ii_fu_48[15:0];

assign zext_ln12_fu_127_p1 = i_fu_52;

assign zext_ln17_1_fu_160_p1 = grp_fu_169_p3;

assign zext_ln17_fu_132_p1 = i_fu_52;

endmodule //trVecAccum
