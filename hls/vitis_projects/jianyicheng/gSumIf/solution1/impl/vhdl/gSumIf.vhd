-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gSumIf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of gSumIf is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gSumIf_gSumIf,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.689857,HLS_SYN_LAT=5072,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4279,HLS_SYN_LUT=3310,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FC0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FE6666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110011001100110011001100110011001100110011001100110";
    constant ap_const_lv64_3FCAE147AE147AE1 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111001010111000010100011110101110000101000111101011100001";
    constant ap_const_lv64_3FD51EB851EB851F : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010101000111101011100001010001111010111000010100011111";
    constant ap_const_lv64_3FE47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_4014000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010100000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal icmp_ln17_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln17_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_265_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal A_load_reg_279 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal B_load_reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln18_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal bitcast_ln18_1_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_102_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_299_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_3_reg_309_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_309_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_reg_314_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_314_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_i_reg_319 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add10_i_reg_324 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_reg_329 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul11_i_reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal add1_i_reg_339 : STD_LOGIC_VECTOR (63 downto 0);
    signal add12_i_reg_344 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul2_i_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul13_i_reg_354 : STD_LOGIC_VECTOR (63 downto 0);
    signal add3_i_reg_359 : STD_LOGIC_VECTOR (63 downto 0);
    signal add14_i_reg_364 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul4_i_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul15_i_reg_374 : STD_LOGIC_VECTOR (63 downto 0);
    signal add5_i_reg_379 : STD_LOGIC_VECTOR (63 downto 0);
    signal add16_i_reg_384 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul6_i_reg_389 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul17_i_reg_394 : STD_LOGIC_VECTOR (63 downto 0);
    signal add7_i_reg_399 : STD_LOGIC_VECTOR (63 downto 0);
    signal add18_i_reg_404 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln19_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_reg_409_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_reg_409_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_reg_409_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul8_i_reg_415 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul19_i_reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal add9_i_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln15_fu_221_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln15_reg_430 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_load_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_fu_236_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln17_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_fu_68 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_s_load : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_allocacmp_s_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_72 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln17_fu_157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_102_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_111_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln19_fu_182_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_185_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln19_fu_195_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln19_1_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_132_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter14_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to13 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_1to15 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_355 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gSumIf_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gSumIf_dmul_64ns_64ns_64_6_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gSumIf_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component gSumIf_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dadd_64ns_64ns_64_5_full_dsp_1_U1 : component gSumIf_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_102_p0,
        din1 => grp_fu_102_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_102_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U2 : component gSumIf_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_106_p0,
        din1 => grp_fu_106_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_106_p2);

    dadd_64ns_64ns_64_5_full_dsp_1_U3 : component gSumIf_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_111_p0,
        din1 => grp_fu_111_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_111_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U4 : component gSumIf_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        din1 => grp_fu_124_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    dmul_64ns_64ns_64_6_max_dsp_1_U5 : component gSumIf_dmul_64ns_64ns_64_6_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_128_p0,
        din1 => grp_fu_128_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_128_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U6 : component gSumIf_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => d_reg_299,
        din1 => grp_fu_132_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_132_opcode,
        dout => grp_fu_132_p2);

    flow_control_loop_pipe_U : component gSumIf_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_355)) then
                if ((icmp_ln17_fu_151_p2 = ap_const_lv1_0)) then 
                    i_fu_72 <= add_ln17_fu_157_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_72 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    s_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    s_fu_68 <= ap_const_lv64_0;
                elsif ((ap_enable_reg_pp0_iter15 = ap_const_logic_1)) then 
                    s_fu_68 <= s_2_reg_441;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                A_load_reg_279 <= A_q0;
                B_load_reg_284 <= B_q0;
                d_reg_299_pp0_iter10_reg <= d_reg_299_pp0_iter9_reg;
                d_reg_299_pp0_iter2_reg <= d_reg_299;
                d_reg_299_pp0_iter3_reg <= d_reg_299_pp0_iter2_reg;
                d_reg_299_pp0_iter4_reg <= d_reg_299_pp0_iter3_reg;
                d_reg_299_pp0_iter5_reg <= d_reg_299_pp0_iter4_reg;
                d_reg_299_pp0_iter6_reg <= d_reg_299_pp0_iter5_reg;
                d_reg_299_pp0_iter7_reg <= d_reg_299_pp0_iter6_reg;
                d_reg_299_pp0_iter8_reg <= d_reg_299_pp0_iter7_reg;
                d_reg_299_pp0_iter9_reg <= d_reg_299_pp0_iter8_reg;
                or_ln19_reg_409 <= or_ln19_fu_211_p2;
                or_ln19_reg_409_pp0_iter12_reg <= or_ln19_reg_409;
                or_ln19_reg_409_pp0_iter13_reg <= or_ln19_reg_409_pp0_iter12_reg;
                or_ln19_reg_409_pp0_iter14_reg <= or_ln19_reg_409_pp0_iter13_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add10_i_reg_324 <= grp_fu_111_p2;
                add_i_reg_319 <= grp_fu_106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add12_i_reg_344 <= grp_fu_106_p2;
                add1_i_reg_339 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add14_i_reg_364 <= grp_fu_106_p2;
                add3_i_reg_359 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add16_i_reg_384 <= grp_fu_106_p2;
                add5_i_reg_379 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add18_i_reg_404 <= grp_fu_106_p2;
                add7_i_reg_399 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add9_i_reg_425 <= grp_fu_111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                d_reg_299 <= grp_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln17_reg_265 <= icmp_ln17_fu_151_p2;
                icmp_ln17_reg_265_pp0_iter10_reg <= icmp_ln17_reg_265_pp0_iter9_reg;
                icmp_ln17_reg_265_pp0_iter11_reg <= icmp_ln17_reg_265_pp0_iter10_reg;
                icmp_ln17_reg_265_pp0_iter12_reg <= icmp_ln17_reg_265_pp0_iter11_reg;
                icmp_ln17_reg_265_pp0_iter13_reg <= icmp_ln17_reg_265_pp0_iter12_reg;
                icmp_ln17_reg_265_pp0_iter1_reg <= icmp_ln17_reg_265;
                icmp_ln17_reg_265_pp0_iter2_reg <= icmp_ln17_reg_265_pp0_iter1_reg;
                icmp_ln17_reg_265_pp0_iter3_reg <= icmp_ln17_reg_265_pp0_iter2_reg;
                icmp_ln17_reg_265_pp0_iter4_reg <= icmp_ln17_reg_265_pp0_iter3_reg;
                icmp_ln17_reg_265_pp0_iter5_reg <= icmp_ln17_reg_265_pp0_iter4_reg;
                icmp_ln17_reg_265_pp0_iter6_reg <= icmp_ln17_reg_265_pp0_iter5_reg;
                icmp_ln17_reg_265_pp0_iter7_reg <= icmp_ln17_reg_265_pp0_iter6_reg;
                icmp_ln17_reg_265_pp0_iter8_reg <= icmp_ln17_reg_265_pp0_iter7_reg;
                icmp_ln17_reg_265_pp0_iter9_reg <= icmp_ln17_reg_265_pp0_iter8_reg;
                s_load_reg_435 <= ap_sig_allocacmp_s_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul11_i_reg_334 <= grp_fu_128_p2;
                mul_i_reg_329 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul13_i_reg_354 <= grp_fu_128_p2;
                mul2_i_reg_349 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul15_i_reg_374 <= grp_fu_128_p2;
                mul4_i_reg_369 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul17_i_reg_394 <= grp_fu_128_p2;
                mul6_i_reg_389 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul19_i_reg_420 <= grp_fu_128_p2;
                mul8_i_reg_415 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                s_2_reg_441 <= s_2_fu_236_p3;
                tmp_1_reg_314_pp0_iter10_reg <= tmp_1_reg_314_pp0_iter9_reg;
                tmp_1_reg_314_pp0_iter11_reg <= tmp_1_reg_314_pp0_iter10_reg;
                tmp_1_reg_314_pp0_iter12_reg <= tmp_1_reg_314_pp0_iter11_reg;
                tmp_1_reg_314_pp0_iter13_reg <= tmp_1_reg_314_pp0_iter12_reg;
                tmp_1_reg_314_pp0_iter2_reg <= tmp_1_reg_314;
                tmp_1_reg_314_pp0_iter3_reg <= tmp_1_reg_314_pp0_iter2_reg;
                tmp_1_reg_314_pp0_iter4_reg <= tmp_1_reg_314_pp0_iter3_reg;
                tmp_1_reg_314_pp0_iter5_reg <= tmp_1_reg_314_pp0_iter4_reg;
                tmp_1_reg_314_pp0_iter6_reg <= tmp_1_reg_314_pp0_iter5_reg;
                tmp_1_reg_314_pp0_iter7_reg <= tmp_1_reg_314_pp0_iter6_reg;
                tmp_1_reg_314_pp0_iter8_reg <= tmp_1_reg_314_pp0_iter7_reg;
                tmp_1_reg_314_pp0_iter9_reg <= tmp_1_reg_314_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                select_ln15_reg_430 <= select_ln15_fu_221_p3;
                tmp_3_reg_309_pp0_iter10_reg <= tmp_3_reg_309_pp0_iter9_reg;
                tmp_3_reg_309_pp0_iter11_reg <= tmp_3_reg_309_pp0_iter10_reg;
                tmp_3_reg_309_pp0_iter12_reg <= tmp_3_reg_309_pp0_iter11_reg;
                tmp_3_reg_309_pp0_iter2_reg <= tmp_3_reg_309;
                tmp_3_reg_309_pp0_iter3_reg <= tmp_3_reg_309_pp0_iter2_reg;
                tmp_3_reg_309_pp0_iter4_reg <= tmp_3_reg_309_pp0_iter3_reg;
                tmp_3_reg_309_pp0_iter5_reg <= tmp_3_reg_309_pp0_iter4_reg;
                tmp_3_reg_309_pp0_iter6_reg <= tmp_3_reg_309_pp0_iter5_reg;
                tmp_3_reg_309_pp0_iter7_reg <= tmp_3_reg_309_pp0_iter6_reg;
                tmp_3_reg_309_pp0_iter8_reg <= tmp_3_reg_309_pp0_iter7_reg;
                tmp_3_reg_309_pp0_iter9_reg <= tmp_3_reg_309_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_1_reg_314 <= grp_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_3_reg_309 <= grp_fu_132_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter14_stage0, ap_idle_pp0_0to13, ap_idle_pp0_1to15, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to13 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter14_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to15 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    A_address0 <= zext_ln17_fu_163_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln17_fu_163_p1(10 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_fu_157_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv10_1));
    and_ln15_fu_217_p2 <= (tmp_3_reg_309_pp0_iter12_reg and or_ln19_reg_409_pp0_iter13_reg);
    and_ln19_fu_232_p2 <= (tmp_1_reg_314_pp0_iter13_reg and or_ln19_reg_409_pp0_iter14_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_355_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_355 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, icmp_ln17_reg_265)
    begin
        if (((icmp_ln17_reg_265 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter14_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter14, icmp_ln17_reg_265_pp0_iter13_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln17_reg_265_pp0_iter13_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter14_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter14_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter14_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to13_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to13 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to15_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to15 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to15 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_sig_allocacmp_s_load_1;

    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_s_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter15, s_2_reg_441, ap_block_pp0_stage0, s_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_s_load <= s_2_reg_441;
        else 
            ap_sig_allocacmp_s_load <= s_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_s_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter15, s_2_reg_441, ap_block_pp0_stage0, s_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_s_load_1 <= s_2_reg_441;
        else 
            ap_sig_allocacmp_s_load_1 <= s_fu_68;
        end if; 
    end process;

    bitcast_ln18_1_fu_178_p1 <= B_load_reg_284;
    bitcast_ln18_fu_174_p1 <= A_load_reg_279;
    bitcast_ln19_fu_182_p1 <= d_reg_299_pp0_iter10_reg;

    grp_fu_102_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, bitcast_ln18_fu_174_p1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, mul_i_reg_329, mul2_i_reg_349, mul4_i_reg_369, mul6_i_reg_389, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_102_p0 <= mul6_i_reg_389;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_102_p0 <= mul4_i_reg_369;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_102_p0 <= mul2_i_reg_349;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_102_p0 <= mul_i_reg_329;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_102_p0 <= bitcast_ln18_fu_174_p1;
        else 
            grp_fu_102_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_102_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, bitcast_ln18_1_fu_178_p1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_102_p1 <= ap_const_lv64_3FD0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_102_p1 <= ap_const_lv64_3FC0000000000000;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_102_p1 <= ap_const_lv64_3FE0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_102_p1 <= bitcast_ln18_1_fu_178_p1;
        else 
            grp_fu_102_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_106_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, d_reg_299, ap_CS_fsm_pp0_stage3, mul11_i_reg_334, mul13_i_reg_354, mul15_i_reg_374, mul17_i_reg_394, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_106_p0 <= mul17_i_reg_394;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_106_p0 <= mul15_i_reg_374;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_106_p0 <= mul13_i_reg_354;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_106_p0 <= mul11_i_reg_334;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_106_p0 <= d_reg_299;
        else 
            grp_fu_106_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_106_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_106_p1 <= ap_const_lv64_3FD51EB851EB851F;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_106_p1 <= ap_const_lv64_3FCAE147AE147AE1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_106_p1 <= ap_const_lv64_3FE6666666666666;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_106_p1 <= ap_const_lv64_3FD0000000000000;
        else 
            grp_fu_106_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_111_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, d_reg_299, ap_CS_fsm_pp0_stage3, mul8_i_reg_415, mul19_i_reg_420, ap_block_pp0_stage0, ap_sig_allocacmp_s_load, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_111_p0 <= ap_sig_allocacmp_s_load;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_111_p0 <= mul19_i_reg_420;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_111_p0 <= mul8_i_reg_415;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_111_p0 <= d_reg_299;
        else 
            grp_fu_111_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_111_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter14, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, select_ln15_reg_430, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_111_p1 <= select_ln15_reg_430;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_111_p1 <= ap_const_lv64_3FC0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_111_p1 <= ap_const_lv64_3FD0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_111_p1 <= ap_const_lv64_3FE47AE147AE147B;
        else 
            grp_fu_111_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add_i_reg_319, add1_i_reg_339, add3_i_reg_359, add5_i_reg_379, add7_i_reg_399, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_124_p0 <= add7_i_reg_399;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_124_p0 <= add5_i_reg_379;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_124_p0 <= add3_i_reg_359;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_124_p0 <= add1_i_reg_339;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_124_p0 <= add_i_reg_319;
        else 
            grp_fu_124_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_124_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, d_reg_299_pp0_iter2_reg, d_reg_299_pp0_iter4_reg, d_reg_299_pp0_iter6_reg, d_reg_299_pp0_iter8_reg, d_reg_299_pp0_iter10_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_124_p1 <= d_reg_299_pp0_iter10_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_124_p1 <= d_reg_299_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_124_p1 <= d_reg_299_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_124_p1 <= d_reg_299_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_124_p1 <= d_reg_299_pp0_iter2_reg;
        else 
            grp_fu_124_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, add10_i_reg_324, add12_i_reg_344, add14_i_reg_364, add16_i_reg_384, add18_i_reg_404, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_128_p0 <= add18_i_reg_404;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_128_p0 <= add16_i_reg_384;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_128_p0 <= add14_i_reg_364;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_128_p0 <= add12_i_reg_344;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_128_p0 <= add10_i_reg_324;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_128_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, d_reg_299_pp0_iter2_reg, d_reg_299_pp0_iter4_reg, d_reg_299_pp0_iter6_reg, d_reg_299_pp0_iter8_reg, d_reg_299_pp0_iter10_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_128_p1 <= d_reg_299_pp0_iter10_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_128_p1 <= d_reg_299_pp0_iter8_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_128_p1 <= d_reg_299_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_128_p1 <= d_reg_299_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_128_p1 <= d_reg_299_pp0_iter2_reg;
        else 
            grp_fu_128_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_132_opcode_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_00001, ap_block_pp0_stage3_00001)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_132_opcode <= ap_const_lv5_3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_132_opcode <= ap_const_lv5_2;
            else 
                grp_fu_132_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_132_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_132_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_132_p1 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_132_p1 <= ap_const_lv64_4014000000000000;
            else 
                grp_fu_132_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_132_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln17_fu_151_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv10_3E8) else "0";
    icmp_ln19_1_fu_205_p2 <= "1" when (trunc_ln19_fu_195_p1 = ap_const_lv52_0) else "0";
    icmp_ln19_fu_199_p2 <= "0" when (tmp_fu_185_p4 = ap_const_lv11_7FF) else "1";
    or_ln19_fu_211_p2 <= (icmp_ln19_fu_199_p2 or icmp_ln19_1_fu_205_p2);
    s_2_fu_236_p3 <= 
        grp_fu_111_p2 when (and_ln19_fu_232_p2(0) = '1') else 
        s_load_reg_435;
    select_ln15_fu_221_p3 <= 
        add9_i_reg_425 when (and_ln15_fu_217_p2(0) = '1') else 
        grp_fu_111_p2;
    tmp_fu_185_p4 <= bitcast_ln19_fu_182_p1(62 downto 52);
    trunc_ln19_fu_195_p1 <= bitcast_ln19_fu_182_p1(52 - 1 downto 0);
    zext_ln17_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
