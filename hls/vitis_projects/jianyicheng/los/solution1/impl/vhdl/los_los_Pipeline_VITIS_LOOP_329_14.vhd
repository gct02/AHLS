-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity los_los_Pipeline_VITIS_LOOP_329_14 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln316 : IN STD_LOGIC_VECTOR (5 downto 0);
    zext_ln305_3 : IN STD_LOGIC_VECTOR (3 downto 0);
    sext_ln327 : IN STD_LOGIC_VECTOR (6 downto 0);
    sext_ln305 : IN STD_LOGIC_VECTOR (5 downto 0);
    zext_ln305_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    select_ln311 : IN STD_LOGIC_VECTOR (1 downto 0);
    sext_ln310 : IN STD_LOGIC_VECTOR (6 downto 0);
    obstacles_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    obstacles_6_ce0 : OUT STD_LOGIC;
    obstacles_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sight_6_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sight_6_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of los_los_Pipeline_VITIS_LOOP_329_14 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal or_ln332_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sext_ln310_cast_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln310_cast_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal select_ln311_cast_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln311_cast_reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln305_1_cast_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln305_1_cast_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln305_cast_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln305_cast_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_9_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_10_reg_403 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln330_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln330_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal err_fu_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal err_20_fu_325_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln327_cast_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y0_fu_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y0_11_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln305_3_cast_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_y0_9 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_fu_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x0_12_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln316_cast_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x0_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal sight_6_fu_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln330_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln330_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_1_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln330_fu_208_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln6_fu_212_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln327_fu_220_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln330_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln330_2_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln332_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e2_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln335_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_11_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_17_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_18_fu_295_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln340_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y0_10_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_19_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component los_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component los_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    err_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                err_fu_54 <= sext_ln327_cast_fu_152_p1;
            elsif (((or_ln332_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                err_fu_54 <= err_20_fu_325_p3;
            end if; 
        end if;
    end process;

    sight_6_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sight_6_fu_66 <= ap_const_lv32_1;
            elsif (((ap_const_lv1_0 = and_ln330_reg_409) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sight_6_fu_66 <= select_ln330_fu_241_p3;
            end if; 
        end if;
    end process;

    x0_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x0_fu_62 <= zext_ln316_cast_fu_160_p1;
            elsif (((or_ln332_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                x0_fu_62 <= x0_12_fu_288_p3;
            end if; 
        end if;
    end process;

    y0_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y0_fu_58 <= zext_ln305_3_cast_fu_156_p1;
            elsif (((or_ln332_fu_260_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                y0_fu_58 <= y0_11_fu_318_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                and_ln330_reg_409 <= and_ln330_fu_202_p2;
                select_ln311_cast_reg_382 <= select_ln311_cast_fu_140_p1;
                sext_ln305_cast_reg_392 <= sext_ln305_cast_fu_148_p1;
                sext_ln310_cast_reg_376 <= sext_ln310_cast_fu_136_p1;
                x0_10_reg_403 <= ap_sig_allocacmp_x0_10;
                y0_9_reg_397 <= ap_sig_allocacmp_y0_9;
                    zext_ln305_1_cast_reg_387(5 downto 0) <= zext_ln305_1_cast_fu_144_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln305_1_cast_reg_387(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln330_fu_224_p2 <= std_logic_vector(unsigned(shl_ln6_fu_212_p3) + unsigned(trunc_ln327_fu_220_p1));
    and_ln330_fu_202_p2 <= (icmp_ln330_fu_190_p2 and icmp_ln330_1_fu_196_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_CS_fsm_state3, or_ln332_fu_260_p2)
    begin
        if (((or_ln332_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state3, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x0_10_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, x0_fu_62, zext_ln316_cast_fu_160_p1)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_x0_10 <= zext_ln316_cast_fu_160_p1;
        else 
            ap_sig_allocacmp_x0_10 <= x0_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_y0_9_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, y0_fu_58, zext_ln305_3_cast_fu_156_p1)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_y0_9 <= zext_ln305_3_cast_fu_156_p1;
        else 
            ap_sig_allocacmp_y0_9 <= y0_fu_58;
        end if; 
    end process;

    e2_fu_268_p2 <= std_logic_vector(shift_left(unsigned(err_fu_54),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    err_17_fu_279_p2 <= std_logic_vector(unsigned(err_fu_54) - unsigned(zext_ln305_1_cast_reg_387));
    err_18_fu_295_p3 <= 
        err_17_fu_279_p2 when (icmp_ln335_fu_274_p2(0) = '1') else 
        err_fu_54;
    err_19_fu_308_p2 <= std_logic_vector(unsigned(err_18_fu_295_p3) + unsigned(sext_ln310_cast_reg_376));
    err_20_fu_325_p3 <= 
        err_19_fu_308_p2 when (icmp_ln340_fu_303_p2(0) = '1') else 
        err_18_fu_295_p3;
    icmp_ln330_1_fu_196_p2 <= "1" when (ap_sig_allocacmp_y0_9 = ap_const_lv32_20) else "0";
    icmp_ln330_2_fu_235_p2 <= "1" when (obstacles_6_q0 = ap_const_lv32_1) else "0";
    icmp_ln330_fu_190_p2 <= "1" when (ap_sig_allocacmp_x0_10 = ap_const_lv32_20) else "0";
    icmp_ln332_fu_254_p2 <= "1" when (sight_6_fu_66 = ap_const_lv32_0) else "0";
    icmp_ln335_fu_274_p2 <= "1" when (signed(e2_fu_268_p2) > signed(sext_ln305_cast_reg_392)) else "0";
    icmp_ln340_fu_303_p2 <= "1" when (signed(e2_fu_268_p2) < signed(sext_ln310_cast_reg_376)) else "0";
    obstacles_6_address0 <= zext_ln330_fu_230_p1(10 - 1 downto 0);

    obstacles_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            obstacles_6_ce0 <= ap_const_logic_1;
        else 
            obstacles_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln332_fu_260_p2 <= (icmp_ln332_fu_254_p2 or and_ln330_reg_409);
        select_ln311_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln311),32));

    select_ln330_fu_241_p3 <= 
        ap_const_lv32_0 when (icmp_ln330_2_fu_235_p2(0) = '1') else 
        sight_6_fu_66;
        sext_ln305_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln305),32));

        sext_ln310_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln310),32));

        sext_ln327_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln327),32));

    shl_ln6_fu_212_p3 <= (trunc_ln330_fu_208_p1 & ap_const_lv6_0);
    sight_6_1_out <= sight_6_fu_66;

    sight_6_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state3, or_ln332_fu_260_p2)
    begin
        if (((or_ln332_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sight_6_1_out_ap_vld <= ap_const_logic_1;
        else 
            sight_6_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln327_fu_220_p1 <= ap_sig_allocacmp_x0_10(10 - 1 downto 0);
    trunc_ln330_fu_208_p1 <= ap_sig_allocacmp_y0_9(4 - 1 downto 0);
    x0_11_fu_284_p2 <= std_logic_vector(unsigned(x0_10_reg_403) + unsigned(select_ln311_cast_reg_382));
    x0_12_fu_288_p3 <= 
        x0_11_fu_284_p2 when (icmp_ln335_fu_274_p2(0) = '1') else 
        x0_10_reg_403;
    y0_10_fu_313_p2 <= std_logic_vector(unsigned(y0_9_reg_397) + unsigned(ap_const_lv32_1));
    y0_11_fu_318_p3 <= 
        y0_10_fu_313_p2 when (icmp_ln340_fu_303_p2(0) = '1') else 
        y0_9_reg_397;
    zext_ln305_1_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln305_1),32));
    zext_ln305_3_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln305_3),32));
    zext_ln316_cast_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln316),32));
    zext_ln330_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln330_fu_224_p2),64));
end behav;
