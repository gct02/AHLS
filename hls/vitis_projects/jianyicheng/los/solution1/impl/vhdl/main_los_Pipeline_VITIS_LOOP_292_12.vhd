-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_los_Pipeline_VITIS_LOOP_292_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln268_3 : IN STD_LOGIC_VECTOR (3 downto 0);
    zext_ln279 : IN STD_LOGIC_VECTOR (5 downto 0);
    sext_ln290 : IN STD_LOGIC_VECTOR (6 downto 0);
    sext_ln268 : IN STD_LOGIC_VECTOR (5 downto 0);
    zext_ln268_1 : IN STD_LOGIC_VECTOR (5 downto 0);
    select_ln273 : IN STD_LOGIC_VECTOR (1 downto 0);
    sext_ln274_1 : IN STD_LOGIC_VECTOR (6 downto 0);
    obstacles_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    obstacles_5_ce0 : OUT STD_LOGIC;
    obstacles_5_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    sight_5_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    sight_5_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of main_los_Pipeline_VITIS_LOOP_292_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal or_ln295_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage4 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln274_1_cast_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln274_1_cast_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln273_cast_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln273_cast_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln268_1_cast_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln268_1_cast_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln268_cast_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln268_cast_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_10_reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_10_reg_385 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln293_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln293_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln293_fu_220_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln293_reg_396 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal obstacles_5_load_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal x0_12_fu_276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal x0_12_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal err_15_fu_283_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_15_reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln303_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln303_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal y0_12_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_12_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_16_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_16_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln293_fu_226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal err_fu_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal err_17_fu_320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln290_cast_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal x0_fu_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal zext_ln279_cast_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_x0_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal y0_fu_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal zext_ln268_3_cast_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_y0_10 : STD_LOGIC_VECTOR (31 downto 0);
    signal sight_5_fu_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln293_fu_230_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal icmp_ln293_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln293_fu_204_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln5_fu_208_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln290_fu_216_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln295_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal e2_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln298_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_11_fu_272_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal err_14_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y0_11_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage4,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage4) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    err_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                err_fu_50 <= sext_ln290_cast_fu_148_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                err_fu_50 <= err_17_fu_320_p3;
            end if; 
        end if;
    end process;

    sight_5_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                sight_5_fu_62 <= ap_const_lv32_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_lv1_0 = and_ln293_reg_391))) then 
                sight_5_fu_62 <= select_ln293_fu_230_p3;
            end if; 
        end if;
    end process;

    x0_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x0_fu_54 <= zext_ln279_cast_fu_152_p1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    x0_fu_54 <= x0_12_reg_414;
                end if;
            end if; 
        end if;
    end process;

    y0_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y0_fu_58 <= zext_ln268_3_cast_fu_156_p1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    y0_fu_58 <= y0_12_reg_430;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln293_reg_396 <= add_ln293_fu_220_p2;
                and_ln293_reg_391 <= and_ln293_fu_198_p2;
                err_16_reg_435 <= err_16_fu_308_p2;
                select_ln273_cast_reg_364 <= select_ln273_cast_fu_136_p1;
                sext_ln268_cast_reg_374 <= sext_ln268_cast_fu_144_p1;
                sext_ln274_1_cast_reg_358 <= sext_ln274_1_cast_fu_132_p1;
                x0_10_reg_379 <= ap_sig_allocacmp_x0_10;
                y0_10_reg_385 <= ap_sig_allocacmp_y0_10;
                    zext_ln268_1_cast_reg_369(5 downto 0) <= zext_ln268_1_cast_fu_140_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                err_15_reg_419 <= err_15_fu_283_p3;
                icmp_ln303_reg_425 <= icmp_ln303_fu_291_p2;
                x0_12_reg_414 <= x0_12_fu_276_p3;
                y0_12_reg_430 <= y0_12_fu_301_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                obstacles_5_load_reg_406 <= obstacles_5_q0;
            end if;
        end if;
    end process;
    zext_ln268_1_cast_reg_369(31 downto 6) <= "00000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln293_fu_220_p2 <= std_logic_vector(unsigned(shl_ln5_fu_208_p3) + unsigned(trunc_ln290_fu_216_p1));
    and_ln293_fu_198_p2 <= (icmp_ln293_fu_186_p2 and icmp_ln293_1_fu_192_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, or_ln295_fu_248_p2)
    begin
        if (((or_ln295_fu_248_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage4;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x0_10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, x0_12_reg_414, ap_loop_init, x0_fu_54, zext_ln279_cast_fu_152_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_x0_10 <= zext_ln279_cast_fu_152_p1;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_x0_10 <= x0_12_reg_414;
            else 
                ap_sig_allocacmp_x0_10 <= x0_fu_54;
            end if;
        else 
            ap_sig_allocacmp_x0_10 <= x0_fu_54;
        end if; 
    end process;


    ap_sig_allocacmp_y0_10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, y0_12_reg_430, ap_loop_init, ap_block_pp0_stage0, y0_fu_58, zext_ln268_3_cast_fu_156_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_y0_10 <= zext_ln268_3_cast_fu_156_p1;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_y0_10 <= y0_12_reg_430;
            else 
                ap_sig_allocacmp_y0_10 <= y0_fu_58;
            end if;
        else 
            ap_sig_allocacmp_y0_10 <= y0_fu_58;
        end if; 
    end process;

    e2_fu_256_p2 <= std_logic_vector(shift_left(unsigned(err_fu_50),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    err_14_fu_267_p2 <= std_logic_vector(unsigned(err_fu_50) - unsigned(zext_ln268_1_cast_reg_369));
    err_15_fu_283_p3 <= 
        err_14_fu_267_p2 when (icmp_ln298_fu_262_p2(0) = '1') else 
        err_fu_50;
    err_16_fu_308_p2 <= std_logic_vector(unsigned(err_15_reg_419) + unsigned(sext_ln274_1_cast_reg_358));
    err_17_fu_320_p3 <= 
        err_16_reg_435 when (icmp_ln303_reg_425(0) = '1') else 
        err_15_reg_419;
    icmp_ln293_1_fu_192_p2 <= "1" when (ap_sig_allocacmp_y0_10 = ap_const_lv32_20) else "0";
    icmp_ln293_fu_186_p2 <= "1" when (ap_sig_allocacmp_x0_10 = ap_const_lv32_20) else "0";
    icmp_ln295_fu_242_p2 <= "1" when (sight_5_fu_62 = ap_const_lv32_0) else "0";
    icmp_ln298_fu_262_p2 <= "1" when (signed(e2_fu_256_p2) > signed(sext_ln268_cast_reg_374)) else "0";
    icmp_ln303_fu_291_p2 <= "1" when (signed(e2_fu_256_p2) < signed(sext_ln274_1_cast_reg_358)) else "0";
    obstacles_5_address0 <= zext_ln293_fu_226_p1(10 - 1 downto 0);

    obstacles_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            obstacles_5_ce0 <= ap_const_logic_1;
        else 
            obstacles_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln295_fu_248_p2 <= (icmp_ln295_fu_242_p2 or and_ln293_reg_391);
        select_ln273_cast_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln273),32));

    select_ln293_fu_230_p3 <= 
        ap_const_lv32_0 when (obstacles_5_load_reg_406(0) = '1') else 
        sight_5_fu_62;
        sext_ln268_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln268),32));

        sext_ln274_1_cast_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln274_1),32));

        sext_ln290_cast_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln290),32));

    shl_ln5_fu_208_p3 <= (trunc_ln293_fu_204_p1 & ap_const_lv6_0);
    sight_5_1_out <= sight_5_fu_62;

    sight_5_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage4, or_ln295_fu_248_p2, ap_block_pp0_stage4_11001)
    begin
        if (((or_ln295_fu_248_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            sight_5_1_out_ap_vld <= ap_const_logic_1;
        else 
            sight_5_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln290_fu_216_p1 <= ap_sig_allocacmp_x0_10(10 - 1 downto 0);
    trunc_ln293_fu_204_p1 <= ap_sig_allocacmp_y0_10(4 - 1 downto 0);
    x0_11_fu_272_p2 <= std_logic_vector(unsigned(x0_10_reg_379) + unsigned(select_ln273_cast_reg_364));
    x0_12_fu_276_p3 <= 
        x0_11_fu_272_p2 when (icmp_ln298_fu_262_p2(0) = '1') else 
        x0_10_reg_379;
    y0_11_fu_296_p2 <= std_logic_vector(unsigned(y0_10_reg_385) + unsigned(ap_const_lv32_1));
    y0_12_fu_301_p3 <= 
        y0_11_fu_296_p2 when (icmp_ln303_fu_291_p2(0) = '1') else 
        y0_10_reg_385;
    zext_ln268_1_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln268_1),32));
    zext_ln268_3_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln268_3),32));
    zext_ln279_cast_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln279),32));
    zext_ln293_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln293_reg_396),64));
end behav;
