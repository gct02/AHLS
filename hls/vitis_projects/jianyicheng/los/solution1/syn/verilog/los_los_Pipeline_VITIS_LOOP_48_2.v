// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module los_los_Pipeline_VITIS_LOOP_48_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln46,
        zext_ln24_3,
        zext_ln35,
        sext_ln24,
        zext_ln24_1,
        select_ln29,
        sext_ln30_1,
        obstacles_0_address0,
        obstacles_0_ce0,
        obstacles_0_q0,
        sight_0_1_out,
        sight_0_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] sext_ln46;
input  [3:0] zext_ln24_3;
input  [5:0] zext_ln35;
input  [5:0] sext_ln24;
input  [5:0] zext_ln24_1;
input  [1:0] select_ln29;
input  [6:0] sext_ln30_1;
output  [9:0] obstacles_0_address0;
output   obstacles_0_ce0;
input  [31:0] obstacles_0_q0;
output  [31:0] sight_0_1_out;
output   sight_0_1_out_ap_vld;

reg ap_idle;
reg obstacles_0_ce0;
reg sight_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state3;
wire   [0:0] or_ln51_fu_263_p2;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [31:0] sext_ln30_1_cast_fu_136_p1;
reg  signed [31:0] sext_ln30_1_cast_reg_373;
reg    ap_block_state1_pp0_stage0_iter0;
wire  signed [31:0] select_ln29_cast_fu_140_p1;
reg  signed [31:0] select_ln29_cast_reg_379;
wire   [31:0] zext_ln24_1_cast_fu_144_p1;
reg   [31:0] zext_ln24_1_cast_reg_384;
wire  signed [31:0] sext_ln24_cast_fu_148_p1;
reg  signed [31:0] sext_ln24_cast_reg_389;
reg   [31:0] x0_4_reg_394;
reg   [31:0] y0_reg_400;
reg   [31:0] err_reg_406;
wire   [0:0] and_ln49_fu_205_p2;
reg   [0:0] and_ln49_reg_413;
wire   [63:0] zext_ln49_fu_233_p1;
reg   [31:0] x0_fu_54;
wire   [31:0] x0_6_fu_293_p3;
wire   [31:0] zext_ln35_cast_fu_152_p1;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_x0_4;
reg   [31:0] y0_1_fu_58;
wire   [31:0] y0_5_fu_323_p3;
wire   [31:0] zext_ln24_3_cast_fu_156_p1;
reg   [31:0] ap_sig_allocacmp_y0;
reg   [31:0] err_1_fu_62;
wire   [31:0] err_12_fu_315_p3;
wire  signed [31:0] sext_ln46_cast_fu_160_p1;
reg   [31:0] ap_sig_allocacmp_err;
reg   [31:0] sight_0_fu_66;
wire   [31:0] select_ln49_fu_244_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln49_fu_193_p2;
wire   [0:0] icmp_ln49_1_fu_199_p2;
wire   [3:0] trunc_ln49_fu_211_p1;
wire   [9:0] shl_ln_fu_215_p3;
wire   [9:0] trunc_ln26_fu_223_p1;
wire   [9:0] add_ln49_fu_227_p2;
wire   [0:0] icmp_ln49_2_fu_238_p2;
wire   [0:0] icmp_ln51_fu_257_p2;
wire   [31:0] e2_fu_268_p2;
wire   [0:0] icmp_ln54_fu_273_p2;
wire   [31:0] err_9_fu_278_p2;
wire   [31:0] x0_5_fu_282_p2;
wire   [31:0] err_10_fu_286_p3;
wire   [0:0] icmp_ln58_fu_300_p2;
wire   [31:0] err_11_fu_305_p2;
wire   [31:0] y0_4_fu_310_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 x0_fu_54 = 32'd0;
#0 y0_1_fu_58 = 32'd0;
#0 err_1_fu_62 = 32'd0;
#0 sight_0_fu_66 = 32'd0;
#0 ap_done_reg = 1'b0;
end

los_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        err_1_fu_62 <= sext_ln46_cast_fu_160_p1;
    end else if (((or_ln51_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        err_1_fu_62 <= err_12_fu_315_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        sight_0_fu_66 <= 32'd1;
    end else if (((1'd0 == and_ln49_reg_413) & (1'b1 == ap_CS_fsm_state2))) begin
        sight_0_fu_66 <= select_ln49_fu_244_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        x0_fu_54 <= zext_ln35_cast_fu_152_p1;
    end else if (((or_ln51_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x0_fu_54 <= x0_6_fu_293_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        y0_1_fu_58 <= zext_ln24_3_cast_fu_156_p1;
    end else if (((or_ln51_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y0_1_fu_58 <= y0_5_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln49_reg_413 <= and_ln49_fu_205_p2;
        err_reg_406 <= ap_sig_allocacmp_err;
        select_ln29_cast_reg_379 <= select_ln29_cast_fu_140_p1;
        sext_ln24_cast_reg_389 <= sext_ln24_cast_fu_148_p1;
        sext_ln30_1_cast_reg_373 <= sext_ln30_1_cast_fu_136_p1;
        x0_4_reg_394 <= ap_sig_allocacmp_x0_4;
        y0_reg_400 <= ap_sig_allocacmp_y0;
        zext_ln24_1_cast_reg_384[5 : 0] <= zext_ln24_1_cast_fu_144_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((or_ln51_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_err = sext_ln46_cast_fu_160_p1;
    end else begin
        ap_sig_allocacmp_err = err_1_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_x0_4 = zext_ln35_cast_fu_152_p1;
    end else begin
        ap_sig_allocacmp_x0_4 = x0_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_y0 = zext_ln24_3_cast_fu_156_p1;
    end else begin
        ap_sig_allocacmp_y0 = y0_1_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        obstacles_0_ce0 = 1'b1;
    end else begin
        obstacles_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln51_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sight_0_1_out_ap_vld = 1'b1;
    end else begin
        sight_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_227_p2 = (shl_ln_fu_215_p3 + trunc_ln26_fu_223_p1);

assign and_ln49_fu_205_p2 = (icmp_ln49_fu_193_p2 & icmp_ln49_1_fu_199_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign e2_fu_268_p2 = err_reg_406 << 32'd1;

assign err_10_fu_286_p3 = ((icmp_ln54_fu_273_p2[0:0] == 1'b1) ? err_9_fu_278_p2 : err_reg_406);

assign err_11_fu_305_p2 = ($signed(err_10_fu_286_p3) + $signed(sext_ln30_1_cast_reg_373));

assign err_12_fu_315_p3 = ((icmp_ln58_fu_300_p2[0:0] == 1'b1) ? err_11_fu_305_p2 : err_10_fu_286_p3);

assign err_9_fu_278_p2 = (err_reg_406 - zext_ln24_1_cast_reg_384);

assign icmp_ln49_1_fu_199_p2 = ((ap_sig_allocacmp_y0 == 32'd32) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_238_p2 = ((obstacles_0_q0 == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_193_p2 = ((ap_sig_allocacmp_x0_4 == 32'd32) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_257_p2 = ((sight_0_fu_66 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_273_p2 = (($signed(e2_fu_268_p2) > $signed(sext_ln24_cast_reg_389)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_300_p2 = (($signed(e2_fu_268_p2) < $signed(sext_ln30_1_cast_reg_373)) ? 1'b1 : 1'b0);

assign obstacles_0_address0 = zext_ln49_fu_233_p1;

assign or_ln51_fu_263_p2 = (icmp_ln51_fu_257_p2 | and_ln49_reg_413);

assign select_ln29_cast_fu_140_p1 = $signed(select_ln29);

assign select_ln49_fu_244_p3 = ((icmp_ln49_2_fu_238_p2[0:0] == 1'b1) ? 32'd0 : sight_0_fu_66);

assign sext_ln24_cast_fu_148_p1 = $signed(sext_ln24);

assign sext_ln30_1_cast_fu_136_p1 = $signed(sext_ln30_1);

assign sext_ln46_cast_fu_160_p1 = $signed(sext_ln46);

assign shl_ln_fu_215_p3 = {{trunc_ln49_fu_211_p1}, {6'd0}};

assign sight_0_1_out = sight_0_fu_66;

assign trunc_ln26_fu_223_p1 = ap_sig_allocacmp_x0_4[9:0];

assign trunc_ln49_fu_211_p1 = ap_sig_allocacmp_y0[3:0];

assign x0_5_fu_282_p2 = ($signed(x0_4_reg_394) + $signed(select_ln29_cast_reg_379));

assign x0_6_fu_293_p3 = ((icmp_ln54_fu_273_p2[0:0] == 1'b1) ? x0_5_fu_282_p2 : x0_4_reg_394);

assign y0_4_fu_310_p2 = (y0_reg_400 + 32'd1);

assign y0_5_fu_323_p3 = ((icmp_ln58_fu_300_p2[0:0] == 1'b1) ? y0_4_fu_310_p2 : y0_reg_400);

assign zext_ln24_1_cast_fu_144_p1 = zext_ln24_1;

assign zext_ln24_3_cast_fu_156_p1 = zext_ln24_3;

assign zext_ln35_cast_fu_152_p1 = zext_ln35;

assign zext_ln49_fu_233_p1 = add_ln49_fu_227_p2;

always @ (posedge ap_clk) begin
    zext_ln24_1_cast_reg_384[31:6] <= 26'b00000000000000000000000000;
end

endmodule //los_los_Pipeline_VITIS_LOOP_48_2
