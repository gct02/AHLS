// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_los_Pipeline_VITIS_LOOP_339_14 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln326,
        zext_ln315_3,
        sext_ln337,
        sext_ln315,
        zext_ln315_1,
        select_ln321,
        sext_ln320,
        obstacles_6_address0,
        obstacles_6_ce0,
        obstacles_6_q0,
        sight_6_1_out,
        sight_6_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] zext_ln326;
input  [3:0] zext_ln315_3;
input  [6:0] sext_ln337;
input  [5:0] sext_ln315;
input  [5:0] zext_ln315_1;
input  [1:0] select_ln321;
input  [6:0] sext_ln320;
output  [9:0] obstacles_6_address0;
output   obstacles_6_ce0;
input  [0:0] obstacles_6_q0;
output  [31:0] sight_6_1_out;
output   sight_6_1_out_ap_vld;

reg ap_idle;
reg obstacles_6_ce0;
reg sight_6_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_subdone;
wire   [0:0] or_ln342_fu_248_p2;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln320_cast_fu_132_p1;
reg  signed [31:0] sext_ln320_cast_reg_358;
wire  signed [31:0] select_ln321_cast_fu_136_p1;
reg  signed [31:0] select_ln321_cast_reg_364;
wire   [31:0] zext_ln315_1_cast_fu_140_p1;
reg   [31:0] zext_ln315_1_cast_reg_369;
wire  signed [31:0] sext_ln315_cast_fu_144_p1;
reg  signed [31:0] sext_ln315_cast_reg_374;
reg   [31:0] y0_7_reg_379;
reg   [31:0] x0_7_reg_385;
wire   [0:0] and_ln340_fu_198_p2;
reg   [0:0] and_ln340_reg_391;
wire   [9:0] add_ln340_fu_220_p2;
reg   [9:0] add_ln340_reg_396;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] obstacles_6_load_reg_406;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] x0_9_fu_276_p3;
reg   [31:0] x0_9_reg_414;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] err_11_fu_283_p3;
reg   [31:0] err_11_reg_419;
wire   [0:0] icmp_ln350_fu_291_p2;
reg   [0:0] icmp_ln350_reg_425;
wire   [31:0] y0_9_fu_301_p3;
reg   [31:0] y0_9_reg_430;
wire   [31:0] err_12_fu_308_p2;
reg   [31:0] err_12_reg_435;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln340_fu_226_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] err_fu_50;
wire   [31:0] err_13_fu_320_p3;
wire  signed [31:0] sext_ln337_cast_fu_148_p1;
wire    ap_loop_init;
wire    ap_block_pp0_stage4;
reg   [31:0] y0_fu_54;
wire   [31:0] zext_ln315_3_cast_fu_152_p1;
reg   [31:0] ap_sig_allocacmp_y0_7;
wire    ap_block_pp0_stage0;
reg   [31:0] x0_fu_58;
wire   [31:0] zext_ln326_cast_fu_156_p1;
reg   [31:0] ap_sig_allocacmp_x0_7;
reg   [31:0] sight_6_fu_62;
wire   [31:0] select_ln340_fu_230_p3;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4_01001;
wire   [0:0] icmp_ln340_fu_186_p2;
wire   [0:0] icmp_ln340_1_fu_192_p2;
wire   [3:0] trunc_ln340_fu_204_p1;
wire   [9:0] shl_ln6_fu_208_p3;
wire   [9:0] trunc_ln337_fu_216_p1;
wire   [0:0] icmp_ln342_fu_242_p2;
wire   [31:0] e2_fu_256_p2;
wire   [0:0] icmp_ln345_fu_262_p2;
wire   [31:0] x0_8_fu_272_p2;
wire   [31:0] err_10_fu_267_p2;
wire   [31:0] y0_8_fu_296_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 err_fu_50 = 32'd0;
#0 y0_fu_54 = 32'd0;
#0 x0_fu_58 = 32'd0;
#0 sight_6_fu_62 = 32'd0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage4) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        err_fu_50 <= sext_ln337_cast_fu_148_p1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        err_fu_50 <= err_13_fu_320_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        sight_6_fu_62 <= 32'd1;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'd0 == and_ln340_reg_391))) begin
        sight_6_fu_62 <= select_ln340_fu_230_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x0_fu_58 <= zext_ln326_cast_fu_156_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x0_fu_58 <= x0_9_reg_414;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y0_fu_54 <= zext_ln315_3_cast_fu_152_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            y0_fu_54 <= y0_9_reg_430;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln340_reg_396 <= add_ln340_fu_220_p2;
        and_ln340_reg_391 <= and_ln340_fu_198_p2;
        err_12_reg_435 <= err_12_fu_308_p2;
        select_ln321_cast_reg_364 <= select_ln321_cast_fu_136_p1;
        sext_ln315_cast_reg_374 <= sext_ln315_cast_fu_144_p1;
        sext_ln320_cast_reg_358 <= sext_ln320_cast_fu_132_p1;
        x0_7_reg_385 <= ap_sig_allocacmp_x0_7;
        y0_7_reg_379 <= ap_sig_allocacmp_y0_7;
        zext_ln315_1_cast_reg_369[5 : 0] <= zext_ln315_1_cast_fu_140_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        err_11_reg_419 <= err_11_fu_283_p3;
        icmp_ln350_reg_425 <= icmp_ln350_fu_291_p2;
        x0_9_reg_414 <= x0_9_fu_276_p3;
        y0_9_reg_430 <= y0_9_fu_301_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        obstacles_6_load_reg_406 <= obstacles_6_q0;
    end
end

always @ (*) begin
    if (((or_ln342_fu_248_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_x0_7 = zext_ln326_cast_fu_156_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_x0_7 = x0_9_reg_414;
        end else begin
            ap_sig_allocacmp_x0_7 = x0_fu_58;
        end
    end else begin
        ap_sig_allocacmp_x0_7 = x0_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_y0_7 = zext_ln315_3_cast_fu_152_p1;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_y0_7 = y0_9_reg_430;
        end else begin
            ap_sig_allocacmp_y0_7 = y0_fu_54;
        end
    end else begin
        ap_sig_allocacmp_y0_7 = y0_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        obstacles_6_ce0 = 1'b1;
    end else begin
        obstacles_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln342_fu_248_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sight_6_1_out_ap_vld = 1'b1;
    end else begin
        sight_6_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln340_fu_220_p2 = (shl_ln6_fu_208_p3 + trunc_ln337_fu_216_p1);

assign and_ln340_fu_198_p2 = (icmp_ln340_fu_186_p2 & icmp_ln340_1_fu_192_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

assign e2_fu_256_p2 = err_fu_50 << 32'd1;

assign err_10_fu_267_p2 = (err_fu_50 - zext_ln315_1_cast_reg_369);

assign err_11_fu_283_p3 = ((icmp_ln345_fu_262_p2[0:0] == 1'b1) ? err_10_fu_267_p2 : err_fu_50);

assign err_12_fu_308_p2 = ($signed(err_11_reg_419) + $signed(sext_ln320_cast_reg_358));

assign err_13_fu_320_p3 = ((icmp_ln350_reg_425[0:0] == 1'b1) ? err_12_reg_435 : err_11_reg_419);

assign icmp_ln340_1_fu_192_p2 = ((ap_sig_allocacmp_y0_7 == 32'd32) ? 1'b1 : 1'b0);

assign icmp_ln340_fu_186_p2 = ((ap_sig_allocacmp_x0_7 == 32'd32) ? 1'b1 : 1'b0);

assign icmp_ln342_fu_242_p2 = ((sight_6_fu_62 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln345_fu_262_p2 = (($signed(e2_fu_256_p2) > $signed(sext_ln315_cast_reg_374)) ? 1'b1 : 1'b0);

assign icmp_ln350_fu_291_p2 = (($signed(e2_fu_256_p2) < $signed(sext_ln320_cast_reg_358)) ? 1'b1 : 1'b0);

assign obstacles_6_address0 = zext_ln340_fu_226_p1;

assign or_ln342_fu_248_p2 = (icmp_ln342_fu_242_p2 | and_ln340_reg_391);

assign select_ln321_cast_fu_136_p1 = $signed(select_ln321);

assign select_ln340_fu_230_p3 = ((obstacles_6_load_reg_406[0:0] == 1'b1) ? 32'd0 : sight_6_fu_62);

assign sext_ln315_cast_fu_144_p1 = $signed(sext_ln315);

assign sext_ln320_cast_fu_132_p1 = $signed(sext_ln320);

assign sext_ln337_cast_fu_148_p1 = $signed(sext_ln337);

assign shl_ln6_fu_208_p3 = {{trunc_ln340_fu_204_p1}, {6'd0}};

assign sight_6_1_out = sight_6_fu_62;

assign trunc_ln337_fu_216_p1 = ap_sig_allocacmp_x0_7[9:0];

assign trunc_ln340_fu_204_p1 = ap_sig_allocacmp_y0_7[3:0];

assign x0_8_fu_272_p2 = ($signed(x0_7_reg_385) + $signed(select_ln321_cast_reg_364));

assign x0_9_fu_276_p3 = ((icmp_ln345_fu_262_p2[0:0] == 1'b1) ? x0_8_fu_272_p2 : x0_7_reg_385);

assign y0_8_fu_296_p2 = (y0_7_reg_379 + 32'd1);

assign y0_9_fu_301_p3 = ((icmp_ln350_fu_291_p2[0:0] == 1'b1) ? y0_8_fu_296_p2 : y0_7_reg_379);

assign zext_ln315_1_cast_fu_140_p1 = zext_ln315_1;

assign zext_ln315_3_cast_fu_152_p1 = zext_ln315_3;

assign zext_ln326_cast_fu_156_p1 = zext_ln326;

assign zext_ln340_fu_226_p1 = add_ln340_reg_396;

always @ (posedge ap_clk) begin
    zext_ln315_1_cast_reg_369[31:6] <= 26'b00000000000000000000000000;
end

endmodule //main_los_Pipeline_VITIS_LOOP_339_14
