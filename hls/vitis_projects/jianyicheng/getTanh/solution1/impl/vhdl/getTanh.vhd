-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getTanh is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    addr_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_in_ce0 : OUT STD_LOGIC;
    addr_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    addr_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_out_ce0 : OUT STD_LOGIC;
    addr_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    atanh_ce0 : OUT STD_LOGIC;
    atanh_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    atanh_ce1 : OUT STD_LOGIC;
    atanh_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sinh_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sinh_ce0 : OUT STD_LOGIC;
    sinh_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cosh_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cosh_ce0 : OUT STD_LOGIC;
    cosh_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getTanh is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "getTanh_getTanh,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.352750,HLS_SYN_LAT=46011,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4529,HLS_SYN_LUT=6577,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal atanh_load_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal atanh_load_1_reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal atanh_load_2_reg_212 : STD_LOGIC_VECTOR (31 downto 0);
    signal atanh_load_3_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal atanh_load_4_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal atanh_load_5_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal atanh_load_6_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal atanh_load_7_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal atanh_load_8_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal atanh_load_9_reg_287 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal atanh_load_10_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_idle : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_ready : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_out_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_out_ce0 : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_ce0 : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_we0 : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_in_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_in_ce0 : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_sinh_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_sinh_ce0 : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_cosh_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_cosh_ce0 : STD_LOGIC;
    signal grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component getTanh_getTanh_Pipeline_VITIS_LOOP_27_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        addr_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        addr_out_ce0 : OUT STD_LOGIC;
        addr_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_we0 : OUT STD_LOGIC;
        A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        addr_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        addr_in_ce0 : OUT STD_LOGIC;
        addr_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_9 : IN STD_LOGIC_VECTOR (31 downto 0);
        atanh_load_10 : IN STD_LOGIC_VECTOR (31 downto 0);
        sinh_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sinh_ce0 : OUT STD_LOGIC;
        sinh_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        cosh_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cosh_ce0 : OUT STD_LOGIC;
        cosh_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160 : component getTanh_getTanh_Pipeline_VITIS_LOOP_27_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start,
        ap_done => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done,
        ap_idle => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_idle,
        ap_ready => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_ready,
        addr_out_address0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_out_address0,
        addr_out_ce0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_out_ce0,
        addr_out_q0 => addr_out_q0,
        A_address0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_address0,
        A_ce0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_ce0,
        A_we0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_we0,
        A_d0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_d0,
        A_q0 => A_q0,
        addr_in_address0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_in_address0,
        addr_in_ce0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_in_ce0,
        addr_in_q0 => addr_in_q0,
        atanh_load => atanh_load_reg_192,
        atanh_load_1 => atanh_load_1_reg_207,
        atanh_load_2 => atanh_load_2_reg_212,
        atanh_load_3 => atanh_load_3_reg_227,
        atanh_load_4 => atanh_load_4_reg_232,
        atanh_load_5 => atanh_load_5_reg_247,
        atanh_load_6 => atanh_load_6_reg_252,
        atanh_load_7 => atanh_load_7_reg_267,
        atanh_load_8 => atanh_load_8_reg_272,
        atanh_load_9 => atanh_load_9_reg_287,
        atanh_load_10 => atanh_load_10_reg_292,
        sinh_address0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_sinh_address0,
        sinh_ce0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_sinh_ce0,
        sinh_q0 => sinh_q0,
        cosh_address0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_cosh_address0,
        cosh_ce0 => grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_cosh_ce0,
        cosh_q0 => cosh_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_ready = ap_const_logic_1)) then 
                    grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                atanh_load_10_reg_292 <= atanh_q1;
                atanh_load_9_reg_287 <= atanh_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                atanh_load_1_reg_207 <= atanh_q1;
                atanh_load_2_reg_212 <= atanh_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                atanh_load_3_reg_227 <= atanh_q0;
                atanh_load_4_reg_232 <= atanh_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                atanh_load_5_reg_247 <= atanh_q0;
                atanh_load_6_reg_252 <= atanh_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                atanh_load_7_reg_267 <= atanh_q0;
                atanh_load_8_reg_272 <= atanh_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                atanh_load_reg_192 <= atanh_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    A_address0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_address0;
    A_ce0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_ce0;
    A_d0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_d0;
    A_we0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_A_we0;
    addr_in_address0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_in_address0;
    addr_in_ce0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_in_ce0;
    addr_out_address0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_out_address0;
    addr_out_ce0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_addr_out_ce0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done)
    begin
        if ((grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    atanh_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            atanh_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            atanh_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            atanh_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            atanh_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            atanh_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            atanh_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            atanh_address0 <= "XXXX";
        end if; 
    end process;


    atanh_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            atanh_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            atanh_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            atanh_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            atanh_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            atanh_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            atanh_address1 <= "XXXX";
        end if; 
    end process;


    atanh_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            atanh_ce0 <= ap_const_logic_1;
        else 
            atanh_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    atanh_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            atanh_ce1 <= ap_const_logic_1;
        else 
            atanh_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    cosh_address0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_cosh_address0;
    cosh_ce0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_cosh_ce0;
    grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_ap_start_reg;
    sinh_address0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_sinh_address0;
    sinh_ce0 <= grp_getTanh_Pipeline_VITIS_LOOP_27_1_fu_160_sinh_ce0;
end behav;
