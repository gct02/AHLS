-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getTanh_getTanh_Pipeline_VITIS_LOOP_27_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    addr_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_out_ce0 : OUT STD_LOGIC;
    addr_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    addr_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_in_ce0 : OUT STD_LOGIC;
    addr_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    atanh_load_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    sinh_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sinh_ce0 : OUT STD_LOGIC;
    sinh_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cosh_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    cosh_ce0 : OUT STD_LOGIC;
    cosh_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of getTanh_getTanh_Pipeline_VITIS_LOOP_27_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage39 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage40 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage41 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage42 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage43 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage44 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage45 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_4FFF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv13_15BB : STD_LOGIC_VECTOR (12 downto 0) := "1010110111011";
    constant ap_const_lv13_10E7 : STD_LOGIC_VECTOR (12 downto 0) := "1000011100111";
    constant ap_const_lv13_1184 : STD_LOGIC_VECTOR (12 downto 0) := "1000110000100";
    constant ap_const_lv13_4D4 : STD_LOGIC_VECTOR (12 downto 0) := "0010011010100";
    constant ap_const_lv13_1B2C : STD_LOGIC_VECTOR (12 downto 0) := "1101100101100";
    constant ap_const_lv13_E7C : STD_LOGIC_VECTOR (12 downto 0) := "0111001111100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln27_reg_1896 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage45 : signal is "none";
    signal ap_block_pp0_stage45_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln27_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1896_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_reg_1900 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_1910 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal A_load_reg_1920 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal addr_cmp_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_1925 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1930 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal sub_ln34_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_reg_1934 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1940 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_3_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_3_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_4_fu_574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1965 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_5_fu_634_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_5_reg_1970 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_new_42_fu_642_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_new_42_reg_1976 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln2_reg_1982 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln3_cast_reg_1987 : STD_LOGIC_VECTOR (8 downto 0);
    signal sinh_load_reg_1992 : STD_LOGIC_VECTOR (31 downto 0);
    signal cosh_load_reg_1998 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_fu_749_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_reg_2004 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_6_fu_757_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_2010 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_44_fu_817_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_new_44_reg_2015 : STD_LOGIC_VECTOR (25 downto 0);
    signal y_11_fu_825_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_11_reg_2020 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_reg_2025 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_reg_2030 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln59_9_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_9_reg_2035 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_11_fu_946_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_2041 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_17_fu_1006_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_17_reg_2046 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_46_fu_1014_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_46_reg_2052 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_15_reg_2058 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_reg_2063 : STD_LOGIC_VECTOR (19 downto 0);
    signal select_ln44_6_fu_1121_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_6_reg_2068 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal tmp_17_fu_1129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_48_fu_1189_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_48_reg_2079 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_23_fu_1197_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_23_reg_2085 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_21_reg_2091 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_22_reg_2096 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln59_15_fu_1300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_15_reg_2101 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_23_fu_1308_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_2107 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_29_fu_1368_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_29_reg_2112 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_50_fu_1376_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_50_reg_2118 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_27_reg_2124 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_28_reg_2129 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln44_12_fu_1479_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_12_reg_2134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal tmp_29_fu_1487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_2140 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_52_fu_1547_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_52_reg_2145 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_35_fu_1555_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_35_reg_2151 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_33_reg_2157 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_34_reg_2162 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_41_fu_1734_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_41_reg_2167 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal x_13_fu_1742_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_13_reg_2172 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln59_fu_1750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal sext_ln15_fu_1755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln77_reg_2189 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln77_1_reg_2194 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_reg_2199 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_1_reg_2204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal zext_ln41_fu_1789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_reg_2224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_result_1_phi_fu_317_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage45_11001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln77_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal reuse_addr_reg_fu_162 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg_fu_166 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_fu_170 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln27_fu_365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal beta_fu_397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_409_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_1_fu_425_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal index_trigo_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_fu_441_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal index_trigo_1_fu_445_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_453_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal add_ln62_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_500_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_515_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_1_fu_534_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_2_fu_546_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_new_fu_508_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_new_1_fu_527_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln62_1_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_1_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_582_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_new_41_fu_558_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_fu_596_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln61_fu_592_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln16_fu_554_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln60_fu_606_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_3_fu_616_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_4_fu_628_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_new_3_fu_610_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_new_4_fu_622_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal add_ln62_2_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_2_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_6_fu_678_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln46_fu_693_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln45_fu_696_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_685_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_6_fu_699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_new_7_fu_714_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_new_43_fu_729_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_6_fu_704_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_7_fu_719_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_8_fu_741_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_7_fu_765_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln46_1_cast_fu_779_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_fu_737_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln46_1_fu_775_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln45_1_fu_789_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_new_9_fu_793_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal x_new_10_fu_805_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal y_9_fu_799_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_10_fu_811_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal add_ln47_1_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_1_fu_857_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_3_fu_867_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln17_fu_861_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln61_1_fu_882_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln16_1_fu_864_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln60_fu_885_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_8_fu_874_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_12_fu_894_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_13_fu_911_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_12_fu_888_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_13_fu_905_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln62_3_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_3_fu_917_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_14_fu_922_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_12_fu_954_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal x_new_45_fu_930_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_fu_968_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln61_2_fu_964_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln60_1_fu_978_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_15_fu_988_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_16_fu_1000_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_15_fu_982_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_16_fu_994_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal add_ln62_4_fu_1042_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_4_fu_1046_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_12_fu_1050_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln46_2_fu_1065_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln45_fu_1068_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_14_fu_1057_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_18_fu_1071_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_19_fu_1086_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_18_fu_1076_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_19_fu_1091_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_20_fu_1109_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln47_2_fu_1081_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_2_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_1137_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal x_new_47_fu_1101_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_19_fu_1151_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln46_3_fu_1147_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln16_2_fu_1117_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal sext_ln45_1_fu_1161_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_21_fu_1165_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_22_fu_1177_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_21_fu_1171_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_22_fu_1183_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal add_ln47_3_fu_1225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_3_fu_1229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_9_fu_1233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln61_3_fu_1248_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln60_2_fu_1251_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_20_fu_1240_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_24_fu_1259_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_25_fu_1274_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_24_fu_1254_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_25_fu_1269_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln62_5_fu_1264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_5_fu_1279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_26_fu_1284_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_24_fu_1316_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal x_new_49_fu_1292_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_25_fu_1330_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln61_4_fu_1326_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln60_3_fu_1340_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_27_fu_1350_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_28_fu_1362_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_27_fu_1344_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_28_fu_1356_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal add_ln62_6_fu_1404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_6_fu_1408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln59_18_fu_1412_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln46_4_fu_1427_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln45_2_fu_1430_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_26_fu_1419_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_30_fu_1433_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_31_fu_1448_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_30_fu_1438_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_31_fu_1453_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln47_4_fu_1443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_4_fu_1458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_32_fu_1471_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_30_fu_1495_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal x_new_51_fu_1463_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_31_fu_1509_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln46_5_fu_1505_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln45_3_fu_1519_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_33_fu_1523_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_34_fu_1535_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal y_33_fu_1529_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_34_fu_1541_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal add_ln47_5_fu_1583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln53_5_fu_1587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_15_fu_1591_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln61_5_fu_1606_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln60_4_fu_1609_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_32_fu_1598_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_36_fu_1617_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_37_fu_1632_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_36_fu_1612_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_37_fu_1627_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln62_7_fu_1622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_7_fu_1637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_1658_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_38_fu_1642_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_37_fu_1682_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_new_53_fu_1650_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_38_fu_1696_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln61_6_fu_1692_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln60_5_fu_1706_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln59_21_fu_1674_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_39_fu_1716_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_40_fu_1728_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_new_39_fu_1710_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal x_new_40_fu_1722_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal add_ln78_fu_1764_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_sinh_fu_1768_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1782_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_block_pp0_stage37_subdone : BOOLEAN;
    signal ap_block_pp0_stage38_subdone : BOOLEAN;
    signal ap_block_pp0_stage39_subdone : BOOLEAN;
    signal ap_block_pp0_stage40_subdone : BOOLEAN;
    signal ap_block_pp0_stage41_subdone : BOOLEAN;
    signal ap_block_pp0_stage42_subdone : BOOLEAN;
    signal ap_block_pp0_stage43_subdone : BOOLEAN;
    signal ap_block_pp0_stage44_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component getTanh_mul_32s_27s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component getTanh_mul_32s_28s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component getTanh_sdiv_32ns_20s_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component getTanh_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_27s_32_2_1_U1 : component getTanh_mul_32s_27s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sinh_load_reg_1992,
        din1 => grp_fu_325_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    mul_32s_27s_32_2_1_U2 : component getTanh_mul_32s_27s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cosh_load_reg_1998,
        din1 => grp_fu_329_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p2);

    mul_32s_28s_32_2_1_U3 : component getTanh_mul_32s_28s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 28,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cosh_load_reg_1998,
        din1 => grp_fu_333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    mul_32s_28s_32_2_1_U4 : component getTanh_mul_32s_28s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 28,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sinh_load_reg_1992,
        din1 => grp_fu_337_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    sdiv_32ns_20s_32_36_1_U5 : component getTanh_sdiv_32ns_20s_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 20,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1782_p0,
        din1 => result_sinh_fu_1768_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_1782_p2);

    flow_control_loop_pipe_sequential_init_U : component getTanh_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage45_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage45))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln27_fu_359_p2 = ap_const_lv1_0))) then 
                    i_fu_170 <= add_ln27_fu_365_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_170 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_addr_reg_fu_162 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_addr_reg_fu_162 <= zext_ln41_fu_1789_p1;
            end if; 
        end if;
    end process;

    reuse_reg_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_reg_fu_166 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reuse_reg_fu_166 <= ap_phi_mux_result_1_phi_fu_317_p4;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                A_load_reg_1920 <= A_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                addr_cmp_reg_1925 <= addr_cmp_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                cosh_load_reg_1998 <= cosh_q0;
                select_ln59_3_reg_1959 <= select_ln59_3_fu_566_p3;
                sinh_load_reg_1992 <= sinh_q0;
                tmp_4_reg_1965 <= select_ln59_3_fu_566_p3(31 downto 31);
                trunc_ln2_reg_1982 <= y_5_fu_634_p3(13 downto 4);
                trunc_ln3_cast_reg_1987 <= x_new_42_fu_642_p3(12 downto 4);
                x_new_42_reg_1976 <= x_new_42_fu_642_p3;
                y_5_reg_1970 <= y_5_fu_634_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln27_reg_1896 <= icmp_ln27_fu_359_p2;
                icmp_ln27_reg_1896_pp0_iter1_reg <= icmp_ln27_reg_1896;
                    zext_ln27_reg_1900(9 downto 0) <= zext_ln27_fu_371_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln31_reg_1930 <= icmp_ln31_fu_403_p2;
                sub_ln34_reg_1934 <= sub_ln34_fu_465_p2;
                tmp_2_reg_1940 <= sub_ln34_fu_465_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                mul_ln77_1_reg_2194 <= grp_fu_325_p2;
                mul_ln77_reg_2189 <= grp_fu_333_p2;
                mul_ln78_1_reg_2204 <= grp_fu_329_p2;
                mul_ln78_reg_2199 <= grp_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                select_ln44_12_reg_2134 <= select_ln44_12_fu_1479_p3;
                tmp_29_reg_2140 <= select_ln44_12_fu_1479_p3(31 downto 31);
                tmp_33_reg_2157 <= y_35_fu_1555_p3(27 downto 11);
                tmp_34_reg_2162 <= x_new_52_fu_1547_p3(26 downto 11);
                x_new_52_reg_2145 <= x_new_52_fu_1547_p3;
                y_35_reg_2151 <= y_35_fu_1555_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                select_ln44_6_reg_2068 <= select_ln44_6_fu_1121_p3;
                tmp_17_reg_2074 <= select_ln44_6_fu_1121_p3(31 downto 31);
                tmp_21_reg_2091 <= y_23_fu_1197_p3(27 downto 8);
                tmp_22_reg_2096 <= x_new_48_fu_1189_p3(26 downto 8);
                x_new_48_reg_2079 <= x_new_48_fu_1189_p3;
                y_23_reg_2085 <= y_23_fu_1197_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                select_ln44_reg_2004 <= select_ln44_fu_749_p3;
                tmp_10_reg_2030 <= x_new_44_fu_817_p3(25 downto 5);
                tmp_6_reg_2010 <= select_ln44_fu_749_p3(31 downto 31);
                tmp_9_reg_2025 <= y_11_fu_825_p3(13 downto 5);
                x_new_44_reg_2015 <= x_new_44_fu_817_p3;
                y_11_reg_2020 <= y_11_fu_825_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                select_ln59_15_reg_2101 <= select_ln59_15_fu_1300_p3;
                tmp_23_reg_2107 <= select_ln59_15_fu_1300_p3(31 downto 31);
                tmp_27_reg_2124 <= y_29_fu_1368_p3(27 downto 10);
                tmp_28_reg_2129 <= x_new_50_fu_1376_p3(26 downto 10);
                x_new_50_reg_2118 <= x_new_50_fu_1376_p3;
                y_29_reg_2112 <= y_29_fu_1368_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                select_ln59_9_reg_2035 <= select_ln59_9_fu_938_p3;
                tmp_11_reg_2041 <= select_ln59_9_fu_938_p3(31 downto 31);
                tmp_15_reg_2058 <= y_17_fu_1006_p3(26 downto 7);
                tmp_16_reg_2063 <= x_new_46_fu_1014_p3(26 downto 7);
                x_new_46_reg_2052 <= x_new_46_fu_1014_p3;
                y_17_reg_2046 <= y_17_fu_1006_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                x_13_reg_2172 <= x_13_fu_1742_p3;
                y_41_reg_2167 <= y_41_fu_1734_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln28_reg_1910(31 downto 0) <= zext_ln28_fu_381_p1(31 downto 0);
                    zext_ln41_reg_2224(31 downto 0) <= zext_ln41_fu_1789_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln27_reg_1900(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln28_reg_1910(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln41_reg_2224(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_condition_exit_pp0_iter0_stage2, ap_block_pp0_stage45_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone, ap_block_pp0_stage36_subdone, ap_block_pp0_stage37_subdone, ap_block_pp0_stage38_subdone, ap_block_pp0_stage39_subdone, ap_block_pp0_stage40_subdone, ap_block_pp0_stage41_subdone, ap_block_pp0_stage42_subdone, ap_block_pp0_stage43_subdone, ap_block_pp0_stage44_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage37 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage37_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                end if;
            when ap_ST_fsm_pp0_stage38 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage38_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                end if;
            when ap_ST_fsm_pp0_stage39 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage39_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                end if;
            when ap_ST_fsm_pp0_stage40 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage40_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage40;
                end if;
            when ap_ST_fsm_pp0_stage41 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage41_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage41;
                end if;
            when ap_ST_fsm_pp0_stage42 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage42_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage42;
                end if;
            when ap_ST_fsm_pp0_stage43 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage43_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage43;
                end if;
            when ap_ST_fsm_pp0_stage44 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage44_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage44;
                end if;
            when ap_ST_fsm_pp0_stage45 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage45_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage45;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, zext_ln28_fu_381_p1, ap_CS_fsm_pp0_stage1, zext_ln41_reg_2224, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            A_address0 <= zext_ln41_reg_2224(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_address0 <= zext_ln28_fu_381_p1(10 - 1 downto 0);
        else 
            A_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= ap_phi_mux_result_1_phi_fu_317_p4;

    A_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln27_fu_365_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv10_1));
    add_ln47_1_fu_853_p2 <= std_logic_vector(unsigned(atanh_load_3) + unsigned(select_ln44_reg_2004));
    add_ln47_2_fu_1081_p2 <= std_logic_vector(unsigned(atanh_load_6) + unsigned(select_ln59_12_fu_1050_p3));
    add_ln47_3_fu_1225_p2 <= std_logic_vector(unsigned(atanh_load_6) + unsigned(select_ln44_6_reg_2068));
    add_ln47_4_fu_1443_p2 <= std_logic_vector(unsigned(atanh_load_9) + unsigned(select_ln59_18_fu_1412_p3));
    add_ln47_5_fu_1583_p2 <= std_logic_vector(unsigned(atanh_load_9) + unsigned(select_ln44_12_reg_2134));
    add_ln47_fu_709_p2 <= std_logic_vector(unsigned(atanh_load_3) + unsigned(select_ln59_6_fu_678_p3));
    add_ln62_1_fu_522_p2 <= std_logic_vector(unsigned(atanh_load_1) + unsigned(select_ln59_fu_493_p3));
    add_ln62_2_fu_670_p2 <= std_logic_vector(unsigned(atanh_load_2) + unsigned(select_ln59_3_reg_1959));
    add_ln62_3_fu_900_p2 <= std_logic_vector(unsigned(atanh_load_4) + unsigned(select_ln44_3_fu_867_p3));
    add_ln62_4_fu_1042_p2 <= std_logic_vector(unsigned(atanh_load_5) + unsigned(select_ln59_9_reg_2035));
    add_ln62_5_fu_1264_p2 <= std_logic_vector(unsigned(atanh_load_7) + unsigned(select_ln44_9_fu_1233_p3));
    add_ln62_6_fu_1404_p2 <= std_logic_vector(unsigned(atanh_load_8) + unsigned(select_ln59_15_reg_2101));
    add_ln62_7_fu_1622_p2 <= std_logic_vector(unsigned(atanh_load_10) + unsigned(select_ln44_15_fu_1591_p3));
    add_ln62_fu_485_p2 <= std_logic_vector(unsigned(atanh_load) + unsigned(sub_ln34_reg_1934));
    add_ln78_fu_1764_p2 <= std_logic_vector(unsigned(mul_ln78_1_reg_2204) + unsigned(mul_ln78_reg_2199));
    addr_cmp_fu_389_p2 <= "1" when (reuse_addr_reg_fu_162 = zext_ln28_reg_1910) else "0";
    addr_in_address0 <= zext_ln27_fu_371_p1(10 - 1 downto 0);

    addr_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            addr_in_ce0 <= ap_const_logic_1;
        else 
            addr_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addr_out_address0 <= zext_ln27_reg_1900(10 - 1 downto 0);

    addr_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            addr_out_ce0 <= ap_const_logic_1;
        else 
            addr_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage45 <= ap_CS_fsm(45);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage38_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage40_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage41_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage42_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage43_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage44_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage45_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage45_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln27_reg_1896)
    begin
        if (((icmp_ln27_reg_1896 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_phi_mux_result_1_phi_fu_317_p4_assign_proc : process(icmp_ln27_reg_1896_pp0_iter1_reg, icmp_ln31_reg_1930, grp_fu_1782_p2)
    begin
        if (((icmp_ln31_reg_1930 = ap_const_lv1_0) and (icmp_ln27_reg_1896_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_result_1_phi_fu_317_p4 <= grp_fu_1782_p2;
        else 
            ap_phi_mux_result_1_phi_fu_317_p4 <= ap_const_lv32_1000;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage45, ap_block_pp0_stage45_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage45_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage45))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_170)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_170;
        end if; 
    end process;

    beta_fu_397_p3 <= 
        reuse_reg_fu_166 when (addr_cmp_reg_1925(0) = '1') else 
        A_load_reg_1920;
    cosh_address0 <= zext_ln77_fu_479_p1(3 - 1 downto 0);

    cosh_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            cosh_ce0 <= ap_const_logic_1;
        else 
            cosh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1782_p0 <= std_logic_vector(unsigned(mul_ln77_reg_2189) + unsigned(mul_ln77_1_reg_2194));
    grp_fu_325_p1 <= sext_ln15_fu_1755_p1(27 - 1 downto 0);
    grp_fu_329_p1 <= sext_ln15_fu_1755_p1(27 - 1 downto 0);
    grp_fu_333_p1 <= sext_ln59_fu_1750_p1(28 - 1 downto 0);
    grp_fu_337_p1 <= sext_ln59_fu_1750_p1(28 - 1 downto 0);
    icmp_ln23_fu_419_p2 <= "1" when (signed(tmp_fu_409_p4) > signed(ap_const_lv19_0)) else "0";
    icmp_ln27_fu_359_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv10_3E8) else "0";
    icmp_ln31_fu_403_p2 <= "1" when (signed(beta_fu_397_p3) > signed(ap_const_lv32_4FFF)) else "0";
    index_trigo_1_fu_445_p3 <= 
        ap_const_lv3_4 when (icmp_ln23_fu_419_p2(0) = '1') else 
        zext_ln19_fu_441_p1;
    index_trigo_fu_435_p2 <= "1" when (signed(tmp_1_fu_425_p4) > signed(ap_const_lv20_0)) else "0";
    lshr_ln_fu_596_p4 <= x_new_41_fu_558_p3(12 downto 3);
    result_sinh_fu_1768_p4 <= add_ln78_fu_1764_p2(31 downto 12);
    select_ln44_12_fu_1479_p3 <= 
        add_ln47_4_fu_1443_p2 when (tmp_26_fu_1419_p3(0) = '1') else 
        sub_ln53_4_fu_1458_p2;
    select_ln44_15_fu_1591_p3 <= 
        add_ln47_5_fu_1583_p2 when (tmp_29_reg_2140(0) = '1') else 
        sub_ln53_5_fu_1587_p2;
    select_ln44_3_fu_867_p3 <= 
        add_ln47_1_fu_853_p2 when (tmp_6_reg_2010(0) = '1') else 
        sub_ln53_1_fu_857_p2;
    select_ln44_6_fu_1121_p3 <= 
        add_ln47_2_fu_1081_p2 when (tmp_14_fu_1057_p3(0) = '1') else 
        sub_ln53_2_fu_1096_p2;
    select_ln44_9_fu_1233_p3 <= 
        add_ln47_3_fu_1225_p2 when (tmp_17_reg_2074(0) = '1') else 
        sub_ln53_3_fu_1229_p2;
    select_ln44_fu_749_p3 <= 
        add_ln47_fu_709_p2 when (tmp_5_fu_685_p3(0) = '1') else 
        sub_ln53_fu_724_p2;
    select_ln59_12_fu_1050_p3 <= 
        add_ln62_4_fu_1042_p2 when (tmp_11_reg_2041(0) = '1') else 
        sub_ln68_4_fu_1046_p2;
    select_ln59_15_fu_1300_p3 <= 
        add_ln62_5_fu_1264_p2 when (tmp_20_fu_1240_p3(0) = '1') else 
        sub_ln68_5_fu_1279_p2;
    select_ln59_18_fu_1412_p3 <= 
        add_ln62_6_fu_1404_p2 when (tmp_23_reg_2107(0) = '1') else 
        sub_ln68_6_fu_1408_p2;
    select_ln59_21_fu_1674_p3 <= 
        tmp_35_fu_1658_p3 when (tmp_32_fu_1598_p3(0) = '1') else 
        tmp_36_fu_1666_p3;
    select_ln59_3_fu_566_p3 <= 
        add_ln62_1_fu_522_p2 when (tmp_3_fu_500_p3(0) = '1') else 
        sub_ln68_1_fu_541_p2;
    select_ln59_6_fu_678_p3 <= 
        add_ln62_2_fu_670_p2 when (tmp_4_reg_1965(0) = '1') else 
        sub_ln68_2_fu_674_p2;
    select_ln59_9_fu_938_p3 <= 
        add_ln62_3_fu_900_p2 when (tmp_8_fu_874_p3(0) = '1') else 
        sub_ln68_3_fu_917_p2;
    select_ln59_fu_493_p3 <= 
        add_ln62_fu_485_p2 when (tmp_2_reg_1940(0) = '1') else 
        sub_ln68_fu_489_p2;
        sext_ln15_fu_1755_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_13_reg_2172),32));

        sext_ln16_1_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_11_reg_2020),27));

        sext_ln16_2_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_20_fu_1109_p3),28));

        sext_ln16_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_2_fu_546_p3),14));

        sext_ln17_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_new_44_reg_2015),27));

        sext_ln45_1_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_1151_p4),28));

        sext_ln45_2_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_reg_2129),28));

        sext_ln45_3_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_1509_p4),28));

        sext_ln45_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_2063),27));

        sext_ln46_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_765_p4),26));

        sext_ln46_2_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_reg_2058),27));

        sext_ln46_3_fu_1147_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_1137_p4),27));

        sext_ln46_4_fu_1427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_reg_2124),27));

        sext_ln46_5_fu_1505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_1495_p4),27));

        sext_ln46_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_reg_1982),13));

        sext_ln59_fu_1750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_41_reg_2167),32));

        sext_ln60_1_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_968_p4),27));

        sext_ln60_2_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_reg_2096),28));

        sext_ln60_3_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_1330_p4),28));

        sext_ln60_4_fu_1609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_reg_2162),28));

        sext_ln60_5_fu_1706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_fu_1696_p4),28));

        sext_ln60_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_2030),27));

        sext_ln61_1_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_2025),27));

        sext_ln61_2_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_954_p4),27));

        sext_ln61_3_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_reg_2091),27));

        sext_ln61_4_fu_1326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_1316_p4),27));

        sext_ln61_5_fu_1606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_reg_2157),27));

        sext_ln61_6_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_1682_p4),27));

        sext_ln61_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_582_p4),13));

    shl_ln_fu_453_p3 <= (index_trigo_1_fu_445_p3 & ap_const_lv12_0);
    sinh_address0 <= zext_ln77_fu_479_p1(3 - 1 downto 0);

    sinh_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sinh_ce0 <= ap_const_logic_1;
        else 
            sinh_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln34_fu_465_p2 <= std_logic_vector(unsigned(beta_fu_397_p3) - unsigned(zext_ln34_fu_461_p1));
    sub_ln53_1_fu_857_p2 <= std_logic_vector(unsigned(select_ln44_reg_2004) - unsigned(atanh_load_3));
    sub_ln53_2_fu_1096_p2 <= std_logic_vector(unsigned(select_ln59_12_fu_1050_p3) - unsigned(atanh_load_6));
    sub_ln53_3_fu_1229_p2 <= std_logic_vector(unsigned(select_ln44_6_reg_2068) - unsigned(atanh_load_6));
    sub_ln53_4_fu_1458_p2 <= std_logic_vector(unsigned(select_ln59_18_fu_1412_p3) - unsigned(atanh_load_9));
    sub_ln53_5_fu_1587_p2 <= std_logic_vector(unsigned(select_ln44_12_reg_2134) - unsigned(atanh_load_9));
    sub_ln53_fu_724_p2 <= std_logic_vector(unsigned(select_ln59_6_fu_678_p3) - unsigned(atanh_load_3));
    sub_ln68_1_fu_541_p2 <= std_logic_vector(unsigned(select_ln59_fu_493_p3) - unsigned(atanh_load_1));
    sub_ln68_2_fu_674_p2 <= std_logic_vector(unsigned(select_ln59_3_reg_1959) - unsigned(atanh_load_2));
    sub_ln68_3_fu_917_p2 <= std_logic_vector(unsigned(select_ln44_3_fu_867_p3) - unsigned(atanh_load_4));
    sub_ln68_4_fu_1046_p2 <= std_logic_vector(unsigned(select_ln59_9_reg_2035) - unsigned(atanh_load_5));
    sub_ln68_5_fu_1279_p2 <= std_logic_vector(unsigned(select_ln44_9_fu_1233_p3) - unsigned(atanh_load_7));
    sub_ln68_6_fu_1408_p2 <= std_logic_vector(unsigned(select_ln59_15_reg_2101) - unsigned(atanh_load_8));
    sub_ln68_7_fu_1637_p2 <= std_logic_vector(unsigned(select_ln44_15_fu_1591_p3) - unsigned(atanh_load_10));
    sub_ln68_fu_489_p2 <= std_logic_vector(unsigned(sub_ln34_reg_1934) - unsigned(atanh_load));
    tmp_11_fu_946_p3 <= select_ln59_9_fu_938_p3(31 downto 31);
    tmp_12_fu_954_p4 <= y_14_fu_922_p3(26 downto 6);
    tmp_13_fu_968_p4 <= x_new_45_fu_930_p3(26 downto 6);
    tmp_14_fu_1057_p3 <= select_ln59_12_fu_1050_p3(31 downto 31);
    tmp_17_fu_1129_p3 <= select_ln44_6_fu_1121_p3(31 downto 31);
    tmp_18_fu_1137_p4 <= y_20_fu_1109_p3(26 downto 7);
    tmp_19_fu_1151_p4 <= x_new_47_fu_1101_p3(26 downto 7);
    tmp_1_fu_425_p4 <= beta_fu_397_p3(31 downto 12);
    tmp_20_fu_1240_p3 <= select_ln44_9_fu_1233_p3(31 downto 31);
    tmp_23_fu_1308_p3 <= select_ln59_15_fu_1300_p3(31 downto 31);
    tmp_24_fu_1316_p4 <= y_26_fu_1284_p3(27 downto 9);
    tmp_25_fu_1330_p4 <= x_new_49_fu_1292_p3(26 downto 9);
    tmp_26_fu_1419_p3 <= select_ln59_18_fu_1412_p3(31 downto 31);
    tmp_29_fu_1487_p3 <= select_ln44_12_fu_1479_p3(31 downto 31);
    tmp_30_fu_1495_p4 <= y_32_fu_1471_p3(27 downto 10);
    tmp_31_fu_1509_p4 <= x_new_51_fu_1463_p3(26 downto 10);
    tmp_32_fu_1598_p3 <= select_ln44_15_fu_1591_p3(31 downto 31);
    tmp_35_fu_1658_p3 <= add_ln62_7_fu_1622_p2(31 downto 31);
    tmp_36_fu_1666_p3 <= sub_ln68_7_fu_1637_p2(31 downto 31);
    tmp_37_fu_1682_p4 <= y_38_fu_1642_p3(27 downto 12);
    tmp_38_fu_1696_p4 <= x_new_53_fu_1650_p3(26 downto 12);
    tmp_3_fu_500_p3 <= select_ln59_fu_493_p3(31 downto 31);
    tmp_4_fu_574_p3 <= select_ln59_3_fu_566_p3(31 downto 31);
    tmp_5_fu_685_p3 <= select_ln59_6_fu_678_p3(31 downto 31);
    tmp_6_fu_757_p3 <= select_ln44_fu_749_p3(31 downto 31);
    tmp_7_fu_765_p4 <= y_8_fu_741_p3(13 downto 4);
    tmp_8_fu_874_p3 <= select_ln44_3_fu_867_p3(31 downto 31);
    tmp_fu_409_p4 <= beta_fu_397_p3(31 downto 13);
    trunc_ln1_fu_582_p4 <= y_2_fu_546_p3(12 downto 3);
    trunc_ln46_1_cast_fu_779_p4 <= x_new_43_fu_729_p3(12 downto 4);
    x_13_fu_1742_p3 <= 
        x_new_39_fu_1710_p2 when (select_ln59_21_fu_1674_p3(0) = '1') else 
        x_new_40_fu_1722_p2;
    x_new_10_fu_805_p2 <= std_logic_vector(unsigned(zext_ln17_fu_737_p1) + unsigned(sext_ln46_1_fu_775_p1));
    x_new_12_fu_888_p2 <= std_logic_vector(signed(sext_ln17_fu_861_p1) - signed(sext_ln61_1_fu_882_p1));
    x_new_13_fu_905_p2 <= std_logic_vector(signed(sext_ln17_fu_861_p1) + signed(sext_ln61_1_fu_882_p1));
    x_new_15_fu_982_p2 <= std_logic_vector(unsigned(x_new_45_fu_930_p3) - unsigned(sext_ln61_2_fu_964_p1));
    x_new_16_fu_994_p2 <= std_logic_vector(unsigned(x_new_45_fu_930_p3) + unsigned(sext_ln61_2_fu_964_p1));
    x_new_18_fu_1071_p2 <= std_logic_vector(unsigned(x_new_46_reg_2052) - unsigned(sext_ln46_2_fu_1065_p1));
    x_new_19_fu_1086_p2 <= std_logic_vector(unsigned(x_new_46_reg_2052) + unsigned(sext_ln46_2_fu_1065_p1));
    x_new_1_fu_527_p3 <= 
        ap_const_lv13_10E7 when (tmp_2_reg_1940(0) = '1') else 
        ap_const_lv13_15BB;
    x_new_21_fu_1165_p2 <= std_logic_vector(unsigned(x_new_47_fu_1101_p3) - unsigned(sext_ln46_3_fu_1147_p1));
    x_new_22_fu_1177_p2 <= std_logic_vector(unsigned(x_new_47_fu_1101_p3) + unsigned(sext_ln46_3_fu_1147_p1));
    x_new_24_fu_1254_p2 <= std_logic_vector(unsigned(x_new_48_reg_2079) - unsigned(sext_ln61_3_fu_1248_p1));
    x_new_25_fu_1269_p2 <= std_logic_vector(unsigned(x_new_48_reg_2079) + unsigned(sext_ln61_3_fu_1248_p1));
    x_new_27_fu_1344_p2 <= std_logic_vector(unsigned(x_new_49_fu_1292_p3) - unsigned(sext_ln61_4_fu_1326_p1));
    x_new_28_fu_1356_p2 <= std_logic_vector(unsigned(x_new_49_fu_1292_p3) + unsigned(sext_ln61_4_fu_1326_p1));
    x_new_30_fu_1433_p2 <= std_logic_vector(unsigned(x_new_50_reg_2118) - unsigned(sext_ln46_4_fu_1427_p1));
    x_new_31_fu_1448_p2 <= std_logic_vector(unsigned(x_new_50_reg_2118) + unsigned(sext_ln46_4_fu_1427_p1));
    x_new_33_fu_1523_p2 <= std_logic_vector(unsigned(x_new_51_fu_1463_p3) - unsigned(sext_ln46_5_fu_1505_p1));
    x_new_34_fu_1535_p2 <= std_logic_vector(unsigned(x_new_51_fu_1463_p3) + unsigned(sext_ln46_5_fu_1505_p1));
    x_new_36_fu_1612_p2 <= std_logic_vector(unsigned(x_new_52_reg_2145) - unsigned(sext_ln61_5_fu_1606_p1));
    x_new_37_fu_1627_p2 <= std_logic_vector(unsigned(x_new_52_reg_2145) + unsigned(sext_ln61_5_fu_1606_p1));
    x_new_39_fu_1710_p2 <= std_logic_vector(unsigned(x_new_53_fu_1650_p3) - unsigned(sext_ln61_6_fu_1692_p1));
    x_new_3_fu_610_p2 <= std_logic_vector(unsigned(x_new_41_fu_558_p3) - unsigned(sext_ln61_fu_592_p1));
    x_new_40_fu_1722_p2 <= std_logic_vector(unsigned(x_new_53_fu_1650_p3) + unsigned(sext_ln61_6_fu_1692_p1));
    x_new_41_fu_558_p3 <= 
        x_new_fu_508_p3 when (tmp_3_fu_500_p3(0) = '1') else 
        x_new_1_fu_527_p3;
    x_new_42_fu_642_p3 <= 
        x_new_3_fu_610_p2 when (tmp_4_fu_574_p3(0) = '1') else 
        x_new_4_fu_622_p2;
    x_new_43_fu_729_p3 <= 
        x_new_6_fu_699_p2 when (tmp_5_fu_685_p3(0) = '1') else 
        x_new_7_fu_714_p2;
    x_new_44_fu_817_p3 <= 
        x_new_9_fu_793_p2 when (tmp_6_fu_757_p3(0) = '1') else 
        x_new_10_fu_805_p2;
    x_new_45_fu_930_p3 <= 
        x_new_12_fu_888_p2 when (tmp_8_fu_874_p3(0) = '1') else 
        x_new_13_fu_905_p2;
    x_new_46_fu_1014_p3 <= 
        x_new_15_fu_982_p2 when (tmp_11_fu_946_p3(0) = '1') else 
        x_new_16_fu_994_p2;
    x_new_47_fu_1101_p3 <= 
        x_new_18_fu_1071_p2 when (tmp_14_fu_1057_p3(0) = '1') else 
        x_new_19_fu_1086_p2;
    x_new_48_fu_1189_p3 <= 
        x_new_21_fu_1165_p2 when (tmp_17_fu_1129_p3(0) = '1') else 
        x_new_22_fu_1177_p2;
    x_new_49_fu_1292_p3 <= 
        x_new_24_fu_1254_p2 when (tmp_20_fu_1240_p3(0) = '1') else 
        x_new_25_fu_1269_p2;
    x_new_4_fu_622_p2 <= std_logic_vector(unsigned(x_new_41_fu_558_p3) + unsigned(sext_ln61_fu_592_p1));
    x_new_50_fu_1376_p3 <= 
        x_new_27_fu_1344_p2 when (tmp_23_fu_1308_p3(0) = '1') else 
        x_new_28_fu_1356_p2;
    x_new_51_fu_1463_p3 <= 
        x_new_30_fu_1433_p2 when (tmp_26_fu_1419_p3(0) = '1') else 
        x_new_31_fu_1448_p2;
    x_new_52_fu_1547_p3 <= 
        x_new_33_fu_1523_p2 when (tmp_29_fu_1487_p3(0) = '1') else 
        x_new_34_fu_1535_p2;
    x_new_53_fu_1650_p3 <= 
        x_new_36_fu_1612_p2 when (tmp_32_fu_1598_p3(0) = '1') else 
        x_new_37_fu_1627_p2;
    x_new_6_fu_699_p2 <= std_logic_vector(unsigned(x_new_42_reg_1976) - unsigned(sext_ln46_fu_693_p1));
    x_new_7_fu_714_p2 <= std_logic_vector(unsigned(x_new_42_reg_1976) + unsigned(sext_ln46_fu_693_p1));
    x_new_9_fu_793_p2 <= std_logic_vector(unsigned(zext_ln17_fu_737_p1) - unsigned(sext_ln46_1_fu_775_p1));
    x_new_fu_508_p3 <= 
        ap_const_lv13_15BB when (tmp_2_reg_1940(0) = '1') else 
        ap_const_lv13_10E7;
    y_10_fu_811_p2 <= std_logic_vector(unsigned(y_8_fu_741_p3) + unsigned(zext_ln45_1_fu_789_p1));
    y_11_fu_825_p3 <= 
        y_9_fu_799_p2 when (tmp_6_fu_757_p3(0) = '1') else 
        y_10_fu_811_p2;
    y_12_fu_894_p2 <= std_logic_vector(signed(sext_ln16_1_fu_864_p1) - signed(sext_ln60_fu_885_p1));
    y_13_fu_911_p2 <= std_logic_vector(signed(sext_ln16_1_fu_864_p1) + signed(sext_ln60_fu_885_p1));
    y_14_fu_922_p3 <= 
        y_12_fu_894_p2 when (tmp_8_fu_874_p3(0) = '1') else 
        y_13_fu_911_p2;
    y_15_fu_988_p2 <= std_logic_vector(unsigned(y_14_fu_922_p3) - unsigned(sext_ln60_1_fu_978_p1));
    y_16_fu_1000_p2 <= std_logic_vector(unsigned(y_14_fu_922_p3) + unsigned(sext_ln60_1_fu_978_p1));
    y_17_fu_1006_p3 <= 
        y_15_fu_988_p2 when (tmp_11_fu_946_p3(0) = '1') else 
        y_16_fu_1000_p2;
    y_18_fu_1076_p2 <= std_logic_vector(unsigned(y_17_reg_2046) - unsigned(sext_ln45_fu_1068_p1));
    y_19_fu_1091_p2 <= std_logic_vector(unsigned(y_17_reg_2046) + unsigned(sext_ln45_fu_1068_p1));
    y_1_fu_534_p3 <= 
        ap_const_lv13_1B2C when (tmp_2_reg_1940(0) = '1') else 
        ap_const_lv13_E7C;
    y_20_fu_1109_p3 <= 
        y_18_fu_1076_p2 when (tmp_14_fu_1057_p3(0) = '1') else 
        y_19_fu_1091_p2;
    y_21_fu_1171_p2 <= std_logic_vector(signed(sext_ln16_2_fu_1117_p1) - signed(sext_ln45_1_fu_1161_p1));
    y_22_fu_1183_p2 <= std_logic_vector(signed(sext_ln16_2_fu_1117_p1) + signed(sext_ln45_1_fu_1161_p1));
    y_23_fu_1197_p3 <= 
        y_21_fu_1171_p2 when (tmp_17_fu_1129_p3(0) = '1') else 
        y_22_fu_1183_p2;
    y_24_fu_1259_p2 <= std_logic_vector(unsigned(y_23_reg_2085) - unsigned(sext_ln60_2_fu_1251_p1));
    y_25_fu_1274_p2 <= std_logic_vector(unsigned(y_23_reg_2085) + unsigned(sext_ln60_2_fu_1251_p1));
    y_26_fu_1284_p3 <= 
        y_24_fu_1259_p2 when (tmp_20_fu_1240_p3(0) = '1') else 
        y_25_fu_1274_p2;
    y_27_fu_1350_p2 <= std_logic_vector(unsigned(y_26_fu_1284_p3) - unsigned(sext_ln60_3_fu_1340_p1));
    y_28_fu_1362_p2 <= std_logic_vector(unsigned(y_26_fu_1284_p3) + unsigned(sext_ln60_3_fu_1340_p1));
    y_29_fu_1368_p3 <= 
        y_27_fu_1350_p2 when (tmp_23_fu_1308_p3(0) = '1') else 
        y_28_fu_1362_p2;
    y_2_fu_546_p3 <= 
        y_fu_515_p3 when (tmp_3_fu_500_p3(0) = '1') else 
        y_1_fu_534_p3;
    y_30_fu_1438_p2 <= std_logic_vector(unsigned(y_29_reg_2112) - unsigned(sext_ln45_2_fu_1430_p1));
    y_31_fu_1453_p2 <= std_logic_vector(unsigned(y_29_reg_2112) + unsigned(sext_ln45_2_fu_1430_p1));
    y_32_fu_1471_p3 <= 
        y_30_fu_1438_p2 when (tmp_26_fu_1419_p3(0) = '1') else 
        y_31_fu_1453_p2;
    y_33_fu_1529_p2 <= std_logic_vector(unsigned(y_32_fu_1471_p3) - unsigned(sext_ln45_3_fu_1519_p1));
    y_34_fu_1541_p2 <= std_logic_vector(unsigned(y_32_fu_1471_p3) + unsigned(sext_ln45_3_fu_1519_p1));
    y_35_fu_1555_p3 <= 
        y_33_fu_1529_p2 when (tmp_29_fu_1487_p3(0) = '1') else 
        y_34_fu_1541_p2;
    y_36_fu_1617_p2 <= std_logic_vector(unsigned(y_35_reg_2151) - unsigned(sext_ln60_4_fu_1609_p1));
    y_37_fu_1632_p2 <= std_logic_vector(unsigned(y_35_reg_2151) + unsigned(sext_ln60_4_fu_1609_p1));
    y_38_fu_1642_p3 <= 
        y_36_fu_1617_p2 when (tmp_32_fu_1598_p3(0) = '1') else 
        y_37_fu_1632_p2;
    y_39_fu_1716_p2 <= std_logic_vector(unsigned(y_38_fu_1642_p3) - unsigned(sext_ln60_5_fu_1706_p1));
    y_3_fu_616_p2 <= std_logic_vector(signed(sext_ln16_fu_554_p1) - signed(zext_ln60_fu_606_p1));
    y_40_fu_1728_p2 <= std_logic_vector(unsigned(y_38_fu_1642_p3) + unsigned(sext_ln60_5_fu_1706_p1));
    y_41_fu_1734_p3 <= 
        y_39_fu_1716_p2 when (select_ln59_21_fu_1674_p3(0) = '1') else 
        y_40_fu_1728_p2;
    y_4_fu_628_p2 <= std_logic_vector(signed(sext_ln16_fu_554_p1) + signed(zext_ln60_fu_606_p1));
    y_5_fu_634_p3 <= 
        y_3_fu_616_p2 when (tmp_4_fu_574_p3(0) = '1') else 
        y_4_fu_628_p2;
    y_6_fu_704_p2 <= std_logic_vector(unsigned(y_5_reg_1970) - unsigned(zext_ln45_fu_696_p1));
    y_7_fu_719_p2 <= std_logic_vector(unsigned(y_5_reg_1970) + unsigned(zext_ln45_fu_696_p1));
    y_8_fu_741_p3 <= 
        y_6_fu_704_p2 when (tmp_5_fu_685_p3(0) = '1') else 
        y_7_fu_719_p2;
    y_9_fu_799_p2 <= std_logic_vector(unsigned(y_8_fu_741_p3) - unsigned(zext_ln45_1_fu_789_p1));
    y_fu_515_p3 <= 
        ap_const_lv13_1184 when (tmp_2_reg_1940(0) = '1') else 
        ap_const_lv13_4D4;
    zext_ln17_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_new_43_fu_729_p3),26));
    zext_ln19_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_trigo_fu_435_p2),3));
    zext_ln27_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln28_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_in_q0),64));
    zext_ln34_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_453_p3),32));
    zext_ln41_fu_1789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_out_q0),64));
    zext_ln45_1_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln46_1_cast_fu_779_p4),14));
    zext_ln45_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln3_cast_reg_1987),14));
    zext_ln60_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_596_p4),14));
    zext_ln77_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_trigo_1_fu_445_p3),64));
end behav;
