-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixadd is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_0_ce0 : OUT STD_LOGIC;
    array_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_1_ce0 : OUT STD_LOGIC;
    array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_2_ce0 : OUT STD_LOGIC;
    array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_3_ce0 : OUT STD_LOGIC;
    array_3_we0 : OUT STD_LOGIC;
    array_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_3_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_3_ce1 : OUT STD_LOGIC;
    array_3_we1 : OUT STD_LOGIC;
    array_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_4_ce0 : OUT STD_LOGIC;
    array_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_5_ce0 : OUT STD_LOGIC;
    array_5_we0 : OUT STD_LOGIC;
    array_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_5_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_5_ce1 : OUT STD_LOGIC;
    array_5_we1 : OUT STD_LOGIC;
    array_5_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    array_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_6_ce0 : OUT STD_LOGIC;
    array_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    array_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    array_7_ce0 : OUT STD_LOGIC;
    array_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixadd_matrixadd,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.981429,HLS_SYN_LAT=49191,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2235,HLS_SYN_LUT=2913,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_matrixadd_Pipeline_loop_0_fu_72_ap_start : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_ap_done : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_ap_idle : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_ap_ready : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_array_0_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrixadd_Pipeline_loop_0_fu_72_array_0_ce0 : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_s_0_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_0_fu_72_s_0_out_ap_vld : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_ce : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_1_fu_79_ap_start : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_1_fu_79_ap_done : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_1_fu_79_ap_idle : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_1_fu_79_ap_ready : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_1_fu_79_array_1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrixadd_Pipeline_loop_1_fu_79_array_1_ce0 : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_1_fu_79_s_1_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_1_fu_79_s_1_out_ap_vld : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_2_fu_86_ap_start : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_2_fu_86_ap_done : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_2_fu_86_ap_idle : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_2_fu_86_ap_ready : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_2_fu_86_array_2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrixadd_Pipeline_loop_2_fu_86_array_2_ce0 : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_2_fu_86_s_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_2_fu_86_s_2_out_ap_vld : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_3_fu_93_ap_start : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_3_fu_93_ap_done : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_3_fu_93_ap_idle : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_3_fu_93_ap_ready : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_3_fu_93_array_4_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrixadd_Pipeline_loop_3_fu_93_array_4_ce0 : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_3_fu_93_s_4_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_3_fu_93_s_4_out_ap_vld : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_5_fu_100_ap_start : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_5_fu_100_ap_done : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_5_fu_100_ap_idle : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_5_fu_100_ap_ready : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_5_fu_100_array_6_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrixadd_Pipeline_loop_5_fu_100_array_6_ce0 : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_5_fu_100_s_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_5_fu_100_s_6_out_ap_vld : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_7_fu_107_ap_start : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_7_fu_107_ap_done : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_7_fu_107_ap_idle : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_7_fu_107_ap_ready : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_7_fu_107_array_7_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_matrixadd_Pipeline_loop_7_fu_107_array_7_ce0 : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_7_fu_107_s_7_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixadd_Pipeline_loop_7_fu_107_s_7_out_ap_vld : STD_LOGIC;
    signal grp_matrixadd_Pipeline_loop_0_fu_72_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_matrixadd_Pipeline_loop_1_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrixadd_Pipeline_loop_2_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrixadd_Pipeline_loop_3_fu_93_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrixadd_Pipeline_loop_5_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal grp_matrixadd_Pipeline_loop_7_fu_107_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_114_ce : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrixadd_matrixadd_Pipeline_loop_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        array_0_ce0 : OUT STD_LOGIC;
        array_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_0_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_0_out_ap_vld : OUT STD_LOGIC;
        grp_fu_114_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_114_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_114_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_114_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_114_p_ce : OUT STD_LOGIC );
    end component;


    component matrixadd_matrixadd_Pipeline_loop_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        array_1_ce0 : OUT STD_LOGIC;
        array_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component matrixadd_matrixadd_Pipeline_loop_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        array_2_ce0 : OUT STD_LOGIC;
        array_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_2_out_ap_vld : OUT STD_LOGIC );
    end component;


    component matrixadd_matrixadd_Pipeline_loop_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        array_4_ce0 : OUT STD_LOGIC;
        array_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_4_out_ap_vld : OUT STD_LOGIC );
    end component;


    component matrixadd_matrixadd_Pipeline_loop_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        array_6_ce0 : OUT STD_LOGIC;
        array_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_6_out_ap_vld : OUT STD_LOGIC );
    end component;


    component matrixadd_matrixadd_Pipeline_loop_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        array_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        array_7_ce0 : OUT STD_LOGIC;
        array_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        s_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        s_7_out_ap_vld : OUT STD_LOGIC );
    end component;


    component matrixadd_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_matrixadd_Pipeline_loop_0_fu_72 : component matrixadd_matrixadd_Pipeline_loop_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixadd_Pipeline_loop_0_fu_72_ap_start,
        ap_done => grp_matrixadd_Pipeline_loop_0_fu_72_ap_done,
        ap_idle => grp_matrixadd_Pipeline_loop_0_fu_72_ap_idle,
        ap_ready => grp_matrixadd_Pipeline_loop_0_fu_72_ap_ready,
        array_0_address0 => grp_matrixadd_Pipeline_loop_0_fu_72_array_0_address0,
        array_0_ce0 => grp_matrixadd_Pipeline_loop_0_fu_72_array_0_ce0,
        array_0_q0 => array_0_q0,
        s_0_out => grp_matrixadd_Pipeline_loop_0_fu_72_s_0_out,
        s_0_out_ap_vld => grp_matrixadd_Pipeline_loop_0_fu_72_s_0_out_ap_vld,
        grp_fu_114_p_din0 => grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din0,
        grp_fu_114_p_din1 => grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din1,
        grp_fu_114_p_opcode => grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_opcode,
        grp_fu_114_p_dout0 => grp_fu_114_p2,
        grp_fu_114_p_ce => grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_ce);

    grp_matrixadd_Pipeline_loop_1_fu_79 : component matrixadd_matrixadd_Pipeline_loop_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixadd_Pipeline_loop_1_fu_79_ap_start,
        ap_done => grp_matrixadd_Pipeline_loop_1_fu_79_ap_done,
        ap_idle => grp_matrixadd_Pipeline_loop_1_fu_79_ap_idle,
        ap_ready => grp_matrixadd_Pipeline_loop_1_fu_79_ap_ready,
        array_1_address0 => grp_matrixadd_Pipeline_loop_1_fu_79_array_1_address0,
        array_1_ce0 => grp_matrixadd_Pipeline_loop_1_fu_79_array_1_ce0,
        array_1_q0 => array_1_q0,
        s_1_out => grp_matrixadd_Pipeline_loop_1_fu_79_s_1_out,
        s_1_out_ap_vld => grp_matrixadd_Pipeline_loop_1_fu_79_s_1_out_ap_vld);

    grp_matrixadd_Pipeline_loop_2_fu_86 : component matrixadd_matrixadd_Pipeline_loop_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixadd_Pipeline_loop_2_fu_86_ap_start,
        ap_done => grp_matrixadd_Pipeline_loop_2_fu_86_ap_done,
        ap_idle => grp_matrixadd_Pipeline_loop_2_fu_86_ap_idle,
        ap_ready => grp_matrixadd_Pipeline_loop_2_fu_86_ap_ready,
        array_2_address0 => grp_matrixadd_Pipeline_loop_2_fu_86_array_2_address0,
        array_2_ce0 => grp_matrixadd_Pipeline_loop_2_fu_86_array_2_ce0,
        array_2_q0 => array_2_q0,
        s_2_out => grp_matrixadd_Pipeline_loop_2_fu_86_s_2_out,
        s_2_out_ap_vld => grp_matrixadd_Pipeline_loop_2_fu_86_s_2_out_ap_vld);

    grp_matrixadd_Pipeline_loop_3_fu_93 : component matrixadd_matrixadd_Pipeline_loop_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixadd_Pipeline_loop_3_fu_93_ap_start,
        ap_done => grp_matrixadd_Pipeline_loop_3_fu_93_ap_done,
        ap_idle => grp_matrixadd_Pipeline_loop_3_fu_93_ap_idle,
        ap_ready => grp_matrixadd_Pipeline_loop_3_fu_93_ap_ready,
        array_4_address0 => grp_matrixadd_Pipeline_loop_3_fu_93_array_4_address0,
        array_4_ce0 => grp_matrixadd_Pipeline_loop_3_fu_93_array_4_ce0,
        array_4_q0 => array_4_q0,
        s_4_out => grp_matrixadd_Pipeline_loop_3_fu_93_s_4_out,
        s_4_out_ap_vld => grp_matrixadd_Pipeline_loop_3_fu_93_s_4_out_ap_vld);

    grp_matrixadd_Pipeline_loop_5_fu_100 : component matrixadd_matrixadd_Pipeline_loop_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixadd_Pipeline_loop_5_fu_100_ap_start,
        ap_done => grp_matrixadd_Pipeline_loop_5_fu_100_ap_done,
        ap_idle => grp_matrixadd_Pipeline_loop_5_fu_100_ap_idle,
        ap_ready => grp_matrixadd_Pipeline_loop_5_fu_100_ap_ready,
        array_6_address0 => grp_matrixadd_Pipeline_loop_5_fu_100_array_6_address0,
        array_6_ce0 => grp_matrixadd_Pipeline_loop_5_fu_100_array_6_ce0,
        array_6_q0 => array_6_q0,
        s_6_out => grp_matrixadd_Pipeline_loop_5_fu_100_s_6_out,
        s_6_out_ap_vld => grp_matrixadd_Pipeline_loop_5_fu_100_s_6_out_ap_vld);

    grp_matrixadd_Pipeline_loop_7_fu_107 : component matrixadd_matrixadd_Pipeline_loop_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixadd_Pipeline_loop_7_fu_107_ap_start,
        ap_done => grp_matrixadd_Pipeline_loop_7_fu_107_ap_done,
        ap_idle => grp_matrixadd_Pipeline_loop_7_fu_107_ap_idle,
        ap_ready => grp_matrixadd_Pipeline_loop_7_fu_107_ap_ready,
        array_7_address0 => grp_matrixadd_Pipeline_loop_7_fu_107_array_7_address0,
        array_7_ce0 => grp_matrixadd_Pipeline_loop_7_fu_107_array_7_ce0,
        array_7_q0 => array_7_q0,
        s_7_out => grp_matrixadd_Pipeline_loop_7_fu_107_s_7_out,
        s_7_out_ap_vld => grp_matrixadd_Pipeline_loop_7_fu_107_s_7_out_ap_vld);

    fadd_32ns_32ns_32_5_full_dsp_1_U26 : component matrixadd_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_114_p0,
        din1 => grp_fu_114_p1,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrixadd_Pipeline_loop_0_fu_72_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixadd_Pipeline_loop_0_fu_72_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixadd_Pipeline_loop_0_fu_72_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixadd_Pipeline_loop_0_fu_72_ap_ready = ap_const_logic_1)) then 
                    grp_matrixadd_Pipeline_loop_0_fu_72_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixadd_Pipeline_loop_1_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixadd_Pipeline_loop_1_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixadd_Pipeline_loop_1_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixadd_Pipeline_loop_1_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_matrixadd_Pipeline_loop_1_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixadd_Pipeline_loop_2_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixadd_Pipeline_loop_2_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixadd_Pipeline_loop_2_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixadd_Pipeline_loop_2_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_matrixadd_Pipeline_loop_2_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixadd_Pipeline_loop_3_fu_93_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixadd_Pipeline_loop_3_fu_93_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixadd_Pipeline_loop_3_fu_93_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixadd_Pipeline_loop_3_fu_93_ap_ready = ap_const_logic_1)) then 
                    grp_matrixadd_Pipeline_loop_3_fu_93_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixadd_Pipeline_loop_5_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixadd_Pipeline_loop_5_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixadd_Pipeline_loop_5_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixadd_Pipeline_loop_5_fu_100_ap_ready = ap_const_logic_1)) then 
                    grp_matrixadd_Pipeline_loop_5_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrixadd_Pipeline_loop_7_fu_107_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrixadd_Pipeline_loop_7_fu_107_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_matrixadd_Pipeline_loop_7_fu_107_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrixadd_Pipeline_loop_7_fu_107_ap_ready = ap_const_logic_1)) then 
                    grp_matrixadd_Pipeline_loop_7_fu_107_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_119 <= grp_fu_114_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state2_on_subcall_done_assign_proc : process(grp_matrixadd_Pipeline_loop_0_fu_72_ap_done, grp_matrixadd_Pipeline_loop_1_fu_79_ap_done, grp_matrixadd_Pipeline_loop_2_fu_86_ap_done, grp_matrixadd_Pipeline_loop_3_fu_93_ap_done, grp_matrixadd_Pipeline_loop_5_fu_100_ap_done, grp_matrixadd_Pipeline_loop_7_fu_107_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_matrixadd_Pipeline_loop_7_fu_107_ap_done = ap_const_logic_0) or (grp_matrixadd_Pipeline_loop_5_fu_100_ap_done = ap_const_logic_0) or (grp_matrixadd_Pipeline_loop_3_fu_93_ap_done = ap_const_logic_0) or (grp_matrixadd_Pipeline_loop_2_fu_86_ap_done = ap_const_logic_0) or (grp_matrixadd_Pipeline_loop_1_fu_79_ap_done = ap_const_logic_0) or (grp_matrixadd_Pipeline_loop_0_fu_72_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_114_p2;
    array_0_address0 <= grp_matrixadd_Pipeline_loop_0_fu_72_array_0_address0;
    array_0_ce0 <= grp_matrixadd_Pipeline_loop_0_fu_72_array_0_ce0;
    array_1_address0 <= grp_matrixadd_Pipeline_loop_1_fu_79_array_1_address0;
    array_1_ce0 <= grp_matrixadd_Pipeline_loop_1_fu_79_array_1_ce0;
    array_2_address0 <= grp_matrixadd_Pipeline_loop_2_fu_86_array_2_address0;
    array_2_ce0 <= grp_matrixadd_Pipeline_loop_2_fu_86_array_2_ce0;
    array_3_address0 <= ap_const_lv13_0;
    array_3_address1 <= ap_const_lv13_0;
    array_3_ce0 <= ap_const_logic_0;
    array_3_ce1 <= ap_const_logic_0;
    array_3_d0 <= ap_const_lv32_0;
    array_3_d1 <= ap_const_lv32_0;
    array_3_we0 <= ap_const_logic_0;
    array_3_we1 <= ap_const_logic_0;
    array_4_address0 <= grp_matrixadd_Pipeline_loop_3_fu_93_array_4_address0;
    array_4_ce0 <= grp_matrixadd_Pipeline_loop_3_fu_93_array_4_ce0;
    array_5_address0 <= ap_const_lv13_0;
    array_5_address1 <= ap_const_lv13_0;
    array_5_ce0 <= ap_const_logic_0;
    array_5_ce1 <= ap_const_logic_0;
    array_5_d0 <= ap_const_lv32_0;
    array_5_d1 <= ap_const_lv32_0;
    array_5_we0 <= ap_const_logic_0;
    array_5_we1 <= ap_const_logic_0;
    array_6_address0 <= grp_matrixadd_Pipeline_loop_5_fu_100_array_6_address0;
    array_6_ce0 <= grp_matrixadd_Pipeline_loop_5_fu_100_array_6_ce0;
    array_7_address0 <= grp_matrixadd_Pipeline_loop_7_fu_107_array_7_address0;
    array_7_ce0 <= grp_matrixadd_Pipeline_loop_7_fu_107_array_7_ce0;

    grp_fu_114_ce_assign_proc : process(grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_114_ce <= grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_ce;
        else 
            grp_fu_114_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_114_p0_assign_proc : process(reg_119, grp_matrixadd_Pipeline_loop_0_fu_72_s_0_out, grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din0, ap_CS_fsm_state2, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_114_p0 <= grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_fu_114_p0 <= reg_119;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_114_p0 <= grp_matrixadd_Pipeline_loop_0_fu_72_s_0_out;
        else 
            grp_fu_114_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_114_p1_assign_proc : process(grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din1, grp_matrixadd_Pipeline_loop_1_fu_79_s_1_out, grp_matrixadd_Pipeline_loop_2_fu_86_s_2_out, grp_matrixadd_Pipeline_loop_3_fu_93_s_4_out, grp_matrixadd_Pipeline_loop_5_fu_100_s_6_out, grp_matrixadd_Pipeline_loop_7_fu_107_s_7_out, ap_CS_fsm_state2, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_CS_fsm_state18, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_114_p1 <= grp_matrixadd_Pipeline_loop_0_fu_72_grp_fu_114_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_114_p1 <= grp_matrixadd_Pipeline_loop_7_fu_107_s_7_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_114_p1 <= grp_matrixadd_Pipeline_loop_5_fu_100_s_6_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_114_p1 <= grp_matrixadd_Pipeline_loop_3_fu_93_s_4_out;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_114_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_114_p1 <= grp_matrixadd_Pipeline_loop_2_fu_86_s_2_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_114_p1 <= grp_matrixadd_Pipeline_loop_1_fu_79_s_1_out;
        else 
            grp_fu_114_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_matrixadd_Pipeline_loop_0_fu_72_ap_start <= grp_matrixadd_Pipeline_loop_0_fu_72_ap_start_reg;
    grp_matrixadd_Pipeline_loop_1_fu_79_ap_start <= grp_matrixadd_Pipeline_loop_1_fu_79_ap_start_reg;
    grp_matrixadd_Pipeline_loop_2_fu_86_ap_start <= grp_matrixadd_Pipeline_loop_2_fu_86_ap_start_reg;
    grp_matrixadd_Pipeline_loop_3_fu_93_ap_start <= grp_matrixadd_Pipeline_loop_3_fu_93_ap_start_reg;
    grp_matrixadd_Pipeline_loop_5_fu_100_ap_start <= grp_matrixadd_Pipeline_loop_5_fu_100_ap_start_reg;
    grp_matrixadd_Pipeline_loop_7_fu_107_ap_start <= grp_matrixadd_Pipeline_loop_7_fu_107_ap_start_reg;
end behav;
