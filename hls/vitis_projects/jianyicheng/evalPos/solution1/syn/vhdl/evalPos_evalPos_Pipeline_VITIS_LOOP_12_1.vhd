-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity evalPos_evalPos_Pipeline_VITIS_LOOP_12_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    board_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    board_ce0 : OUT STD_LOGIC;
    board_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (30 downto 0);
    conv16_i : IN STD_LOGIC_VECTOR (31 downto 0);
    centralityValue_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    centralityValue_out_ap_vld : OUT STD_LOGIC;
    grp_fu_85_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_85_p_ce : OUT STD_LOGIC );
end;


architecture behav of evalPos_evalPos_Pipeline_VITIS_LOOP_12_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_40200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001000000000000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv13_56 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln12_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal grp_fu_122_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal icmp_ln12_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_526_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_526_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_526_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_526_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln21_fu_174_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_reg_540 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln16_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln16_reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln20_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_550_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_550_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_550_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_550_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_550_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln7_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal benefitMagnitude_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv2_i_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal conv15_i_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv15_i_reg_570_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv15_i_reg_570_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal urem_ln5_reg_575 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln5_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_fu_326_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_2_reg_585_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_fu_386_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_476_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal centralityValue_load_1_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln12_fu_169_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal centralityValue_fu_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal centralityValue_2_fu_486_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_86 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln12_fu_163_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_122_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_122_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_127_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_134_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_134_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln7_fu_188_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln7_fu_188_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln7_fu_188_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln16_fu_209_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln16_fu_213_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln16_fu_217_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_236_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_fu_246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln8_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_278_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln8_fu_288_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln8_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln8_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln8_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln8_1_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln6_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_338_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln6_fu_348_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln6_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln6_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln6_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln6_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln6_1_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln9_1_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_397_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_fu_407_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln9_1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_414_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln9_1_fu_424_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln9_3_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln9_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln9_1_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln7_fu_188_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component evalPos_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component evalPos_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component evalPos_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component evalPos_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component evalPos_urem_6ns_4ns_6_10_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component evalPos_mul_6ns_8ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component evalPos_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fsub_32ns_32ns_32_5_full_dsp_1_U1 : component evalPos_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_122_p0,
        din1 => grp_fu_122_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_122_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U2 : component evalPos_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_127_p0,
        din1 => grp_fu_127_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_127_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component evalPos_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_134_p0,
        din1 => grp_fu_134_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_134_p2);

    urem_6ns_4ns_6_10_1_U5 : component evalPos_urem_6ns_4ns_6_10_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 6,
        din1_WIDTH => 4,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => trunc_ln21_fu_174_p1,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    mul_6ns_8ns_13_1_1_U6 : component evalPos_mul_6ns_8ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln7_fu_188_p0,
        din1 => mul_ln7_fu_188_p1,
        dout => mul_ln7_fu_188_p2);

    flow_control_loop_pipe_sequential_init_U : component evalPos_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    centralityValue_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    centralityValue_fu_82 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    centralityValue_fu_82 <= centralityValue_2_fu_486_p3;
                end if;
            end if; 
        end if;
    end process;

    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln12_fu_157_p2 = ap_const_lv1_0))) then 
                    i_fu_86 <= add_ln12_fu_163_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                a_1_reg_597 <= a_1_fu_386_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                b_2_reg_585 <= b_2_fu_326_p3;
                b_2_reg_585_pp0_iter2_reg <= b_2_reg_585;
                conv15_i_reg_570_pp0_iter1_reg <= conv15_i_reg_570;
                conv15_i_reg_570_pp0_iter2_reg <= conv15_i_reg_570_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                c_reg_604 <= c_fu_476_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                centralityValue_load_1_reg_619 <= centralityValue_fu_82;
                icmp_ln20_reg_550 <= icmp_ln20_fu_254_p2;
                icmp_ln20_reg_550_pp0_iter1_reg <= icmp_ln20_reg_550;
                icmp_ln20_reg_550_pp0_iter2_reg <= icmp_ln20_reg_550_pp0_iter1_reg;
                icmp_ln20_reg_550_pp0_iter3_reg <= icmp_ln20_reg_550_pp0_iter2_reg;
                icmp_ln20_reg_550_pp0_iter4_reg <= icmp_ln20_reg_550_pp0_iter3_reg;
                icmp_ln20_reg_550_pp0_iter5_reg <= icmp_ln20_reg_550_pp0_iter4_reg;
                    sub_ln16_reg_545(31 downto 1) <= sub_ln16_fu_230_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                conv15_i_reg_570 <= grp_fu_85_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                conv2_i_reg_565 <= grp_fu_85_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_i_reg_592 <= grp_fu_85_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_reg_526 <= icmp_ln12_fu_157_p2;
                icmp_ln12_reg_526_pp0_iter1_reg <= icmp_ln12_reg_526;
                icmp_ln12_reg_526_pp0_iter2_reg <= icmp_ln12_reg_526_pp0_iter1_reg;
                icmp_ln12_reg_526_pp0_iter3_reg <= icmp_ln12_reg_526_pp0_iter2_reg;
                icmp_ln12_reg_526_pp0_iter4_reg <= icmp_ln12_reg_526_pp0_iter3_reg;
                tmp_9_reg_540 <= mul_ln7_fu_188_p2(12 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_i_reg_609 <= grp_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then
                reg_139 <= grp_fu_122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_2_reg_614 <= grp_fu_127_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                urem_ln5_reg_575 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    sub_ln16_reg_545(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter5_stage0, ap_idle_pp0_0to4, ap_idle_pp0_1to6, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_1_fu_386_p3 <= 
        reg_139 when (and_ln6_fu_370_p2(0) = '1') else 
        bitcast_ln6_1_fu_382_p1;
    add_ln12_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    and_ln6_fu_370_p2 <= (or_ln6_fu_364_p2 and grp_fu_134_p2);
    and_ln8_fu_310_p2 <= (or_ln8_fu_304_p2 and grp_fu_134_p2);
    and_ln9_1_fu_470_p2 <= (grp_fu_134_p2 and and_ln9_fu_464_p2);
    and_ln9_fu_464_p2 <= (or_ln9_fu_440_p2 and or_ln9_1_fu_458_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln12_reg_526)
    begin
        if (((icmp_ln12_reg_526 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, icmp_ln12_reg_526_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln12_reg_526_pp0_iter4_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_86;
        end if; 
    end process;

    b_2_fu_326_p3 <= 
        reg_139 when (and_ln8_fu_310_p2(0) = '1') else 
        bitcast_ln8_1_fu_322_p1;
    benefitMagnitude_fu_264_p2 <= (sub_ln16_reg_545 or ap_const_lv32_1);
    bitcast_ln6_1_fu_382_p1 <= xor_ln6_fu_376_p2;
    bitcast_ln6_fu_334_p1 <= reg_139;
    bitcast_ln8_1_fu_322_p1 <= xor_ln8_fu_316_p2;
    bitcast_ln8_fu_274_p1 <= reg_139;
    bitcast_ln9_1_fu_411_p1 <= b_2_reg_585_pp0_iter2_reg;
    bitcast_ln9_fu_394_p1 <= a_1_reg_597;
    board_address0 <= zext_ln12_fu_169_p1(6 - 1 downto 0);

    board_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            board_ce0 <= ap_const_logic_1;
        else 
            board_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_476_p3 <= 
        a_1_reg_597 when (and_ln9_1_fu_470_p2(0) = '1') else 
        b_2_reg_585_pp0_iter2_reg;
    centralityValue_2_fu_486_p3 <= 
        reg_139 when (icmp_ln20_reg_550_pp0_iter5_reg(0) = '1') else 
        centralityValue_load_1_reg_619;
    centralityValue_out <= centralityValue_fu_82;

    centralityValue_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln12_reg_526_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln12_reg_526_pp0_iter4_reg = ap_const_lv1_1))) then 
            centralityValue_out_ap_vld <= ap_const_logic_1;
        else 
            centralityValue_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_122_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, centralityValue_fu_82, ap_block_pp0_stage1, ap_block_pp0_stage5, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_122_p0 <= centralityValue_fu_82;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
            grp_fu_122_p0 <= ap_const_lv32_40200000;
        else 
            grp_fu_122_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_122_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, conv2_i_reg_565, conv_i_reg_592, temp_2_reg_614, ap_block_pp0_stage1, ap_block_pp0_stage5, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_122_p1 <= temp_2_reg_614;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_122_p1 <= conv_i_reg_592;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_122_p1 <= conv2_i_reg_565;
        else 
            grp_fu_122_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_127_p0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage3, conv15_i_reg_570_pp0_iter2_reg, mul_i_reg_609, ap_block_pp0_stage5, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_127_p0 <= mul_i_reg_609;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_127_p0 <= conv15_i_reg_570_pp0_iter2_reg;
        else 
            grp_fu_127_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_127_p1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage5, conv16_i, ap_CS_fsm_pp0_stage3, c_reg_604, ap_block_pp0_stage5, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_127_p1 <= conv16_i;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_127_p1 <= c_reg_604;
        else 
            grp_fu_127_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_131_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, zext_ln7_fu_260_p1, benefitMagnitude_fu_264_p2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, zext_ln5_fu_270_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_131_p0 <= zext_ln5_fu_270_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_131_p0 <= benefitMagnitude_fu_264_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_131_p0 <= zext_ln7_fu_260_p1;
        else 
            grp_fu_131_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, reg_139, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, a_1_reg_597, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_134_p0 <= a_1_reg_597;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_134_p0 <= reg_139;
        else 
            grp_fu_134_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_134_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, b_2_reg_585_pp0_iter2_reg, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_134_p1 <= b_2_reg_585_pp0_iter2_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_134_p1 <= ap_const_lv32_0;
        else 
            grp_fu_134_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_178_p1 <= ap_const_lv6_6(4 - 1 downto 0);
    grp_fu_85_p_ce <= ap_const_logic_1;
    grp_fu_85_p_din0 <= grp_fu_131_p0;
    icmp_ln12_fu_157_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_40) else "0";
    icmp_ln20_fu_254_p2 <= "1" when (temp_fu_246_p3 = ap_const_lv6_12) else "0";
    icmp_ln6_1_fu_358_p2 <= "1" when (trunc_ln6_fu_348_p1 = ap_const_lv23_0) else "0";
    icmp_ln6_fu_352_p2 <= "0" when (tmp_fu_338_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_1_fu_298_p2 <= "1" when (trunc_ln8_fu_288_p1 = ap_const_lv23_0) else "0";
    icmp_ln8_fu_292_p2 <= "0" when (tmp_2_fu_278_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_1_fu_434_p2 <= "1" when (trunc_ln9_fu_407_p1 = ap_const_lv23_0) else "0";
    icmp_ln9_2_fu_446_p2 <= "0" when (tmp_5_fu_414_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_3_fu_452_p2 <= "1" when (trunc_ln9_1_fu_424_p1 = ap_const_lv23_0) else "0";
    icmp_ln9_fu_428_p2 <= "0" when (tmp_4_fu_397_p4 = ap_const_lv8_FF) else "1";
    mul_ln7_fu_188_p0 <= mul_ln7_fu_188_p00(6 - 1 downto 0);
    mul_ln7_fu_188_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln21_fu_174_p1),13));
    mul_ln7_fu_188_p1 <= ap_const_lv13_56(8 - 1 downto 0);
    or_ln6_fu_364_p2 <= (icmp_ln6_fu_352_p2 or icmp_ln6_1_fu_358_p2);
    or_ln8_fu_304_p2 <= (icmp_ln8_fu_292_p2 or icmp_ln8_1_fu_298_p2);
    or_ln9_1_fu_458_p2 <= (icmp_ln9_3_fu_452_p2 or icmp_ln9_2_fu_446_p2);
    or_ln9_fu_440_p2 <= (icmp_ln9_fu_428_p2 or icmp_ln9_1_fu_434_p2);
    shl_ln_fu_222_p3 <= (xor_ln16_fu_217_p2 & ap_const_lv1_0);
    sub_ln16_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(shl_ln_fu_222_p3));
    temp_fu_246_p3 <= (tmp_7_fu_236_p4 & ap_const_lv1_0);
    tmp_2_fu_278_p4 <= bitcast_ln8_fu_274_p1(30 downto 23);
    tmp_4_fu_397_p4 <= bitcast_ln9_fu_394_p1(30 downto 23);
    tmp_5_fu_414_p4 <= bitcast_ln9_1_fu_411_p1(30 downto 23);
    tmp_7_fu_236_p4 <= board_q0(5 downto 1);
    tmp_fu_338_p4 <= bitcast_ln6_fu_334_p1(30 downto 23);
    trunc_ln16_fu_209_p1 <= board_q0(1 - 1 downto 0);
    trunc_ln21_fu_174_p1 <= ap_sig_allocacmp_i_1(6 - 1 downto 0);
    trunc_ln6_fu_348_p1 <= bitcast_ln6_fu_334_p1(23 - 1 downto 0);
    trunc_ln8_fu_288_p1 <= bitcast_ln8_fu_274_p1(23 - 1 downto 0);
    trunc_ln9_1_fu_424_p1 <= bitcast_ln9_1_fu_411_p1(23 - 1 downto 0);
    trunc_ln9_fu_407_p1 <= bitcast_ln9_fu_394_p1(23 - 1 downto 0);
    xor_ln16_fu_217_p2 <= (zext_ln16_fu_213_p1 xor empty);
    xor_ln6_fu_376_p2 <= (bitcast_ln6_fu_334_p1 xor ap_const_lv32_80000000);
    xor_ln8_fu_316_p2 <= (bitcast_ln8_fu_274_p1 xor ap_const_lv32_80000000);
    zext_ln12_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln16_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln16_fu_209_p1),31));
    zext_ln5_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(urem_ln5_reg_575),32));
    zext_ln7_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_540),32));
end behav;
