-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity evalPos is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    board_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    board_ce0 : OUT STD_LOGIC;
    board_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    color : IN STD_LOGIC_VECTOR (31 downto 0);
    profile : IN STD_LOGIC_VECTOR (31 downto 0);
    rawMoveCount_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    rawMoveCount_ce0 : OUT STD_LOGIC;
    rawMoveCount_we0 : OUT STD_LOGIC;
    rawMoveCount_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rawMoveCount_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rawMoveCount_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    rawMoveCount_ce1 : OUT STD_LOGIC;
    rawMoveCount_we1 : OUT STD_LOGIC;
    rawMoveCount_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rawMoveCount_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pm_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    pm_2_ce0 : OUT STD_LOGIC;
    pm_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res : OUT STD_LOGIC_VECTOR (31 downto 0);
    res_ap_vld : OUT STD_LOGIC );
end;


architecture behav of evalPos is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "evalPos_evalPos,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.647000,HLS_SYN_LAT=423,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1193,HLS_SYN_LUT=1364,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv16_i_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln16_fu_94_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln16_reg_128 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_done : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_idle : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_ready : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_board_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_board_ce0 : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_centralityValue_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_centralityValue_out_ap_vld : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_ce : STD_LOGIC;
    signal grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal idxprom7_fu_89_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_85_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_85_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component evalPos_evalPos_Pipeline_VITIS_LOOP_12_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        board_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        board_ce0 : OUT STD_LOGIC;
        board_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (30 downto 0);
        conv16_i : IN STD_LOGIC_VECTOR (31 downto 0);
        centralityValue_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        centralityValue_out_ap_vld : OUT STD_LOGIC;
        grp_fu_85_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_85_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_85_p_ce : OUT STD_LOGIC );
    end component;


    component evalPos_sitofp_32ns_32_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76 : component evalPos_evalPos_Pipeline_VITIS_LOOP_12_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start,
        ap_done => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_done,
        ap_idle => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_idle,
        ap_ready => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_ready,
        board_address0 => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_board_address0,
        board_ce0 => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_board_ce0,
        board_q0 => board_q0,
        empty => trunc_ln16_reg_128,
        conv16_i => conv16_i_reg_123,
        centralityValue_out => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_centralityValue_out,
        centralityValue_out_ap_vld => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_centralityValue_out_ap_vld,
        grp_fu_85_p_din0 => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_din0,
        grp_fu_85_p_dout0 => grp_fu_85_p1,
        grp_fu_85_p_ce => grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_ce);

    sitofp_32ns_32_4_no_dsp_1_U16 : component evalPos_sitofp_32ns_32_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_85_p0,
        ce => grp_fu_85_ce,
        dout => grp_fu_85_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                conv16_i_reg_123 <= grp_fu_85_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                trunc_ln16_reg_128 <= trunc_ln16_fu_94_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_done)
    begin
        if ((grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    board_address0 <= grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_board_address0;
    board_ce0 <= grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_board_ce0;
    grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start <= grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_ap_start_reg;

    grp_fu_85_ce_assign_proc : process(grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_ce, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_85_ce <= grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_ce;
        else 
            grp_fu_85_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_85_p0_assign_proc : process(pm_2_q0, ap_CS_fsm_state2, grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_din0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_85_p0 <= grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_grp_fu_85_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_85_p0 <= pm_2_q0;
        else 
            grp_fu_85_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    idxprom7_fu_89_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(profile),64));
    pm_2_address0 <= idxprom7_fu_89_p1(1 - 1 downto 0);

    pm_2_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            pm_2_ce0 <= ap_const_logic_1;
        else 
            pm_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rawMoveCount_address0 <= ap_const_lv6_0;
    rawMoveCount_address1 <= ap_const_lv6_0;
    rawMoveCount_ce0 <= ap_const_logic_0;
    rawMoveCount_ce1 <= ap_const_logic_0;
    rawMoveCount_d0 <= ap_const_lv32_0;
    rawMoveCount_d1 <= ap_const_lv32_0;
    rawMoveCount_we0 <= ap_const_logic_0;
    rawMoveCount_we1 <= ap_const_logic_0;
    res <= grp_evalPos_Pipeline_VITIS_LOOP_12_1_fu_76_centralityValue_out;

    res_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln16_fu_94_p1 <= color(31 - 1 downto 0);
end behav;
