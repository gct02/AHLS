// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="chaosNCG_chaosNCG,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu35p-fsvh2104-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.686500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5211,HLS_SYN_LUT=4982,HLS_VERSION=2023_2}" *)

module chaosNCG (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        I,
        bo,
        M_address0,
        M_ce0,
        M_q0,
        M_address1,
        M_ce1,
        M_q1,
        X,
        Y,
        params0,
        params1,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        buffer_r_q0,
        buffer_r_address1,
        buffer_r_ce1,
        buffer_r_we1,
        buffer_r_d1,
        buffer_r_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 75'd1;
parameter    ap_ST_fsm_pp0_stage1 = 75'd2;
parameter    ap_ST_fsm_pp0_stage2 = 75'd4;
parameter    ap_ST_fsm_pp0_stage3 = 75'd8;
parameter    ap_ST_fsm_pp0_stage4 = 75'd16;
parameter    ap_ST_fsm_pp0_stage5 = 75'd32;
parameter    ap_ST_fsm_pp0_stage6 = 75'd64;
parameter    ap_ST_fsm_pp0_stage7 = 75'd128;
parameter    ap_ST_fsm_pp0_stage8 = 75'd256;
parameter    ap_ST_fsm_pp0_stage9 = 75'd512;
parameter    ap_ST_fsm_pp0_stage10 = 75'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 75'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 75'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 75'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 75'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 75'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 75'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 75'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 75'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 75'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 75'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 75'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 75'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 75'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 75'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 75'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 75'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 75'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 75'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 75'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 75'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 75'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 75'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 75'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 75'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 75'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 75'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 75'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 75'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 75'd549755813888;
parameter    ap_ST_fsm_pp0_stage40 = 75'd1099511627776;
parameter    ap_ST_fsm_pp0_stage41 = 75'd2199023255552;
parameter    ap_ST_fsm_pp0_stage42 = 75'd4398046511104;
parameter    ap_ST_fsm_pp0_stage43 = 75'd8796093022208;
parameter    ap_ST_fsm_pp0_stage44 = 75'd17592186044416;
parameter    ap_ST_fsm_pp0_stage45 = 75'd35184372088832;
parameter    ap_ST_fsm_pp0_stage46 = 75'd70368744177664;
parameter    ap_ST_fsm_pp0_stage47 = 75'd140737488355328;
parameter    ap_ST_fsm_pp0_stage48 = 75'd281474976710656;
parameter    ap_ST_fsm_pp0_stage49 = 75'd562949953421312;
parameter    ap_ST_fsm_pp0_stage50 = 75'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage51 = 75'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage52 = 75'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage53 = 75'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage54 = 75'd18014398509481984;
parameter    ap_ST_fsm_pp0_stage55 = 75'd36028797018963968;
parameter    ap_ST_fsm_pp0_stage56 = 75'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage57 = 75'd144115188075855872;
parameter    ap_ST_fsm_pp0_stage58 = 75'd288230376151711744;
parameter    ap_ST_fsm_pp0_stage59 = 75'd576460752303423488;
parameter    ap_ST_fsm_pp0_stage60 = 75'd1152921504606846976;
parameter    ap_ST_fsm_pp0_stage61 = 75'd2305843009213693952;
parameter    ap_ST_fsm_pp0_stage62 = 75'd4611686018427387904;
parameter    ap_ST_fsm_pp0_stage63 = 75'd9223372036854775808;
parameter    ap_ST_fsm_pp0_stage64 = 75'd18446744073709551616;
parameter    ap_ST_fsm_pp0_stage65 = 75'd36893488147419103232;
parameter    ap_ST_fsm_pp0_stage66 = 75'd73786976294838206464;
parameter    ap_ST_fsm_pp0_stage67 = 75'd147573952589676412928;
parameter    ap_ST_fsm_pp0_stage68 = 75'd295147905179352825856;
parameter    ap_ST_fsm_pp0_stage69 = 75'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage70 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage71 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage72 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage73 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_pp0_stage74 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] I;
input  [31:0] bo;
output  [10:0] M_address0;
output   M_ce0;
input  [31:0] M_q0;
output  [10:0] M_address1;
output   M_ce1;
input  [31:0] M_q1;
input  [31:0] X;
input  [31:0] Y;
input  [31:0] params0;
input  [31:0] params1;
output  [10:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] buffer_r_q0;
output  [10:0] buffer_r_address1;
output   buffer_r_ce1;
output   buffer_r_we1;
output  [31:0] buffer_r_d1;
input  [31:0] buffer_r_q1;

reg ap_idle;
reg M_ce0;
reg M_ce1;
reg[10:0] buffer_r_address0;
reg buffer_r_ce0;
reg buffer_r_we0;
reg[10:0] buffer_r_address1;
reg buffer_r_ce1;
reg buffer_r_we1;

(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln7_fu_190_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage74;
wire    ap_block_pp0_stage74_subdone;
reg   [31:0] Y_read_reg_416;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] X_read_reg_423;
reg   [31:0] i_1_reg_430;
reg   [0:0] icmp_ln7_reg_435;
reg   [10:0] buffer_r_addr_reg_449;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [10:0] buffer_r_addr_1_reg_454;
reg   [31:0] b0_reg_459;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] b1_reg_464;
wire   [31:0] xor_ln5_fu_241_p2;
reg   [31:0] xor_ln5_reg_470;
wire   [31:0] shl_ln6_fu_257_p2;
reg   [31:0] shl_ln6_reg_476;
wire    ap_CS_fsm_pp0_stage37;
wire    ap_block_pp0_stage37_11001;
wire   [31:0] ashr_ln6_fu_272_p2;
reg   [31:0] ashr_ln6_reg_481;
wire   [31:0] xor_ln7_fu_295_p2;
reg   [31:0] xor_ln7_reg_486;
wire    ap_CS_fsm_pp0_stage38;
wire    ap_block_pp0_stage38_11001;
wire   [31:0] add_ln8_fu_305_p2;
reg   [31:0] add_ln8_reg_491;
wire   [31:0] shl_ln10_fu_326_p2;
reg   [31:0] shl_ln10_reg_498;
wire    ap_CS_fsm_pp0_stage73;
wire    ap_block_pp0_stage73_11001;
wire   [31:0] ashr_ln10_fu_341_p2;
reg   [31:0] ashr_ln10_reg_503;
wire   [31:0] add_ln10_fu_350_p2;
reg   [31:0] add_ln10_reg_508;
wire    ap_block_pp0_stage74_11001;
wire   [31:0] p1_1_fu_355_p2;
reg   [31:0] p1_1_reg_513;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln9_fu_212_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln9_1_fu_223_p1;
wire   [63:0] zext_ln10_fu_228_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln10_1_fu_233_p1;
reg   [31:0] p1_fu_56;
wire    ap_loop_init;
wire    ap_block_pp0_stage38;
reg   [31:0] p0_fu_60;
wire   [31:0] p0_1_fu_379_p2;
wire    ap_block_pp0_stage2;
reg   [31:0] i_fu_64;
wire   [31:0] add_ln7_fu_360_p2;
reg   [31:0] ap_sig_allocacmp_i_1;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_pp0_stage39_11001;
wire    ap_block_pp0_stage39;
wire   [31:0] bound_fu_154_p2;
wire   [32:0] zext_ln7_fu_186_p1;
wire  signed [32:0] sext_ln7_fu_160_p1;
wire   [10:0] trunc_ln7_1_fu_196_p1;
wire   [10:0] trunc_ln7_fu_164_p1;
wire   [10:0] add_ln9_fu_200_p2;
wire   [10:0] add_ln9_1_fu_206_p2;
wire   [10:0] add_ln9_2_fu_217_p2;
wire   [31:0] grp_fu_247_p0;
wire   [5:0] grp_fu_247_p1;
wire   [31:0] grp_fu_247_p2;
wire    ap_block_pp0_stage37;
wire   [5:0] trunc_ln6_fu_253_p1;
wire   [5:0] sub_ln6_fu_262_p2;
wire   [31:0] zext_ln6_fu_268_p1;
wire   [31:0] or_ln6_fu_280_p2;
wire   [31:0] xor_ln6_fu_284_p2;
wire   [31:0] xor_ln6_1_fu_290_p2;
wire   [31:0] and_ln8_fu_300_p2;
wire   [31:0] grp_fu_311_p0;
wire   [5:0] grp_fu_311_p1;
wire   [31:0] grp_fu_311_p2;
wire    ap_block_pp0_stage73;
wire   [5:0] trunc_ln10_fu_322_p1;
wire   [5:0] sub_ln10_fu_331_p2;
wire   [31:0] zext_ln10_2_fu_337_p1;
wire    ap_block_pp0_stage74;
wire   [31:0] or_ln10_fu_346_p2;
wire   [31:0] and_ln12_fu_375_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [74:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage10_11001;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage12_11001;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage14_11001;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage15_11001;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage16_11001;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage17_11001;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage18_11001;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage19_11001;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage20_11001;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage21_11001;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage22_11001;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage23_11001;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage24_11001;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage25_11001;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage26_11001;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage27_11001;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage28_11001;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage29_11001;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage30_11001;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage31_11001;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage32_11001;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage33_11001;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage34_11001;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_pp0_stage35_11001;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_pp0_stage36_11001;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_pp0_stage40_11001;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_pp0_stage41_11001;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_pp0_stage42_11001;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_pp0_stage43_11001;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_pp0_stage44_11001;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_pp0_stage45_11001;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_pp0_stage46_11001;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_pp0_stage47_11001;
wire    ap_block_pp0_stage48_subdone;
wire    ap_block_pp0_stage48_11001;
wire    ap_block_pp0_stage49_subdone;
wire    ap_block_pp0_stage49_11001;
wire    ap_block_pp0_stage50_subdone;
wire    ap_block_pp0_stage50_11001;
wire    ap_block_pp0_stage51_subdone;
wire    ap_block_pp0_stage51_11001;
wire    ap_block_pp0_stage52_subdone;
wire    ap_block_pp0_stage52_11001;
wire    ap_block_pp0_stage53_subdone;
wire    ap_block_pp0_stage53_11001;
wire    ap_block_pp0_stage54_subdone;
wire    ap_block_pp0_stage54_11001;
wire    ap_block_pp0_stage55_subdone;
wire    ap_block_pp0_stage55_11001;
wire    ap_block_pp0_stage56_subdone;
wire    ap_block_pp0_stage56_11001;
wire    ap_block_pp0_stage57_subdone;
wire    ap_block_pp0_stage57_11001;
wire    ap_block_pp0_stage58_subdone;
wire    ap_block_pp0_stage58_11001;
wire    ap_block_pp0_stage59_subdone;
wire    ap_block_pp0_stage59_11001;
wire    ap_block_pp0_stage60_subdone;
wire    ap_block_pp0_stage60_11001;
wire    ap_block_pp0_stage61_subdone;
wire    ap_block_pp0_stage61_11001;
wire    ap_block_pp0_stage62_subdone;
wire    ap_block_pp0_stage62_11001;
wire    ap_block_pp0_stage63_subdone;
wire    ap_block_pp0_stage63_11001;
wire    ap_block_pp0_stage64_subdone;
wire    ap_block_pp0_stage64_11001;
wire    ap_block_pp0_stage65_subdone;
wire    ap_block_pp0_stage65_11001;
wire    ap_block_pp0_stage66_subdone;
wire    ap_block_pp0_stage66_11001;
wire    ap_block_pp0_stage67_subdone;
wire    ap_block_pp0_stage67_11001;
wire    ap_block_pp0_stage68_subdone;
wire    ap_block_pp0_stage68_11001;
wire    ap_block_pp0_stage69_subdone;
wire    ap_block_pp0_stage69_11001;
wire    ap_block_pp0_stage70_subdone;
wire    ap_block_pp0_stage70_11001;
wire    ap_block_pp0_stage71_subdone;
wire    ap_block_pp0_stage71_11001;
wire    ap_block_pp0_stage72_subdone;
wire    ap_block_pp0_stage72_11001;
wire    ap_block_pp0_stage73_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_947;
reg    ap_condition_950;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 75'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 p1_fu_56 = 32'd0;
#0 p0_fu_60 = 32'd0;
#0 i_fu_64 = 32'd0;
#0 ap_done_reg = 1'b0;
end

chaosNCG_srem_32ns_6ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
srem_32ns_6ns_32_36_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_247_p0),
    .din1(grp_fu_247_p1),
    .ce(1'b1),
    .dout(grp_fu_247_p2)
);

chaosNCG_srem_32ns_6ns_32_36_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
srem_32ns_6ns_32_36_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_311_p0),
    .din1(grp_fu_311_p1),
    .ce(1'b1),
    .dout(grp_fu_311_p2)
);

chaosNCG_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage74) & (1'b0 == ap_block_pp0_stage74_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_950)) begin
            i_fu_64 <= 32'd0;
        end else if ((1'b1 == ap_condition_947)) begin
            i_fu_64 <= add_ln7_fu_360_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1))) begin
            p0_fu_60 <= params0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p0_fu_60 <= p0_1_fu_379_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_950)) begin
            p1_fu_56 <= params1;
        end else if ((1'b1 == ap_condition_947)) begin
            p1_fu_56 <= p1_1_fu_355_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_read_reg_423 <= X;
        Y_read_reg_416 <= Y;
        i_1_reg_430 <= ap_sig_allocacmp_i_1;
        icmp_ln7_reg_435 <= icmp_ln7_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage74) & (1'b0 == ap_block_pp0_stage74_11001))) begin
        add_ln10_reg_508 <= add_ln10_fu_350_p2;
        p1_1_reg_513 <= p1_1_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage38) & (1'b0 == ap_block_pp0_stage38_11001))) begin
        add_ln8_reg_491 <= add_ln8_fu_305_p2;
        xor_ln7_reg_486 <= xor_ln7_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage73) & (1'b0 == ap_block_pp0_stage73_11001))) begin
        ashr_ln10_reg_503 <= ashr_ln10_fu_341_p2;
        shl_ln10_reg_498 <= shl_ln10_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage37) & (1'b0 == ap_block_pp0_stage37_11001))) begin
        ashr_ln6_reg_481 <= ashr_ln6_fu_272_p2;
        shl_ln6_reg_476 <= shl_ln6_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        b0_reg_459 <= buffer_r_q1;
        b1_reg_464 <= buffer_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        buffer_r_addr_1_reg_454 <= zext_ln10_1_fu_233_p1;
        buffer_r_addr_reg_449 <= zext_ln10_fu_228_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        xor_ln5_reg_470 <= xor_ln5_fu_241_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_ce0 = 1'b1;
    end else begin
        M_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        M_ce1 = 1'b1;
    end else begin
        M_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln7_fu_190_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage74) & (1'b0 == ap_block_pp0_stage74_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 32'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_64;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        buffer_r_address0 = buffer_r_addr_1_reg_454;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        buffer_r_address0 = zext_ln10_1_fu_233_p1;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39))) begin
            buffer_r_address1 = buffer_r_addr_reg_449;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            buffer_r_address1 = zext_ln10_fu_228_p1;
        end else begin
            buffer_r_address1 = 'bx;
        end
    end else begin
        buffer_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        buffer_r_ce1 = 1'b1;
    end else begin
        buffer_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39) & (icmp_ln7_reg_435 == 1'd1) & (1'b0 == ap_block_pp0_stage39_11001))) begin
        buffer_r_we1 = 1'b1;
    end else begin
        buffer_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((1'b0 == ap_block_pp0_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((1'b0 == ap_block_pp0_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        ap_ST_fsm_pp0_stage52 : begin
            if ((1'b0 == ap_block_pp0_stage52_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end
        end
        ap_ST_fsm_pp0_stage53 : begin
            if ((1'b0 == ap_block_pp0_stage53_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end
        end
        ap_ST_fsm_pp0_stage54 : begin
            if ((1'b0 == ap_block_pp0_stage54_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end
        end
        ap_ST_fsm_pp0_stage55 : begin
            if ((1'b0 == ap_block_pp0_stage55_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end
        end
        ap_ST_fsm_pp0_stage56 : begin
            if ((1'b0 == ap_block_pp0_stage56_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end
        end
        ap_ST_fsm_pp0_stage57 : begin
            if ((1'b0 == ap_block_pp0_stage57_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end
        end
        ap_ST_fsm_pp0_stage58 : begin
            if ((1'b0 == ap_block_pp0_stage58_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end
        end
        ap_ST_fsm_pp0_stage59 : begin
            if ((1'b0 == ap_block_pp0_stage59_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end
        end
        ap_ST_fsm_pp0_stage60 : begin
            if ((1'b0 == ap_block_pp0_stage60_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end
        end
        ap_ST_fsm_pp0_stage61 : begin
            if ((1'b0 == ap_block_pp0_stage61_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end
        end
        ap_ST_fsm_pp0_stage62 : begin
            if ((1'b0 == ap_block_pp0_stage62_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end
        end
        ap_ST_fsm_pp0_stage63 : begin
            if ((1'b0 == ap_block_pp0_stage63_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end
        end
        ap_ST_fsm_pp0_stage64 : begin
            if ((1'b0 == ap_block_pp0_stage64_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end
        end
        ap_ST_fsm_pp0_stage65 : begin
            if ((1'b0 == ap_block_pp0_stage65_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end
        end
        ap_ST_fsm_pp0_stage66 : begin
            if ((1'b0 == ap_block_pp0_stage66_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end
        end
        ap_ST_fsm_pp0_stage67 : begin
            if ((1'b0 == ap_block_pp0_stage67_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end
        end
        ap_ST_fsm_pp0_stage68 : begin
            if ((1'b0 == ap_block_pp0_stage68_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end
        end
        ap_ST_fsm_pp0_stage69 : begin
            if ((1'b0 == ap_block_pp0_stage69_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end
        end
        ap_ST_fsm_pp0_stage70 : begin
            if ((1'b0 == ap_block_pp0_stage70_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end
        end
        ap_ST_fsm_pp0_stage71 : begin
            if ((1'b0 == ap_block_pp0_stage71_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end
        end
        ap_ST_fsm_pp0_stage72 : begin
            if ((1'b0 == ap_block_pp0_stage72_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end
        end
        ap_ST_fsm_pp0_stage73 : begin
            if ((1'b0 == ap_block_pp0_stage73_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end
        end
        ap_ST_fsm_pp0_stage74 : begin
            if ((1'b0 == ap_block_pp0_stage74_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign M_address0 = zext_ln9_1_fu_223_p1;

assign M_address1 = zext_ln9_fu_212_p1;

assign add_ln10_fu_350_p2 = (xor_ln7_reg_486 + or_ln10_fu_346_p2);

assign add_ln7_fu_360_p2 = (i_1_reg_430 + 32'd2);

assign add_ln8_fu_305_p2 = (and_ln8_fu_300_p2 + xor_ln6_1_fu_290_p2);

assign add_ln9_1_fu_206_p2 = ($signed(add_ln9_fu_200_p2) + $signed(11'd2046));

assign add_ln9_2_fu_217_p2 = (add_ln9_fu_200_p2 + 11'd2);

assign add_ln9_fu_200_p2 = (trunc_ln7_1_fu_196_p1 + trunc_ln7_fu_164_p1);

assign and_ln12_fu_375_p2 = (p1_1_reg_513 & Y_read_reg_416);

assign and_ln8_fu_300_p2 = (xor_ln7_fu_295_p2 & X_read_reg_423);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage37 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage38 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage73 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp0_stage74 = ap_CS_fsm[32'd74];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_947 = ((1'b1 == ap_CS_fsm_pp0_stage74) & (icmp_ln7_reg_435 == 1'd1) & (1'b0 == ap_block_pp0_stage74_11001));
end

always @ (*) begin
    ap_condition_950 = ((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln10_fu_341_p2 = $signed(X_read_reg_423) >>> zext_ln10_2_fu_337_p1;

assign ashr_ln6_fu_272_p2 = $signed(Y_read_reg_416) >>> zext_ln6_fu_268_p1;

assign bound_fu_154_p2 = bo << 32'd1;

assign buffer_r_d0 = (b1_reg_464 + p0_1_fu_379_p2);

assign buffer_r_d1 = (b0_reg_459 - add_ln8_reg_491);

assign grp_fu_247_p0 = (p0_fu_60 ^ buffer_r_q1);

assign grp_fu_247_p1 = 32'd17;

assign grp_fu_311_p0 = (and_ln8_fu_300_p2 + xor_ln6_1_fu_290_p2);

assign grp_fu_311_p1 = 32'd17;

assign icmp_ln7_fu_190_p2 = (($signed(zext_ln7_fu_186_p1) < $signed(sext_ln7_fu_160_p1)) ? 1'b1 : 1'b0);

assign or_ln10_fu_346_p2 = (shl_ln10_reg_498 | ashr_ln10_reg_503);

assign or_ln6_fu_280_p2 = (shl_ln6_reg_476 | ashr_ln6_reg_481);

assign p0_1_fu_379_p2 = (and_ln12_fu_375_p2 + add_ln10_reg_508);

assign p1_1_fu_355_p2 = (add_ln8_reg_491 + add_ln10_fu_350_p2);

assign sext_ln7_fu_160_p1 = $signed(bound_fu_154_p2);

assign shl_ln10_fu_326_p2 = X_read_reg_423 << grp_fu_311_p2;

assign shl_ln6_fu_257_p2 = Y_read_reg_416 << grp_fu_247_p2;

assign sub_ln10_fu_331_p2 = (6'd16 - trunc_ln10_fu_322_p1);

assign sub_ln6_fu_262_p2 = (6'd16 - trunc_ln6_fu_253_p1);

assign trunc_ln10_fu_322_p1 = grp_fu_311_p2[5:0];

assign trunc_ln6_fu_253_p1 = grp_fu_247_p2[5:0];

assign trunc_ln7_1_fu_196_p1 = ap_sig_allocacmp_i_1[10:0];

assign trunc_ln7_fu_164_p1 = I[10:0];

assign xor_ln5_fu_241_p2 = (p0_fu_60 ^ buffer_r_q1);

assign xor_ln6_1_fu_290_p2 = (xor_ln6_fu_284_p2 ^ b1_reg_464);

assign xor_ln6_fu_284_p2 = (p1_fu_56 ^ or_ln6_fu_280_p2);

assign xor_ln7_fu_295_p2 = (xor_ln6_1_fu_290_p2 ^ xor_ln5_reg_470);

assign zext_ln10_1_fu_233_p1 = M_q0;

assign zext_ln10_2_fu_337_p1 = sub_ln10_fu_331_p2;

assign zext_ln10_fu_228_p1 = M_q1;

assign zext_ln6_fu_268_p1 = sub_ln6_fu_262_p2;

assign zext_ln7_fu_186_p1 = ap_sig_allocacmp_i_1;

assign zext_ln9_1_fu_223_p1 = add_ln9_2_fu_217_p2;

assign zext_ln9_fu_212_p1 = add_ln9_1_fu_206_p2;

endmodule //chaosNCG
