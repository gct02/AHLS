// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_matrixmult_Pipeline_VITIS_LOOP_88_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln40_1,
        A_6_address0,
        A_6_ce0,
        A_6_q0,
        B_0_address0,
        B_0_ce0,
        B_0_q0,
        s_6_out,
        s_6_out_ap_vld,
        grp_fu_3484_p_din0,
        grp_fu_3484_p_din1,
        grp_fu_3484_p_dout0,
        grp_fu_3484_p_ce,
        grp_fu_3488_p_din0,
        grp_fu_3488_p_din1,
        grp_fu_3488_p_opcode,
        grp_fu_3488_p_dout0,
        grp_fu_3488_p_ce,
        grp_fu_3492_p_din0,
        grp_fu_3492_p_din1,
        grp_fu_3492_p_opcode,
        grp_fu_3492_p_dout0,
        grp_fu_3492_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 11'd1;
parameter    ap_ST_fsm_pp0_stage1 = 11'd2;
parameter    ap_ST_fsm_pp0_stage2 = 11'd4;
parameter    ap_ST_fsm_pp0_stage3 = 11'd8;
parameter    ap_ST_fsm_pp0_stage4 = 11'd16;
parameter    ap_ST_fsm_pp0_stage5 = 11'd32;
parameter    ap_ST_fsm_pp0_stage6 = 11'd64;
parameter    ap_ST_fsm_pp0_stage7 = 11'd128;
parameter    ap_ST_fsm_pp0_stage8 = 11'd256;
parameter    ap_ST_fsm_pp0_stage9 = 11'd512;
parameter    ap_ST_fsm_pp0_stage10 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] zext_ln40_1;
output  [12:0] A_6_address0;
output   A_6_ce0;
input  [31:0] A_6_q0;
output  [12:0] B_0_address0;
output   B_0_ce0;
input  [31:0] B_0_q0;
output  [31:0] s_6_out;
output   s_6_out_ap_vld;
output  [31:0] grp_fu_3484_p_din0;
output  [31:0] grp_fu_3484_p_din1;
input  [31:0] grp_fu_3484_p_dout0;
output   grp_fu_3484_p_ce;
output  [31:0] grp_fu_3488_p_din0;
output  [31:0] grp_fu_3488_p_din1;
output  [4:0] grp_fu_3488_p_opcode;
input  [0:0] grp_fu_3488_p_dout0;
output   grp_fu_3488_p_ce;
output  [31:0] grp_fu_3492_p_din0;
output  [31:0] grp_fu_3492_p_din1;
output  [1:0] grp_fu_3492_p_opcode;
input  [31:0] grp_fu_3492_p_dout0;
output   grp_fu_3492_p_ce;

reg ap_idle;
reg A_6_ce0;
reg B_0_ce0;
reg s_6_out_ap_vld;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_subdone;
reg   [0:0] icmp_ln88_reg_274;
reg    ap_condition_exit_pp0_iter0_stage10;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln88_fu_127_p2;
wire   [12:0] add_ln89_fu_143_p2;
reg   [12:0] add_ln89_reg_278;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] temp_a_reg_293;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] temp_b_reg_300;
wire   [0:0] icmp_ln91_fu_176_p2;
reg   [0:0] icmp_ln91_reg_307;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln91_1_fu_182_p2;
reg   [0:0] icmp_ln91_1_reg_312;
wire   [0:0] icmp_ln91_2_fu_205_p2;
reg   [0:0] icmp_ln91_2_reg_317;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_11001;
wire   [0:0] icmp_ln91_3_fu_211_p2;
reg   [0:0] icmp_ln91_3_reg_322;
reg   [0:0] tmp_4_reg_327;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_11001;
reg   [0:0] tmp_6_reg_332;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_11001;
wire   [0:0] or_ln91_2_fu_235_p2;
reg   [0:0] or_ln91_2_reg_337;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_11001;
reg   [0:0] or_ln91_2_reg_337_pp0_iter1_reg;
reg   [31:0] mul_reg_342;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] s_6_load_reg_347;
reg   [31:0] s_6_1_reg_353;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln89_fu_154_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] s_6_fu_50;
wire   [31:0] s_6_2_fu_245_p3;
wire    ap_block_pp0_stage10;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [13:0] j_fu_54;
wire   [13:0] add_ln88_fu_133_p2;
reg   [13:0] ap_sig_allocacmp_j_2;
wire    ap_block_pp0_stage10_01001;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_105_p0;
wire    ap_block_pp0_stage4;
wire   [12:0] trunc_ln88_fu_139_p1;
wire   [12:0] zext_ln40_1_cast_fu_110_p1;
wire   [31:0] bitcast_ln91_fu_159_p1;
wire   [7:0] tmp_s_fu_162_p4;
wire   [22:0] trunc_ln91_fu_172_p1;
wire   [31:0] bitcast_ln91_1_fu_188_p1;
wire   [7:0] tmp_5_fu_191_p4;
wire   [22:0] trunc_ln91_1_fu_201_p1;
wire    ap_block_pp0_stage8;
wire   [0:0] or_ln91_fu_217_p2;
wire   [0:0] or_ln91_1_fu_226_p2;
wire   [0:0] and_ln91_fu_221_p2;
wire   [0:0] and_ln91_1_fu_230_p2;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage4_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 s_6_fu_50 = 32'd0;
#0 j_fu_54 = 14'd0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage10),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage10)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln88_fu_127_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_54 <= add_ln88_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_6_fu_50 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        s_6_fu_50 <= s_6_2_fu_245_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln89_reg_278 <= add_ln89_fu_143_p2;
        icmp_ln88_reg_274 <= icmp_ln88_fu_127_p2;
        s_6_load_reg_347 <= s_6_fu_50;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln91_1_reg_312 <= icmp_ln91_1_fu_182_p2;
        icmp_ln91_reg_307 <= icmp_ln91_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        icmp_ln91_2_reg_317 <= icmp_ln91_2_fu_205_p2;
        icmp_ln91_3_reg_322 <= icmp_ln91_3_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_reg_342 <= grp_fu_3484_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        or_ln91_2_reg_337 <= or_ln91_2_fu_235_p2;
        or_ln91_2_reg_337_pp0_iter1_reg <= or_ln91_2_reg_337;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        s_6_1_reg_353 <= grp_fu_3492_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        temp_a_reg_293 <= A_6_q0;
        temp_b_reg_300 <= B_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        tmp_4_reg_327 <= grp_fu_3488_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        tmp_6_reg_332 <= grp_fu_3488_p_dout0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_6_ce0 = 1'b1;
    end else begin
        A_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_0_ce0 = 1'b1;
    end else begin
        B_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln88_reg_274 == 1'd1) & (1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_2 = 14'd0;
    end else begin
        ap_sig_allocacmp_j_2 = j_fu_54;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_105_p0 = temp_b_reg_300;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_105_p0 = temp_a_reg_293;
        end else begin
            grp_fu_105_p0 = 'bx;
        end
    end else begin
        grp_fu_105_p0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln88_reg_274 == 1'd1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        s_6_out_ap_vld = 1'b1;
    end else begin
        s_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_6_address0 = zext_ln89_fu_154_p1;

assign B_0_address0 = zext_ln89_fu_154_p1;

assign add_ln88_fu_133_p2 = (ap_sig_allocacmp_j_2 + 14'd1);

assign add_ln89_fu_143_p2 = (trunc_ln88_fu_139_p1 + zext_ln40_1_cast_fu_110_p1);

assign and_ln91_1_fu_230_p2 = (tmp_6_reg_332 & or_ln91_1_fu_226_p2);

assign and_ln91_fu_221_p2 = (tmp_4_reg_327 & or_ln91_fu_217_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage10;

assign bitcast_ln91_1_fu_188_p1 = temp_b_reg_300;

assign bitcast_ln91_fu_159_p1 = temp_a_reg_293;

assign grp_fu_3484_p_ce = 1'b1;

assign grp_fu_3484_p_din0 = temp_a_reg_293;

assign grp_fu_3484_p_din1 = temp_b_reg_300;

assign grp_fu_3488_p_ce = 1'b1;

assign grp_fu_3488_p_din0 = grp_fu_105_p0;

assign grp_fu_3488_p_din1 = 32'd0;

assign grp_fu_3488_p_opcode = 5'd1;

assign grp_fu_3492_p_ce = 1'b1;

assign grp_fu_3492_p_din0 = s_6_fu_50;

assign grp_fu_3492_p_din1 = mul_reg_342;

assign grp_fu_3492_p_opcode = 2'd0;

assign icmp_ln88_fu_127_p2 = ((ap_sig_allocacmp_j_2 == 14'd8192) ? 1'b1 : 1'b0);

assign icmp_ln91_1_fu_182_p2 = ((trunc_ln91_fu_172_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_2_fu_205_p2 = ((tmp_5_fu_191_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln91_3_fu_211_p2 = ((trunc_ln91_1_fu_201_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_176_p2 = ((tmp_s_fu_162_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln91_1_fu_226_p2 = (icmp_ln91_3_reg_322 | icmp_ln91_2_reg_317);

assign or_ln91_2_fu_235_p2 = (and_ln91_fu_221_p2 | and_ln91_1_fu_230_p2);

assign or_ln91_fu_217_p2 = (icmp_ln91_reg_307 | icmp_ln91_1_reg_312);

assign s_6_2_fu_245_p3 = ((or_ln91_2_reg_337_pp0_iter1_reg[0:0] == 1'b1) ? s_6_load_reg_347 : s_6_1_reg_353);

assign s_6_out = s_6_fu_50;

assign tmp_5_fu_191_p4 = {{bitcast_ln91_1_fu_188_p1[30:23]}};

assign tmp_s_fu_162_p4 = {{bitcast_ln91_fu_159_p1[30:23]}};

assign trunc_ln88_fu_139_p1 = ap_sig_allocacmp_j_2[12:0];

assign trunc_ln91_1_fu_201_p1 = bitcast_ln91_1_fu_188_p1[22:0];

assign trunc_ln91_fu_172_p1 = bitcast_ln91_fu_159_p1[22:0];

assign zext_ln40_1_cast_fu_110_p1 = zext_ln40_1;

assign zext_ln89_fu_154_p1 = add_ln89_reg_278;

endmodule //main_matrixmult_Pipeline_VITIS_LOOP_88_7
