-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmult_matrixmult_Pipeline_VITIS_LOOP_281_31 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln233_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    A_6_ce0 : OUT STD_LOGIC;
    A_6_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_3_ce0 : OUT STD_LOGIC;
    B_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_6_9_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_6_9_out_ap_vld : OUT STD_LOGIC;
    grp_fu_3756_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3756_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3756_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_3756_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3756_p_ce : OUT STD_LOGIC;
    grp_fu_3760_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3760_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3760_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3760_p_ce : OUT STD_LOGIC;
    grp_fu_3764_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3764_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_3764_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_3764_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_3764_p_ce : OUT STD_LOGIC );
end;


architecture behav of matrixmult_matrixmult_Pipeline_VITIS_LOOP_281_31 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2000 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln281_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln281_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_a_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_a_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal B_3_load_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln284_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_1_reg_313 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_2_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_2_reg_318 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_3_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_3_reg_323 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_b_fu_221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_103_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_reg_339 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal or_ln284_2_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln284_2_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal mul_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_6_9_load_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_6_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln282_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_6_9_fu_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_6_11_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_58 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln281_fu_137_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_j_34 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_109_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal trunc_ln281_fu_143_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln233_1_cast_fu_114_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln282_fu_147_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_169_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_fu_179_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_104_fu_195_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln284_1_fu_205_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln284_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln284_1_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln284_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matrixmult_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmult_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmult_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component matrixmult_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component matrixmult_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln281_fu_131_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_58 <= add_ln281_fu_137_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_58 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    s_6_9_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                s_6_9_fu_54 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                s_6_9_fu_54 <= s_6_11_fu_254_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                B_3_load_reg_303 <= B_3_q0;
                icmp_ln284_1_reg_313 <= icmp_ln284_1_fu_189_p2;
                icmp_ln284_2_reg_318 <= icmp_ln284_2_fu_209_p2;
                icmp_ln284_3_reg_323 <= icmp_ln284_3_fu_215_p2;
                icmp_ln284_reg_308 <= icmp_ln284_fu_183_p2;
                temp_a_reg_297 <= temp_a_fu_164_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln281_reg_283 <= icmp_ln281_fu_131_p2;
                s_6_9_load_reg_354 <= s_6_9_fu_54;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_reg_349 <= grp_fu_3760_p_dout0;
                or_ln284_2_reg_344 <= or_ln284_2_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                s_6_reg_360 <= grp_fu_3756_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_103_reg_334 <= grp_fu_3764_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_105_reg_339 <= grp_fu_3764_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_6_address0 <= zext_ln282_fu_153_p1(13 - 1 downto 0);

    A_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_6_ce0 <= ap_const_logic_1;
        else 
            A_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_3_address0 <= zext_ln282_fu_153_p1(13 - 1 downto 0);

    B_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln281_fu_137_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_34) + unsigned(ap_const_lv14_1));
    add_ln282_fu_147_p2 <= std_logic_vector(unsigned(trunc_ln281_fu_143_p1) + unsigned(zext_ln233_1_cast_fu_114_p1));
    and_ln284_1_fu_239_p2 <= (tmp_105_reg_339 and or_ln284_1_fu_235_p2);
    and_ln284_fu_230_p2 <= (tmp_103_reg_334 and or_ln284_fu_226_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln281_reg_283)
    begin
        if (((icmp_ln281_reg_283 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_34_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_34 <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_j_34 <= j_fu_58;
        end if; 
    end process;


    grp_fu_109_p0_assign_proc : process(ap_enable_reg_pp0_iter0, temp_a_fu_164_p1, ap_CS_fsm_pp0_stage1, temp_b_fu_221_p1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_109_p0 <= temp_b_fu_221_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_109_p0 <= temp_a_fu_164_p1;
            else 
                grp_fu_109_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_109_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_3756_p_ce <= ap_const_logic_1;
    grp_fu_3756_p_din0 <= s_6_9_fu_54;
    grp_fu_3756_p_din1 <= mul_reg_349;
    grp_fu_3756_p_opcode <= ap_const_lv2_0;
    grp_fu_3760_p_ce <= ap_const_logic_1;
    grp_fu_3760_p_din0 <= temp_a_reg_297;
    grp_fu_3760_p_din1 <= temp_b_fu_221_p1;
    grp_fu_3764_p_ce <= ap_const_logic_1;
    grp_fu_3764_p_din0 <= grp_fu_109_p0;
    grp_fu_3764_p_din1 <= ap_const_lv32_0;
    grp_fu_3764_p_opcode <= ap_const_lv5_1;
    icmp_ln281_fu_131_p2 <= "1" when (ap_sig_allocacmp_j_34 = ap_const_lv14_2000) else "0";
    icmp_ln284_1_fu_189_p2 <= "1" when (trunc_ln284_fu_179_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_2_fu_209_p2 <= "0" when (tmp_104_fu_195_p4 = ap_const_lv8_FF) else "1";
    icmp_ln284_3_fu_215_p2 <= "1" when (trunc_ln284_1_fu_205_p1 = ap_const_lv23_0) else "0";
    icmp_ln284_fu_183_p2 <= "0" when (tmp_s_fu_169_p4 = ap_const_lv8_FF) else "1";
    or_ln284_1_fu_235_p2 <= (icmp_ln284_3_reg_323 or icmp_ln284_2_reg_318);
    or_ln284_2_fu_244_p2 <= (and_ln284_fu_230_p2 or and_ln284_1_fu_239_p2);
    or_ln284_fu_226_p2 <= (icmp_ln284_reg_308 or icmp_ln284_1_reg_313);
    s_6_11_fu_254_p3 <= 
        s_6_9_load_reg_354 when (or_ln284_2_reg_344(0) = '1') else 
        s_6_reg_360;
    s_6_9_out <= s_6_9_fu_54;

    s_6_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage5, icmp_ln281_reg_283, ap_block_pp0_stage5_11001)
    begin
        if (((icmp_ln281_reg_283 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            s_6_9_out_ap_vld <= ap_const_logic_1;
        else 
            s_6_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    temp_a_fu_164_p1 <= A_6_q0;
    temp_b_fu_221_p1 <= B_3_load_reg_303;
    tmp_104_fu_195_p4 <= B_3_q0(30 downto 23);
    tmp_s_fu_169_p4 <= A_6_q0(30 downto 23);
    trunc_ln281_fu_143_p1 <= ap_sig_allocacmp_j_34(13 - 1 downto 0);
    trunc_ln284_1_fu_205_p1 <= B_3_q0(23 - 1 downto 0);
    trunc_ln284_fu_179_p1 <= A_6_q0(23 - 1 downto 0);
    zext_ln233_1_cast_fu_114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln233_1),13));
    zext_ln282_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln282_fu_147_p2),64));
end behav;
