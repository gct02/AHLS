// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_loop_0_loop_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        B_address0,
        B_ce0,
        B_q0,
        w_address0,
        w_ce0,
        w_q0,
        sum_s_address0,
        sum_s_ce0,
        sum_s_we0,
        sum_s_d0,
        grp_fu_170_p_din0,
        grp_fu_170_p_din1,
        grp_fu_170_p_opcode,
        grp_fu_170_p_dout0,
        grp_fu_170_p_ce,
        grp_fu_174_p_din0,
        grp_fu_174_p_din1,
        grp_fu_174_p_dout0,
        grp_fu_174_p_ce,
        grp_fu_178_p_din0,
        grp_fu_178_p_din1,
        grp_fu_178_p_opcode,
        grp_fu_178_p_dout0,
        grp_fu_178_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 11'd1;
parameter    ap_ST_fsm_pp0_stage1 = 11'd2;
parameter    ap_ST_fsm_pp0_stage2 = 11'd4;
parameter    ap_ST_fsm_pp0_stage3 = 11'd8;
parameter    ap_ST_fsm_pp0_stage4 = 11'd16;
parameter    ap_ST_fsm_pp0_stage5 = 11'd32;
parameter    ap_ST_fsm_pp0_stage6 = 11'd64;
parameter    ap_ST_fsm_pp0_stage7 = 11'd128;
parameter    ap_ST_fsm_pp0_stage8 = 11'd256;
parameter    ap_ST_fsm_pp0_stage9 = 11'd512;
parameter    ap_ST_fsm_pp0_stage10 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [15:0] w_address0;
output   w_ce0;
input  [31:0] w_q0;
output  [7:0] sum_s_address0;
output   sum_s_ce0;
output   sum_s_we0;
output  [31:0] sum_s_d0;
output  [31:0] grp_fu_170_p_din0;
output  [31:0] grp_fu_170_p_din1;
output  [1:0] grp_fu_170_p_opcode;
input  [31:0] grp_fu_170_p_dout0;
output   grp_fu_170_p_ce;
output  [31:0] grp_fu_174_p_din0;
output  [31:0] grp_fu_174_p_din1;
input  [31:0] grp_fu_174_p_dout0;
output   grp_fu_174_p_ce;
output  [31:0] grp_fu_178_p_din0;
output  [31:0] grp_fu_178_p_din1;
output  [4:0] grp_fu_178_p_opcode;
input  [0:0] grp_fu_178_p_dout0;
output   grp_fu_178_p_ce;

reg ap_idle;
reg B_ce0;
reg w_ce0;
reg sum_s_ce0;
reg sum_s_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_subdone;
reg   [0:0] icmp_ln61_reg_379;
reg    ap_condition_exit_pp0_iter0_stage10;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln61_fu_156_p2;
reg   [0:0] icmp_ln61_reg_379_pp0_iter1_reg;
reg   [0:0] icmp_ln61_reg_379_pp0_iter2_reg;
wire   [16:0] add_ln61_fu_162_p2;
reg   [16:0] add_ln61_reg_383;
wire   [0:0] icmp_ln64_fu_171_p2;
reg   [0:0] icmp_ln64_reg_388;
reg   [0:0] icmp_ln64_reg_388_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_388_pp0_iter2_reg;
reg   [0:0] icmp_ln64_reg_388_pp0_iter3_reg;
wire   [8:0] select_ln61_fu_177_p3;
reg   [8:0] select_ln61_reg_395;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [15:0] add_ln66_fu_209_p2;
reg   [15:0] add_ln66_reg_407;
reg   [31:0] a_reg_412;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] a_reg_412_pp0_iter1_reg;
reg   [31:0] wt_reg_425;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln64_1_fu_244_p2;
reg   [0:0] icmp_ln64_1_reg_431;
wire    ap_block_pp0_stage10_11001;
reg   [0:0] icmp_ln64_1_reg_431_pp0_iter1_reg;
reg   [0:0] icmp_ln64_1_reg_431_pp0_iter2_reg;
reg   [31:0] mul2_reg_435;
reg   [31:0] add1_reg_440;
wire   [0:0] icmp_ln67_fu_272_p2;
reg   [0:0] icmp_ln67_reg_445;
reg   [0:0] icmp_ln67_reg_445_pp0_iter3_reg;
wire   [0:0] icmp_ln67_1_fu_278_p2;
reg   [0:0] icmp_ln67_1_reg_450;
reg   [0:0] icmp_ln67_1_reg_450_pp0_iter3_reg;
reg   [0:0] tmp_1_reg_455;
reg   [0:0] tmp_1_reg_455_pp0_iter3_reg;
wire   [31:0] select_ln61_1_fu_287_p3;
reg   [31:0] select_ln61_1_reg_460;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7_11001;
reg   [31:0] mul3_reg_466;
wire   [8:0] select_ln61_2_fu_303_p3;
reg   [8:0] select_ln61_2_reg_471;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] s_1_reg_477;
wire   [31:0] s_3_fu_319_p3;
reg   [31:0] s_3_reg_482;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8_subdone;
wire   [63:0] zext_ln64_fu_202_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln66_fu_235_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln61_fu_334_p1;
wire    ap_block_pp0_stage8;
reg   [31:0] s_fu_52;
reg   [31:0] ap_sig_allocacmp_s_load;
wire    ap_block_pp0_stage7;
wire    ap_loop_init;
reg   [8:0] j_fu_56;
wire   [8:0] add_ln64_fu_239_p2;
reg   [8:0] ap_sig_allocacmp_j_load;
wire    ap_block_pp0_stage0;
reg   [16:0] add_ln711_fu_60;
wire   [16:0] add_ln71_fu_215_p2;
reg   [16:0] p_fu_64;
wire   [16:0] select_ln61_3_fu_191_p3;
reg   [8:0] i_1_fu_68;
wire    ap_block_pp0_stage6;
reg   [16:0] indvar_flatten8_fu_72;
reg   [16:0] ap_sig_allocacmp_indvar_flatten8_load;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] grp_fu_115_p0;
reg   [31:0] grp_fu_115_p1;
reg   [31:0] grp_fu_119_p0;
reg   [31:0] grp_fu_119_p1;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire   [15:0] zext_ln64_1_fu_206_p1;
wire   [15:0] trunc_ln61_fu_198_p1;
wire    ap_block_pp0_stage10;
wire   [31:0] bitcast_ln67_fu_255_p1;
wire   [7:0] tmp_fu_258_p4;
wire   [22:0] trunc_ln67_fu_268_p1;
wire   [8:0] add_ln61_1_fu_297_p2;
wire   [0:0] or_ln67_fu_310_p2;
wire   [0:0] and_ln67_fu_314_p2;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage8;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage8_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 s_fu_52 = 32'd0;
#0 j_fu_56 = 9'd0;
#0 add_ln711_fu_60 = 17'd0;
#0 p_fu_64 = 17'd0;
#0 i_1_fu_68 = 9'd0;
#0 indvar_flatten8_fu_72 = 17'd0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage10),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage10)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage10_subdone) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage8))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage8))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_fu_68 <= 9'd0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        i_1_fu_68 <= select_ln61_2_reg_471;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten8_fu_72 <= 17'd0;
    end else if (((icmp_ln61_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten8_fu_72 <= add_ln61_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_fu_56 <= 9'd0;
    end else if (((icmp_ln61_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        j_fu_56 <= add_ln64_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_fu_64 <= 17'd0;
    end else if (((icmp_ln61_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_fu_64 <= select_ln61_3_fu_191_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_fu_52 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        s_fu_52 <= s_3_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_reg_412 <= B_q0;
        a_reg_412_pp0_iter1_reg <= a_reg_412;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        add1_reg_440 <= grp_fu_170_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln61_reg_383 <= add_ln61_fu_162_p2;
        icmp_ln61_reg_379 <= icmp_ln61_fu_156_p2;
        icmp_ln61_reg_379_pp0_iter1_reg <= icmp_ln61_reg_379;
        icmp_ln61_reg_379_pp0_iter2_reg <= icmp_ln61_reg_379_pp0_iter1_reg;
        icmp_ln64_reg_388 <= icmp_ln64_fu_171_p2;
        icmp_ln64_reg_388_pp0_iter1_reg <= icmp_ln64_reg_388;
        icmp_ln64_reg_388_pp0_iter2_reg <= icmp_ln64_reg_388_pp0_iter1_reg;
        icmp_ln64_reg_388_pp0_iter3_reg <= icmp_ln64_reg_388_pp0_iter2_reg;
        icmp_ln67_1_reg_450 <= icmp_ln67_1_fu_278_p2;
        icmp_ln67_1_reg_450_pp0_iter3_reg <= icmp_ln67_1_reg_450;
        icmp_ln67_reg_445 <= icmp_ln67_fu_272_p2;
        icmp_ln67_reg_445_pp0_iter3_reg <= icmp_ln67_reg_445;
        select_ln61_reg_395 <= select_ln61_fu_177_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln66_reg_407 <= add_ln66_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln61_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln711_fu_60 <= add_ln71_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        icmp_ln64_1_reg_431 <= icmp_ln64_1_fu_244_p2;
        icmp_ln64_1_reg_431_pp0_iter1_reg <= icmp_ln64_1_reg_431;
        icmp_ln64_1_reg_431_pp0_iter2_reg <= icmp_ln64_1_reg_431_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul2_reg_435 <= grp_fu_174_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul3_reg_466 <= grp_fu_174_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        s_1_reg_477 <= grp_fu_170_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        s_3_reg_482 <= s_3_fu_319_p3;
        select_ln61_1_reg_460 <= select_ln61_1_fu_287_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        select_ln61_2_reg_471 <= select_ln61_2_fu_303_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_1_reg_455 <= grp_fu_178_p_dout0;
        tmp_1_reg_455_pp0_iter3_reg <= tmp_1_reg_455;
        wt_reg_425 <= w_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_379 == 1'd1) & (1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln61_reg_379_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage8 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten8_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten8_load = indvar_flatten8_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 9'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        ap_sig_allocacmp_s_load = s_3_fu_319_p3;
    end else begin
        ap_sig_allocacmp_s_load = s_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_115_p0 = select_ln61_1_reg_460;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_115_p0 = mul2_reg_435;
    end else begin
        grp_fu_115_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_115_p1 = mul3_reg_466;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_115_p1 = wt_reg_425;
    end else begin
        grp_fu_115_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_119_p0 = add1_reg_440;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_119_p0 = a_reg_412;
    end else begin
        grp_fu_119_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_119_p1 = a_reg_412_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_119_p1 = wt_reg_425;
    end else begin
        grp_fu_119_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        sum_s_ce0 = 1'b1;
    end else begin
        sum_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln64_1_reg_431_pp0_iter2_reg == 1'd1))) begin
        sum_s_we0 = 1'b1;
    end else begin
        sum_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage8))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = zext_ln64_fu_202_p1;

assign add_ln61_1_fu_297_p2 = (i_1_fu_68 + 9'd1);

assign add_ln61_fu_162_p2 = (ap_sig_allocacmp_indvar_flatten8_load + 17'd1);

assign add_ln64_fu_239_p2 = (select_ln61_reg_395 + 9'd1);

assign add_ln66_fu_209_p2 = (zext_ln64_1_fu_206_p1 + trunc_ln61_fu_198_p1);

assign add_ln71_fu_215_p2 = (select_ln61_3_fu_191_p3 + 17'd256);

assign and_ln67_fu_314_p2 = (tmp_1_reg_455_pp0_iter3_reg & or_ln67_fu_310_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage10;

assign bitcast_ln67_fu_255_p1 = a_reg_412_pp0_iter1_reg;

assign grp_fu_170_p_ce = 1'b1;

assign grp_fu_170_p_din0 = grp_fu_115_p0;

assign grp_fu_170_p_din1 = grp_fu_115_p1;

assign grp_fu_170_p_opcode = 2'd0;

assign grp_fu_174_p_ce = 1'b1;

assign grp_fu_174_p_din0 = grp_fu_119_p0;

assign grp_fu_174_p_din1 = grp_fu_119_p1;

assign grp_fu_178_p_ce = 1'b1;

assign grp_fu_178_p_din0 = a_reg_412_pp0_iter1_reg;

assign grp_fu_178_p_din1 = 32'd0;

assign grp_fu_178_p_opcode = 5'd2;

assign icmp_ln61_fu_156_p2 = ((ap_sig_allocacmp_indvar_flatten8_load == 17'd65536) ? 1'b1 : 1'b0);

assign icmp_ln64_1_fu_244_p2 = ((add_ln64_fu_239_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_171_p2 = ((ap_sig_allocacmp_j_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln67_1_fu_278_p2 = ((trunc_ln67_fu_268_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_272_p2 = ((tmp_fu_258_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln67_fu_310_p2 = (icmp_ln67_reg_445_pp0_iter3_reg | icmp_ln67_1_reg_450_pp0_iter3_reg);

assign s_3_fu_319_p3 = ((and_ln67_fu_314_p2[0:0] == 1'b1) ? s_1_reg_477 : select_ln61_1_reg_460);

assign select_ln61_1_fu_287_p3 = ((icmp_ln64_reg_388_pp0_iter2_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_s_load);

assign select_ln61_2_fu_303_p3 = ((icmp_ln64_reg_388_pp0_iter3_reg[0:0] == 1'b1) ? add_ln61_1_fu_297_p2 : i_1_fu_68);

assign select_ln61_3_fu_191_p3 = ((icmp_ln64_reg_388[0:0] == 1'b1) ? add_ln711_fu_60 : p_fu_64);

assign select_ln61_fu_177_p3 = ((icmp_ln64_fu_171_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_j_load);

assign sum_s_address0 = zext_ln61_fu_334_p1;

assign sum_s_d0 = s_3_reg_482;

assign tmp_fu_258_p4 = {{bitcast_ln67_fu_255_p1[30:23]}};

assign trunc_ln61_fu_198_p1 = select_ln61_3_fu_191_p3[15:0];

assign trunc_ln67_fu_268_p1 = bitcast_ln67_fu_255_p1[22:0];

assign w_address0 = zext_ln66_fu_235_p1;

assign zext_ln61_fu_334_p1 = select_ln61_2_reg_471;

assign zext_ln64_1_fu_206_p1 = select_ln61_reg_395;

assign zext_ln64_fu_202_p1 = select_ln61_reg_395;

assign zext_ln66_fu_235_p1 = add_ln66_reg_407;

endmodule //main_main_Pipeline_loop_0_loop_1
