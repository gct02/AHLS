// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_53_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_address0,
        w_ce0,
        w_we0,
        w_d0,
        sum_address0,
        sum_ce0,
        sum_we0,
        sum_d0,
        sum_s_address0,
        sum_s_ce0,
        sum_s_we0,
        sum_s_d0,
        A_address0,
        A_ce0,
        A_we0,
        A_d0,
        B_address0,
        B_ce0,
        B_we0,
        B_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] w_address0;
output   w_ce0;
output   w_we0;
output  [31:0] w_d0;
output  [7:0] sum_address0;
output   sum_ce0;
output   sum_we0;
output  [31:0] sum_d0;
output  [7:0] sum_s_address0;
output   sum_s_ce0;
output   sum_s_we0;
output  [31:0] sum_s_d0;
output  [7:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;
output  [7:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;

reg ap_idle;
reg w_ce0;
reg w_we0;
reg sum_ce0;
reg sum_we0;
reg sum_s_ce0;
reg sum_s_we0;
reg A_ce0;
reg A_we0;
reg B_ce0;
reg B_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln50_fu_165_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] first_iter_0_reg_134;
reg   [0:0] icmp_ln50_reg_305;
wire    ap_block_pp0_stage1_11001;
wire   [16:0] add_ln50_fu_171_p2;
reg   [16:0] add_ln50_reg_309;
wire   [0:0] or_ln50_fu_189_p2;
reg   [0:0] or_ln50_reg_314;
wire   [8:0] select_ln50_fu_195_p3;
reg   [8:0] select_ln50_reg_318;
wire   [8:0] select_ln50_1_fu_209_p3;
reg   [8:0] select_ln50_1_reg_324;
wire   [31:0] select_ln51_fu_221_p3;
reg   [31:0] select_ln51_reg_331;
wire   [15:0] add_ln54_fu_250_p2;
reg   [15:0] add_ln54_reg_337;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln53_1_fu_261_p2;
reg   [0:0] icmp_ln53_1_reg_342;
reg   [7:0] sum_addr_reg_346;
reg   [7:0] sum_addr_8_reg_351;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_139_p4;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln50_fu_229_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln54_fu_280_p1;
reg   [8:0] j_fu_56;
wire   [8:0] add_ln53_fu_256_p2;
reg   [8:0] i_fu_60;
reg   [16:0] indvar_flatten_fu_64;
wire   [0:0] icmp_ln53_fu_183_p2;
wire   [8:0] add_ln50_1_fu_203_p2;
wire   [0:0] empty_9_fu_217_p1;
wire   [7:0] empty_fu_236_p1;
wire   [15:0] zext_ln53_fu_247_p1;
wire   [15:0] tmp_8_fu_239_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_56 = 9'd0;
#0 i_fu_60 = 9'd0;
#0 indvar_flatten_fu_64 = 17'd0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln50_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        first_iter_0_reg_134 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        first_iter_0_reg_134 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 9'd0;
        end else if (((icmp_ln50_reg_305 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_60 <= select_ln50_1_reg_324;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 17'd0;
        end else if (((icmp_ln50_reg_305 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_64 <= add_ln50_reg_309;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 9'd0;
        end else if (((icmp_ln50_reg_305 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_56 <= add_ln53_fu_256_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln50_reg_309 <= add_ln50_fu_171_p2;
        icmp_ln50_reg_305 <= icmp_ln50_fu_165_p2;
        or_ln50_reg_314 <= or_ln50_fu_189_p2;
        select_ln50_1_reg_324 <= select_ln50_1_fu_209_p3;
        select_ln50_reg_318 <= select_ln50_fu_195_p3;
        select_ln51_reg_331[31] <= select_ln51_fu_221_p3[31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln54_reg_337 <= add_ln54_fu_250_p2;
        icmp_ln53_1_reg_342 <= icmp_ln53_1_fu_261_p2;
        sum_addr_8_reg_351 <= zext_ln50_fu_229_p1;
        sum_addr_reg_346 <= zext_ln50_fu_229_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln50_reg_314 == 1'd1) & (icmp_ln50_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln50_reg_314 == 1'd1) & (icmp_ln50_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_fu_165_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln50_reg_305 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_first_iter_0_phi_fu_139_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_139_p4 = first_iter_0_reg_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_ce0 = 1'b1;
    end else begin
        sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_s_ce0 = 1'b1;
    end else begin
        sum_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln53_1_reg_342 == 1'd1))) begin
        sum_s_we0 = 1'b1;
    end else begin
        sum_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln53_1_reg_342 == 1'd1))) begin
        sum_we0 = 1'b1;
    end else begin
        sum_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_we0 = 1'b1;
    end else begin
        w_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln50_fu_229_p1;

assign A_d0 = select_ln51_reg_331;

assign B_address0 = zext_ln50_fu_229_p1;

assign B_d0 = select_ln51_reg_331;

assign add_ln50_1_fu_203_p2 = (i_fu_60 + 9'd1);

assign add_ln50_fu_171_p2 = (indvar_flatten_fu_64 + 17'd1);

assign add_ln53_fu_256_p2 = (select_ln50_reg_318 + 9'd1);

assign add_ln54_fu_250_p2 = (zext_ln53_fu_247_p1 + tmp_8_fu_239_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_9_fu_217_p1 = select_ln50_1_fu_209_p3[0:0];

assign empty_fu_236_p1 = select_ln50_1_reg_324[7:0];

assign icmp_ln50_fu_165_p2 = ((indvar_flatten_fu_64 == 17'd65536) ? 1'b1 : 1'b0);

assign icmp_ln53_1_fu_261_p2 = ((add_ln53_fu_256_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_183_p2 = ((j_fu_56 == 9'd256) ? 1'b1 : 1'b0);

assign or_ln50_fu_189_p2 = (icmp_ln53_fu_183_p2 | ap_phi_mux_first_iter_0_phi_fu_139_p4);

assign select_ln50_1_fu_209_p3 = ((icmp_ln53_fu_183_p2[0:0] == 1'b1) ? add_ln50_1_fu_203_p2 : i_fu_60);

assign select_ln50_fu_195_p3 = ((icmp_ln53_fu_183_p2[0:0] == 1'b1) ? 9'd0 : j_fu_56);

assign select_ln51_fu_221_p3 = ((empty_9_fu_217_p1[0:0] == 1'b1) ? 32'd1065353216 : 32'd3212836864);

assign sum_address0 = sum_addr_reg_346;

assign sum_d0 = 32'd0;

assign sum_s_address0 = sum_addr_8_reg_351;

assign sum_s_d0 = 32'd0;

assign tmp_8_fu_239_p3 = {{empty_fu_236_p1}, {8'd0}};

assign w_address0 = zext_ln54_fu_280_p1;

assign w_d0 = 32'd0;

assign zext_ln50_fu_229_p1 = select_ln50_1_reg_324;

assign zext_ln53_fu_247_p1 = select_ln50_reg_318;

assign zext_ln54_fu_280_p1 = add_ln54_reg_337;

always @ (posedge ap_clk) begin
    select_ln51_reg_331[30:0] <= 31'b0111111100000000000000000000000;
end

endmodule //main_main_Pipeline_VITIS_LOOP_50_1_VITIS_LOOP_53_2
