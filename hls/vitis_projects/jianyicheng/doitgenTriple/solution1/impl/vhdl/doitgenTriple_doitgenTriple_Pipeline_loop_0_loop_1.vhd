-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity doitgenTriple_doitgenTriple_Pipeline_loop_0_loop_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    sum_ce0 : OUT STD_LOGIC;
    sum_we0 : OUT STD_LOGIC;
    sum_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_80_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_80_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_80_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_80_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_80_p_ce : OUT STD_LOGIC;
    grp_fu_84_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_84_p_ce : OUT STD_LOGIC );
end;


architecture behav of doitgenTriple_doitgenTriple_Pipeline_loop_0_loop_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv17_100 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln19_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln19_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_397_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_397_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_166_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln19_reg_401 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln22_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_406_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_406_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_406_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_181_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln19_reg_413 : STD_LOGIC_VECTOR (8 downto 0);
    signal A_load_reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln25_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_434 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_434_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_434_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_434_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_439_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_1_reg_439_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal w_load_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal a_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal a_reg_449_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal wt_fu_275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal wt_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln22_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal icmp_ln22_1_reg_462_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_462_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal b_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_476_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_1_fu_298_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln19_1_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_1_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal zext_ln22_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln24_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln19_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal s_fu_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_2_fu_335_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_s_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_60 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln22_fu_279_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln321_fu_64 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln32_fu_251_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_fu_68 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal select_ln19_3_fu_200_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_72 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln19_2_fu_314_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_76 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_123_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_1_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln19_fu_207_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_fu_214_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln25_fu_235_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal add_ln19_1_fu_308_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln25_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage3 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component doitgenTriple_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doitgenTriple_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component doitgenTriple_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component doitgenTriple_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U3 : component doitgenTriple_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_reg_449_pp0_iter1_reg,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_127_p2);

    flow_control_loop_pipe_sequential_init_U : component doitgenTriple_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    i_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_72 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                i_fu_72 <= select_ln19_2_fu_314_p3;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_fu_76 <= ap_const_lv17_0;
            elsif (((icmp_ln19_reg_397 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_fu_76 <= add_ln19_reg_401;
            end if; 
        end if;
    end process;

    j_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_fu_60 <= ap_const_lv9_0;
            elsif (((icmp_ln19_reg_397 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                j_fu_60 <= add_ln22_fu_279_p2;
            end if; 
        end if;
    end process;

    p_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_fu_68 <= ap_const_lv17_0;
            elsif (((icmp_ln19_reg_397 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                p_fu_68 <= select_ln19_3_fu_200_p3;
            end if; 
        end if;
    end process;

    s_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                s_fu_56 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                s_fu_56 <= s_2_fu_335_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                A_load_reg_424 <= A_q0;
                icmp_ln25_1_reg_439 <= icmp_ln25_1_fu_245_p2;
                icmp_ln25_1_reg_439_pp0_iter1_reg <= icmp_ln25_1_reg_439;
                icmp_ln25_1_reg_439_pp0_iter2_reg <= icmp_ln25_1_reg_439_pp0_iter1_reg;
                icmp_ln25_1_reg_439_pp0_iter3_reg <= icmp_ln25_1_reg_439_pp0_iter2_reg;
                icmp_ln25_reg_434 <= icmp_ln25_fu_239_p2;
                icmp_ln25_reg_434_pp0_iter1_reg <= icmp_ln25_reg_434;
                icmp_ln25_reg_434_pp0_iter2_reg <= icmp_ln25_reg_434_pp0_iter1_reg;
                icmp_ln25_reg_434_pp0_iter3_reg <= icmp_ln25_reg_434_pp0_iter2_reg;
                tmp_1_reg_476 <= grp_fu_127_p2;
                tmp_1_reg_476_pp0_iter3_reg <= tmp_1_reg_476;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                a_reg_449 <= a_fu_271_p1;
                a_reg_449_pp0_iter1_reg <= a_reg_449;
                select_ln19_1_reg_481 <= select_ln19_1_fu_298_p3;
                wt_reg_456 <= wt_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln19_reg_401 <= add_ln19_fu_166_p2;
                icmp_ln19_reg_397 <= icmp_ln19_fu_160_p2;
                icmp_ln19_reg_397_pp0_iter1_reg <= icmp_ln19_reg_397;
                icmp_ln19_reg_397_pp0_iter2_reg <= icmp_ln19_reg_397_pp0_iter1_reg;
                icmp_ln22_reg_406 <= icmp_ln22_fu_175_p2;
                icmp_ln22_reg_406_pp0_iter1_reg <= icmp_ln22_reg_406;
                icmp_ln22_reg_406_pp0_iter2_reg <= icmp_ln22_reg_406_pp0_iter1_reg;
                icmp_ln22_reg_406_pp0_iter3_reg <= icmp_ln22_reg_406_pp0_iter2_reg;
                select_ln19_reg_413 <= select_ln19_fu_181_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_reg_397 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln321_fu_64 <= add_ln32_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                b_reg_466 <= grp_fu_84_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                c_reg_471 <= grp_fu_80_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                d_reg_487 <= grp_fu_84_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                icmp_ln22_1_reg_462 <= icmp_ln22_1_fu_284_p2;
                icmp_ln22_1_reg_462_pp0_iter1_reg <= icmp_ln22_1_reg_462;
                icmp_ln22_1_reg_462_pp0_iter2_reg <= icmp_ln22_1_reg_462_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                s_1_reg_492 <= grp_fu_80_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                w_load_reg_444 <= w_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_block_pp0_stage3_subdone, ap_condition_exit_pp0_iter2_stage3, ap_idle_pp0_0to1, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_address0 <= zext_ln22_fu_189_p1(8 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_271_p1 <= A_load_reg_424;
    add_ln19_1_fu_308_p2 <= std_logic_vector(unsigned(i_fu_72) + unsigned(ap_const_lv9_1));
    add_ln19_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv17_1));
    add_ln22_fu_279_p2 <= std_logic_vector(unsigned(select_ln19_reg_413) + unsigned(ap_const_lv9_1));
    add_ln24_fu_214_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_211_p1) + unsigned(trunc_ln19_fu_207_p1));
    add_ln32_fu_251_p2 <= std_logic_vector(unsigned(select_ln19_3_fu_200_p3) + unsigned(ap_const_lv17_100));
    and_ln25_fu_330_p2 <= (tmp_1_reg_476_pp0_iter3_reg and or_ln25_fu_326_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln19_reg_397)
    begin
        if (((icmp_ln19_reg_397 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage3_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln19_reg_397_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((icmp_ln19_reg_397_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter2_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_60)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_s_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, s_fu_56, s_2_fu_335_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_sig_allocacmp_s_load <= s_2_fu_335_p3;
        else 
            ap_sig_allocacmp_s_load <= s_fu_56;
        end if; 
    end process;


    grp_fu_119_p0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, b_reg_466, select_ln19_1_reg_481, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_119_p0 <= select_ln19_1_reg_481;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_119_p0 <= b_reg_466;
        else 
            grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_119_p1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, wt_reg_456, d_reg_487, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_119_p1 <= d_reg_487;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_119_p1 <= wt_reg_456;
        else 
            grp_fu_119_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, a_fu_271_p1, ap_CS_fsm_pp0_stage3, c_reg_471, ap_block_pp0_stage0, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_123_p0 <= c_reg_471;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_123_p0 <= a_fu_271_p1;
        else 
            grp_fu_123_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_123_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, a_reg_449_pp0_iter1_reg, wt_fu_275_p1, ap_block_pp0_stage0, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_123_p1 <= a_reg_449_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_123_p1 <= wt_fu_275_p1;
        else 
            grp_fu_123_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_80_p_ce <= ap_const_logic_1;
    grp_fu_80_p_din0 <= grp_fu_119_p0;
    grp_fu_80_p_din1 <= grp_fu_119_p1;
    grp_fu_80_p_opcode <= ap_const_lv2_0;
    grp_fu_84_p_ce <= ap_const_logic_1;
    grp_fu_84_p_din0 <= grp_fu_123_p0;
    grp_fu_84_p_din1 <= grp_fu_123_p1;
    icmp_ln19_fu_160_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv17_10000) else "0";
    icmp_ln22_1_fu_284_p2 <= "1" when (add_ln22_fu_279_p2 = ap_const_lv9_100) else "0";
    icmp_ln22_fu_175_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv9_100) else "0";
    icmp_ln25_1_fu_245_p2 <= "1" when (trunc_ln25_fu_235_p1 = ap_const_lv23_0) else "0";
    icmp_ln25_fu_239_p2 <= "0" when (tmp_fu_225_p4 = ap_const_lv8_FF) else "1";
    or_ln25_fu_326_p2 <= (icmp_ln25_reg_434_pp0_iter3_reg or icmp_ln25_1_reg_439_pp0_iter3_reg);
    s_2_fu_335_p3 <= 
        s_1_reg_492 when (and_ln25_fu_330_p2(0) = '1') else 
        select_ln19_1_reg_481;
    select_ln19_1_fu_298_p3 <= 
        ap_const_lv32_0 when (icmp_ln22_reg_406_pp0_iter2_reg(0) = '1') else 
        ap_sig_allocacmp_s_load;
    select_ln19_2_fu_314_p3 <= 
        add_ln19_1_fu_308_p2 when (icmp_ln22_reg_406_pp0_iter3_reg(0) = '1') else 
        i_fu_72;
    select_ln19_3_fu_200_p3 <= 
        add_ln321_fu_64 when (icmp_ln22_reg_406(0) = '1') else 
        p_fu_68;
    select_ln19_fu_181_p3 <= 
        ap_const_lv9_0 when (icmp_ln22_fu_175_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sum_address0 <= zext_ln19_fu_321_p1(8 - 1 downto 0);

    sum_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sum_ce0 <= ap_const_logic_1;
        else 
            sum_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_d0 <= s_2_fu_335_p3;

    sum_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln22_1_reg_462_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln22_1_reg_462_pp0_iter2_reg = ap_const_lv1_1))) then 
            sum_we0 <= ap_const_logic_1;
        else 
            sum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_225_p4 <= A_q0(30 downto 23);
    trunc_ln19_fu_207_p1 <= select_ln19_3_fu_200_p3(16 - 1 downto 0);
    trunc_ln25_fu_235_p1 <= A_q0(23 - 1 downto 0);
    w_address0 <= zext_ln24_fu_220_p1(16 - 1 downto 0);

    w_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    wt_fu_275_p1 <= w_load_reg_444;
    zext_ln19_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_2_fu_314_p3),64));
    zext_ln22_1_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_reg_413),16));
    zext_ln22_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_181_p3),64));
    zext_ln24_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_214_p2),64));
end behav;
