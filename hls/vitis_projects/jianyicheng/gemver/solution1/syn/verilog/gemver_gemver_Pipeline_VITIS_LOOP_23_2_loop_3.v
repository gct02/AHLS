// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module gemver_gemver_Pipeline_VITIS_LOOP_23_2_loop_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        y_address0,
        y_ce0,
        y_q0,
        z_address0,
        z_ce0,
        z_q0,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_q0,
        grp_fu_76_p_din0,
        grp_fu_76_p_din1,
        grp_fu_76_p_opcode,
        grp_fu_76_p_dout0,
        grp_fu_76_p_ce,
        grp_fu_80_p_din0,
        grp_fu_80_p_din1,
        grp_fu_80_p_dout0,
        grp_fu_80_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [7:0] y_address0;
output   y_ce0;
input  [31:0] y_q0;
output  [7:0] z_address0;
output   z_ce0;
input  [31:0] z_q0;
output  [7:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
input  [31:0] x_q0;
output  [31:0] grp_fu_76_p_din0;
output  [31:0] grp_fu_76_p_din1;
output  [1:0] grp_fu_76_p_opcode;
input  [31:0] grp_fu_76_p_dout0;
output   grp_fu_76_p_ce;
output  [31:0] grp_fu_80_p_din0;
output  [31:0] grp_fu_80_p_din1;
input  [31:0] grp_fu_80_p_dout0;
output   grp_fu_80_p_ce;

reg ap_idle;
reg A_ce0;
reg y_ce0;
reg z_ce0;
reg[7:0] x_address0;
reg x_ce0;
reg x_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5_subdone;
reg   [0:0] icmp_ln23_reg_357;
reg    ap_condition_exit_pp0_iter0_stage5;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] first_iter_1_reg_124;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln23_fu_169_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln23_reg_357_pp0_iter1_reg;
reg   [0:0] icmp_ln23_reg_357_pp0_iter2_reg;
wire   [16:0] add_ln23_fu_175_p2;
reg   [16:0] add_ln23_reg_361;
reg   [8:0] i_load_reg_366;
wire   [0:0] icmp_ln27_fu_187_p2;
reg   [0:0] icmp_ln27_reg_371;
wire   [0:0] or_ln23_fu_193_p2;
reg   [0:0] or_ln23_reg_377;
reg   [0:0] or_ln23_reg_377_pp0_iter1_reg;
wire   [8:0] select_ln23_1_fu_199_p3;
reg   [8:0] select_ln23_1_reg_381;
wire   [8:0] add_ln23_1_fu_207_p2;
reg   [8:0] add_ln23_1_reg_386;
wire   [16:0] select_ln23_fu_221_p3;
reg   [16:0] select_ln23_reg_396;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [8:0] select_ln23_2_fu_228_p3;
reg   [8:0] select_ln23_2_reg_401;
reg   [31:0] y_load_reg_412;
reg   [31:0] A_load_reg_417;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] bitcast_ln28_fu_252_p1;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4_11001;
wire   [0:0] icmp_ln27_1_fu_261_p2;
reg   [0:0] icmp_ln27_1_reg_427;
reg   [0:0] icmp_ln27_1_reg_427_pp0_iter2_reg;
reg   [0:0] icmp_ln27_1_reg_427_pp0_iter3_reg;
wire   [63:0] zext_ln23_fu_280_p1;
reg   [63:0] zext_ln23_reg_431;
reg   [7:0] x_addr_reg_436;
reg   [7:0] x_addr_reg_436_pp0_iter2_reg;
reg   [7:0] x_addr_reg_436_pp0_iter3_reg;
reg   [31:0] mul2_reg_441;
reg   [31:0] x_load_reg_446;
wire   [31:0] bitcast_ln28_1_fu_294_p1;
reg   [31:0] mul3_reg_456;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] z_load_reg_471;
reg   [31:0] tmp_3_reg_476;
wire   [31:0] bitcast_ln31_fu_310_p1;
wire   [31:0] bitcast_ln31_1_fu_318_p1;
reg   [31:0] bitcast_ln31_1_reg_487;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage4_subdone;
reg   [0:0] ap_phi_mux_first_iter_1_phi_fu_129_p4;
wire    ap_block_pp0_stage1;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln27_fu_213_p1;
wire   [63:0] zext_ln28_fu_247_p1;
wire    ap_block_pp0_stage2;
reg   [8:0] j_fu_52;
wire   [8:0] add_ln27_fu_256_p2;
reg   [16:0] jj_fu_56;
wire   [16:0] add_ln29_fu_284_p2;
reg   [8:0] i_fu_60;
reg   [16:0] indvar_flatten10_fu_64;
reg   [31:0] tmp_2_fu_68;
wire   [31:0] tmp_fu_298_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_137_p0;
reg   [31:0] grp_fu_137_p1;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_141_p0;
reg   [31:0] grp_fu_141_p1;
wire   [15:0] trunc_ln27_fu_237_p1;
wire   [15:0] zext_ln23_1_fu_233_p1;
wire   [15:0] add_ln28_fu_241_p2;
wire    ap_block_pp0_stage3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage4;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage5_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_52 = 9'd0;
#0 jj_fu_56 = 17'd0;
#0 i_fu_60 = 9'd0;
#0 indvar_flatten10_fu_64 = 17'd0;
#0 tmp_2_fu_68 = 32'd0;
#0 ap_done_reg = 1'b0;
end

gemver_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage5),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage4))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage4))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_1_reg_124 <= 1'd1;
    end else if (((icmp_ln23_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        first_iter_1_reg_124 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_60 <= 9'd0;
        end else if (((icmp_ln23_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_60 <= select_ln23_2_reg_401;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten10_fu_64 <= 17'd0;
        end else if (((icmp_ln23_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten10_fu_64 <= add_ln23_reg_361;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_52 <= 9'd0;
        end else if (((icmp_ln23_reg_357 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_52 <= add_ln27_fu_256_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        jj_fu_56 <= 17'd0;
    end else if (((icmp_ln23_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        jj_fu_56 <= add_ln29_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (or_ln23_reg_377_pp0_iter1_reg == 1'd1))) begin
            tmp_2_fu_68 <= tmp_fu_298_p1;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln23_reg_357_pp0_iter2_reg == 1'd0))) begin
            tmp_2_fu_68 <= tmp_3_reg_476;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        A_load_reg_417 <= A_q0;
        bitcast_ln31_1_reg_487 <= bitcast_ln31_1_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln23_1_reg_386 <= add_ln23_1_fu_207_p2;
        add_ln23_reg_361 <= add_ln23_fu_175_p2;
        i_load_reg_366 <= i_fu_60;
        icmp_ln23_reg_357 <= icmp_ln23_fu_169_p2;
        icmp_ln23_reg_357_pp0_iter1_reg <= icmp_ln23_reg_357;
        icmp_ln23_reg_357_pp0_iter2_reg <= icmp_ln23_reg_357_pp0_iter1_reg;
        icmp_ln27_reg_371 <= icmp_ln27_fu_187_p2;
        or_ln23_reg_377 <= or_ln23_fu_193_p2;
        or_ln23_reg_377_pp0_iter1_reg <= or_ln23_reg_377;
        select_ln23_1_reg_381 <= select_ln23_1_fu_199_p3;
        x_addr_reg_436 <= zext_ln23_fu_280_p1;
        x_addr_reg_436_pp0_iter2_reg <= x_addr_reg_436;
        x_addr_reg_436_pp0_iter3_reg <= x_addr_reg_436_pp0_iter2_reg;
        zext_ln23_reg_431[8 : 0] <= zext_ln23_fu_280_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln27_1_reg_427 <= icmp_ln27_1_fu_261_p2;
        icmp_ln27_1_reg_427_pp0_iter2_reg <= icmp_ln27_1_reg_427;
        icmp_ln27_1_reg_427_pp0_iter3_reg <= icmp_ln27_1_reg_427_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul2_reg_441 <= grp_fu_80_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul3_reg_456 <= grp_fu_80_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln23_2_reg_401 <= select_ln23_2_fu_228_p3;
        select_ln23_reg_396 <= select_ln23_fu_221_p3;
        y_load_reg_412 <= y_q0;
        z_load_reg_471 <= z_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_3_reg_476 <= grp_fu_76_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        x_load_reg_446 <= x_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_357 == 1'd1) & (1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln23_reg_357_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_357 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_first_iter_1_phi_fu_129_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_1_phi_fu_129_p4 = first_iter_1_reg_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_137_p0 = tmp_3_reg_476;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_137_p0 = tmp_2_fu_68;
        end else begin
            grp_fu_137_p0 = 'bx;
        end
    end else begin
        grp_fu_137_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_137_p1 = bitcast_ln31_fu_310_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_137_p1 = mul3_reg_456;
        end else begin
            grp_fu_137_p1 = 'bx;
        end
    end else begin
        grp_fu_137_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_141_p0 = mul2_reg_441;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_141_p0 = bitcast_ln28_fu_252_p1;
    end else begin
        grp_fu_141_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_141_p1 = bitcast_ln28_1_fu_294_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_141_p1 = 32'd1060152279;
    end else begin
        grp_fu_141_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        x_address0 = x_addr_reg_436_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_address0 = zext_ln23_fu_280_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln27_1_reg_427_pp0_iter3_reg == 1'd1))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_ce0 = 1'b1;
    end else begin
        z_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln28_fu_247_p1;

assign add_ln23_1_fu_207_p2 = (i_fu_60 + 9'd1);

assign add_ln23_fu_175_p2 = (indvar_flatten10_fu_64 + 17'd1);

assign add_ln27_fu_256_p2 = (select_ln23_1_reg_381 + 9'd1);

assign add_ln28_fu_241_p2 = (trunc_ln27_fu_237_p1 + zext_ln23_1_fu_233_p1);

assign add_ln29_fu_284_p2 = (select_ln23_reg_396 + 17'd256);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage5;

assign bitcast_ln28_1_fu_294_p1 = y_load_reg_412;

assign bitcast_ln28_fu_252_p1 = A_load_reg_417;

assign bitcast_ln31_1_fu_318_p1 = grp_fu_76_p_dout0;

assign bitcast_ln31_fu_310_p1 = z_load_reg_471;

assign grp_fu_76_p_ce = 1'b1;

assign grp_fu_76_p_din0 = grp_fu_137_p0;

assign grp_fu_76_p_din1 = grp_fu_137_p1;

assign grp_fu_76_p_opcode = 2'd0;

assign grp_fu_80_p_ce = 1'b1;

assign grp_fu_80_p_din0 = grp_fu_141_p0;

assign grp_fu_80_p_din1 = grp_fu_141_p1;

assign icmp_ln23_fu_169_p2 = ((indvar_flatten10_fu_64 == 17'd65536) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_261_p2 = ((add_ln27_fu_256_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_187_p2 = ((j_fu_52 == 9'd256) ? 1'b1 : 1'b0);

assign or_ln23_fu_193_p2 = (icmp_ln27_fu_187_p2 | ap_phi_mux_first_iter_1_phi_fu_129_p4);

assign select_ln23_1_fu_199_p3 = ((icmp_ln27_fu_187_p2[0:0] == 1'b1) ? 9'd0 : j_fu_52);

assign select_ln23_2_fu_228_p3 = ((icmp_ln27_reg_371[0:0] == 1'b1) ? add_ln23_1_reg_386 : i_load_reg_366);

assign select_ln23_fu_221_p3 = ((icmp_ln27_reg_371[0:0] == 1'b1) ? 17'd0 : jj_fu_56);

assign tmp_fu_298_p1 = x_load_reg_446;

assign trunc_ln27_fu_237_p1 = select_ln23_fu_221_p3[15:0];

assign x_d0 = bitcast_ln31_1_reg_487;

assign y_address0 = zext_ln27_fu_213_p1;

assign z_address0 = zext_ln23_reg_431;

assign zext_ln23_1_fu_233_p1 = select_ln23_2_fu_228_p3;

assign zext_ln23_fu_280_p1 = select_ln23_2_reg_401;

assign zext_ln27_fu_213_p1 = select_ln23_1_fu_199_p3;

assign zext_ln28_fu_247_p1 = add_ln28_fu_241_p2;

always @ (posedge ap_clk) begin
    zext_ln23_reg_431[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //gemver_gemver_Pipeline_VITIS_LOOP_23_2_loop_3
