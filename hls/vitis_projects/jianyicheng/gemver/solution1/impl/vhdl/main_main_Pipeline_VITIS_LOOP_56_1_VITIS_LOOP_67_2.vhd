-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_56_1_VITIS_LOOP_67_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_s_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_s_ce0 : OUT STD_LOGIC;
    A_s_we0 : OUT STD_LOGIC;
    A_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    u1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    u1_ce0 : OUT STD_LOGIC;
    u1_we0 : OUT STD_LOGIC;
    u1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v1_ce0 : OUT STD_LOGIC;
    v1_we0 : OUT STD_LOGIC;
    v1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    u2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    u2_ce0 : OUT STD_LOGIC;
    u2_we0 : OUT STD_LOGIC;
    u2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    v2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    v2_ce0 : OUT STD_LOGIC;
    v2_we0 : OUT STD_LOGIC;
    v2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_we0 : OUT STD_LOGIC;
    w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    w_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    w_s_ce0 : OUT STD_LOGIC;
    w_s_we0 : OUT STD_LOGIC;
    w_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_s_ce0 : OUT STD_LOGIC;
    x_s_we0 : OUT STD_LOGIC;
    x_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    z_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    z_ce0 : OUT STD_LOGIC;
    z_we0 : OUT STD_LOGIC;
    z_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_56_1_VITIS_LOOP_67_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_3DCCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011001100110011001101";
    constant ap_const_lv32_3E4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111110010011001100110011001101";
    constant ap_const_lv17_10000 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln56_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal first_iter_0_reg_248 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln56_fu_285_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln56_reg_412 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln56_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_309_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln56_reg_421 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln56_1_fu_323_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln56_1_reg_427 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln68_fu_358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_reg_434 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_first_iter_0_phi_fu_253_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln56_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln68_fu_382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_1_fu_68 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln67_fu_364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal yy_fu_72 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal indvar_flatten_fu_76 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal icmp_ln67_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_1_fu_317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln67_fu_355_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_347_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
                first_iter_0_reg_248 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                first_iter_0_reg_248 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_76 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_76 <= add_ln56_reg_412;
                end if;
            end if; 
        end if;
    end process;

    x_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_1_fu_68 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
                    x_1_fu_68 <= add_ln67_fu_364_p2;
                end if;
            end if; 
        end if;
    end process;

    yy_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    yy_fu_72 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
                    yy_fu_72 <= select_ln56_1_reg_427;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln56_reg_412 <= add_ln56_fu_285_p2;
                icmp_ln56_reg_408 <= icmp_ln56_fu_279_p2;
                or_ln56_reg_417 <= or_ln56_fu_303_p2;
                select_ln56_1_reg_427 <= select_ln56_1_fu_323_p3;
                select_ln56_reg_421 <= select_ln56_fu_309_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln68_reg_434 <= add_ln68_fu_358_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    A_address0 <= zext_ln68_fu_382_p1(16 - 1 downto 0);

    A_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= ap_const_lv32_3E4CCCCD;
    A_s_address0 <= zext_ln68_fu_382_p1(16 - 1 downto 0);

    A_s_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            A_s_ce0 <= ap_const_logic_1;
        else 
            A_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_s_d0 <= ap_const_lv32_3E4CCCCD;

    A_s_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln56_reg_408, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            A_s_we0 <= ap_const_logic_1;
        else 
            A_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln56_reg_408, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln56_1_fu_317_p2 <= std_logic_vector(unsigned(yy_fu_72) + unsigned(ap_const_lv9_1));
    add_ln56_fu_285_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_76) + unsigned(ap_const_lv17_1));
    add_ln67_fu_364_p2 <= std_logic_vector(unsigned(select_ln56_reg_421) + unsigned(ap_const_lv9_1));
    add_ln68_fu_358_p2 <= std_logic_vector(unsigned(zext_ln67_fu_355_p1) + unsigned(tmp_s_fu_347_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln56_fu_279_p2)
    begin
        if (((icmp_ln56_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_first_iter_0_phi_fu_253_p4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, first_iter_0_reg_248, icmp_ln56_reg_408, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            ap_phi_mux_first_iter_0_phi_fu_253_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_253_p4 <= first_iter_0_reg_248;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_344_p1 <= select_ln56_1_reg_427(8 - 1 downto 0);
    icmp_ln56_fu_279_p2 <= "1" when (indvar_flatten_fu_76 = ap_const_lv17_10000) else "0";
    icmp_ln67_fu_297_p2 <= "1" when (x_1_fu_68 = ap_const_lv9_100) else "0";
    or_ln56_fu_303_p2 <= (icmp_ln67_fu_297_p2 or ap_phi_mux_first_iter_0_phi_fu_253_p4);
    select_ln56_1_fu_323_p3 <= 
        add_ln56_1_fu_317_p2 when (icmp_ln67_fu_297_p2(0) = '1') else 
        yy_fu_72;
    select_ln56_fu_309_p3 <= 
        ap_const_lv9_0 when (icmp_ln67_fu_297_p2(0) = '1') else 
        x_1_fu_68;
    tmp_s_fu_347_p3 <= (empty_fu_344_p1 & ap_const_lv8_0);
    u1_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    u1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            u1_ce0 <= ap_const_logic_1;
        else 
            u1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    u1_d0 <= ap_const_lv32_3DCCCCCD;

    u1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            u1_we0 <= ap_const_logic_1;
        else 
            u1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    u2_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    u2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            u2_ce0 <= ap_const_logic_1;
        else 
            u2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    u2_d0 <= ap_const_lv32_3DCCCCCD;

    u2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            u2_we0 <= ap_const_logic_1;
        else 
            u2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    v1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v1_ce0 <= ap_const_logic_1;
        else 
            v1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v1_d0 <= ap_const_lv32_3DCCCCCD;

    v1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            v1_we0 <= ap_const_logic_1;
        else 
            v1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    v2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            v2_ce0 <= ap_const_logic_1;
        else 
            v2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    v2_d0 <= ap_const_lv32_3DCCCCCD;

    v2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            v2_we0 <= ap_const_logic_1;
        else 
            v2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    w_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    w_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_d0 <= ap_const_lv32_3DCCCCCD;
    w_s_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    w_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_s_ce0 <= ap_const_logic_1;
        else 
            w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_s_d0 <= ap_const_lv32_3DCCCCCD;

    w_s_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            w_s_we0 <= ap_const_logic_1;
        else 
            w_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            w_we0 <= ap_const_logic_1;
        else 
            w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    x_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_d0 <= ap_const_lv32_3DCCCCCD;
    x_s_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    x_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_s_ce0 <= ap_const_logic_1;
        else 
            x_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_s_d0 <= ap_const_lv32_3DCCCCCD;

    x_s_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            x_s_we0 <= ap_const_logic_1;
        else 
            x_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    y_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y_d0 <= ap_const_lv32_3DCCCCCD;

    y_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    z_address0 <= zext_ln56_fu_331_p1(8 - 1 downto 0);

    z_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            z_ce0 <= ap_const_logic_1;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    z_d0 <= ap_const_lv32_3DCCCCCD;

    z_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln56_reg_408, or_ln56_reg_417, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (or_ln56_reg_417 = ap_const_lv1_1) and (icmp_ln56_reg_408 = ap_const_lv1_0))) then 
            z_we0 <= ap_const_logic_1;
        else 
            z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln56_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_1_reg_427),64));
    zext_ln67_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_reg_421),16));
    zext_ln68_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_reg_434),64));
end behav;
