-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_31_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    gold_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    gold_ce0 : OUT STD_LOGIC;
    gold_we0 : OUT STD_LOGIC;
    gold_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    addr_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_out_ce0 : OUT STD_LOGIC;
    addr_out_we0 : OUT STD_LOGIC;
    addr_out_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_in_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    addr_in_ce0 : OUT STD_LOGIC;
    addr_in_we0 : OUT STD_LOGIC;
    addr_in_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    grp_fu_102_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_102_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_102_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_102_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_102_p_ce : OUT STD_LOGIC;
    grp_fu_106_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_106_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_106_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_106_p_ce : OUT STD_LOGIC );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_31_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_ACE1 : STD_LOGIC_VECTOR (15 downto 0) := "1010110011100001";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_41DFFFFFFFC00000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000111011111111111111111111111111111110000000000000000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_64 : STD_LOGIC_VECTOR (9 downto 0) := "0001100100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_3FF3333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110011001100110011001100110011001100110011001100110011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln31_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_2_reg_327 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln31_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal lfsr_0_load_reg_339 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln31_1_fu_174_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_1_reg_344 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln31_1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_349 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_354_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln23_3_reg_360 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln23_2_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_2_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln31_reg_370_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter46_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter47_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter48_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_370_pp0_iter49_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_381 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_386 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_391 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln32_1_fu_300_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln32_1_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal phi_urem_fu_62 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln31_fu_257_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_66 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln31_fu_252_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lfsr_0_fu_70 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal select_ln32_fu_279_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_141_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln32_fu_186_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_fu_196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln_fu_268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to49 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component main_dadd_64ns_64ns_64_16_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_dmul_64ns_64ns_64_14_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_ddiv_64ns_64ns_64_59_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_uitodp_32ns_64_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    ddiv_64ns_64ns_64_59_no_dsp_1_U3 : component main_ddiv_64ns_64ns_64_59_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 59,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_381,
        din1 => ap_const_lv64_41DFFFFFFFC00000,
        ce => ap_const_logic_1,
        dout => grp_fu_136_p2);

    uitodp_32ns_64_7_no_dsp_1_U4 : component main_uitodp_32ns_64_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_141_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_141_p1);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter48_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_66 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln31_reg_335 = ap_const_lv1_0))) then 
                    i_fu_66 <= add_ln31_fu_252_p2;
                end if;
            end if; 
        end if;
    end process;

    lfsr_0_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    lfsr_0_fu_70 <= ap_const_lv16_ACE1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln31_reg_335 = ap_const_lv1_0))) then 
                    lfsr_0_fu_70 <= select_ln32_fu_279_p3;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_62 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln31_reg_335 = ap_const_lv1_0))) then 
                    phi_urem_fu_62 <= select_ln31_fu_257_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln31_1_reg_344 <= add_ln31_1_fu_174_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                div_reg_386 <= grp_fu_136_p2;
                i_2_reg_327 <= i_fu_66;
                icmp_ln31_1_reg_349 <= icmp_ln31_1_fu_180_p2;
                icmp_ln31_reg_335 <= icmp_ln31_fu_162_p2;
                icmp_ln32_reg_354 <= icmp_ln32_fu_190_p2;
                icmp_ln32_reg_354_pp0_iter10_reg <= icmp_ln32_reg_354_pp0_iter9_reg;
                icmp_ln32_reg_354_pp0_iter11_reg <= icmp_ln32_reg_354_pp0_iter10_reg;
                icmp_ln32_reg_354_pp0_iter12_reg <= icmp_ln32_reg_354_pp0_iter11_reg;
                icmp_ln32_reg_354_pp0_iter13_reg <= icmp_ln32_reg_354_pp0_iter12_reg;
                icmp_ln32_reg_354_pp0_iter14_reg <= icmp_ln32_reg_354_pp0_iter13_reg;
                icmp_ln32_reg_354_pp0_iter15_reg <= icmp_ln32_reg_354_pp0_iter14_reg;
                icmp_ln32_reg_354_pp0_iter16_reg <= icmp_ln32_reg_354_pp0_iter15_reg;
                icmp_ln32_reg_354_pp0_iter17_reg <= icmp_ln32_reg_354_pp0_iter16_reg;
                icmp_ln32_reg_354_pp0_iter18_reg <= icmp_ln32_reg_354_pp0_iter17_reg;
                icmp_ln32_reg_354_pp0_iter19_reg <= icmp_ln32_reg_354_pp0_iter18_reg;
                icmp_ln32_reg_354_pp0_iter1_reg <= icmp_ln32_reg_354;
                icmp_ln32_reg_354_pp0_iter20_reg <= icmp_ln32_reg_354_pp0_iter19_reg;
                icmp_ln32_reg_354_pp0_iter21_reg <= icmp_ln32_reg_354_pp0_iter20_reg;
                icmp_ln32_reg_354_pp0_iter22_reg <= icmp_ln32_reg_354_pp0_iter21_reg;
                icmp_ln32_reg_354_pp0_iter23_reg <= icmp_ln32_reg_354_pp0_iter22_reg;
                icmp_ln32_reg_354_pp0_iter24_reg <= icmp_ln32_reg_354_pp0_iter23_reg;
                icmp_ln32_reg_354_pp0_iter25_reg <= icmp_ln32_reg_354_pp0_iter24_reg;
                icmp_ln32_reg_354_pp0_iter26_reg <= icmp_ln32_reg_354_pp0_iter25_reg;
                icmp_ln32_reg_354_pp0_iter27_reg <= icmp_ln32_reg_354_pp0_iter26_reg;
                icmp_ln32_reg_354_pp0_iter28_reg <= icmp_ln32_reg_354_pp0_iter27_reg;
                icmp_ln32_reg_354_pp0_iter29_reg <= icmp_ln32_reg_354_pp0_iter28_reg;
                icmp_ln32_reg_354_pp0_iter2_reg <= icmp_ln32_reg_354_pp0_iter1_reg;
                icmp_ln32_reg_354_pp0_iter30_reg <= icmp_ln32_reg_354_pp0_iter29_reg;
                icmp_ln32_reg_354_pp0_iter31_reg <= icmp_ln32_reg_354_pp0_iter30_reg;
                icmp_ln32_reg_354_pp0_iter32_reg <= icmp_ln32_reg_354_pp0_iter31_reg;
                icmp_ln32_reg_354_pp0_iter33_reg <= icmp_ln32_reg_354_pp0_iter32_reg;
                icmp_ln32_reg_354_pp0_iter34_reg <= icmp_ln32_reg_354_pp0_iter33_reg;
                icmp_ln32_reg_354_pp0_iter35_reg <= icmp_ln32_reg_354_pp0_iter34_reg;
                icmp_ln32_reg_354_pp0_iter36_reg <= icmp_ln32_reg_354_pp0_iter35_reg;
                icmp_ln32_reg_354_pp0_iter37_reg <= icmp_ln32_reg_354_pp0_iter36_reg;
                icmp_ln32_reg_354_pp0_iter38_reg <= icmp_ln32_reg_354_pp0_iter37_reg;
                icmp_ln32_reg_354_pp0_iter39_reg <= icmp_ln32_reg_354_pp0_iter38_reg;
                icmp_ln32_reg_354_pp0_iter3_reg <= icmp_ln32_reg_354_pp0_iter2_reg;
                icmp_ln32_reg_354_pp0_iter40_reg <= icmp_ln32_reg_354_pp0_iter39_reg;
                icmp_ln32_reg_354_pp0_iter41_reg <= icmp_ln32_reg_354_pp0_iter40_reg;
                icmp_ln32_reg_354_pp0_iter42_reg <= icmp_ln32_reg_354_pp0_iter41_reg;
                icmp_ln32_reg_354_pp0_iter43_reg <= icmp_ln32_reg_354_pp0_iter42_reg;
                icmp_ln32_reg_354_pp0_iter44_reg <= icmp_ln32_reg_354_pp0_iter43_reg;
                icmp_ln32_reg_354_pp0_iter45_reg <= icmp_ln32_reg_354_pp0_iter44_reg;
                icmp_ln32_reg_354_pp0_iter46_reg <= icmp_ln32_reg_354_pp0_iter45_reg;
                icmp_ln32_reg_354_pp0_iter47_reg <= icmp_ln32_reg_354_pp0_iter46_reg;
                icmp_ln32_reg_354_pp0_iter48_reg <= icmp_ln32_reg_354_pp0_iter47_reg;
                icmp_ln32_reg_354_pp0_iter4_reg <= icmp_ln32_reg_354_pp0_iter3_reg;
                icmp_ln32_reg_354_pp0_iter5_reg <= icmp_ln32_reg_354_pp0_iter4_reg;
                icmp_ln32_reg_354_pp0_iter6_reg <= icmp_ln32_reg_354_pp0_iter5_reg;
                icmp_ln32_reg_354_pp0_iter7_reg <= icmp_ln32_reg_354_pp0_iter6_reg;
                icmp_ln32_reg_354_pp0_iter8_reg <= icmp_ln32_reg_354_pp0_iter7_reg;
                icmp_ln32_reg_354_pp0_iter9_reg <= icmp_ln32_reg_354_pp0_iter8_reg;
                lfsr_0_load_reg_339 <= lfsr_0_fu_70;
                lshr_ln23_3_reg_360 <= lfsr_0_fu_70(15 downto 1);
                mul_reg_391 <= grp_fu_106_p_dout0;
                sub_reg_396 <= grp_fu_102_p_dout0;
                xor_ln23_2_reg_365 <= xor_ln23_2_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_reg_381 <= grp_fu_141_p1;
                select_ln32_1_reg_401 <= select_ln32_1_fu_300_p3;
                    zext_ln31_reg_370(9 downto 0) <= zext_ln31_fu_263_p1(9 downto 0);
                    zext_ln31_reg_370_pp0_iter10_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter9_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter11_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter10_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter12_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter11_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter13_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter12_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter14_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter13_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter15_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter14_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter16_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter15_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter17_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter16_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter18_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter17_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter19_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter18_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter20_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter19_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter21_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter20_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter22_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter21_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter23_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter22_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter24_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter23_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter25_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter24_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter26_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter25_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter27_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter26_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter28_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter27_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter29_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter28_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter2_reg(9 downto 0) <= zext_ln31_reg_370(9 downto 0);
                    zext_ln31_reg_370_pp0_iter30_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter29_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter31_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter30_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter32_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter31_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter33_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter32_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter34_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter33_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter35_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter34_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter36_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter35_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter37_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter36_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter38_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter37_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter39_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter38_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter3_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter2_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter40_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter39_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter41_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter40_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter42_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter41_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter43_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter42_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter44_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter43_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter45_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter44_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter46_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter45_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter47_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter46_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter48_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter47_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter49_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter48_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter4_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter3_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter5_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter4_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter6_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter5_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter7_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter6_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter8_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter7_reg(9 downto 0);
                    zext_ln31_reg_370_pp0_iter9_reg(9 downto 0) <= zext_ln31_reg_370_pp0_iter8_reg(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln31_reg_370(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter2_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter3_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter4_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter5_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter6_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter7_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter8_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter9_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter10_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter11_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter12_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter13_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter14_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter15_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter16_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter17_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter18_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter19_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter20_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter21_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter22_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter23_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter24_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter25_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter26_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter27_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter28_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter29_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter30_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter31_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter32_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter33_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter34_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter35_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter36_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter37_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter38_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter39_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter40_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter41_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter42_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter43_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter44_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter45_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter46_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter47_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter48_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln31_reg_370_pp0_iter49_reg(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to49, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to49 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    A_address0 <= zext_ln31_reg_370_pp0_iter49_reg(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_enable_reg_pp0_iter49, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= select_ln32_1_reg_401;

    A_we0_assign_proc : process(ap_enable_reg_pp0_iter49, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln31_1_fu_174_p2 <= std_logic_vector(unsigned(phi_urem_fu_62) + unsigned(ap_const_lv10_1));
    add_ln31_fu_252_p2 <= std_logic_vector(unsigned(i_2_reg_327) + unsigned(ap_const_lv10_1));
    addr_in_address0 <= zext_ln31_fu_263_p1(10 - 1 downto 0);

    addr_in_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            addr_in_ce0 <= ap_const_logic_1;
        else 
            addr_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addr_in_d0 <= i_2_reg_327;

    addr_in_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln31_reg_335, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln31_reg_335 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            addr_in_we0 <= ap_const_logic_1;
        else 
            addr_in_we0 <= ap_const_logic_0;
        end if; 
    end process;

    addr_out_address0 <= zext_ln31_fu_263_p1(10 - 1 downto 0);

    addr_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            addr_out_ce0 <= ap_const_logic_1;
        else 
            addr_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    addr_out_d0 <= i_2_reg_327;

    addr_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln31_reg_335, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln31_reg_335 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            addr_out_we0 <= ap_const_logic_1;
        else 
            addr_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln31_fu_162_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln31_fu_162_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln31_reg_335, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln31_reg_335 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter48_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter48_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to49_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_1to49 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to49 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    gold_address0 <= zext_ln31_reg_370_pp0_iter49_reg(10 - 1 downto 0);

    gold_ce0_assign_proc : process(ap_enable_reg_pp0_iter49, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            gold_ce0 <= ap_const_logic_1;
        else 
            gold_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    gold_d0 <= select_ln32_1_reg_401;

    gold_we0_assign_proc : process(ap_enable_reg_pp0_iter49, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            gold_we0 <= ap_const_logic_1;
        else 
            gold_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_102_p_ce <= ap_const_logic_1;
    grp_fu_102_p_din0 <= mul_reg_391;
    grp_fu_102_p_din1 <= ap_const_lv64_BFF0000000000000;
    grp_fu_102_p_opcode <= ap_const_lv2_0;
    grp_fu_106_p_ce <= ap_const_logic_1;
    grp_fu_106_p_din0 <= div_reg_386;
    grp_fu_106_p_din1 <= ap_const_lv64_4000000000000000;
    grp_fu_141_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_268_p3),32));
    icmp_ln31_1_fu_180_p2 <= "1" when (unsigned(add_ln31_1_fu_174_p2) < unsigned(ap_const_lv10_64)) else "0";
    icmp_ln31_fu_162_p2 <= "1" when (i_fu_66 = ap_const_lv10_3E8) else "0";
    icmp_ln32_fu_190_p2 <= "1" when (trunc_ln32_fu_186_p1 = ap_const_lv7_0) else "0";
    or_ln_fu_268_p3 <= (xor_ln23_2_reg_365 & lshr_ln23_3_reg_360);
    select_ln31_fu_257_p3 <= 
        add_ln31_1_reg_344 when (icmp_ln31_1_reg_349(0) = '1') else 
        ap_const_lv10_0;
    select_ln32_1_fu_300_p3 <= 
        sub_reg_396 when (icmp_ln32_reg_354_pp0_iter48_reg(0) = '1') else 
        ap_const_lv64_3FF3333333333333;
    select_ln32_fu_279_p3 <= 
        or_ln_fu_268_p3 when (icmp_ln32_reg_354(0) = '1') else 
        lfsr_0_load_reg_339;
    tmp_1_fu_208_p3 <= lfsr_0_fu_70(2 downto 2);
    tmp_2_fu_216_p3 <= lfsr_0_fu_70(5 downto 5);
    tmp_fu_200_p3 <= lfsr_0_fu_70(3 downto 3);
    trunc_ln23_fu_196_p1 <= lfsr_0_fu_70(1 - 1 downto 0);
    trunc_ln32_fu_186_p1 <= phi_urem_fu_62(7 - 1 downto 0);
    xor_ln23_1_fu_240_p2 <= (tmp_2_fu_216_p3 xor tmp_1_fu_208_p3);
    xor_ln23_2_fu_246_p2 <= (xor_ln23_fu_234_p2 xor xor_ln23_1_fu_240_p2);
    xor_ln23_fu_234_p2 <= (trunc_ln23_fu_196_p1 xor tmp_fu_200_p3);
    zext_ln31_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_327),64));
end behav;
