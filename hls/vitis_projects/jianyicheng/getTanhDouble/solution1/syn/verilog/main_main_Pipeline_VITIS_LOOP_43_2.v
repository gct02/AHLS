// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_43_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gold_address0,
        gold_ce0,
        gold_q0,
        A_address0,
        A_ce0,
        A_q0,
        results_out,
        results_out_ap_vld,
        grp_fu_110_p_din0,
        grp_fu_110_p_din1,
        grp_fu_110_p_opcode,
        grp_fu_110_p_dout0,
        grp_fu_110_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] gold_address0;
output   gold_ce0;
input  [63:0] gold_q0;
output  [9:0] A_address0;
output   A_ce0;
input  [63:0] A_q0;
output  [9:0] results_out;
output   results_out_ap_vld;
output  [63:0] grp_fu_110_p_din0;
output  [63:0] grp_fu_110_p_din1;
output  [4:0] grp_fu_110_p_opcode;
input  [0:0] grp_fu_110_p_dout0;
output   grp_fu_110_p_ce;

reg ap_idle;
reg gold_ce0;
reg A_ce0;
reg results_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln43_fu_102_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln43_reg_239;
reg   [0:0] icmp_ln43_reg_239_pp0_iter1_reg;
reg   [0:0] icmp_ln43_reg_239_pp0_iter2_reg;
reg   [0:0] icmp_ln43_reg_239_pp0_iter3_reg;
reg   [0:0] icmp_ln43_reg_239_pp0_iter4_reg;
reg   [63:0] gold_load_reg_253;
reg   [63:0] A_load_reg_259;
wire   [0:0] icmp_ln44_fu_159_p2;
reg   [0:0] icmp_ln44_reg_265;
reg   [0:0] icmp_ln44_reg_265_pp0_iter3_reg;
reg   [0:0] icmp_ln44_reg_265_pp0_iter4_reg;
reg   [0:0] icmp_ln44_reg_265_pp0_iter5_reg;
wire   [0:0] icmp_ln44_1_fu_165_p2;
reg   [0:0] icmp_ln44_1_reg_270;
reg   [0:0] icmp_ln44_1_reg_270_pp0_iter3_reg;
reg   [0:0] icmp_ln44_1_reg_270_pp0_iter4_reg;
reg   [0:0] icmp_ln44_1_reg_270_pp0_iter5_reg;
wire   [0:0] icmp_ln44_2_fu_171_p2;
reg   [0:0] icmp_ln44_2_reg_275;
reg   [0:0] icmp_ln44_2_reg_275_pp0_iter3_reg;
reg   [0:0] icmp_ln44_2_reg_275_pp0_iter4_reg;
reg   [0:0] icmp_ln44_2_reg_275_pp0_iter5_reg;
wire   [0:0] icmp_ln44_3_fu_177_p2;
reg   [0:0] icmp_ln44_3_reg_280;
reg   [0:0] icmp_ln44_3_reg_280_pp0_iter3_reg;
reg   [0:0] icmp_ln44_3_reg_280_pp0_iter4_reg;
reg   [0:0] icmp_ln44_3_reg_280_pp0_iter5_reg;
reg   [0:0] tmp_6_reg_285;
wire   [63:0] zext_ln43_fu_114_p1;
wire    ap_block_pp0_stage0;
reg   [9:0] results_fu_44;
wire   [9:0] results_1_fu_209_p2;
wire    ap_loop_init;
reg   [9:0] i_fu_48;
wire   [9:0] add_ln43_fu_108_p2;
reg   [9:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] bitcast_ln44_fu_125_p1;
wire   [63:0] bitcast_ln44_1_fu_142_p1;
wire   [10:0] tmp_4_fu_128_p4;
wire   [51:0] trunc_ln44_fu_138_p1;
wire   [10:0] tmp_5_fu_145_p4;
wire   [51:0] trunc_ln44_1_fu_155_p1;
wire   [0:0] or_ln44_fu_186_p2;
wire   [0:0] or_ln44_1_fu_190_p2;
wire   [0:0] and_ln44_fu_194_p2;
wire   [0:0] and_ln44_1_fu_200_p2;
wire   [9:0] zext_ln44_fu_205_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 results_fu_44 = 10'd0;
#0 i_fu_48 = 10'd0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln43_fu_102_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_48 <= add_ln43_fu_108_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            results_fu_44 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            results_fu_44 <= results_1_fu_209_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_load_reg_259 <= A_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        gold_load_reg_253 <= gold_q0;
        icmp_ln43_reg_239 <= icmp_ln43_fu_102_p2;
        icmp_ln43_reg_239_pp0_iter1_reg <= icmp_ln43_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln43_reg_239_pp0_iter2_reg <= icmp_ln43_reg_239_pp0_iter1_reg;
        icmp_ln43_reg_239_pp0_iter3_reg <= icmp_ln43_reg_239_pp0_iter2_reg;
        icmp_ln43_reg_239_pp0_iter4_reg <= icmp_ln43_reg_239_pp0_iter3_reg;
        icmp_ln44_1_reg_270 <= icmp_ln44_1_fu_165_p2;
        icmp_ln44_1_reg_270_pp0_iter3_reg <= icmp_ln44_1_reg_270;
        icmp_ln44_1_reg_270_pp0_iter4_reg <= icmp_ln44_1_reg_270_pp0_iter3_reg;
        icmp_ln44_1_reg_270_pp0_iter5_reg <= icmp_ln44_1_reg_270_pp0_iter4_reg;
        icmp_ln44_2_reg_275 <= icmp_ln44_2_fu_171_p2;
        icmp_ln44_2_reg_275_pp0_iter3_reg <= icmp_ln44_2_reg_275;
        icmp_ln44_2_reg_275_pp0_iter4_reg <= icmp_ln44_2_reg_275_pp0_iter3_reg;
        icmp_ln44_2_reg_275_pp0_iter5_reg <= icmp_ln44_2_reg_275_pp0_iter4_reg;
        icmp_ln44_3_reg_280 <= icmp_ln44_3_fu_177_p2;
        icmp_ln44_3_reg_280_pp0_iter3_reg <= icmp_ln44_3_reg_280;
        icmp_ln44_3_reg_280_pp0_iter4_reg <= icmp_ln44_3_reg_280_pp0_iter3_reg;
        icmp_ln44_3_reg_280_pp0_iter5_reg <= icmp_ln44_3_reg_280_pp0_iter4_reg;
        icmp_ln44_reg_265 <= icmp_ln44_fu_159_p2;
        icmp_ln44_reg_265_pp0_iter3_reg <= icmp_ln44_reg_265;
        icmp_ln44_reg_265_pp0_iter4_reg <= icmp_ln44_reg_265_pp0_iter3_reg;
        icmp_ln44_reg_265_pp0_iter5_reg <= icmp_ln44_reg_265_pp0_iter4_reg;
        tmp_6_reg_285 <= grp_fu_110_p_dout0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_102_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gold_ce0 = 1'b1;
    end else begin
        gold_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_reg_239_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        results_out_ap_vld = 1'b1;
    end else begin
        results_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln43_fu_114_p1;

assign add_ln43_fu_108_p2 = (ap_sig_allocacmp_i_1 + 10'd1);

assign and_ln44_1_fu_200_p2 = (tmp_6_reg_285 & and_ln44_fu_194_p2);

assign and_ln44_fu_194_p2 = (or_ln44_fu_186_p2 & or_ln44_1_fu_190_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln44_1_fu_142_p1 = A_load_reg_259;

assign bitcast_ln44_fu_125_p1 = gold_load_reg_253;

assign gold_address0 = zext_ln43_fu_114_p1;

assign grp_fu_110_p_ce = 1'b1;

assign grp_fu_110_p_din0 = gold_load_reg_253;

assign grp_fu_110_p_din1 = A_load_reg_259;

assign grp_fu_110_p_opcode = 5'd1;

assign icmp_ln43_fu_102_p2 = ((ap_sig_allocacmp_i_1 == 10'd1000) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_165_p2 = ((trunc_ln44_fu_138_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_171_p2 = ((tmp_5_fu_145_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln44_3_fu_177_p2 = ((trunc_ln44_1_fu_155_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_159_p2 = ((tmp_4_fu_128_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln44_1_fu_190_p2 = (icmp_ln44_3_reg_280_pp0_iter5_reg | icmp_ln44_2_reg_275_pp0_iter5_reg);

assign or_ln44_fu_186_p2 = (icmp_ln44_reg_265_pp0_iter5_reg | icmp_ln44_1_reg_270_pp0_iter5_reg);

assign results_1_fu_209_p2 = (zext_ln44_fu_205_p1 + results_fu_44);

assign results_out = results_fu_44;

assign tmp_4_fu_128_p4 = {{bitcast_ln44_fu_125_p1[62:52]}};

assign tmp_5_fu_145_p4 = {{bitcast_ln44_1_fu_142_p1[62:52]}};

assign trunc_ln44_1_fu_155_p1 = bitcast_ln44_1_fu_142_p1[51:0];

assign trunc_ln44_fu_138_p1 = bitcast_ln44_fu_125_p1[51:0];

assign zext_ln43_fu_114_p1 = ap_sig_allocacmp_i_1;

assign zext_ln44_fu_205_p1 = and_ln44_1_fu_200_p2;

endmodule //main_main_Pipeline_VITIS_LOOP_43_2
