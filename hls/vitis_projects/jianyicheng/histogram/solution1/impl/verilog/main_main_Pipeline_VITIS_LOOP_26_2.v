// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_26_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hist_address0,
        hist_ce0,
        hist_q0,
        t_out,
        t_out_ap_vld,
        grp_fu_76_p_din0,
        grp_fu_76_p_din1,
        grp_fu_76_p_opcode,
        grp_fu_76_p_dout0,
        grp_fu_76_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] hist_address0;
output   hist_ce0;
input  [63:0] hist_q0;
output  [9:0] t_out;
output   t_out_ap_vld;
output  [63:0] grp_fu_76_p_din0;
output  [63:0] grp_fu_76_p_din1;
output  [4:0] grp_fu_76_p_opcode;
input  [0:0] grp_fu_76_p_dout0;
output   grp_fu_76_p_ce;

reg ap_idle;
reg hist_ce0;
reg t_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_90_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln26_reg_187;
reg   [0:0] icmp_ln26_reg_187_pp0_iter1_reg;
reg   [0:0] icmp_ln26_reg_187_pp0_iter2_reg;
reg   [0:0] icmp_ln26_reg_187_pp0_iter3_reg;
reg   [0:0] icmp_ln26_reg_187_pp0_iter4_reg;
reg   [63:0] hist_load_reg_196;
wire   [0:0] icmp_ln27_fu_129_p2;
reg   [0:0] icmp_ln27_reg_202;
reg   [0:0] icmp_ln27_reg_202_pp0_iter3_reg;
reg   [0:0] icmp_ln27_reg_202_pp0_iter4_reg;
reg   [0:0] icmp_ln27_reg_202_pp0_iter5_reg;
wire   [0:0] icmp_ln27_1_fu_135_p2;
reg   [0:0] icmp_ln27_1_reg_207;
reg   [0:0] icmp_ln27_1_reg_207_pp0_iter3_reg;
reg   [0:0] icmp_ln27_1_reg_207_pp0_iter4_reg;
reg   [0:0] icmp_ln27_1_reg_207_pp0_iter5_reg;
reg   [0:0] tmp_3_reg_212;
wire   [63:0] zext_ln26_fu_102_p1;
wire    ap_block_pp0_stage0;
reg   [9:0] t_fu_44;
wire   [9:0] t_1_fu_157_p2;
wire    ap_loop_init;
reg   [9:0] i_fu_48;
wire   [9:0] add_ln26_fu_96_p2;
reg   [9:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [63:0] bitcast_ln27_fu_112_p1;
wire   [10:0] tmp_2_fu_115_p4;
wire   [51:0] trunc_ln27_fu_125_p1;
wire   [0:0] or_ln27_fu_144_p2;
wire   [0:0] and_ln27_fu_148_p2;
wire   [9:0] zext_ln27_fu_153_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 t_fu_44 = 10'd0;
#0 i_fu_48 = 10'd0;
#0 ap_done_reg = 1'b0;
end

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_90_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_48 <= add_ln26_fu_96_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            t_fu_44 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            t_fu_44 <= t_1_fu_157_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        hist_load_reg_196 <= hist_q0;
        icmp_ln26_reg_187 <= icmp_ln26_fu_90_p2;
        icmp_ln26_reg_187_pp0_iter1_reg <= icmp_ln26_reg_187;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln26_reg_187_pp0_iter2_reg <= icmp_ln26_reg_187_pp0_iter1_reg;
        icmp_ln26_reg_187_pp0_iter3_reg <= icmp_ln26_reg_187_pp0_iter2_reg;
        icmp_ln26_reg_187_pp0_iter4_reg <= icmp_ln26_reg_187_pp0_iter3_reg;
        icmp_ln27_1_reg_207 <= icmp_ln27_1_fu_135_p2;
        icmp_ln27_1_reg_207_pp0_iter3_reg <= icmp_ln27_1_reg_207;
        icmp_ln27_1_reg_207_pp0_iter4_reg <= icmp_ln27_1_reg_207_pp0_iter3_reg;
        icmp_ln27_1_reg_207_pp0_iter5_reg <= icmp_ln27_1_reg_207_pp0_iter4_reg;
        icmp_ln27_reg_202 <= icmp_ln27_fu_129_p2;
        icmp_ln27_reg_202_pp0_iter3_reg <= icmp_ln27_reg_202;
        icmp_ln27_reg_202_pp0_iter4_reg <= icmp_ln27_reg_202_pp0_iter3_reg;
        icmp_ln27_reg_202_pp0_iter5_reg <= icmp_ln27_reg_202_pp0_iter4_reg;
        tmp_3_reg_212 <= grp_fu_76_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_90_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 10'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hist_ce0 = 1'b1;
    end else begin
        hist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_187_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_out_ap_vld = 1'b1;
    end else begin
        t_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_96_p2 = (ap_sig_allocacmp_i_1 + 10'd1);

assign and_ln27_fu_148_p2 = (tmp_3_reg_212 & or_ln27_fu_144_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln27_fu_112_p1 = hist_load_reg_196;

assign grp_fu_76_p_ce = 1'b1;

assign grp_fu_76_p_din0 = hist_load_reg_196;

assign grp_fu_76_p_din1 = 64'd4591870180066957722;

assign grp_fu_76_p_opcode = 5'd1;

assign hist_address0 = zext_ln26_fu_102_p1;

assign icmp_ln26_fu_90_p2 = ((ap_sig_allocacmp_i_1 == 10'd1000) ? 1'b1 : 1'b0);

assign icmp_ln27_1_fu_135_p2 = ((trunc_ln27_fu_125_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_129_p2 = ((tmp_2_fu_115_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln27_fu_144_p2 = (icmp_ln27_reg_202_pp0_iter5_reg | icmp_ln27_1_reg_207_pp0_iter5_reg);

assign t_1_fu_157_p2 = (zext_ln27_fu_153_p1 + t_fu_44);

assign t_out = t_fu_44;

assign tmp_2_fu_115_p4 = {{bitcast_ln27_fu_112_p1[62:52]}};

assign trunc_ln27_fu_125_p1 = bitcast_ln27_fu_112_p1[51:0];

assign zext_ln26_fu_102_p1 = ap_sig_allocacmp_i_1;

assign zext_ln27_fu_153_p1 = and_ln27_fu_148_p2;

endmodule //main_main_Pipeline_VITIS_LOOP_26_2
