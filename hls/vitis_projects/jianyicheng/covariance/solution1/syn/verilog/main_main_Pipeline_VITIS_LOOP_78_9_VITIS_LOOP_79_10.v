// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module main_main_Pipeline_VITIS_LOOP_78_9_VITIS_LOOP_79_10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cov_address0,
        cov_ce0,
        cov_q0,
        cov_s_address0,
        cov_s_ce0,
        cov_s_q0,
        res_1_out,
        res_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] cov_address0;
output   cov_ce0;
input  [31:0] cov_q0;
output  [9:0] cov_s_address0;
output   cov_s_ce0;
input  [31:0] cov_s_q0;
output  [10:0] res_1_out;
output   res_1_out_ap_vld;

reg ap_idle;
reg cov_ce0;
reg cov_s_ce0;
reg res_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln78_reg_347;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln78_fu_130_p2;
reg   [0:0] icmp_ln78_reg_347_pp0_iter1_reg;
reg   [0:0] icmp_ln78_reg_347_pp0_iter2_reg;
reg   [5:0] i_load_reg_351;
wire   [0:0] icmp_ln79_fu_148_p2;
reg   [0:0] icmp_ln79_reg_356;
wire   [5:0] select_ln78_fu_154_p3;
reg   [5:0] select_ln78_reg_361;
wire   [5:0] add_ln78_1_fu_162_p2;
reg   [5:0] add_ln78_1_reg_367;
wire   [9:0] add_ln80_fu_193_p2;
reg   [9:0] add_ln80_reg_372;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] cov_load_reg_387;
reg   [31:0] cov_load_13_reg_393;
wire   [0:0] icmp_ln80_fu_253_p2;
reg   [0:0] icmp_ln80_reg_399;
reg   [0:0] icmp_ln80_reg_399_pp0_iter3_reg;
wire   [0:0] icmp_ln80_1_fu_259_p2;
reg   [0:0] icmp_ln80_1_reg_404;
reg   [0:0] icmp_ln80_1_reg_404_pp0_iter3_reg;
wire   [0:0] icmp_ln80_2_fu_265_p2;
reg   [0:0] icmp_ln80_2_reg_409;
reg   [0:0] icmp_ln80_2_reg_409_pp0_iter3_reg;
wire   [0:0] icmp_ln80_3_fu_271_p2;
reg   [0:0] icmp_ln80_3_reg_414;
reg   [0:0] icmp_ln80_3_reg_414_pp0_iter3_reg;
wire   [0:0] grp_fu_103_p2;
reg   [0:0] tmp_2_reg_419;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln80_fu_214_p1;
wire    ap_block_pp0_stage0;
reg   [10:0] res_1_fu_54;
wire   [10:0] res_fu_303_p2;
wire    ap_loop_init;
reg   [5:0] j_fu_58;
wire   [5:0] add_ln79_fu_199_p2;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_62;
wire   [5:0] select_ln78_1_fu_173_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten8_fu_66;
wire   [10:0] add_ln78_fu_136_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten8_load;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1;
wire   [4:0] empty_fu_178_p1;
wire   [9:0] zext_ln79_fu_190_p1;
wire   [9:0] tmp_9_fu_182_p3;
wire   [31:0] bitcast_ln80_fu_219_p1;
wire   [31:0] bitcast_ln80_1_fu_236_p1;
wire   [7:0] tmp_fu_222_p4;
wire   [22:0] trunc_ln80_fu_232_p1;
wire   [7:0] tmp_1_fu_239_p4;
wire   [22:0] trunc_ln80_1_fu_249_p1;
wire   [0:0] or_ln80_fu_280_p2;
wire   [0:0] or_ln80_1_fu_284_p2;
wire   [0:0] and_ln80_fu_288_p2;
wire   [0:0] and_ln80_1_fu_294_p2;
wire   [10:0] zext_ln80_1_fu_299_p1;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter3_stage0;
reg    ap_idle_pp0_0to2;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 res_1_fu_54 = 11'd0;
#0 j_fu_58 = 6'd0;
#0 i_fu_62 = 6'd0;
#0 indvar_flatten8_fu_66 = 11'd0;
#0 ap_done_reg = 1'b0;
end

main_fcmp_32ns_32ns_1_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_4_no_dsp_1_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cov_load_reg_387),
    .din1(cov_load_13_reg_393),
    .ce(1'b1),
    .opcode(5'd1),
    .dout(grp_fu_103_p2)
);

main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_62 <= 6'd0;
    end else if (((icmp_ln78_reg_347 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_62 <= select_ln78_1_fu_173_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln78_fu_130_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten8_fu_66 <= add_ln78_fu_136_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten8_fu_66 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_fu_58 <= 6'd0;
    end else if (((icmp_ln78_reg_347 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_58 <= add_ln79_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            res_1_fu_54 <= 11'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            res_1_fu_54 <= res_fu_303_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln78_1_reg_367 <= add_ln78_1_fu_162_p2;
        i_load_reg_351 <= ap_sig_allocacmp_i_load;
        icmp_ln78_reg_347 <= icmp_ln78_fu_130_p2;
        icmp_ln78_reg_347_pp0_iter1_reg <= icmp_ln78_reg_347;
        icmp_ln78_reg_347_pp0_iter2_reg <= icmp_ln78_reg_347_pp0_iter1_reg;
        icmp_ln79_reg_356 <= icmp_ln79_fu_148_p2;
        icmp_ln80_1_reg_404 <= icmp_ln80_1_fu_259_p2;
        icmp_ln80_1_reg_404_pp0_iter3_reg <= icmp_ln80_1_reg_404;
        icmp_ln80_2_reg_409 <= icmp_ln80_2_fu_265_p2;
        icmp_ln80_2_reg_409_pp0_iter3_reg <= icmp_ln80_2_reg_409;
        icmp_ln80_3_reg_414 <= icmp_ln80_3_fu_271_p2;
        icmp_ln80_3_reg_414_pp0_iter3_reg <= icmp_ln80_3_reg_414;
        icmp_ln80_reg_399 <= icmp_ln80_fu_253_p2;
        icmp_ln80_reg_399_pp0_iter3_reg <= icmp_ln80_reg_399;
        select_ln78_reg_361 <= select_ln78_fu_154_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln80_reg_372 <= add_ln80_fu_193_p2;
        cov_load_13_reg_393 <= cov_s_q0;
        cov_load_reg_387 <= cov_q0;
        tmp_2_reg_419 <= grp_fu_103_p2;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_347 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_347_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten8_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten8_load = indvar_flatten8_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cov_ce0 = 1'b1;
    end else begin
        cov_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cov_s_ce0 = 1'b1;
    end else begin
        cov_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_347_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_1_out_ap_vld = 1'b1;
    end else begin
        res_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to2 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter3_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_1_fu_162_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln78_fu_136_p2 = (ap_sig_allocacmp_indvar_flatten8_load + 11'd1);

assign add_ln79_fu_199_p2 = (select_ln78_reg_361 + 6'd1);

assign add_ln80_fu_193_p2 = (zext_ln79_fu_190_p1 + tmp_9_fu_182_p3);

assign and_ln80_1_fu_294_p2 = (tmp_2_reg_419 & and_ln80_fu_288_p2);

assign and_ln80_fu_288_p2 = (or_ln80_fu_280_p2 & or_ln80_1_fu_284_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln80_1_fu_236_p1 = cov_load_13_reg_393;

assign bitcast_ln80_fu_219_p1 = cov_load_reg_387;

assign cov_address0 = zext_ln80_fu_214_p1;

assign cov_s_address0 = zext_ln80_fu_214_p1;

assign empty_fu_178_p1 = select_ln78_1_fu_173_p3[4:0];

assign icmp_ln78_fu_130_p2 = ((ap_sig_allocacmp_indvar_flatten8_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_148_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_259_p2 = ((trunc_ln80_fu_232_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_2_fu_265_p2 = ((tmp_1_fu_239_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln80_3_fu_271_p2 = ((trunc_ln80_1_fu_249_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_253_p2 = ((tmp_fu_222_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln80_1_fu_284_p2 = (icmp_ln80_3_reg_414_pp0_iter3_reg | icmp_ln80_2_reg_409_pp0_iter3_reg);

assign or_ln80_fu_280_p2 = (icmp_ln80_reg_399_pp0_iter3_reg | icmp_ln80_1_reg_404_pp0_iter3_reg);

assign res_1_out = res_1_fu_54;

assign res_fu_303_p2 = (zext_ln80_1_fu_299_p1 + res_1_fu_54);

assign select_ln78_1_fu_173_p3 = ((icmp_ln79_reg_356[0:0] == 1'b1) ? add_ln78_1_reg_367 : i_load_reg_351);

assign select_ln78_fu_154_p3 = ((icmp_ln79_fu_148_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign tmp_1_fu_239_p4 = {{bitcast_ln80_1_fu_236_p1[30:23]}};

assign tmp_9_fu_182_p3 = {{empty_fu_178_p1}, {5'd0}};

assign tmp_fu_222_p4 = {{bitcast_ln80_fu_219_p1[30:23]}};

assign trunc_ln80_1_fu_249_p1 = bitcast_ln80_1_fu_236_p1[22:0];

assign trunc_ln80_fu_232_p1 = bitcast_ln80_fu_219_p1[22:0];

assign zext_ln79_fu_190_p1 = select_ln78_reg_361;

assign zext_ln80_1_fu_299_p1 = and_ln80_1_fu_294_p2;

assign zext_ln80_fu_214_p1 = add_ln80_reg_372;

endmodule //main_main_Pipeline_VITIS_LOOP_78_9_VITIS_LOOP_79_10
