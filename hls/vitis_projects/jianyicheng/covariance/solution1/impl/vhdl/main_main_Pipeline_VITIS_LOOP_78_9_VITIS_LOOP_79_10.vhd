-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main_main_Pipeline_VITIS_LOOP_78_9_VITIS_LOOP_79_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cov_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cov_ce0 : OUT STD_LOGIC;
    cov_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cov_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cov_s_ce0 : OUT STD_LOGIC;
    cov_s_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    res_1_out : OUT STD_LOGIC_VECTOR (10 downto 0);
    res_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of main_main_Pipeline_VITIS_LOOP_78_9_VITIS_LOOP_79_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln78_reg_347 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln78_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_347_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_reg_347_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_reg_351 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln79_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_356 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln78_fu_154_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln78_reg_361 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln78_1_fu_162_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln78_1_reg_367 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln80_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln80_reg_372 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal cov_load_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal cov_load_13_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln80_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_399_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_1_reg_404_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_2_reg_409 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_2_reg_409_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_3_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_3_reg_414 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_3_reg_414_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln80_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal res_1_fu_54 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal res_fu_303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_58 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln79_fu_199_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln78_1_fu_173_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten8_fu_66 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln78_fu_136_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten8_load : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal empty_fu_178_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln79_fu_190_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_182_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln80_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln80_1_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_222_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_fu_232_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_239_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln80_1_fu_249_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln80_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln80_1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln80_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln80_1_fu_299_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_fcmp_32ns_32ns_1_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fcmp_32ns_32ns_1_4_no_dsp_1_U95 : component main_fcmp_32ns_32ns_1_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cov_load_reg_387,
        din1 => cov_load_13_reg_393,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_103_p2);

    flow_control_loop_pipe_sequential_init_U : component main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_62 <= ap_const_lv6_0;
            elsif (((icmp_ln78_reg_347 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_62 <= select_ln78_1_fu_173_p3;
            end if; 
        end if;
    end process;

    indvar_flatten8_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln78_fu_130_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten8_fu_66 <= add_ln78_fu_136_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten8_fu_66 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                j_fu_58 <= ap_const_lv6_0;
            elsif (((icmp_ln78_reg_347 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_58 <= add_ln79_fu_199_p2;
            end if; 
        end if;
    end process;

    res_1_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    res_1_fu_54 <= ap_const_lv11_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    res_1_fu_54 <= res_fu_303_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln78_1_reg_367 <= add_ln78_1_fu_162_p2;
                i_load_reg_351 <= ap_sig_allocacmp_i_load;
                icmp_ln78_reg_347 <= icmp_ln78_fu_130_p2;
                icmp_ln78_reg_347_pp0_iter1_reg <= icmp_ln78_reg_347;
                icmp_ln78_reg_347_pp0_iter2_reg <= icmp_ln78_reg_347_pp0_iter1_reg;
                icmp_ln79_reg_356 <= icmp_ln79_fu_148_p2;
                icmp_ln80_1_reg_404 <= icmp_ln80_1_fu_259_p2;
                icmp_ln80_1_reg_404_pp0_iter3_reg <= icmp_ln80_1_reg_404;
                icmp_ln80_2_reg_409 <= icmp_ln80_2_fu_265_p2;
                icmp_ln80_2_reg_409_pp0_iter3_reg <= icmp_ln80_2_reg_409;
                icmp_ln80_3_reg_414 <= icmp_ln80_3_fu_271_p2;
                icmp_ln80_3_reg_414_pp0_iter3_reg <= icmp_ln80_3_reg_414;
                icmp_ln80_reg_399 <= icmp_ln80_fu_253_p2;
                icmp_ln80_reg_399_pp0_iter3_reg <= icmp_ln80_reg_399;
                select_ln78_reg_361 <= select_ln78_fu_154_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln80_reg_372 <= add_ln80_fu_193_p2;
                cov_load_13_reg_393 <= cov_s_q0;
                cov_load_reg_387 <= cov_q0;
                tmp_2_reg_419 <= grp_fu_103_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter3_stage0, ap_idle_pp0_0to2, ap_idle_pp0_1to4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to2 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln78_1_fu_162_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv6_1));
    add_ln78_fu_136_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten8_load) + unsigned(ap_const_lv11_1));
    add_ln79_fu_199_p2 <= std_logic_vector(unsigned(select_ln78_reg_361) + unsigned(ap_const_lv6_1));
    add_ln80_fu_193_p2 <= std_logic_vector(unsigned(zext_ln79_fu_190_p1) + unsigned(tmp_9_fu_182_p3));
    and_ln80_1_fu_294_p2 <= (tmp_2_reg_419 and and_ln80_fu_288_p2);
    and_ln80_fu_288_p2 <= (or_ln80_fu_280_p2 and or_ln80_1_fu_284_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln78_reg_347)
    begin
        if (((icmp_ln78_reg_347 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln78_reg_347_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln78_reg_347_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten8_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten8_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten8_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten8_load <= indvar_flatten8_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_58)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_58;
        end if; 
    end process;

    bitcast_ln80_1_fu_236_p1 <= cov_load_13_reg_393;
    bitcast_ln80_fu_219_p1 <= cov_load_reg_387;
    cov_address0 <= zext_ln80_fu_214_p1(10 - 1 downto 0);

    cov_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cov_ce0 <= ap_const_logic_1;
        else 
            cov_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cov_s_address0 <= zext_ln80_fu_214_p1(10 - 1 downto 0);

    cov_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            cov_s_ce0 <= ap_const_logic_1;
        else 
            cov_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_178_p1 <= select_ln78_1_fu_173_p3(5 - 1 downto 0);
    icmp_ln78_fu_130_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten8_load = ap_const_lv11_400) else "0";
    icmp_ln79_fu_148_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv6_20) else "0";
    icmp_ln80_1_fu_259_p2 <= "1" when (trunc_ln80_fu_232_p1 = ap_const_lv23_0) else "0";
    icmp_ln80_2_fu_265_p2 <= "0" when (tmp_1_fu_239_p4 = ap_const_lv8_FF) else "1";
    icmp_ln80_3_fu_271_p2 <= "1" when (trunc_ln80_1_fu_249_p1 = ap_const_lv23_0) else "0";
    icmp_ln80_fu_253_p2 <= "0" when (tmp_fu_222_p4 = ap_const_lv8_FF) else "1";
    or_ln80_1_fu_284_p2 <= (icmp_ln80_3_reg_414_pp0_iter3_reg or icmp_ln80_2_reg_409_pp0_iter3_reg);
    or_ln80_fu_280_p2 <= (icmp_ln80_reg_399_pp0_iter3_reg or icmp_ln80_1_reg_404_pp0_iter3_reg);
    res_1_out <= res_1_fu_54;

    res_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln78_reg_347_pp0_iter2_reg)
    begin
        if (((icmp_ln78_reg_347_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_1_out_ap_vld <= ap_const_logic_1;
        else 
            res_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_fu_303_p2 <= std_logic_vector(unsigned(zext_ln80_1_fu_299_p1) + unsigned(res_1_fu_54));
    select_ln78_1_fu_173_p3 <= 
        add_ln78_1_reg_367 when (icmp_ln79_reg_356(0) = '1') else 
        i_load_reg_351;
    select_ln78_fu_154_p3 <= 
        ap_const_lv6_0 when (icmp_ln79_fu_148_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_1_fu_239_p4 <= bitcast_ln80_1_fu_236_p1(30 downto 23);
    tmp_9_fu_182_p3 <= (empty_fu_178_p1 & ap_const_lv5_0);
    tmp_fu_222_p4 <= bitcast_ln80_fu_219_p1(30 downto 23);
    trunc_ln80_1_fu_249_p1 <= bitcast_ln80_1_fu_236_p1(23 - 1 downto 0);
    trunc_ln80_fu_232_p1 <= bitcast_ln80_fu_219_p1(23 - 1 downto 0);
    zext_ln79_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln78_reg_361),10));
    zext_ln80_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln80_1_fu_294_p2),11));
    zext_ln80_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln80_reg_372),64));
end behav;
