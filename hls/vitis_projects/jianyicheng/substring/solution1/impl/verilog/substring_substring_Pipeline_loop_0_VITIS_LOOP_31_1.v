// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module substring_substring_Pipeline_loop_0_VITIS_LOOP_31_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        str_0_address0,
        str_0_ce0,
        str_0_q0,
        str_1_address0,
        str_1_ce0,
        str_1_q0,
        s_0_11_out,
        s_0_11_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] str_0_address0;
output   str_0_ce0;
input  [31:0] str_0_q0;
output  [11:0] str_1_address0;
output   str_1_ce0;
input  [31:0] str_1_q0;
output  [31:0] s_0_11_out;
output   s_0_11_out_ap_vld;

reg ap_idle;
reg str_0_ce0;
reg str_1_ce0;
reg s_0_11_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_137_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln28_reg_366;
reg   [0:0] icmp_ln28_reg_366_pp0_iter1_reg;
wire   [0:0] icmp_ln31_fu_155_p2;
reg   [0:0] icmp_ln31_reg_370;
reg   [0:0] icmp_ln31_reg_370_pp0_iter1_reg;
reg   [0:0] icmp_ln31_reg_370_pp0_iter2_reg;
wire   [1:0] select_ln28_fu_161_p3;
reg   [1:0] select_ln28_reg_376;
wire   [12:0] select_ln28_1_fu_175_p3;
reg   [12:0] select_ln28_1_reg_381;
wire   [1:0] add_ln38_fu_183_p2;
reg   [1:0] add_ln38_reg_386;
reg   [1:0] add_ln38_reg_386_pp0_iter1_reg;
wire   [12:0] add_ln32_fu_207_p2;
reg   [12:0] add_ln32_reg_391;
wire   [0:0] icmp_ln38_fu_244_p2;
reg   [0:0] icmp_ln38_reg_406;
wire   [63:0] zext_ln34_fu_212_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln37_fu_221_p1;
reg   [31:0] match_fu_52;
wire   [31:0] match_6_fu_277_p3;
wire    ap_loop_init;
reg   [1:0] j_fu_56;
reg   [1:0] ap_sig_allocacmp_j_load;
reg   [31:0] s_0_11_fu_60;
wire   [31:0] s_0_1_fu_297_p3;
reg   [31:0] s_0_fu_64;
wire   [31:0] select_ln28_2_fu_259_p3;
reg   [12:0] i_fu_68;
reg   [12:0] ap_sig_allocacmp_i_load;
reg   [13:0] indvar_flatten_fu_72;
wire   [13:0] add_ln28_fu_143_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire    ap_block_pp0_stage0_01001;
wire   [12:0] add_ln28_1_fu_169_p2;
wire   [12:0] zext_ln31_fu_204_p1;
wire   [11:0] trunc_ln34_fu_217_p1;
wire   [0:0] tmp_fu_226_p3;
wire   [31:0] zext_ln38_fu_241_p1;
wire   [31:0] c_14_fu_233_p3;
wire   [0:0] or_ln38_fu_273_p2;
wire   [31:0] select_ln38_fu_266_p3;
wire   [0:0] icmp_ln41_fu_285_p2;
wire   [31:0] add_ln42_fu_291_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 match_fu_52 = 32'd0;
#0 j_fu_56 = 2'd0;
#0 s_0_11_fu_60 = 32'd0;
#0 s_0_fu_64 = 32'd0;
#0 i_fu_68 = 13'd0;
#0 indvar_flatten_fu_72 = 14'd0;
#0 ap_done_reg = 1'b0;
end

substring_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_68 <= select_ln28_1_fu_175_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_68 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_72 <= add_ln28_fu_143_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_72 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_137_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_56 <= add_ln38_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_56 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            match_fu_52 <= 32'd1;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            match_fu_52 <= match_6_fu_277_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            s_0_fu_64 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            s_0_fu_64 <= select_ln28_2_fu_259_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln32_reg_391 <= add_ln32_fu_207_p2;
        add_ln38_reg_386 <= add_ln38_fu_183_p2;
        add_ln38_reg_386_pp0_iter1_reg <= add_ln38_reg_386;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln28_reg_366 <= icmp_ln28_fu_137_p2;
        icmp_ln28_reg_366_pp0_iter1_reg <= icmp_ln28_reg_366;
        icmp_ln31_reg_370 <= icmp_ln31_fu_155_p2;
        icmp_ln31_reg_370_pp0_iter1_reg <= icmp_ln31_reg_370;
        select_ln28_1_reg_381 <= select_ln28_1_fu_175_p3;
        select_ln28_reg_376 <= select_ln28_fu_161_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln31_reg_370_pp0_iter2_reg <= icmp_ln31_reg_370_pp0_iter1_reg;
        icmp_ln38_reg_406 <= icmp_ln38_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        s_0_11_fu_60 <= s_0_1_fu_297_p3;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_137_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 13'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 2'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_56;
    end
end

always @ (*) begin
    if (((icmp_ln28_reg_366_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_0_11_out_ap_vld = 1'b1;
    end else begin
        s_0_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        str_0_ce0 = 1'b1;
    end else begin
        str_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        str_1_ce0 = 1'b1;
    end else begin
        str_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_169_p2 = (ap_sig_allocacmp_i_load + 13'd1);

assign add_ln28_fu_143_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln32_fu_207_p2 = (zext_ln31_fu_204_p1 + select_ln28_1_reg_381);

assign add_ln38_fu_183_p2 = (select_ln28_fu_161_p3 + 2'd1);

assign add_ln42_fu_291_p2 = (select_ln28_2_fu_259_p3 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign c_14_fu_233_p3 = ((tmp_fu_226_p3[0:0] == 1'b1) ? str_1_q0 : str_0_q0);

assign icmp_ln28_fu_137_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd12288) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_155_p2 = ((ap_sig_allocacmp_j_load == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_244_p2 = ((zext_ln38_fu_241_p1 != c_14_fu_233_p3) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_285_p2 = ((match_6_fu_277_p3 == 32'd1) ? 1'b1 : 1'b0);

assign match_6_fu_277_p3 = ((or_ln38_fu_273_p2[0:0] == 1'b1) ? select_ln38_fu_266_p3 : match_fu_52);

assign or_ln38_fu_273_p2 = (icmp_ln38_reg_406 | icmp_ln31_reg_370_pp0_iter2_reg);

assign s_0_11_out = s_0_11_fu_60;

assign s_0_1_fu_297_p3 = ((icmp_ln41_fu_285_p2[0:0] == 1'b1) ? add_ln42_fu_291_p2 : select_ln28_2_fu_259_p3);

assign select_ln28_1_fu_175_p3 = ((icmp_ln31_fu_155_p2[0:0] == 1'b1) ? add_ln28_1_fu_169_p2 : ap_sig_allocacmp_i_load);

assign select_ln28_2_fu_259_p3 = ((icmp_ln31_reg_370_pp0_iter2_reg[0:0] == 1'b1) ? s_0_11_fu_60 : s_0_fu_64);

assign select_ln28_fu_161_p3 = ((icmp_ln31_fu_155_p2[0:0] == 1'b1) ? 2'd0 : ap_sig_allocacmp_j_load);

assign select_ln38_fu_266_p3 = ((icmp_ln38_reg_406[0:0] == 1'b1) ? 32'd0 : 32'd1);

assign str_0_address0 = zext_ln34_fu_212_p1;

assign str_1_address0 = zext_ln37_fu_221_p1;

assign tmp_fu_226_p3 = add_ln32_reg_391[32'd12];

assign trunc_ln34_fu_217_p1 = add_ln32_fu_207_p2[11:0];

assign zext_ln31_fu_204_p1 = select_ln28_reg_376;

assign zext_ln34_fu_212_p1 = add_ln32_fu_207_p2;

assign zext_ln37_fu_221_p1 = trunc_ln34_fu_217_p1;

assign zext_ln38_fu_241_p1 = add_ln38_reg_386_pp0_iter1_reg;

endmodule //substring_substring_Pipeline_loop_0_VITIS_LOOP_31_1
