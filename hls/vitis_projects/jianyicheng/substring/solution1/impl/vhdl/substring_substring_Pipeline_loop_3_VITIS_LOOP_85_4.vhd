-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity substring_substring_Pipeline_loop_3_VITIS_LOOP_85_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    str_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    str_3_ce0 : OUT STD_LOGIC;
    str_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    str_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    str_4_ce0 : OUT STD_LOGIC;
    str_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_3_14_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_3_14_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of substring_substring_Pipeline_loop_3_VITIS_LOOP_85_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3000 : STD_LOGIC_VECTOR (13 downto 0) := "11000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln82_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln82_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_reg_366_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_370_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_370_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln82_fu_161_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_reg_376 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_1_fu_175_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln82_1_reg_381 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln92_fu_183_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln92_reg_386 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln92_reg_386_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln86_fu_207_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln86_reg_391 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln92_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln88_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln91_fu_221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal match_fu_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal match_5_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_56 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (1 downto 0);
    signal s_3_14_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_3_1_fu_297_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_3_fu_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln82_2_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_68 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten28_fu_72 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln82_fu_143_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten28_load : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln82_1_fu_169_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln85_fu_204_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln88_fu_217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln92_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_8_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln92_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_266_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln95_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln96_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component substring_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component substring_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln82_fu_137_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= select_ln82_1_fu_175_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten28_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln82_fu_137_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten28_fu_72 <= add_ln82_fu_143_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten28_fu_72 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln82_fu_137_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_56 <= add_ln92_fu_183_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_56 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    match_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    match_fu_52 <= ap_const_lv32_1;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    match_fu_52 <= match_5_fu_277_p3;
                end if;
            end if; 
        end if;
    end process;

    s_3_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    s_3_fu_64 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    s_3_fu_64 <= select_ln82_2_fu_259_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln86_reg_391 <= add_ln86_fu_207_p2;
                add_ln92_reg_386 <= add_ln92_fu_183_p2;
                add_ln92_reg_386_pp0_iter1_reg <= add_ln92_reg_386;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln82_reg_366 <= icmp_ln82_fu_137_p2;
                icmp_ln82_reg_366_pp0_iter1_reg <= icmp_ln82_reg_366;
                icmp_ln85_reg_370 <= icmp_ln85_fu_155_p2;
                icmp_ln85_reg_370_pp0_iter1_reg <= icmp_ln85_reg_370;
                select_ln82_1_reg_381 <= select_ln82_1_fu_175_p3;
                select_ln82_reg_376 <= select_ln82_fu_161_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln85_reg_370_pp0_iter2_reg <= icmp_ln85_reg_370_pp0_iter1_reg;
                icmp_ln92_reg_406 <= icmp_ln92_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                s_3_14_fu_60 <= s_3_1_fu_297_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln82_1_fu_169_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv13_1));
    add_ln82_fu_143_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten28_load) + unsigned(ap_const_lv14_1));
    add_ln86_fu_207_p2 <= std_logic_vector(unsigned(zext_ln85_fu_204_p1) + unsigned(select_ln82_1_reg_381));
    add_ln92_fu_183_p2 <= std_logic_vector(unsigned(select_ln82_fu_161_p3) + unsigned(ap_const_lv2_1));
    add_ln96_fu_291_p2 <= std_logic_vector(unsigned(select_ln82_2_fu_259_p3) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln82_fu_137_p2)
    begin
        if (((icmp_ln82_fu_137_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten28_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten28_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten28_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten28_load <= indvar_flatten28_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_56)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_56;
        end if; 
    end process;

    c_8_fu_233_p3 <= 
        str_4_q0 when (tmp_fu_226_p3(0) = '1') else 
        str_3_q0;
    icmp_ln82_fu_137_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten28_load = ap_const_lv14_3000) else "0";
    icmp_ln85_fu_155_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv2_3) else "0";
    icmp_ln92_fu_244_p2 <= "0" when (zext_ln92_fu_241_p1 = c_8_fu_233_p3) else "1";
    icmp_ln95_fu_285_p2 <= "1" when (match_5_fu_277_p3 = ap_const_lv32_1) else "0";
    match_5_fu_277_p3 <= 
        select_ln92_fu_266_p3 when (or_ln92_fu_273_p2(0) = '1') else 
        match_fu_52;
    or_ln92_fu_273_p2 <= (icmp_ln92_reg_406 or icmp_ln85_reg_370_pp0_iter2_reg);
    s_3_14_out <= s_3_14_fu_60;

    s_3_14_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln82_reg_366_pp0_iter1_reg)
    begin
        if (((icmp_ln82_reg_366_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_3_14_out_ap_vld <= ap_const_logic_1;
        else 
            s_3_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    s_3_1_fu_297_p3 <= 
        add_ln96_fu_291_p2 when (icmp_ln95_fu_285_p2(0) = '1') else 
        select_ln82_2_fu_259_p3;
    select_ln82_1_fu_175_p3 <= 
        add_ln82_1_fu_169_p2 when (icmp_ln85_fu_155_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln82_2_fu_259_p3 <= 
        s_3_14_fu_60 when (icmp_ln85_reg_370_pp0_iter2_reg(0) = '1') else 
        s_3_fu_64;
    select_ln82_fu_161_p3 <= 
        ap_const_lv2_0 when (icmp_ln85_fu_155_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln92_fu_266_p3 <= 
        ap_const_lv32_0 when (icmp_ln92_reg_406(0) = '1') else 
        ap_const_lv32_1;
    str_3_address0 <= zext_ln88_fu_212_p1(12 - 1 downto 0);

    str_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            str_3_ce0 <= ap_const_logic_1;
        else 
            str_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    str_4_address0 <= zext_ln91_fu_221_p1(12 - 1 downto 0);

    str_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            str_4_ce0 <= ap_const_logic_1;
        else 
            str_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_226_p3 <= add_ln86_reg_391(12 downto 12);
    trunc_ln88_fu_217_p1 <= add_ln86_fu_207_p2(12 - 1 downto 0);
    zext_ln85_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_reg_376),13));
    zext_ln88_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_fu_207_p2),64));
    zext_ln91_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln88_fu_217_p1),64));
    zext_ln92_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_reg_386_pp0_iter1_reg),32));
end behav;
