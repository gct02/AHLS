-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity substring_substring_Pipeline_loop_7_VITIS_LOOP_157_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    str_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    str_7_ce0 : OUT STD_LOGIC;
    str_7_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    s_7_18_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_7_18_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of substring_substring_Pipeline_loop_7_VITIS_LOOP_157_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2FF7 : STD_LOGIC_VECTOR (13 downto 0) := "10111111110111";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln154_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln154_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_324_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_328_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_328_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_142_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_reg_334 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln154_fu_156_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln154_reg_339 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln161_fu_164_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln161_reg_344 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln161_reg_344_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln161_reg_344_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln160_fu_193_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal match_fu_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal match_1_fu_235_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_50 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (1 downto 0);
    signal s_7_18_fu_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_7_1_fu_255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_7_fu_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal select_ln154_1_fu_207_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten56_fu_66 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln154_fu_124_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten56_load : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln154_1_fu_150_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln157_fu_185_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln158_fu_188_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln161_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln161_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln161_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln161_fu_222_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln164_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln165_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component substring_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component substring_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln154_fu_118_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_62 <= select_ln154_fu_156_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_62 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten56_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln154_fu_118_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten56_fu_66 <= add_ln154_fu_124_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten56_fu_66 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln154_fu_118_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_50 <= add_ln161_fu_164_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_50 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    match_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    match_fu_46 <= ap_const_lv32_1;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    match_fu_46 <= match_1_fu_235_p3;
                end if;
            end if; 
        end if;
    end process;

    s_7_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    s_7_fu_58 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    s_7_fu_58 <= select_ln154_1_fu_207_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln161_reg_344 <= add_ln161_fu_164_p2;
                add_ln161_reg_344_pp0_iter1_reg <= add_ln161_reg_344;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln154_reg_324 <= icmp_ln154_fu_118_p2;
                icmp_ln154_reg_324_pp0_iter1_reg <= icmp_ln154_reg_324;
                icmp_ln157_reg_328 <= icmp_ln157_fu_136_p2;
                icmp_ln157_reg_328_pp0_iter1_reg <= icmp_ln157_reg_328;
                select_ln154_reg_339 <= select_ln154_fu_156_p3;
                select_ln25_reg_334 <= select_ln25_fu_142_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln161_reg_344_pp0_iter2_reg <= add_ln161_reg_344_pp0_iter1_reg;
                c_reg_354 <= str_7_q0;
                icmp_ln157_reg_328_pp0_iter2_reg <= icmp_ln157_reg_328_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                s_7_18_fu_54 <= s_7_1_fu_255_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln154_1_fu_150_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv12_1));
    add_ln154_fu_124_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten56_load) + unsigned(ap_const_lv14_1));
    add_ln158_fu_188_p2 <= std_logic_vector(unsigned(zext_ln157_fu_185_p1) + unsigned(select_ln154_reg_339));
    add_ln161_fu_164_p2 <= std_logic_vector(unsigned(select_ln25_fu_142_p3) + unsigned(ap_const_lv2_1));
    add_ln165_fu_249_p2 <= std_logic_vector(unsigned(select_ln154_1_fu_207_p3) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln154_fu_118_p2)
    begin
        if (((icmp_ln154_fu_118_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten56_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten56_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten56_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten56_load <= indvar_flatten56_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_50)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_50;
        end if; 
    end process;

    icmp_ln154_fu_118_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten56_load = ap_const_lv14_2FF7) else "0";
    icmp_ln157_fu_136_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv2_3) else "0";
    icmp_ln161_fu_217_p2 <= "0" when (zext_ln161_fu_214_p1 = c_reg_354) else "1";
    icmp_ln164_fu_243_p2 <= "1" when (match_1_fu_235_p3 = ap_const_lv32_1) else "0";
    match_1_fu_235_p3 <= 
        select_ln161_fu_222_p3 when (or_ln161_fu_230_p2(0) = '1') else 
        match_fu_46;
    or_ln161_fu_230_p2 <= (icmp_ln161_fu_217_p2 or icmp_ln157_reg_328_pp0_iter2_reg);
    s_7_18_out <= s_7_18_fu_54;

    s_7_18_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln154_reg_324_pp0_iter1_reg)
    begin
        if (((icmp_ln154_reg_324_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            s_7_18_out_ap_vld <= ap_const_logic_1;
        else 
            s_7_18_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    s_7_1_fu_255_p3 <= 
        add_ln165_fu_249_p2 when (icmp_ln164_fu_243_p2(0) = '1') else 
        select_ln154_1_fu_207_p3;
    select_ln154_1_fu_207_p3 <= 
        s_7_18_fu_54 when (icmp_ln157_reg_328_pp0_iter2_reg(0) = '1') else 
        s_7_fu_58;
    select_ln154_fu_156_p3 <= 
        add_ln154_1_fu_150_p2 when (icmp_ln157_fu_136_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln161_fu_222_p3 <= 
        ap_const_lv32_0 when (icmp_ln161_fu_217_p2(0) = '1') else 
        ap_const_lv32_1;
    select_ln25_fu_142_p3 <= 
        ap_const_lv2_0 when (icmp_ln157_fu_136_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    str_7_address0 <= zext_ln160_fu_193_p1(12 - 1 downto 0);

    str_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            str_7_ce0 <= ap_const_logic_1;
        else 
            str_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln157_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_reg_334),12));
    zext_ln160_fu_193_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_fu_188_p2),64));
    zext_ln161_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_reg_344_pp0_iter2_reg),32));
end behav;
