// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="main_main,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.144540,HLS_SYN_LAT=17190,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3001,HLS_SYN_LUT=2500,HLS_VERSION=2023_2}" *)

module main (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_pp0_stage0 = 23'd2;
parameter    ap_ST_fsm_pp0_stage1 = 23'd4;
parameter    ap_ST_fsm_pp0_stage2 = 23'd8;
parameter    ap_ST_fsm_pp0_stage3 = 23'd16;
parameter    ap_ST_fsm_pp0_stage4 = 23'd32;
parameter    ap_ST_fsm_pp0_stage5 = 23'd64;
parameter    ap_ST_fsm_pp0_stage6 = 23'd128;
parameter    ap_ST_fsm_pp0_stage7 = 23'd256;
parameter    ap_ST_fsm_pp0_stage8 = 23'd512;
parameter    ap_ST_fsm_pp0_stage9 = 23'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 23'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 23'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 23'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 23'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 23'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 23'd65536;
parameter    ap_ST_fsm_pp0_stage16 = 23'd131072;
parameter    ap_ST_fsm_state204 = 23'd262144;
parameter    ap_ST_fsm_state205 = 23'd524288;
parameter    ap_ST_fsm_state206 = 23'd1048576;
parameter    ap_ST_fsm_state207 = 23'd2097152;
parameter    ap_ST_fsm_state208 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] A_address0;
reg    A_ce0;
wire   [63:0] A_q0;
wire   [9:0] B_address0;
reg    B_ce0;
wire   [63:0] B_q0;
wire   [63:0] grp_fu_98_p2;
reg   [63:0] reg_118;
wire    ap_CS_fsm_pp0_stage16;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage16_11001;
wire    ap_CS_fsm_pp0_stage13;
reg    ap_enable_reg_pp0_iter11;
wire    ap_block_pp0_stage13_11001;
wire   [0:0] icmp_ln16_fu_136_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0_11001;
reg   [63:0] A_load_reg_295;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [63:0] B_load_reg_300;
reg   [63:0] d_reg_305;
reg   [63:0] d_reg_305_pp0_iter2_reg;
reg   [63:0] d_reg_305_pp0_iter3_reg;
reg   [63:0] d_reg_305_pp0_iter4_reg;
reg   [63:0] d_reg_305_pp0_iter5_reg;
reg   [63:0] d_reg_305_pp0_iter6_reg;
reg   [63:0] d_reg_305_pp0_iter7_reg;
reg   [63:0] d_reg_305_pp0_iter8_reg;
reg   [63:0] d_reg_305_pp0_iter9_reg;
wire   [63:0] grp_fu_108_p2;
reg   [63:0] mul_i_i_reg_313;
reg    ap_enable_reg_pp0_iter2;
reg   [63:0] add1_i_i_reg_318;
wire    ap_CS_fsm_pp0_stage12;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage12_11001;
reg   [63:0] mul2_i_i_reg_323;
wire    ap_CS_fsm_pp0_stage9;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage9_11001;
reg   [63:0] add3_i_i_reg_328;
wire    ap_CS_fsm_pp0_stage8;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage8_11001;
reg   [63:0] mul4_i_i_reg_333;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage5_11001;
reg   [63:0] add5_i_i_reg_338;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter7;
wire    ap_block_pp0_stage4_11001;
reg   [63:0] mul6_i_i_reg_343;
reg    ap_enable_reg_pp0_iter8;
reg   [63:0] add7_i_i_reg_348;
reg    ap_enable_reg_pp0_iter9;
wire   [0:0] icmp_ln18_fu_176_p2;
reg   [0:0] icmp_ln18_reg_353;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln18_reg_353_pp0_iter10_reg;
reg   [0:0] icmp_ln18_reg_353_pp0_iter11_reg;
wire   [0:0] icmp_ln18_1_fu_182_p2;
reg   [0:0] icmp_ln18_1_reg_358;
reg   [0:0] icmp_ln18_1_reg_358_pp0_iter10_reg;
reg   [0:0] icmp_ln18_1_reg_358_pp0_iter11_reg;
wire   [0:0] grp_fu_112_p2;
reg   [0:0] tmp_3_reg_363;
reg   [0:0] tmp_3_reg_363_pp0_iter10_reg;
reg   [0:0] tmp_3_reg_363_pp0_iter11_reg;
reg   [63:0] mul8_i_i_reg_368;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15_11001;
reg   [63:0] add9_i_i_reg_373;
wire    ap_CS_fsm_pp0_stage14;
reg    ap_enable_reg_pp0_iter10;
wire    ap_block_pp0_stage14_11001;
reg   [63:0] s_load_reg_378;
wire    ap_CS_fsm_state204;
wire   [0:0] icmp_ln33_fu_235_p2;
reg   [0:0] icmp_ln33_reg_389;
wire   [0:0] icmp_ln33_1_fu_241_p2;
reg   [0:0] icmp_ln33_1_reg_394;
reg   [0:0] tmp_1_reg_399;
wire    ap_CS_fsm_state207;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage14_subdone;
wire   [63:0] zext_ln16_fu_148_p1;
wire    ap_block_pp0_stage0;
reg   [63:0] s_fu_64;
wire   [63:0] s_2_fu_201_p3;
wire    ap_block_pp0_stage15;
reg   [9:0] i_fu_68;
wire   [9:0] add_ln16_fu_142_p2;
reg   [63:0] grp_fu_98_p0;
reg   [63:0] grp_fu_98_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage16;
reg   [63:0] grp_fu_108_p0;
reg   [63:0] grp_fu_108_p1;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage5;
reg   [63:0] grp_fu_112_p0;
reg   [63:0] grp_fu_112_p1;
wire   [63:0] bitcast_ln18_fu_159_p1;
wire   [10:0] tmp_2_fu_162_p4;
wire   [51:0] trunc_ln18_fu_172_p1;
wire   [0:0] or_ln18_fu_192_p2;
wire   [0:0] and_ln18_fu_196_p2;
wire   [63:0] bitcast_ln33_fu_217_p1;
wire   [10:0] tmp_fu_221_p4;
wire   [51:0] trunc_ln33_fu_231_p1;
wire    ap_CS_fsm_state208;
wire   [0:0] or_ln33_fu_247_p2;
wire   [0:0] and_ln33_fu_251_p2;
wire   [0:0] xor_ln33_fu_256_p2;
reg   [4:0] grp_fu_112_opcode;
wire    ap_block_pp0_stage2_00001;
reg   [22:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state204_blk;
wire    ap_ST_fsm_state205_blk;
wire    ap_ST_fsm_state206_blk;
wire    ap_ST_fsm_state207_blk;
wire    ap_ST_fsm_state208_blk;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage3_11001;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage10_11001;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage15_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 s_fu_64 = 64'd0;
#0 i_fu_68 = 10'd0;
end

main_A_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
A_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(A_address0),
    .ce0(A_ce0),
    .q0(A_q0)
);

main_B_ROM_AUTO_1R #(
    .DataWidth( 64 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
B_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(B_address0),
    .ce0(B_ce0),
    .q0(B_q0)
);

main_dadd_64ns_64ns_64_16_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_16_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_98_p0),
    .din1(grp_fu_98_p1),
    .ce(1'b1),
    .dout(grp_fu_98_p2)
);

main_dmul_64ns_64ns_64_14_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_14_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_108_p0),
    .din1(grp_fu_108_p1),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

main_dcmp_64ns_64ns_1_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_4_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_112_p0),
    .din1(grp_fu_112_p1),
    .ce(1'b1),
    .opcode(grp_fu_112_opcode),
    .dout(grp_fu_112_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage14_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16)))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage16_subdone) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_68 <= 10'd0;
    end else if (((icmp_ln16_fu_136_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_68 <= add_ln16_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_fu_64 <= 64'd0;
    end else if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        s_fu_64 <= s_2_fu_201_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_load_reg_295 <= A_q0;
        B_load_reg_300 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        add1_i_i_reg_318 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        add3_i_i_reg_328 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        add5_i_i_reg_338 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add7_i_i_reg_348 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        add9_i_i_reg_373 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_reg_305 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_reg_305_pp0_iter2_reg <= d_reg_305;
        d_reg_305_pp0_iter3_reg <= d_reg_305_pp0_iter2_reg;
        d_reg_305_pp0_iter4_reg <= d_reg_305_pp0_iter3_reg;
        d_reg_305_pp0_iter5_reg <= d_reg_305_pp0_iter4_reg;
        d_reg_305_pp0_iter6_reg <= d_reg_305_pp0_iter5_reg;
        d_reg_305_pp0_iter7_reg <= d_reg_305_pp0_iter6_reg;
        d_reg_305_pp0_iter8_reg <= d_reg_305_pp0_iter7_reg;
        d_reg_305_pp0_iter9_reg <= d_reg_305_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        icmp_ln18_1_reg_358 <= icmp_ln18_1_fu_182_p2;
        icmp_ln18_1_reg_358_pp0_iter10_reg <= icmp_ln18_1_reg_358;
        icmp_ln18_1_reg_358_pp0_iter11_reg <= icmp_ln18_1_reg_358_pp0_iter10_reg;
        icmp_ln18_reg_353 <= icmp_ln18_fu_176_p2;
        icmp_ln18_reg_353_pp0_iter10_reg <= icmp_ln18_reg_353;
        icmp_ln18_reg_353_pp0_iter11_reg <= icmp_ln18_reg_353_pp0_iter10_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state204)) begin
        icmp_ln33_1_reg_394 <= icmp_ln33_1_fu_241_p2;
        icmp_ln33_reg_389 <= icmp_ln33_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        mul2_i_i_reg_323 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        mul4_i_i_reg_333 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        mul6_i_i_reg_343 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        mul8_i_i_reg_368 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mul_i_i_reg_313 <= grp_fu_108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage16_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16)))) begin
        reg_118 <= grp_fu_98_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        s_load_reg_378 <= s_fu_64;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state207)) begin
        tmp_1_reg_399 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_3_reg_363 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        tmp_3_reg_363_pp0_iter10_reg <= tmp_3_reg_363;
        tmp_3_reg_363_pp0_iter11_reg <= tmp_3_reg_363_pp0_iter10_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state204_blk = 1'b0;

assign ap_ST_fsm_state205_blk = 1'b0;

assign ap_ST_fsm_state206_blk = 1'b0;

assign ap_ST_fsm_state207_blk = 1'b0;

assign ap_ST_fsm_state208_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln16_fu_136_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state208)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state208)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_108_p0 = add7_i_i_reg_348;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        grp_fu_108_p0 = add5_i_i_reg_338;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_108_p0 = add3_i_i_reg_328;
    end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_108_p0 = add1_i_i_reg_318;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_108_p0 = reg_118;
    end else begin
        grp_fu_108_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_108_p1 = d_reg_305_pp0_iter9_reg;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        grp_fu_108_p1 = d_reg_305_pp0_iter7_reg;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_108_p1 = d_reg_305_pp0_iter5_reg;
    end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_108_p1 = d_reg_305_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_108_p1 = d_reg_305;
    end else begin
        grp_fu_108_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state204)) begin
        grp_fu_112_opcode = 5'd1;
    end else if (((1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_112_opcode = 5'd3;
    end else begin
        grp_fu_112_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state204)) begin
        grp_fu_112_p0 = s_fu_64;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_112_p0 = d_reg_305_pp0_iter9_reg;
    end else begin
        grp_fu_112_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state204)) begin
        grp_fu_112_p1 = 64'd4628785623262560256;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_112_p1 = 64'd0;
    end else begin
        grp_fu_112_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_98_p0 = s_fu_64;
    end else if (((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
        grp_fu_98_p0 = mul8_i_i_reg_368;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        grp_fu_98_p0 = mul6_i_i_reg_343;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        grp_fu_98_p0 = mul4_i_i_reg_333;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_98_p0 = mul2_i_i_reg_323;
    end else if (((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_98_p0 = mul_i_i_reg_313;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_98_p0 = d_reg_305;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_98_p0 = A_load_reg_295;
    end else begin
        grp_fu_98_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_98_p1 = add9_i_i_reg_373;
    end else if (((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16))) begin
        grp_fu_98_p1 = 64'd4593671619917905920;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        grp_fu_98_p1 = 64'd4598175219545276416;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        grp_fu_98_p1 = 64'd4599616371426034975;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_98_p1 = 64'd4596734067664517857;
    end else if (((1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_98_p1 = 64'd4604480259023595110;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_98_p1 = 64'd4603939827068310651;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_98_p1 = B_load_reg_300;
    end else begin
        grp_fu_98_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln16_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln16_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state204;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((~((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage14_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14)) & (1'b0 == ap_block_pp0_stage14_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage14_subdone) & (ap_enable_reg_pp0_iter10 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
                ap_NS_fsm = ap_ST_fsm_state204;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln16_fu_148_p1;

assign B_address0 = zext_ln16_fu_148_p1;

assign add_ln16_fu_142_p2 = (i_fu_68 + 10'd1);

assign and_ln18_fu_196_p2 = (tmp_3_reg_363_pp0_iter11_reg & or_ln18_fu_192_p2);

assign and_ln33_fu_251_p2 = (tmp_1_reg_399 & or_ln33_fu_247_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state204 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state207 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state208 = ap_CS_fsm[32'd22];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = xor_ln33_fu_256_p2;

assign bitcast_ln18_fu_159_p1 = d_reg_305_pp0_iter9_reg;

assign bitcast_ln33_fu_217_p1 = s_fu_64;

assign icmp_ln16_fu_136_p2 = ((i_fu_68 == 10'd1000) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_182_p2 = ((trunc_ln18_fu_172_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_176_p2 = ((tmp_2_fu_162_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_241_p2 = ((trunc_ln33_fu_231_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_235_p2 = ((tmp_fu_221_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign or_ln18_fu_192_p2 = (icmp_ln18_reg_353_pp0_iter11_reg | icmp_ln18_1_reg_358_pp0_iter11_reg);

assign or_ln33_fu_247_p2 = (icmp_ln33_reg_389 | icmp_ln33_1_reg_394);

assign s_2_fu_201_p3 = ((and_ln18_fu_196_p2[0:0] == 1'b1) ? reg_118 : s_load_reg_378);

assign tmp_2_fu_162_p4 = {{bitcast_ln18_fu_159_p1[62:52]}};

assign tmp_fu_221_p4 = {{bitcast_ln33_fu_217_p1[62:52]}};

assign trunc_ln18_fu_172_p1 = bitcast_ln18_fu_159_p1[51:0];

assign trunc_ln33_fu_231_p1 = bitcast_ln33_fu_217_p1[51:0];

assign xor_ln33_fu_256_p2 = (1'd1 ^ and_ln33_fu_251_p2);

assign zext_ln16_fu_148_p1 = i_fu_68;

endmodule //main
