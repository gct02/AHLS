-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity main is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "main_main,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.144540,HLS_SYN_LAT=17190,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=3001,HLS_SYN_LUT=2500,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state204 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state205 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state206 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state207 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state208 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_3FE47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_3FE6666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100110011001100110011001100110011001100110011001100110";
    constant ap_const_lv64_3FCAE147AE147AE1 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111001010111000010100011110101110000101000111101011100001";
    constant ap_const_lv64_3FD51EB851EB851F : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010101000111101011100001010001111010111000010100011111";
    constant ap_const_lv64_3FD0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_3FC0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_403CC00000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000111100110000000000000000000000000000000000000000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal B_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_98_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal icmp_ln16_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal A_load_reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal B_load_reg_300 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_305_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_i_reg_313 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add1_i_i_reg_318 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal mul2_i_i_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal add3_i_i_reg_328 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal mul4_i_i_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal add5_i_i_reg_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal mul6_i_i_reg_343 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal add7_i_i_reg_348 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal icmp_ln18_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln18_reg_353_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_353_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_358 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_358_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_358_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_363_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_363_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul8_i_i_reg_368 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal add9_i_i_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal s_load_reg_378 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state204 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state204 : signal is "none";
    signal icmp_ln33_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_389 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_399 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state207 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state207 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal zext_ln16_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal s_fu_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_2_fu_201_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal i_fu_68 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln16_fu_142_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_98_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_98_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_112_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln18_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_162_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln18_fu_172_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln18_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln33_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_221_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln33_fu_231_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state208 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state208 : signal is "none";
    signal or_ln33_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_112_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state204_blk : STD_LOGIC;
    signal ap_ST_fsm_state205_blk : STD_LOGIC;
    signal ap_ST_fsm_state206_blk : STD_LOGIC;
    signal ap_ST_fsm_state207_blk : STD_LOGIC;
    signal ap_ST_fsm_state208_blk : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component main_dadd_64ns_64ns_64_16_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_dmul_64ns_64ns_64_14_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_dcmp_64ns_64ns_1_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component main_A_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component main_B_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    A_U : component main_A_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_address0,
        ce0 => A_ce0,
        q0 => A_q0);

    B_U : component main_B_ROM_AUTO_1R
    generic map (
        DataWidth => 64,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_address0,
        ce0 => B_ce0,
        q0 => B_q0);

    dadd_64ns_64ns_64_16_full_dsp_1_U1 : component main_dadd_64ns_64ns_64_16_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_98_p0,
        din1 => grp_fu_98_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_98_p2);

    dmul_64ns_64ns_64_14_full_dsp_1_U2 : component main_dmul_64ns_64ns_64_14_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        din1 => grp_fu_108_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_108_p2);

    dcmp_64ns_64ns_1_4_no_dsp_1_U3 : component main_dcmp_64ns_64ns_1_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_112_p0,
        din1 => grp_fu_112_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_112_opcode,
        dout => grp_fu_112_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_68 <= ap_const_lv10_0;
            elsif (((icmp_ln16_fu_136_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_68 <= add_ln16_fu_142_p2;
            end if; 
        end if;
    end process;

    s_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                s_fu_64 <= ap_const_lv64_0;
            elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                s_fu_64 <= s_2_fu_201_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                A_load_reg_295 <= A_q0;
                B_load_reg_300 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                add1_i_i_reg_318 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                add3_i_i_reg_328 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then
                add5_i_i_reg_338 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add7_i_i_reg_348 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                add9_i_i_reg_373 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                d_reg_305 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                d_reg_305_pp0_iter2_reg <= d_reg_305;
                d_reg_305_pp0_iter3_reg <= d_reg_305_pp0_iter2_reg;
                d_reg_305_pp0_iter4_reg <= d_reg_305_pp0_iter3_reg;
                d_reg_305_pp0_iter5_reg <= d_reg_305_pp0_iter4_reg;
                d_reg_305_pp0_iter6_reg <= d_reg_305_pp0_iter5_reg;
                d_reg_305_pp0_iter7_reg <= d_reg_305_pp0_iter6_reg;
                d_reg_305_pp0_iter8_reg <= d_reg_305_pp0_iter7_reg;
                d_reg_305_pp0_iter9_reg <= d_reg_305_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln18_1_reg_358 <= icmp_ln18_1_fu_182_p2;
                icmp_ln18_1_reg_358_pp0_iter10_reg <= icmp_ln18_1_reg_358;
                icmp_ln18_1_reg_358_pp0_iter11_reg <= icmp_ln18_1_reg_358_pp0_iter10_reg;
                icmp_ln18_reg_353 <= icmp_ln18_fu_176_p2;
                icmp_ln18_reg_353_pp0_iter10_reg <= icmp_ln18_reg_353;
                icmp_ln18_reg_353_pp0_iter11_reg <= icmp_ln18_reg_353_pp0_iter10_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state204)) then
                icmp_ln33_1_reg_394 <= icmp_ln33_1_fu_241_p2;
                icmp_ln33_reg_389 <= icmp_ln33_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                mul2_i_i_reg_323 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then
                mul4_i_i_reg_333 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                mul6_i_i_reg_343 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                mul8_i_i_reg_368 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                mul_i_i_reg_313 <= grp_fu_108_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)))) then
                reg_118 <= grp_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                s_load_reg_378 <= s_fu_64;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state207)) then
                tmp_1_reg_399 <= grp_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_3_reg_363 <= grp_fu_112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_3_reg_363_pp0_iter10_reg <= tmp_3_reg_363;
                tmp_3_reg_363_pp0_iter11_reg <= tmp_3_reg_363_pp0_iter10_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, icmp_ln16_fu_136_p2, ap_CS_fsm_pp0_stage14, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage15_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln16_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln16_fu_136_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state204;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((not(((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                elsif (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                    ap_NS_fsm <= ap_ST_fsm_state204;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_state204 => 
                ap_NS_fsm <= ap_ST_fsm_state205;
            when ap_ST_fsm_state205 => 
                ap_NS_fsm <= ap_ST_fsm_state206;
            when ap_ST_fsm_state206 => 
                ap_NS_fsm <= ap_ST_fsm_state207;
            when ap_ST_fsm_state207 => 
                ap_NS_fsm <= ap_ST_fsm_state208;
            when ap_ST_fsm_state208 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= zext_ln16_fu_148_p1(10 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln16_fu_148_p1(10 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln16_fu_142_p2 <= std_logic_vector(unsigned(i_fu_68) + unsigned(ap_const_lv10_1));
    and_ln18_fu_196_p2 <= (tmp_3_reg_363_pp0_iter11_reg and or_ln18_fu_192_p2);
    and_ln33_fu_251_p2 <= (tmp_1_reg_399 and or_ln33_fu_247_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state204 <= ap_CS_fsm(18);
    ap_CS_fsm_state207 <= ap_CS_fsm(21);
    ap_CS_fsm_state208 <= ap_CS_fsm(22);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state204_blk <= ap_const_logic_0;
    ap_ST_fsm_state205_blk <= ap_const_logic_0;
    ap_ST_fsm_state206_blk <= ap_const_logic_0;
    ap_ST_fsm_state207_blk <= ap_const_logic_0;
    ap_ST_fsm_state208_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln16_fu_136_p2)
    begin
        if ((icmp_ln16_fu_136_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state208)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state208)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state208)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state208)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln33_fu_256_p2),32));
    bitcast_ln18_fu_159_p1 <= d_reg_305_pp0_iter9_reg;
    bitcast_ln33_fu_217_p1 <= s_fu_64;

    grp_fu_108_p0_assign_proc : process(reg_118, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, add1_i_i_reg_318, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage9, add3_i_i_reg_328, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, add5_i_i_reg_338, ap_enable_reg_pp0_iter7, add7_i_i_reg_348, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage13, ap_block_pp0_stage9, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_108_p0 <= add7_i_i_reg_348;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            grp_fu_108_p0 <= add5_i_i_reg_338;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_108_p0 <= add3_i_i_reg_328;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_108_p0 <= add1_i_i_reg_318;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_108_p0 <= reg_118;
        else 
            grp_fu_108_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_108_p1_assign_proc : process(ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage0, d_reg_305, d_reg_305_pp0_iter3_reg, d_reg_305_pp0_iter5_reg, d_reg_305_pp0_iter7_reg, d_reg_305_pp0_iter9_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage9, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage13, ap_block_pp0_stage9, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_108_p1 <= d_reg_305_pp0_iter9_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            grp_fu_108_p1 <= d_reg_305_pp0_iter7_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_108_p1 <= d_reg_305_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_108_p1 <= d_reg_305_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_108_p1 <= d_reg_305;
        else 
            grp_fu_108_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_112_opcode_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state204, ap_block_pp0_stage2_00001)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state204)) then 
            grp_fu_112_opcode <= ap_const_lv5_1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_112_opcode <= ap_const_lv5_3;
        else 
            grp_fu_112_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_112_p0_assign_proc : process(d_reg_305_pp0_iter9_reg, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state204, s_fu_64, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state204)) then 
            grp_fu_112_p0 <= s_fu_64;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_112_p0 <= d_reg_305_pp0_iter9_reg;
        else 
            grp_fu_112_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_112_p1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state204, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state204)) then 
            grp_fu_112_p1 <= ap_const_lv64_403CC00000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_112_p1 <= ap_const_lv64_0;
        else 
            grp_fu_112_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_98_p0_assign_proc : process(ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter1, A_load_reg_295, ap_CS_fsm_pp0_stage1, d_reg_305, mul_i_i_reg_313, ap_enable_reg_pp0_iter2, mul2_i_i_reg_323, ap_enable_reg_pp0_iter4, mul4_i_i_reg_333, ap_enable_reg_pp0_iter6, mul6_i_i_reg_343, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, mul8_i_i_reg_368, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage14, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, s_fu_64, ap_block_pp0_stage15, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_98_p0 <= s_fu_64;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_98_p0 <= mul8_i_i_reg_368;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            grp_fu_98_p0 <= mul6_i_i_reg_343;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            grp_fu_98_p0 <= mul4_i_i_reg_333;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_98_p0 <= mul2_i_i_reg_323;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_98_p0 <= mul_i_i_reg_313;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_98_p0 <= d_reg_305;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_98_p0 <= A_load_reg_295;
        else 
            grp_fu_98_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_98_p1_assign_proc : process(ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, B_load_reg_300, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage15, add9_i_i_reg_373, ap_CS_fsm_pp0_stage14, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter0, ap_block_pp0_stage15, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_98_p1 <= add9_i_i_reg_373;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_98_p1 <= ap_const_lv64_3FC0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            grp_fu_98_p1 <= ap_const_lv64_3FD0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            grp_fu_98_p1 <= ap_const_lv64_3FD51EB851EB851F;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_98_p1 <= ap_const_lv64_3FCAE147AE147AE1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_98_p1 <= ap_const_lv64_3FE6666666666666;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_98_p1 <= ap_const_lv64_3FE47AE147AE147B;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_98_p1 <= B_load_reg_300;
        else 
            grp_fu_98_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln16_fu_136_p2 <= "1" when (i_fu_68 = ap_const_lv10_3E8) else "0";
    icmp_ln18_1_fu_182_p2 <= "1" when (trunc_ln18_fu_172_p1 = ap_const_lv52_0) else "0";
    icmp_ln18_fu_176_p2 <= "0" when (tmp_2_fu_162_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln33_1_fu_241_p2 <= "1" when (trunc_ln33_fu_231_p1 = ap_const_lv52_0) else "0";
    icmp_ln33_fu_235_p2 <= "0" when (tmp_fu_221_p4 = ap_const_lv11_7FF) else "1";
    or_ln18_fu_192_p2 <= (icmp_ln18_reg_353_pp0_iter11_reg or icmp_ln18_1_reg_358_pp0_iter11_reg);
    or_ln33_fu_247_p2 <= (icmp_ln33_reg_389 or icmp_ln33_1_reg_394);
    s_2_fu_201_p3 <= 
        reg_118 when (and_ln18_fu_196_p2(0) = '1') else 
        s_load_reg_378;
    tmp_2_fu_162_p4 <= bitcast_ln18_fu_159_p1(62 downto 52);
    tmp_fu_221_p4 <= bitcast_ln33_fu_217_p1(62 downto 52);
    trunc_ln18_fu_172_p1 <= bitcast_ln18_fu_159_p1(52 - 1 downto 0);
    trunc_ln33_fu_231_p1 <= bitcast_ln33_fu_217_p1(52 - 1 downto 0);
    xor_ln33_fu_256_p2 <= (ap_const_lv1_1 xor and_ln33_fu_251_p2);
    zext_ln16_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_68),64));
end behav;
