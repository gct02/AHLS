-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_processImage is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    factor : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
    sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
    result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_x_ce0 : OUT STD_LOGIC;
    result_x_we0 : OUT STD_LOGIC;
    result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_y_ce0 : OUT STD_LOGIC;
    result_y_we0 : OUT STD_LOGIC;
    result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_w_ce0 : OUT STD_LOGIC;
    result_w_we0 : OUT STD_LOGIC;
    result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_h_ce0 : OUT STD_LOGIC;
    result_h_we0 : OUT STD_LOGIC;
    result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    winSize_width_val : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_278_p_ce : OUT STD_LOGIC;
    grp_fu_298_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_298_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_298_p_ce : OUT STD_LOGIC;
    grp_fu_301_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_301_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_301_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
    grp_fu_301_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
    grp_fu_301_p_ce : OUT STD_LOGIC;
    grp_fu_312_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_312_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_312_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_312_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_312_p_ce : OUT STD_LOGIC );
end;


architecture behav of face_detect_processImage is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (93 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (93 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (93 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (93 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (93 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (93 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (93 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (93 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (93 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (93 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (93 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (93 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal cast_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cast1_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_849 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln132_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_1_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln132_1_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln132_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal y_fu_408_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal y_reg_883 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln132_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln132_reg_888 : STD_LOGIC_VECTOR (7 downto 0);
    signal notlhs_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal notrhs_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal cond_i15_fu_457_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal cond_i15_reg_908 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_reg_913 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal xs_sign_1_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln133_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln133_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal x_fu_486_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_reg_932 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln133_fu_492_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln133_reg_937 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_ap_return : STD_LOGIC_VECTOR (5 downto 0);
    signal result_reg_942 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal icmp_ln139_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln139_reg_947 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal trunc_ln505_1_fu_510_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln505_1_reg_951 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_fu_523_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_2_fu_541_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_2_reg_961 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln15_1_fu_558_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal zext_ln18_1_fu_565_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_7_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal tmp_8_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_601_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal result_8_fu_611_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_8_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal icmp_ln61_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln61_1_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_1_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal select_ln61_fu_656_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln61_reg_1014 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1019 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal xs_sign_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal trunc_ln505_fu_685_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln505_reg_1029 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_6_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_717_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_reg_1039 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln15_fu_734_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal zext_ln18_fu_741_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal tmp_5_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_777_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal result_7_fu_787_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_7_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal zext_ln141_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_reg_1077 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln145_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln145_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal SUM1_data_ce0 : STD_LOGIC;
    signal SUM1_data_we0 : STD_LOGIC;
    signal SUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce1 : STD_LOGIC;
    signal SUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce2 : STD_LOGIC;
    signal SUM1_data_q2 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce3 : STD_LOGIC;
    signal SUM1_data_q3 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce4 : STD_LOGIC;
    signal SUM1_data_q4 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_ce5 : STD_LOGIC;
    signal SUM1_data_q5 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal SQSUM1_data_ce0 : STD_LOGIC;
    signal SQSUM1_data_we0 : STD_LOGIC;
    signal SQSUM1_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_ce1 : STD_LOGIC;
    signal SQSUM1_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_idle : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_ready : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_ce0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0 : STD_LOGIC;
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cascadeClassifier_fu_269_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_done : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce2 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce3 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address4 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce4 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SUM1_data_address5 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SUM1_data_ce5 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_fu_269_SQSUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_grp_fu_342_p_din0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_cascadeClassifier_fu_269_grp_fu_342_p_din1 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_cascadeClassifier_fu_269_grp_fu_342_p_ce : STD_LOGIC;
    signal x_2_reg_248 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (93 downto 0);
    signal ap_NS_fsm_state6 : STD_LOGIC;
    signal grp_cascadeClassifier_fu_269_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal p_y_fu_150 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal result_size_0_fu_154 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmp_ln132_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_327_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal value_assign_1_to_int_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_432_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_22_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_1_fu_501_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_1_fu_513_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_1_fu_517_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_1_fu_531_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln18_2_fu_537_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mantissa_1_fu_549_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln18_3_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal result_5_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln61_fu_617_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_621_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_631_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln61_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_fu_675_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_689_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_693_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_707_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln18_fu_713_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mantissa_fu_725_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln18_1_fu_738_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal grp_fu_751_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal result_2_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_ce : STD_LOGIC;
    signal icmp_ln133_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ST_fsm_state91_blk : STD_LOGIC;
    signal ap_ST_fsm_state92_blk : STD_LOGIC;
    signal ap_ST_fsm_state93_blk : STD_LOGIC;
    signal ap_ST_fsm_state94_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
        bound : IN STD_LOGIC_VECTOR (63 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce0 : OUT STD_LOGIC;
        SUM1_data_we0 : OUT STD_LOGIC;
        SUM1_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce0 : OUT STD_LOGIC;
        SQSUM1_data_we0 : OUT STD_LOGIC;
        SQSUM1_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_cascadeClassifier IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce0 : OUT STD_LOGIC;
        SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce1 : OUT STD_LOGIC;
        SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce2 : OUT STD_LOGIC;
        SUM1_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce3 : OUT STD_LOGIC;
        SUM1_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce4 : OUT STD_LOGIC;
        SUM1_data_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce5 : OUT STD_LOGIC;
        SUM1_data_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce0 : OUT STD_LOGIC;
        SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SQSUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SQSUM1_data_ce1 : OUT STD_LOGIC;
        SQSUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        pt_x_val : IN STD_LOGIC_VECTOR (16 downto 0);
        pt_y_val : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (5 downto 0);
        grp_fu_342_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
        grp_fu_342_p_din1 : OUT STD_LOGIC_VECTOR (32 downto 0);
        grp_fu_342_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_342_p_ce : OUT STD_LOGIC );
    end component;


    component face_detect_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_sitofp_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_fpext_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_fcmp_32ns_32ns_1_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_dadd_64ns_64ns_64_16_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_mul_32s_32s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_lshr_137ns_32ns_137_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (136 downto 0);
        din1 : IN STD_LOGIC_VECTOR (136 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (136 downto 0) );
    end component;


    component face_detect_shl_137ns_32ns_137_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (136 downto 0);
        din1 : IN STD_LOGIC_VECTOR (136 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (136 downto 0) );
    end component;


    component face_detect_processImage_SUM1_data_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address2 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address3 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address4 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address5 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_processImage_SQSUM1_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    SUM1_data_U : component face_detect_processImage_SUM1_data_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SUM1_data_address0,
        ce0 => SUM1_data_ce0,
        we0 => SUM1_data_we0,
        d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_d0,
        q0 => SUM1_data_q0,
        address1 => grp_cascadeClassifier_fu_269_SUM1_data_address1,
        ce1 => SUM1_data_ce1,
        q1 => SUM1_data_q1,
        address2 => grp_cascadeClassifier_fu_269_SUM1_data_address2,
        ce2 => SUM1_data_ce2,
        q2 => SUM1_data_q2,
        address3 => grp_cascadeClassifier_fu_269_SUM1_data_address3,
        ce3 => SUM1_data_ce3,
        q3 => SUM1_data_q3,
        address4 => grp_cascadeClassifier_fu_269_SUM1_data_address4,
        ce4 => SUM1_data_ce4,
        q4 => SUM1_data_q4,
        address5 => grp_cascadeClassifier_fu_269_SUM1_data_address5,
        ce5 => SUM1_data_ce5,
        q5 => SUM1_data_q5);

    SQSUM1_data_U : component face_detect_processImage_SQSUM1_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SQSUM1_data_address0,
        ce0 => SQSUM1_data_ce0,
        we0 => SQSUM1_data_we0,
        d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_d0,
        q0 => SQSUM1_data_q0,
        address1 => grp_cascadeClassifier_fu_269_SQSUM1_data_address1,
        ce1 => SQSUM1_data_ce1,
        q1 => SQSUM1_data_q1);

    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259 : component face_detect_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start,
        ap_done => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done,
        ap_idle => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_idle,
        ap_ready => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_ready,
        sum_col => sum_col,
        bound => bound_reg_849,
        IMG1_data_address0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_address0,
        IMG1_data_ce0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_ce0,
        IMG1_data_q0 => IMG1_data_q0,
        SUM1_data_address0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0,
        SUM1_data_ce0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0,
        SUM1_data_we0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0,
        SUM1_data_d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_d0,
        SUM1_data_q0 => SUM1_data_q0,
        SQSUM1_data_address0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0,
        SQSUM1_data_ce0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0,
        SQSUM1_data_we0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0,
        SQSUM1_data_d0 => grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_d0,
        SQSUM1_data_q0 => SQSUM1_data_q0);

    grp_cascadeClassifier_fu_269 : component face_detect_cascadeClassifier
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_fu_269_ap_start,
        ap_done => grp_cascadeClassifier_fu_269_ap_done,
        ap_idle => grp_cascadeClassifier_fu_269_ap_idle,
        ap_ready => grp_cascadeClassifier_fu_269_ap_ready,
        SUM1_data_address0 => grp_cascadeClassifier_fu_269_SUM1_data_address0,
        SUM1_data_ce0 => grp_cascadeClassifier_fu_269_SUM1_data_ce0,
        SUM1_data_q0 => SUM1_data_q0,
        SUM1_data_address1 => grp_cascadeClassifier_fu_269_SUM1_data_address1,
        SUM1_data_ce1 => grp_cascadeClassifier_fu_269_SUM1_data_ce1,
        SUM1_data_q1 => SUM1_data_q1,
        SUM1_data_address2 => grp_cascadeClassifier_fu_269_SUM1_data_address2,
        SUM1_data_ce2 => grp_cascadeClassifier_fu_269_SUM1_data_ce2,
        SUM1_data_q2 => SUM1_data_q2,
        SUM1_data_address3 => grp_cascadeClassifier_fu_269_SUM1_data_address3,
        SUM1_data_ce3 => grp_cascadeClassifier_fu_269_SUM1_data_ce3,
        SUM1_data_q3 => SUM1_data_q3,
        SUM1_data_address4 => grp_cascadeClassifier_fu_269_SUM1_data_address4,
        SUM1_data_ce4 => grp_cascadeClassifier_fu_269_SUM1_data_ce4,
        SUM1_data_q4 => SUM1_data_q4,
        SUM1_data_address5 => grp_cascadeClassifier_fu_269_SUM1_data_address5,
        SUM1_data_ce5 => grp_cascadeClassifier_fu_269_SUM1_data_ce5,
        SUM1_data_q5 => SUM1_data_q5,
        SQSUM1_data_address0 => grp_cascadeClassifier_fu_269_SQSUM1_data_address0,
        SQSUM1_data_ce0 => grp_cascadeClassifier_fu_269_SQSUM1_data_ce0,
        SQSUM1_data_q0 => SQSUM1_data_q0,
        SQSUM1_data_address1 => grp_cascadeClassifier_fu_269_SQSUM1_data_address1,
        SQSUM1_data_ce1 => grp_cascadeClassifier_fu_269_SQSUM1_data_ce1,
        SQSUM1_data_q1 => SQSUM1_data_q1,
        pt_x_val => trunc_ln133_reg_937,
        pt_y_val => trunc_ln132_reg_888,
        ap_return => grp_cascadeClassifier_fu_269_ap_return,
        grp_fu_342_p_din0 => grp_cascadeClassifier_fu_269_grp_fu_342_p_din0,
        grp_fu_342_p_din1 => grp_cascadeClassifier_fu_269_grp_fu_342_p_din1,
        grp_fu_342_p_dout0 => grp_fu_342_p2,
        grp_fu_342_p_ce => grp_cascadeClassifier_fu_269_grp_fu_342_p_ce);

    sitofp_32ns_32_7_no_dsp_1_U64 : component face_detect_sitofp_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_327_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p1);

    mul_32s_32s_64_5_1_U68 : component face_detect_mul_32s_32s_64_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 33,
        din1_WIDTH => 33,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_342_p0,
        din1 => grp_fu_342_p1,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p2);

    lshr_137ns_32ns_137_7_1_U69 : component face_detect_lshr_137ns_32ns_137_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 137,
        din1_WIDTH => 32,
        dout_WIDTH => 137)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_1_fu_558_p1,
        din1 => zext_ln18_1_fu_565_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    shl_137ns_32ns_137_7_1_U70 : component face_detect_shl_137ns_32ns_137_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 137,
        din1_WIDTH => 32,
        dout_WIDTH => 137)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_1_fu_558_p1,
        din1 => zext_ln18_1_fu_565_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);

    lshr_137ns_32ns_137_7_1_U71 : component face_detect_lshr_137ns_32ns_137_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 137,
        din1_WIDTH => 32,
        dout_WIDTH => 137)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_fu_734_p1,
        din1 => zext_ln18_fu_741_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_745_p2);

    shl_137ns_32ns_137_7_1_U72 : component face_detect_shl_137ns_32ns_137_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 137,
        din1_WIDTH => 32,
        dout_WIDTH => 137)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_fu_734_p1,
        din1 => zext_ln18_fu_741_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_751_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cascadeClassifier_fu_269_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_fu_269_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                    grp_cascadeClassifier_fu_269_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_fu_269_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_fu_269_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state6) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_y_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_y_fu_150 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                p_y_fu_150 <= y_reg_883;
            end if; 
        end if;
    end process;

    result_size_0_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                result_size_0_fu_154 <= p_read;
            elsif (((icmp_ln139_reg_947 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
                result_size_0_fu_154 <= add_ln145_reg_1082;
            end if; 
        end if;
    end process;

    x_2_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                x_2_reg_248 <= x_reg_932;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                x_2_reg_248 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln132_1_reg_870 <= add_ln132_1_fu_390_p2;
                add_ln132_reg_865 <= add_ln132_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                add_ln145_reg_1082 <= add_ln145_fu_800_p2;
                result_7_reg_1072 <= result_7_fu_787_p3;
                    zext_ln141_reg_1077(31 downto 0) <= zext_ln141_fu_793_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bound_reg_849 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    cond_i15_reg_908(63) <= cond_i15_fu_457_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                data_1_reg_913 <= data_1_fu_465_p1;
                xs_sign_1_reg_919 <= data_1_fu_465_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                dc_reg_1019 <= grp_fu_312_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                icmp_ln139_reg_947 <= icmp_ln139_fu_496_p2;
                select_ln18_2_reg_961 <= select_ln18_2_fu_541_p3;
                tmp_reg_956 <= add_ln486_1_fu_517_p2(11 downto 11);
                trunc_ln505_1_reg_951 <= trunc_ln505_1_fu_510_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                icmp_ln61_1_reg_1004 <= icmp_ln61_1_fu_641_p2;
                icmp_ln61_reg_999 <= icmp_ln61_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                notlhs_reg_893 <= notlhs_fu_436_p2;
                notrhs_reg_898 <= notrhs_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_349 <= grp_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state22))) then
                reg_354 <= grp_fu_278_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_360 <= grp_fu_298_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                result_8_reg_994 <= result_8_fu_611_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                result_reg_942 <= grp_cascadeClassifier_fu_269_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                select_ln18_reg_1039 <= select_ln18_fu_717_p3;
                tmp_6_reg_1034 <= add_ln486_fu_693_p2(11 downto 11);
                trunc_ln505_reg_1029 <= trunc_ln505_fu_685_p1;
                xs_sign_reg_1024 <= data_fu_664_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                    select_ln61_reg_1014(63) <= select_ln61_fu_656_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_2_reg_903 <= grp_fu_301_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                tmp_4_reg_1009 <= grp_fu_301_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                tmp_5_reg_1061 <= grp_fu_751_p2(84 downto 53);
                tmp_s_reg_1056 <= grp_fu_745_p2(84 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_7_reg_978 <= grp_fu_569_p2(84 downto 53);
                tmp_8_reg_983 <= grp_fu_575_p2(84 downto 53);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                trunc_ln132_reg_888 <= trunc_ln132_fu_414_p1;
                y_reg_883 <= y_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                trunc_ln133_reg_937 <= trunc_ln133_fu_492_p1;
                x_reg_932 <= x_fu_486_p2;
                    zext_ln133_reg_924(30 downto 0) <= zext_ln133_fu_477_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                val_1_reg_988 <= val_1_fu_601_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                val_reg_1066 <= val_fu_777_p3;
            end if;
        end if;
    end process;
    cond_i15_reg_908(62 downto 0) <= "011111111100000000000000000000000000000000000000000000000000000";
    zext_ln133_reg_924(31) <= '0';
    select_ln61_reg_1014(62 downto 0) <= "011111111100000000000000000000000000000000000000000000000000000";
    zext_ln141_reg_1077(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state44, ap_CS_fsm_state46, icmp_ln139_fu_496_p2, ap_CS_fsm_state47, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done, grp_cascadeClassifier_fu_269_ap_done, icmp_ln132_fu_403_p2, icmp_ln133_fu_481_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln132_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln133_fu_481_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((grp_cascadeClassifier_fu_269_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln139_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state93;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    IMG1_data_address0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_address0;
    IMG1_data_ce0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_IMG1_data_ce0;

    SQSUM1_data_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state46, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0, grp_cascadeClassifier_fu_269_SQSUM1_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_address0 <= grp_cascadeClassifier_fu_269_SQSUM1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SQSUM1_data_address0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_address0;
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state46, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0, grp_cascadeClassifier_fu_269_SQSUM1_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_ce0 <= grp_cascadeClassifier_fu_269_SQSUM1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SQSUM1_data_ce0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_ce0;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_ce1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_SQSUM1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SQSUM1_data_ce1 <= grp_cascadeClassifier_fu_269_SQSUM1_data_ce1;
        else 
            SQSUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_we0_assign_proc : process(ap_CS_fsm_state7, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SQSUM1_data_we0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SQSUM1_data_we0;
        else 
            SQSUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state46, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0, grp_cascadeClassifier_fu_269_SUM1_data_address0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_address0 <= grp_cascadeClassifier_fu_269_SUM1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SUM1_data_address0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_address0;
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state46, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0, grp_cascadeClassifier_fu_269_SUM1_data_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce0 <= grp_cascadeClassifier_fu_269_SUM1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SUM1_data_ce0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_ce0;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_SUM1_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce1 <= grp_cascadeClassifier_fu_269_SUM1_data_ce1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce2_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_SUM1_data_ce2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce2 <= grp_cascadeClassifier_fu_269_SUM1_data_ce2;
        else 
            SUM1_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce3_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_SUM1_data_ce3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce3 <= grp_cascadeClassifier_fu_269_SUM1_data_ce3;
        else 
            SUM1_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce4_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_SUM1_data_ce4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce4 <= grp_cascadeClassifier_fu_269_SUM1_data_ce4;
        else 
            SUM1_data_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce5_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_SUM1_data_ce5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            SUM1_data_ce5 <= grp_cascadeClassifier_fu_269_SUM1_data_ce5;
        else 
            SUM1_data_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_we0_assign_proc : process(ap_CS_fsm_state7, grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            SUM1_data_we0 <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_SUM1_data_we0;
        else 
            SUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln132_1_fu_390_p2 <= std_logic_vector(unsigned(sum_row) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln132_fu_385_p2 <= std_logic_vector(unsigned(sum_col) + unsigned(ap_const_lv32_FFFFFFE8));
    add_ln145_fu_800_p2 <= std_logic_vector(unsigned(result_size_0_fu_154) + unsigned(ap_const_lv32_1));
    add_ln486_1_fu_517_p2 <= std_logic_vector(unsigned(zext_ln486_1_fu_513_p1) + unsigned(ap_const_lv12_C01));
    add_ln486_fu_693_p2 <= std_logic_vector(unsigned(zext_ln486_fu_689_p1) + unsigned(ap_const_lv12_C01));
    and_ln61_fu_651_p2 <= (tmp_4_reg_1009 and or_ln61_fu_647_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_NS_fsm_state6 <= ap_NS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(grp_cascadeClassifier_fu_269_ap_done)
    begin
        if ((grp_cascadeClassifier_fu_269_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done)
    begin
        if ((grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;
    ap_ST_fsm_state88_blk <= ap_const_logic_0;
    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state90_blk <= ap_const_logic_0;
    ap_ST_fsm_state91_blk <= ap_const_logic_0;
    ap_ST_fsm_state92_blk <= ap_const_logic_0;
    ap_ST_fsm_state93_blk <= ap_const_logic_0;
    ap_ST_fsm_state94_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, icmp_ln132_fu_403_p2)
    begin
        if ((((icmp_ln132_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln132_fu_403_p2)
    begin
        if (((icmp_ln132_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= result_size_0_fu_154;
    bitcast_ln61_fu_617_p1 <= reg_354;
    cast1_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_col),64));
    cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_row),64));
    cond_i15_fu_457_p3 <= 
        ap_const_lv64_3FE0000000000000 when (empty_23_fu_452_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
    data_1_fu_465_p1 <= grp_fu_312_p_dout0;
    data_fu_664_p1 <= dc_reg_1019;
    empty_22_fu_448_p2 <= (notrhs_reg_898 or notlhs_reg_893);
    empty_23_fu_452_p2 <= (tmp_2_reg_903 and empty_22_fu_448_p2);
    empty_fu_432_p1 <= value_assign_1_to_int_fu_418_p1(23 - 1 downto 0);
    grp_cascadeClassifier_fu_269_ap_start <= grp_cascadeClassifier_fu_269_ap_start_reg;
    grp_fu_278_p_ce <= ap_const_logic_1;
    grp_fu_278_p_din0 <= reg_349;
    grp_fu_278_p_din1 <= factor;
    grp_fu_298_p_ce <= ap_const_logic_1;
    grp_fu_298_p_din0 <= reg_354;
    grp_fu_301_p_ce <= ap_const_logic_1;
    grp_fu_301_p_din0 <= reg_354;
    grp_fu_301_p_din1 <= ap_const_lv32_0;
    grp_fu_301_p_opcode <= ap_const_lv5_3;
    grp_fu_312_p_ce <= ap_const_logic_1;
    grp_fu_312_p_din0 <= reg_360;
    grp_fu_312_p_din1 <= grp_fu_338_p1;
    grp_fu_312_p_opcode <= ap_const_lv2_0;

    grp_fu_327_p0_assign_proc : process(zext_ln132_fu_398_p1, ap_CS_fsm_state8, zext_ln133_reg_924, ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_327_p0 <= zext_ln133_reg_924;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_327_p0 <= zext_ln132_fu_398_p1;
        else 
            grp_fu_327_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(cond_i15_reg_908, select_ln61_reg_1014, ap_CS_fsm_state28, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            grp_fu_338_p1 <= select_ln61_reg_1014;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_338_p1 <= cond_i15_reg_908;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_ce_assign_proc : process(ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_grp_fu_342_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_342_ce <= grp_cascadeClassifier_fu_269_grp_fu_342_p_ce;
        else 
            grp_fu_342_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_342_p0_assign_proc : process(ap_CS_fsm_state1, cast_fu_365_p1, ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_grp_fu_342_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_342_p0 <= grp_cascadeClassifier_fu_269_grp_fu_342_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_342_p0 <= cast_fu_365_p1(33 - 1 downto 0);
        else 
            grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(ap_CS_fsm_state1, cast1_fu_370_p1, ap_CS_fsm_state46, grp_cascadeClassifier_fu_269_grp_fu_342_p_din1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            grp_fu_342_p1 <= grp_cascadeClassifier_fu_269_grp_fu_342_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_342_p1 <= cast1_fu_370_p1(33 - 1 downto 0);
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start <= grp_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2_fu_259_ap_start_reg;
    icmp_ln132_fu_403_p2 <= "1" when (signed(zext_ln132_fu_398_p1) < signed(add_ln132_1_reg_870)) else "0";
    icmp_ln133_fu_481_p2 <= "1" when (signed(zext_ln133_fu_477_p1) < signed(add_ln132_reg_865)) else "0";
    icmp_ln139_fu_496_p2 <= "1" when (signed(result_reg_942) > signed(ap_const_lv6_0)) else "0";
    icmp_ln61_1_fu_641_p2 <= "1" when (trunc_ln61_fu_631_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_635_p2 <= "0" when (tmp_3_fu_621_p4 = ap_const_lv8_FF) else "1";
    mantissa_1_fu_549_p4 <= ((ap_const_lv1_1 & trunc_ln505_1_reg_951) & ap_const_lv1_0);
    mantissa_fu_725_p4 <= ((ap_const_lv1_1 & trunc_ln505_reg_1029) & ap_const_lv1_0);
    notlhs_fu_436_p2 <= "0" when (tmp_1_fu_422_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_442_p2 <= "1" when (empty_fu_432_p1 = ap_const_lv23_0) else "0";
    or_ln61_fu_647_p2 <= (icmp_ln61_reg_999 or icmp_ln61_1_reg_1004);
    result_2_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1066));
    result_5_fu_606_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_1_reg_988));
    result_7_fu_787_p3 <= 
        result_2_fu_782_p2 when (xs_sign_reg_1024(0) = '1') else 
        val_reg_1066;
    result_8_fu_611_p3 <= 
        result_5_fu_606_p2 when (xs_sign_1_reg_919(0) = '1') else 
        val_1_reg_988;
    result_h_address0 <= zext_ln141_fu_793_p1(7 - 1 downto 0);

    result_h_ce0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            result_h_ce0 <= ap_const_logic_1;
        else 
            result_h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_h_d0 <= winSize_width_val;

    result_h_we0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            result_h_we0 <= ap_const_logic_1;
        else 
            result_h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_w_address0 <= zext_ln141_fu_793_p1(7 - 1 downto 0);

    result_w_ce0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            result_w_ce0 <= ap_const_logic_1;
        else 
            result_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_w_d0 <= winSize_width_val;

    result_w_we0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            result_w_we0 <= ap_const_logic_1;
        else 
            result_w_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_x_address0 <= zext_ln141_reg_1077(7 - 1 downto 0);

    result_x_ce0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            result_x_ce0 <= ap_const_logic_1;
        else 
            result_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_x_d0 <= result_7_reg_1072;

    result_x_we0_assign_proc : process(icmp_ln139_reg_947, ap_CS_fsm_state93)
    begin
        if (((icmp_ln139_reg_947 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state93))) then 
            result_x_we0 <= ap_const_logic_1;
        else 
            result_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    result_y_address0 <= zext_ln141_fu_793_p1(7 - 1 downto 0);

    result_y_ce0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            result_y_ce0 <= ap_const_logic_1;
        else 
            result_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    result_y_d0 <= result_8_reg_994;

    result_y_we0_assign_proc : process(ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            result_y_we0 <= ap_const_logic_1;
        else 
            result_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_2_fu_541_p3 <= 
        sext_ln18_2_fu_537_p1 when (tmp_fu_523_p3(0) = '1') else 
        add_ln486_1_fu_517_p2;
    select_ln18_fu_717_p3 <= 
        sext_ln18_fu_713_p1 when (tmp_6_fu_699_p3(0) = '1') else 
        add_ln486_fu_693_p2;
    select_ln61_fu_656_p3 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln61_fu_651_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
        sext_ln18_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_reg_1039),32));

        sext_ln18_2_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_1_fu_531_p2),12));

        sext_ln18_3_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_2_reg_961),32));

        sext_ln18_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_707_p2),12));

    sub_ln18_1_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_1_fu_501_p4));
    sub_ln18_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_675_p4));
    tmp_1_fu_422_p4 <= value_assign_1_to_int_fu_418_p1(30 downto 23);
    tmp_3_fu_621_p4 <= bitcast_ln61_fu_617_p1(30 downto 23);
    tmp_6_fu_699_p3 <= add_ln486_fu_693_p2(11 downto 11);
    tmp_fu_523_p3 <= add_ln486_1_fu_517_p2(11 downto 11);
    trunc_ln132_fu_414_p1 <= p_y_fu_150(8 - 1 downto 0);
    trunc_ln133_fu_492_p1 <= x_2_reg_248(17 - 1 downto 0);
    trunc_ln505_1_fu_510_p1 <= data_1_reg_913(52 - 1 downto 0);
    trunc_ln505_fu_685_p1 <= data_fu_664_p1(52 - 1 downto 0);
    trunc_ln61_fu_631_p1 <= bitcast_ln61_fu_617_p1(23 - 1 downto 0);
    val_1_fu_601_p3 <= 
        tmp_7_reg_978 when (tmp_reg_956(0) = '1') else 
        tmp_8_reg_983;
    val_fu_777_p3 <= 
        tmp_s_reg_1056 when (tmp_6_reg_1034(0) = '1') else 
        tmp_5_reg_1061;
    value_assign_1_to_int_fu_418_p1 <= reg_354;
    x_fu_486_p2 <= std_logic_vector(unsigned(x_2_reg_248) + unsigned(ap_const_lv31_1));
    xs_exp_1_fu_501_p4 <= data_1_reg_913(62 downto 52);
    xs_exp_fu_675_p4 <= data_fu_664_p1(62 downto 52);
    y_fu_408_p2 <= std_logic_vector(unsigned(p_y_fu_150) + unsigned(ap_const_lv31_1));
    zext_ln132_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_y_fu_150),32));
    zext_ln133_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_2_reg_248),32));
    zext_ln141_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_size_0_fu_154),64));
    zext_ln15_1_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_1_fu_549_p4),137));
    zext_ln15_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_725_p4),137));
    zext_ln18_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_3_fu_562_p1),137));
    zext_ln18_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_738_p1),137));
    zext_ln486_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_1_fu_501_p4),12));
    zext_ln486_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_675_p4),12));
end behav;
