-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_cascadeClassifier_Pipeline_Filters is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln200 : IN STD_LOGIC_VECTOR (31 downto 0);
    stage_sum : IN STD_LOGIC_VECTOR (63 downto 0);
    add_ln200 : IN STD_LOGIC_VECTOR (7 downto 0);
    stddev_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    pt_y_val : IN STD_LOGIC_VECTOR (7 downto 0);
    pt_x_val : IN STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce0 : OUT STD_LOGIC;
    SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce1 : OUT STD_LOGIC;
    SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address2 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce2 : OUT STD_LOGIC;
    SUM1_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address3 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce3 : OUT STD_LOGIC;
    SUM1_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address4 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce4 : OUT STD_LOGIC;
    SUM1_data_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address5 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce5 : OUT STD_LOGIC;
    SUM1_data_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
    stage_sum_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    stage_sum_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of face_detect_cascadeClassifier_Pipeline_Filters is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln200_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal tree_thresh_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tree_thresh_array_ce0 : STD_LOGIC;
    signal tree_thresh_array_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array0_ce0 : STD_LOGIC;
    signal weights_array0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array1_ce0 : STD_LOGIC;
    signal weights_array1_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal coord_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coord_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal coord_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal weights_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal weights_array2_ce0 : STD_LOGIC;
    signal weights_array2_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha1_array_ce0 : STD_LOGIC;
    signal alpha1_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal alpha2_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal alpha2_array_ce0 : STD_LOGIC;
    signal alpha2_array_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal rectangles_array0_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array0_ce0 : STD_LOGIC;
    signal rectangles_array0_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array2_ce0 : STD_LOGIC;
    signal rectangles_array2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array1_ce0 : STD_LOGIC;
    signal rectangles_array1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array3_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array3_ce0 : STD_LOGIC;
    signal rectangles_array3_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array4_ce0 : STD_LOGIC;
    signal rectangles_array4_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array6_ce0 : STD_LOGIC;
    signal rectangles_array6_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array5_ce0 : STD_LOGIC;
    signal rectangles_array5_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array7_ce0 : STD_LOGIC;
    signal rectangles_array7_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array8_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array8_ce0 : STD_LOGIC;
    signal rectangles_array8_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array10_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array10_ce0 : STD_LOGIC;
    signal rectangles_array10_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rectangles_array9_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array9_ce0 : STD_LOGIC;
    signal rectangles_array9_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array11_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal rectangles_array11_ce0 : STD_LOGIC;
    signal rectangles_array11_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_545 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln200_reg_1284 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1284_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln248_fu_606_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1348 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1348_pp0_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1348_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln248_reg_1348_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln251_fu_610_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln251_reg_1353 : STD_LOGIC_VECTOR (32 downto 0);
    signal rectangles_array0_load_reg_1358 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr0_1_reg_1363 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array1_load_reg_1368 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr0_3_reg_1373 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array4_load_reg_1378 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr1_1_reg_1383 : STD_LOGIC_VECTOR (4 downto 0);
    signal rectangles_array5_load_reg_1388 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr1_3_reg_1393 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr2_reg_1398 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr2_1_reg_1405 : STD_LOGIC_VECTOR (3 downto 0);
    signal tr2_2_reg_1412 : STD_LOGIC_VECTOR (4 downto 0);
    signal tr2_3_reg_1419 : STD_LOGIC_VECTOR (3 downto 0);
    signal tr0_fu_623_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr0_reg_1426 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr0_reg_1426_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tr0_2_fu_631_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr0_2_reg_1433 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr1_fu_639_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr1_reg_1440 : STD_LOGIC_VECTOR (16 downto 0);
    signal tr1_reg_1440_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tr1_2_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tr1_2_reg_1447 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln233_1_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_1_reg_1454 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_1_reg_1454_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_1_reg_1454_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln235_fu_738_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln235_reg_1458 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln235_1_fu_743_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_1_reg_1465 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_1_reg_1465_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln223_fu_788_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln223_reg_1472 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln224_fu_794_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln224_reg_1478 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_fu_799_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln225_reg_1484 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln228_fu_826_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln228_reg_1490 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_fu_832_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_reg_1496 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_fu_837_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln230_reg_1502 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln235_2_fu_864_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_2_reg_1508 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln236_fu_870_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln236_reg_1514 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_fu_875_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln237_reg_1520 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln223_1_fu_880_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln223_1_reg_1526 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln224_1_fu_884_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln224_1_reg_1531 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_1_fu_910_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_1_reg_1536 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln228_1_fu_916_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln228_1_reg_1542 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_1_fu_920_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln229_1_reg_1547 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_1_fu_946_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_1_reg_1552 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_3_fu_952_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln235_3_reg_1558 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln236_1_fu_956_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln236_1_reg_1563 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_1_fu_982_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_1_reg_1568 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_2_fu_996_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_2_reg_1584 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln226_fu_1000_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln226_reg_1589 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_2_fu_1012_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln230_2_reg_1604 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln231_fu_1016_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln231_reg_1609 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_2_fu_1028_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln237_2_reg_1624 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln238_fu_1032_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln238_reg_1629 : STD_LOGIC_VECTOR (16 downto 0);
    signal SUM1_data_load_5_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_8_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_9_reg_1664 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_3_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_7_reg_1684 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_11_reg_1689 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln279_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln279_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln280_fu_1077_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln280_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln271_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_reg_1704 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_reg_1704_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_reg_1704_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_reg_1704_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln271_reg_1704_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln279_1_fu_1110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln279_1_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln280_1_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln280_1_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_array0_load_reg_1732 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_array1_load_reg_1737 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln281_fu_1124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln281_reg_1742 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_reg_1747 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_1_fu_1134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_1_reg_1752 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln280_fu_1138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln281_fu_1142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal coord_10_load_reg_1772 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln281_fu_1154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln281_reg_1777 : STD_LOGIC_VECTOR (31 downto 0);
    signal tree_thresh_array_load_reg_1787 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln281_1_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln281_1_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_array2_load_reg_1797 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln271_fu_1163_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln281_1_fu_1167_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln282_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_2_fu_1171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_2_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln282_2_reg_1817_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_sum_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal final_sum_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_sum_2_fu_1199_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage_sum_2_reg_1842 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln284_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln284_reg_1847 : STD_LOGIC_VECTOR (0 downto 0);
    signal return_value_reg_1852 : STD_LOGIC_VECTOR (13 downto 0);
    signal return_value_1_reg_1857 : STD_LOGIC_VECTOR (13 downto 0);
    signal stage_sum_3_fu_1225_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage_sum_3_reg_1862 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter10_stage0 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_storemerge_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_storemerge_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln200_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln223_2_fu_988_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln224_fu_992_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln228_2_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln229_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln235_2_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln236_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_2_fu_1036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln226_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln230_2_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln237_2_fu_1052_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln238_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage_sum_1_fu_112 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_sig_allocacmp_stage_sum_1_load_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_116 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal j_2_fu_1184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal haar_counter_fu_120 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    signal sext_ln200_cast_fu_559_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_537_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln200_fu_581_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln208_fu_620_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln210_fu_628_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln213_fu_636_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_fu_644_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln233_fu_658_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_666_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln233_fu_661_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln233_1_fu_681_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_689_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln233_1_fu_684_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_696_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_673_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln233_2_fu_704_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln233_2_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln233_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_1_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln193_6_fu_655_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln193_4_fu_652_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_766_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_777_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln223_fu_773_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln223_1_fu_784_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_fu_748_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_1_fu_751_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_804_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_815_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln228_fu_811_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln228_1_fu_822_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_2_fu_754_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_3_fu_757_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_842_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_853_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln235_fu_849_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln235_1_fu_860_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_5_fu_760_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln193_7_fu_763_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_888_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_899_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln225_fu_895_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_1_fu_906_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_22_fu_924_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_935_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln230_fu_931_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln230_1_fu_942_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_960_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_971_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln237_fu_967_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln237_1_fu_978_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln201_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal return_value_3_fu_1216_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln250_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to11 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_603 : BOOLEAN;
    signal ap_condition_1230 : BOOLEAN;
    signal ap_condition_1233 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_mul_13s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_mul_14ns_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_tree_thresh_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_weights_array0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_weights_array1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_weights_array2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_alpha1_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_alpha2_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array7_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array8_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array9_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array11_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component face_detect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    tree_thresh_array_U : component face_detect_cascadeClassifier_Pipeline_Filters_tree_thresh_array_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tree_thresh_array_address0,
        ce0 => tree_thresh_array_ce0,
        q0 => tree_thresh_array_q0);

    weights_array0_U : component face_detect_cascadeClassifier_Pipeline_Filters_weights_array0_ROM_AUTO_1R
    generic map (
        DataWidth => 13,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array0_address0,
        ce0 => weights_array0_ce0,
        q0 => weights_array0_q0);

    weights_array1_U : component face_detect_cascadeClassifier_Pipeline_Filters_weights_array1_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array1_address0,
        ce0 => weights_array1_ce0,
        q0 => weights_array1_q0);

    weights_array2_U : component face_detect_cascadeClassifier_Pipeline_Filters_weights_array2_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_array2_address0,
        ce0 => weights_array2_ce0,
        q0 => weights_array2_q0);

    alpha1_array_U : component face_detect_cascadeClassifier_Pipeline_Filters_alpha1_array_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha1_array_address0,
        ce0 => alpha1_array_ce0,
        q0 => alpha1_array_q0);

    alpha2_array_U : component face_detect_cascadeClassifier_Pipeline_Filters_alpha2_array_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => alpha2_array_address0,
        ce0 => alpha2_array_ce0,
        q0 => alpha2_array_q0);

    rectangles_array0_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array0_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array0_address0,
        ce0 => rectangles_array0_ce0,
        q0 => rectangles_array0_q0);

    rectangles_array2_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array2_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array2_address0,
        ce0 => rectangles_array2_ce0,
        q0 => rectangles_array2_q0);

    rectangles_array1_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array1_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array1_address0,
        ce0 => rectangles_array1_ce0,
        q0 => rectangles_array1_q0);

    rectangles_array3_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array3_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array3_address0,
        ce0 => rectangles_array3_ce0,
        q0 => rectangles_array3_q0);

    rectangles_array4_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array4_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array4_address0,
        ce0 => rectangles_array4_ce0,
        q0 => rectangles_array4_q0);

    rectangles_array6_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array6_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array6_address0,
        ce0 => rectangles_array6_ce0,
        q0 => rectangles_array6_q0);

    rectangles_array5_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array5_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array5_address0,
        ce0 => rectangles_array5_ce0,
        q0 => rectangles_array5_q0);

    rectangles_array7_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array7_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array7_address0,
        ce0 => rectangles_array7_ce0,
        q0 => rectangles_array7_q0);

    rectangles_array8_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array8_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array8_address0,
        ce0 => rectangles_array8_ce0,
        q0 => rectangles_array8_q0);

    rectangles_array10_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array10_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array10_address0,
        ce0 => rectangles_array10_ce0,
        q0 => rectangles_array10_q0);

    rectangles_array9_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array9_ROM_AUTO_1R
    generic map (
        DataWidth => 5,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array9_address0,
        ce0 => rectangles_array9_ce0,
        q0 => rectangles_array9_q0);

    rectangles_array11_U : component face_detect_cascadeClassifier_Pipeline_Filters_rectangles_array11_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 2913,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rectangles_array11_address0,
        ce0 => rectangles_array11_ce0,
        q0 => rectangles_array11_q0);

    mul_13s_32s_32_5_1_U20 : component face_detect_mul_13s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 13,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_533_p0,
        din1 => grp_fu_533_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_533_p2);

    mul_14ns_32s_32_5_1_U21 : component face_detect_mul_14ns_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 14,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_537_p0,
        din1 => grp_fu_537_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p2);

    flow_control_loop_pipe_sequential_init_U : component face_detect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_storemerge_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_0 = and_ln233_1_reg_1454_pp0_iter3_reg) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln200_reg_1284_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_phi_reg_pp0_iter4_storemerge_reg_522 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                ap_phi_reg_pp0_iter4_storemerge_reg_522 <= ap_phi_reg_pp0_iter3_storemerge_reg_522;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter5_storemerge_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_603)) then
                if (((ap_const_lv1_1 = and_ln233_1_reg_1454_pp0_iter3_reg) and (icmp_ln200_reg_1284_pp0_iter3_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_522 <= SUM1_data_load_11_reg_1689;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_storemerge_reg_522 <= ap_phi_reg_pp0_iter4_storemerge_reg_522;
                end if;
            end if; 
        end if;
    end process;

    coord_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1230)) then
                if ((ap_const_lv1_1 = and_ln233_1_reg_1454_pp0_iter3_reg)) then 
                    coord_10 <= reg_550;
                elsif ((ap_const_lv1_0 = and_ln233_1_reg_1454_pp0_iter3_reg)) then 
                    coord_10 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    coord_8_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1233)) then
                if ((ap_const_lv1_1 = and_ln233_1_reg_1454_pp0_iter3_reg)) then 
                    coord_8 <= SUM1_data_load_8_reg_1659;
                elsif ((ap_const_lv1_0 = and_ln233_1_reg_1454_pp0_iter3_reg)) then 
                    coord_8 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    coord_9_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_1230)) then
                if ((ap_const_lv1_1 = and_ln233_1_reg_1454_pp0_iter3_reg)) then 
                    coord_9 <= SUM1_data_load_9_reg_1664;
                elsif ((ap_const_lv1_0 = and_ln233_1_reg_1454_pp0_iter3_reg)) then 
                    coord_9 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    haar_counter_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    haar_counter_fu_120 <= sext_ln200_cast_fu_559_p1;
                elsif (((icmp_ln200_reg_1284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    haar_counter_fu_120 <= add_ln251_reg_1353;
                end if;
            end if; 
        end if;
    end process;

    j_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_116 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln200_reg_1284_pp0_iter9_reg = ap_const_lv1_0))) then 
                    j_fu_116 <= j_2_fu_1184_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_545_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_545 <= SUM1_data_q3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_545 <= SUM1_data_q4;
            end if; 
        end if;
    end process;

    reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_550 <= SUM1_data_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_550 <= SUM1_data_q3;
            end if; 
        end if;
    end process;

    stage_sum_1_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    stage_sum_1_fu_112 <= stage_sum;
                elsif ((ap_enable_reg_pp0_iter11 = ap_const_logic_1)) then 
                    stage_sum_1_fu_112 <= stage_sum_3_reg_1862;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                SUM1_data_load_11_reg_1689 <= SUM1_data_q0;
                SUM1_data_load_3_reg_1679 <= SUM1_data_q4;
                SUM1_data_load_7_reg_1684 <= SUM1_data_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                SUM1_data_load_5_reg_1644 <= SUM1_data_q2;
                SUM1_data_load_8_reg_1659 <= SUM1_data_q1;
                SUM1_data_load_9_reg_1664 <= SUM1_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln223_1_reg_1526 <= add_ln223_1_fu_880_p2;
                add_ln224_1_reg_1531 <= add_ln224_1_fu_884_p2;
                    add_ln225_1_reg_1536(16 downto 6) <= add_ln225_1_fu_910_p2(16 downto 6);
                add_ln228_1_reg_1542 <= add_ln228_1_fu_916_p2;
                add_ln229_1_reg_1547 <= add_ln229_1_fu_920_p2;
                    add_ln230_1_reg_1552(16 downto 6) <= add_ln230_1_fu_946_p2(16 downto 6);
                add_ln235_1_reg_1465 <= add_ln235_1_fu_743_p2;
                add_ln235_1_reg_1465_pp0_iter2_reg <= add_ln235_1_reg_1465;
                add_ln235_3_reg_1558 <= add_ln235_3_fu_952_p2;
                add_ln235_reg_1458 <= add_ln235_fu_738_p2;
                add_ln236_1_reg_1563 <= add_ln236_1_fu_956_p2;
                    add_ln237_1_reg_1568(16 downto 6) <= add_ln237_1_fu_982_p2(16 downto 6);
                add_ln251_reg_1353 <= add_ln251_fu_610_p2;
                and_ln233_1_reg_1454 <= and_ln233_1_fu_732_p2;
                and_ln233_1_reg_1454_pp0_iter2_reg <= and_ln233_1_reg_1454;
                and_ln233_1_reg_1454_pp0_iter3_reg <= and_ln233_1_reg_1454_pp0_iter2_reg;
                coord_10_load_reg_1772 <= coord_10;
                final_sum_reg_1827 <= final_sum_fu_1176_p2;
                icmp_ln200_reg_1284 <= icmp_ln200_fu_585_p2;
                icmp_ln200_reg_1284_pp0_iter1_reg <= icmp_ln200_reg_1284;
                icmp_ln200_reg_1284_pp0_iter2_reg <= icmp_ln200_reg_1284_pp0_iter1_reg;
                icmp_ln200_reg_1284_pp0_iter3_reg <= icmp_ln200_reg_1284_pp0_iter2_reg;
                icmp_ln200_reg_1284_pp0_iter4_reg <= icmp_ln200_reg_1284_pp0_iter3_reg;
                icmp_ln200_reg_1284_pp0_iter5_reg <= icmp_ln200_reg_1284_pp0_iter4_reg;
                icmp_ln200_reg_1284_pp0_iter6_reg <= icmp_ln200_reg_1284_pp0_iter5_reg;
                icmp_ln200_reg_1284_pp0_iter7_reg <= icmp_ln200_reg_1284_pp0_iter6_reg;
                icmp_ln200_reg_1284_pp0_iter8_reg <= icmp_ln200_reg_1284_pp0_iter7_reg;
                icmp_ln200_reg_1284_pp0_iter9_reg <= icmp_ln200_reg_1284_pp0_iter8_reg;
                stage_sum_3_reg_1862 <= stage_sum_3_fu_1225_p2;
                sub_ln279_1_reg_1712 <= sub_ln279_1_fu_1110_p2;
                sub_ln280_1_reg_1722 <= sub_ln280_1_fu_1115_p2;
                sub_ln281_reg_1777 <= sub_ln281_fu_1154_p2;
                tr0_2_reg_1433 <= tr0_2_fu_631_p2;
                tr0_reg_1426 <= tr0_fu_623_p2;
                tr0_reg_1426_pp0_iter2_reg <= tr0_reg_1426;
                tr1_2_reg_1447 <= tr1_2_fu_647_p2;
                tr1_reg_1440 <= tr1_fu_639_p2;
                tr1_reg_1440_pp0_iter2_reg <= tr1_reg_1440;
                trunc_ln248_reg_1348 <= trunc_ln248_fu_606_p1;
                trunc_ln248_reg_1348_pp0_iter1_reg <= trunc_ln248_reg_1348;
                trunc_ln248_reg_1348_pp0_iter2_reg <= trunc_ln248_reg_1348_pp0_iter1_reg;
                trunc_ln248_reg_1348_pp0_iter3_reg <= trunc_ln248_reg_1348_pp0_iter2_reg;
                    zext_ln271_reg_1704(11 downto 0) <= zext_ln271_fu_1105_p1(11 downto 0);
                    zext_ln271_reg_1704_pp0_iter5_reg(11 downto 0) <= zext_ln271_reg_1704(11 downto 0);
                    zext_ln271_reg_1704_pp0_iter6_reg(11 downto 0) <= zext_ln271_reg_1704_pp0_iter5_reg(11 downto 0);
                    zext_ln271_reg_1704_pp0_iter7_reg(11 downto 0) <= zext_ln271_reg_1704_pp0_iter6_reg(11 downto 0);
                    zext_ln271_reg_1704_pp0_iter8_reg(11 downto 0) <= zext_ln271_reg_1704_pp0_iter7_reg(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    add_ln223_reg_1472(16 downto 6) <= add_ln223_fu_788_p2(16 downto 6);
                add_ln224_reg_1478 <= add_ln224_fu_794_p2;
                add_ln225_2_reg_1584 <= add_ln225_2_fu_996_p2;
                add_ln225_reg_1484 <= add_ln225_fu_799_p2;
                add_ln226_reg_1589 <= add_ln226_fu_1000_p2;
                    add_ln228_reg_1490(16 downto 6) <= add_ln228_fu_826_p2(16 downto 6);
                add_ln229_reg_1496 <= add_ln229_fu_832_p2;
                add_ln230_2_reg_1604 <= add_ln230_2_fu_1012_p2;
                add_ln230_reg_1502 <= add_ln230_fu_837_p2;
                add_ln231_reg_1609 <= add_ln231_fu_1016_p2;
                    add_ln235_2_reg_1508(16 downto 6) <= add_ln235_2_fu_864_p2(16 downto 6);
                add_ln236_reg_1514 <= add_ln236_fu_870_p2;
                add_ln237_2_reg_1624 <= add_ln237_2_fu_1028_p2;
                add_ln237_reg_1520 <= add_ln237_fu_875_p2;
                add_ln238_reg_1629 <= add_ln238_fu_1032_p2;
                add_ln281_reg_1742 <= add_ln281_fu_1124_p2;
                add_ln282_1_reg_1752 <= add_ln282_1_fu_1134_p2;
                add_ln282_2_reg_1817 <= add_ln282_2_fu_1171_p2;
                add_ln282_2_reg_1817_pp0_iter9_reg <= add_ln282_2_reg_1817;
                add_ln282_reg_1747 <= add_ln282_fu_1130_p2;
                icmp_ln284_reg_1847 <= icmp_ln284_fu_1207_p2;
                rectangles_array0_load_reg_1358 <= rectangles_array0_q0;
                rectangles_array1_load_reg_1368 <= rectangles_array1_q0;
                rectangles_array4_load_reg_1378 <= rectangles_array4_q0;
                rectangles_array5_load_reg_1388 <= rectangles_array5_q0;
                return_value_1_reg_1857 <= alpha2_array_q0;
                return_value_reg_1852 <= alpha1_array_q0;
                stage_sum_2_reg_1842 <= stage_sum_2_fu_1199_p3;
                sub_ln279_reg_1694 <= sub_ln279_fu_1071_p2;
                sub_ln280_reg_1699 <= sub_ln280_fu_1077_p2;
                sub_ln281_1_reg_1792 <= sub_ln281_1_fu_1159_p2;
                tr0_1_reg_1363 <= rectangles_array2_q0;
                tr0_3_reg_1373 <= rectangles_array3_q0;
                tr1_1_reg_1383 <= rectangles_array6_q0;
                tr1_3_reg_1393 <= rectangles_array7_q0;
                tr2_1_reg_1405 <= rectangles_array10_q0;
                tr2_2_reg_1412 <= rectangles_array9_q0;
                tr2_3_reg_1419 <= rectangles_array11_q0;
                tr2_reg_1398 <= rectangles_array8_q0;
                tree_thresh_array_load_reg_1787 <= tree_thresh_array_q0;
                weights_array0_load_reg_1732 <= weights_array0_q0;
                weights_array1_load_reg_1737 <= weights_array1_q0;
                weights_array2_load_reg_1797 <= weights_array2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter1_storemerge_reg_522 <= ap_phi_reg_pp0_iter0_storemerge_reg_522;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter2_storemerge_reg_522 <= ap_phi_reg_pp0_iter1_storemerge_reg_522;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_522 <= ap_phi_reg_pp0_iter2_storemerge_reg_522;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln282_reg_1812 <= grp_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_541 <= SUM1_data_q5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_555 <= grp_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                t_reg_1822 <= grp_fu_533_p2;
            end if;
        end if;
    end process;
    add_ln223_reg_1472(5 downto 0) <= "000000";
    add_ln228_reg_1490(5 downto 0) <= "000000";
    add_ln235_2_reg_1508(5 downto 0) <= "000000";
    add_ln225_1_reg_1536(5 downto 0) <= "000000";
    add_ln230_1_reg_1552(5 downto 0) <= "000000";
    add_ln237_1_reg_1568(5 downto 0) <= "000000";
    zext_ln271_reg_1704(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln271_reg_1704_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln271_reg_1704_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln271_reg_1704_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln271_reg_1704_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter10_stage0, ap_idle_pp0_0to9, ap_idle_pp0_1to11, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter10_stage0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to11 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    SUM1_data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln236_fu_1024_p1, zext_ln238_fu_1056_p1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SUM1_data_address0 <= zext_ln238_fu_1056_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SUM1_data_address0 <= zext_ln236_fu_1024_p1(17 - 1 downto 0);
            else 
                SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln235_2_fu_1020_p1, zext_ln237_2_fu_1052_p1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SUM1_data_address1 <= zext_ln237_2_fu_1052_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SUM1_data_address1 <= zext_ln235_2_fu_1020_p1(17 - 1 downto 0);
            else 
                SUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            SUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln229_fu_1008_p1, zext_ln231_fu_1048_p1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SUM1_data_address2 <= zext_ln231_fu_1048_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SUM1_data_address2 <= zext_ln229_fu_1008_p1(17 - 1 downto 0);
            else 
                SUM1_data_address2 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            SUM1_data_address2 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln228_2_fu_1004_p1, zext_ln230_2_fu_1044_p1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SUM1_data_address3 <= zext_ln230_2_fu_1044_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SUM1_data_address3 <= zext_ln228_2_fu_1004_p1(17 - 1 downto 0);
            else 
                SUM1_data_address3 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            SUM1_data_address3 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_block_pp0_stage0, zext_ln224_fu_992_p1, zext_ln226_fu_1040_p1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SUM1_data_address4 <= zext_ln226_fu_1040_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SUM1_data_address4 <= zext_ln224_fu_992_p1(17 - 1 downto 0);
            else 
                SUM1_data_address4 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            SUM1_data_address4 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln223_2_fu_988_p1, ap_block_pp0_stage0, zext_ln225_2_fu_1036_p1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SUM1_data_address5 <= zext_ln225_2_fu_1036_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SUM1_data_address5 <= zext_ln223_2_fu_988_p1(17 - 1 downto 0);
            else 
                SUM1_data_address5 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            SUM1_data_address5 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SUM1_data_ce0 <= ap_const_logic_1;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SUM1_data_ce1 <= ap_const_logic_1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SUM1_data_ce2 <= ap_const_logic_1;
        else 
            SUM1_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SUM1_data_ce3 <= ap_const_logic_1;
        else 
            SUM1_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SUM1_data_ce4 <= ap_const_logic_1;
        else 
            SUM1_data_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SUM1_data_ce5 <= ap_const_logic_1;
        else 
            SUM1_data_ce5 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln223_1_fu_880_p2 <= std_logic_vector(unsigned(add_ln223_reg_1472) + unsigned(tr0_reg_1426));
    add_ln223_fu_788_p2 <= std_logic_vector(unsigned(zext_ln223_fu_773_p1) + unsigned(zext_ln223_1_fu_784_p1));
    add_ln224_1_fu_884_p2 <= std_logic_vector(unsigned(add_ln223_reg_1472) + unsigned(add_ln224_reg_1478));
    add_ln224_fu_794_p2 <= std_logic_vector(unsigned(zext_ln193_fu_748_p1) + unsigned(tr0_reg_1426));
    add_ln225_1_fu_910_p2 <= std_logic_vector(unsigned(zext_ln225_fu_895_p1) + unsigned(zext_ln225_1_fu_906_p1));
    add_ln225_2_fu_996_p2 <= std_logic_vector(unsigned(add_ln225_1_reg_1536) + unsigned(tr0_reg_1426_pp0_iter2_reg));
    add_ln225_fu_799_p2 <= std_logic_vector(unsigned(zext_ln193_1_fu_751_p1) + unsigned(tr0_2_reg_1433));
    add_ln226_fu_1000_p2 <= std_logic_vector(unsigned(add_ln225_1_reg_1536) + unsigned(add_ln224_reg_1478));
    add_ln228_1_fu_916_p2 <= std_logic_vector(unsigned(add_ln228_reg_1490) + unsigned(tr1_reg_1440));
    add_ln228_fu_826_p2 <= std_logic_vector(unsigned(zext_ln228_fu_811_p1) + unsigned(zext_ln228_1_fu_822_p1));
    add_ln229_1_fu_920_p2 <= std_logic_vector(unsigned(add_ln228_reg_1490) + unsigned(add_ln229_reg_1496));
    add_ln229_fu_832_p2 <= std_logic_vector(unsigned(zext_ln193_2_fu_754_p1) + unsigned(tr1_reg_1440));
    add_ln230_1_fu_946_p2 <= std_logic_vector(unsigned(zext_ln230_fu_931_p1) + unsigned(zext_ln230_1_fu_942_p1));
    add_ln230_2_fu_1012_p2 <= std_logic_vector(unsigned(add_ln230_1_reg_1552) + unsigned(tr1_reg_1440_pp0_iter2_reg));
    add_ln230_fu_837_p2 <= std_logic_vector(unsigned(zext_ln193_3_fu_757_p1) + unsigned(tr1_2_reg_1447));
    add_ln231_fu_1016_p2 <= std_logic_vector(unsigned(add_ln230_1_reg_1552) + unsigned(add_ln229_reg_1496));
    add_ln235_1_fu_743_p2 <= std_logic_vector(unsigned(zext_ln193_4_fu_652_p1) + unsigned(pt_x_val));
    add_ln235_2_fu_864_p2 <= std_logic_vector(unsigned(zext_ln235_fu_849_p1) + unsigned(zext_ln235_1_fu_860_p1));
    add_ln235_3_fu_952_p2 <= std_logic_vector(unsigned(add_ln235_2_reg_1508) + unsigned(add_ln235_1_reg_1465));
    add_ln235_fu_738_p2 <= std_logic_vector(unsigned(zext_ln193_6_fu_655_p1) + unsigned(pt_y_val));
    add_ln236_1_fu_956_p2 <= std_logic_vector(unsigned(add_ln235_2_reg_1508) + unsigned(add_ln236_reg_1514));
    add_ln236_fu_870_p2 <= std_logic_vector(unsigned(zext_ln193_5_fu_760_p1) + unsigned(add_ln235_1_reg_1465));
    add_ln237_1_fu_982_p2 <= std_logic_vector(unsigned(zext_ln237_fu_967_p1) + unsigned(zext_ln237_1_fu_978_p1));
    add_ln237_2_fu_1028_p2 <= std_logic_vector(unsigned(add_ln237_1_reg_1568) + unsigned(add_ln235_1_reg_1465_pp0_iter2_reg));
    add_ln237_fu_875_p2 <= std_logic_vector(unsigned(zext_ln193_7_fu_763_p1) + unsigned(add_ln235_reg_1458));
    add_ln238_fu_1032_p2 <= std_logic_vector(unsigned(add_ln237_1_reg_1568) + unsigned(add_ln236_reg_1514));
    add_ln251_fu_610_p2 <= std_logic_vector(unsigned(haar_counter_fu_120) + unsigned(ap_const_lv33_1));
    add_ln281_fu_1124_p2 <= std_logic_vector(unsigned(coord_8) + unsigned(ap_phi_reg_pp0_iter5_storemerge_reg_522));
    add_ln282_1_fu_1134_p2 <= std_logic_vector(unsigned(SUM1_data_load_7_reg_1684) + unsigned(sub_ln280_1_reg_1722));
    add_ln282_2_fu_1171_p2 <= std_logic_vector(unsigned(reg_555) + unsigned(mul_ln282_reg_1812));
    add_ln282_fu_1130_p2 <= std_logic_vector(unsigned(SUM1_data_load_3_reg_1679) + unsigned(sub_ln279_1_reg_1712));
    alpha1_array_address0 <= zext_ln271_reg_1704_pp0_iter8_reg(12 - 1 downto 0);

    alpha1_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            alpha1_array_ce0 <= ap_const_logic_1;
        else 
            alpha1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    alpha2_array_address0 <= zext_ln271_reg_1704_pp0_iter8_reg(12 - 1 downto 0);

    alpha2_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            alpha2_array_ce0 <= ap_const_logic_1;
        else 
            alpha2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    and_ln233_1_fu_732_p2 <= (icmp_ln233_1_fu_715_p2 and and_ln233_fu_726_p2);
    and_ln233_fu_726_p2 <= (icmp_ln233_fu_710_p2 and icmp_ln233_2_fu_720_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1230_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln200_reg_1284_pp0_iter3_reg)
    begin
                ap_condition_1230 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln200_reg_1284_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_1233_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, icmp_ln200_reg_1284_pp0_iter3_reg)
    begin
                ap_condition_1233 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln200_reg_1284_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_603_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_603 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln200_fu_585_p2)
    begin
        if (((icmp_ln200_fu_585_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter10_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, icmp_ln200_reg_1284_pp0_iter9_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (icmp_ln200_reg_1284_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter10_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter10_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg, ap_loop_exit_ready_pp0_iter5_reg, ap_loop_exit_ready_pp0_iter6_reg, ap_loop_exit_ready_pp0_iter7_reg, ap_loop_exit_ready_pp0_iter8_reg, ap_loop_exit_ready_pp0_iter9_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to11_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to11 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_phi_reg_pp0_iter0_storemerge_reg_522 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_stage_sum_1_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, stage_sum_3_reg_1862, ap_block_pp0_stage0, stage_sum_1_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_stage_sum_1_load_1 <= stage_sum_3_reg_1862;
        else 
            ap_sig_allocacmp_stage_sum_1_load_1 <= stage_sum_1_fu_112;
        end if; 
    end process;

    final_sum_fu_1176_p2 <= std_logic_vector(unsigned(add_ln282_2_reg_1817_pp0_iter9_reg) + unsigned(reg_555));

    grp_fu_533_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, sext_ln280_fu_1138_p1, sext_ln271_fu_1163_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_533_p0 <= sext_ln271_fu_1163_p1(13 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_533_p0 <= sext_ln280_fu_1138_p1(13 - 1 downto 0);
        else 
            grp_fu_533_p0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_533_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, stddev_0, add_ln282_reg_1747, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_533_p1 <= stddev_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_533_p1 <= add_ln282_reg_1747;
        else 
            grp_fu_533_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_537_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, zext_ln281_fu_1142_p1, zext_ln281_1_fu_1167_p1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_537_p0 <= zext_ln281_1_fu_1167_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_537_p0 <= zext_ln281_fu_1142_p1(14 - 1 downto 0);
        else 
            grp_fu_537_p0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_537_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_CS_fsm_pp0_stage1, add_ln282_1_reg_1752, sub_ln281_1_reg_1792, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_537_p1 <= sub_ln281_1_reg_1792;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_537_p1 <= add_ln282_1_reg_1752;
        else 
            grp_fu_537_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln200_fu_585_p2 <= "1" when (trunc_ln200_fu_581_p1 = add_ln200) else "0";
    icmp_ln201_fu_1193_p2 <= "1" when (j_fu_116 = ap_const_lv8_0) else "0";
    icmp_ln233_1_fu_715_p2 <= "0" when (tr2_3_reg_1419 = ap_const_lv4_0) else "1";
    icmp_ln233_2_fu_720_p2 <= "0" when (or_ln233_2_fu_704_p2 = ap_const_lv5_0) else "1";
    icmp_ln233_fu_710_p2 <= "0" when (tr2_1_reg_1405 = ap_const_lv4_0) else "1";
    icmp_ln284_fu_1207_p2 <= "1" when (signed(final_sum_reg_1827) < signed(t_reg_1822)) else "0";
    j_2_fu_1184_p2 <= std_logic_vector(unsigned(j_fu_116) + unsigned(ap_const_lv8_1));
    or_ln233_1_fu_684_p2 <= (trunc_ln233_1_fu_681_p1 or tr2_3_reg_1419);
    or_ln233_2_fu_704_p2 <= (tmp_fu_673_p3 or tmp1_fu_696_p3);
    or_ln233_fu_661_p2 <= (trunc_ln233_fu_658_p1 or tr2_1_reg_1405);
    rectangles_array0_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array0_ce0 <= ap_const_logic_1;
        else 
            rectangles_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array10_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array10_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array10_ce0 <= ap_const_logic_1;
        else 
            rectangles_array10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array11_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array11_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array11_ce0 <= ap_const_logic_1;
        else 
            rectangles_array11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array1_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array1_ce0 <= ap_const_logic_1;
        else 
            rectangles_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array2_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array2_ce0 <= ap_const_logic_1;
        else 
            rectangles_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array3_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array3_ce0 <= ap_const_logic_1;
        else 
            rectangles_array3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array4_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array4_ce0 <= ap_const_logic_1;
        else 
            rectangles_array4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array5_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array5_ce0 <= ap_const_logic_1;
        else 
            rectangles_array5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array6_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array6_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array6_ce0 <= ap_const_logic_1;
        else 
            rectangles_array6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array7_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array7_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array7_ce0 <= ap_const_logic_1;
        else 
            rectangles_array7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array8_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array8_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array8_ce0 <= ap_const_logic_1;
        else 
            rectangles_array8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rectangles_array9_address0 <= zext_ln200_fu_590_p1(12 - 1 downto 0);

    rectangles_array9_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            rectangles_array9_ce0 <= ap_const_logic_1;
        else 
            rectangles_array9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    return_value_3_fu_1216_p3 <= 
        return_value_reg_1852 when (icmp_ln284_reg_1847(0) = '1') else 
        return_value_1_reg_1857;
        sext_ln200_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln200),33));

        sext_ln250_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(return_value_3_fu_1216_p3),64));

        sext_ln271_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tree_thresh_array_load_reg_1787),32));

        sext_ln280_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(weights_array0_load_reg_1732),32));

    stage_sum_1_out <= stage_sum_1_fu_112;

    stage_sum_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln200_reg_1284_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln200_reg_1284_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stage_sum_1_out_ap_vld <= ap_const_logic_1;
        else 
            stage_sum_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    stage_sum_2_fu_1199_p3 <= 
        ap_const_lv64_0 when (icmp_ln201_fu_1193_p2(0) = '1') else 
        ap_sig_allocacmp_stage_sum_1_load_1;
    stage_sum_3_fu_1225_p2 <= std_logic_vector(unsigned(stage_sum_2_reg_1842) + unsigned(sext_ln250_fu_1221_p1));
    sub_ln279_1_fu_1110_p2 <= std_logic_vector(unsigned(sub_ln279_reg_1694) - unsigned(reg_541));
    sub_ln279_fu_1071_p2 <= std_logic_vector(unsigned(reg_541) - unsigned(reg_545));
    sub_ln280_1_fu_1115_p2 <= std_logic_vector(unsigned(sub_ln280_reg_1699) - unsigned(reg_545));
    sub_ln280_fu_1077_p2 <= std_logic_vector(unsigned(reg_550) - unsigned(SUM1_data_load_5_reg_1644));
    sub_ln281_1_fu_1159_p2 <= std_logic_vector(unsigned(sub_ln281_reg_1777) - unsigned(coord_10_load_reg_1772));
    sub_ln281_fu_1154_p2 <= std_logic_vector(unsigned(add_ln281_reg_1742) - unsigned(coord_9));
    tmp1_fu_696_p3 <= (tmp_25_fu_689_p3 & or_ln233_1_fu_684_p2);
    tmp_17_fu_777_p3 <= (tr0_2_reg_1433 & ap_const_lv6_0);
    tmp_18_fu_888_p3 <= (add_ln225_reg_1484 & ap_const_lv8_0);
    tmp_19_fu_899_p3 <= (add_ln225_reg_1484 & ap_const_lv6_0);
    tmp_20_fu_804_p3 <= (tr1_2_reg_1447 & ap_const_lv8_0);
    tmp_21_fu_815_p3 <= (tr1_2_reg_1447 & ap_const_lv6_0);
    tmp_22_fu_924_p3 <= (add_ln230_reg_1502 & ap_const_lv8_0);
    tmp_23_fu_935_p3 <= (add_ln230_reg_1502 & ap_const_lv6_0);
    tmp_24_fu_666_p3 <= tr2_reg_1398(4 downto 4);
    tmp_25_fu_689_p3 <= tr2_2_reg_1412(4 downto 4);
    tmp_26_fu_842_p3 <= (add_ln235_reg_1458 & ap_const_lv8_0);
    tmp_27_fu_853_p3 <= (add_ln235_reg_1458 & ap_const_lv6_0);
    tmp_28_fu_960_p3 <= (add_ln237_reg_1520 & ap_const_lv8_0);
    tmp_29_fu_971_p3 <= (add_ln237_reg_1520 & ap_const_lv6_0);
    tmp_fu_673_p3 <= (tmp_24_fu_666_p3 & or_ln233_fu_661_p2);
    tmp_s_fu_766_p3 <= (tr0_2_reg_1433 & ap_const_lv8_0);
    tr0_2_fu_631_p2 <= std_logic_vector(unsigned(zext_ln210_fu_628_p1) + unsigned(pt_y_val));
    tr0_fu_623_p2 <= std_logic_vector(unsigned(zext_ln208_fu_620_p1) + unsigned(pt_x_val));
    tr1_2_fu_647_p2 <= std_logic_vector(unsigned(zext_ln215_fu_644_p1) + unsigned(pt_y_val));
    tr1_fu_639_p2 <= std_logic_vector(unsigned(zext_ln213_fu_636_p1) + unsigned(pt_x_val));
    tree_thresh_array_address0 <= zext_ln271_reg_1704(12 - 1 downto 0);

    tree_thresh_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tree_thresh_array_ce0 <= ap_const_logic_1;
        else 
            tree_thresh_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln200_fu_581_p1 <= haar_counter_fu_120(8 - 1 downto 0);
    trunc_ln233_1_fu_681_p1 <= tr2_2_reg_1412(4 - 1 downto 0);
    trunc_ln233_fu_658_p1 <= tr2_reg_1398(4 - 1 downto 0);
    trunc_ln248_fu_606_p1 <= haar_counter_fu_120(12 - 1 downto 0);
    weights_array0_address0 <= zext_ln271_fu_1105_p1(12 - 1 downto 0);

    weights_array0_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_array0_ce0 <= ap_const_logic_1;
        else 
            weights_array0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array1_address0 <= zext_ln271_fu_1105_p1(12 - 1 downto 0);

    weights_array1_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_array1_ce0 <= ap_const_logic_1;
        else 
            weights_array1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_array2_address0 <= zext_ln271_reg_1704(12 - 1 downto 0);

    weights_array2_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            weights_array2_ce0 <= ap_const_logic_1;
        else 
            weights_array2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln193_1_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_3_reg_1373),8));
    zext_ln193_2_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_1_reg_1383),17));
    zext_ln193_3_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr1_3_reg_1393),8));
    zext_ln193_4_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_reg_1398),17));
    zext_ln193_5_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_1_reg_1405),17));
    zext_ln193_6_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_2_reg_1412),8));
    zext_ln193_7_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr2_3_reg_1419),8));
    zext_ln193_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tr0_1_reg_1363),17));
    zext_ln200_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(haar_counter_fu_120),64));
    zext_ln208_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array0_load_reg_1358),17));
    zext_ln210_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array1_load_reg_1368),8));
    zext_ln213_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array4_load_reg_1378),17));
    zext_ln215_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rectangles_array5_load_reg_1388),8));
    zext_ln223_1_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_777_p3),17));
    zext_ln223_2_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln223_1_reg_1526),64));
    zext_ln223_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_766_p3),17));
    zext_ln224_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_1_reg_1531),64));
    zext_ln225_1_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_899_p3),17));
    zext_ln225_2_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_2_reg_1584),64));
    zext_ln225_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_888_p3),17));
    zext_ln226_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln226_reg_1589),64));
    zext_ln228_1_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_815_p3),17));
    zext_ln228_2_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln228_1_reg_1542),64));
    zext_ln228_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_804_p3),17));
    zext_ln229_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln229_1_reg_1547),64));
    zext_ln230_1_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_935_p3),17));
    zext_ln230_2_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln230_2_reg_1604),64));
    zext_ln230_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_924_p3),17));
    zext_ln231_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_reg_1609),64));
    zext_ln235_1_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_853_p3),17));
    zext_ln235_2_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln235_3_reg_1558),64));
    zext_ln235_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_842_p3),17));
    zext_ln236_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln236_1_reg_1563),64));
    zext_ln237_1_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_971_p3),17));
    zext_ln237_2_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln237_2_reg_1624),64));
    zext_ln237_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_960_p3),17));
    zext_ln238_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln238_reg_1629),64));
    zext_ln271_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln248_reg_1348_pp0_iter3_reg),64));
    zext_ln281_1_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array2_load_reg_1797),32));
    zext_ln281_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(weights_array1_load_reg_1737),32));
end behav;
