-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_cascadeClassifier is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce0 : OUT STD_LOGIC;
    SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce1 : OUT STD_LOGIC;
    SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address2 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce2 : OUT STD_LOGIC;
    SUM1_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address3 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce3 : OUT STD_LOGIC;
    SUM1_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address4 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce4 : OUT STD_LOGIC;
    SUM1_data_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_address5 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce5 : OUT STD_LOGIC;
    SUM1_data_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
    SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SQSUM1_data_ce0 : OUT STD_LOGIC;
    SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SQSUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SQSUM1_data_ce1 : OUT STD_LOGIC;
    SQSUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    pt_x_val : IN STD_LOGIC_VECTOR (16 downto 0);
    pt_y_val : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (5 downto 0);
    grp_fu_342_p_din0 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_342_p_din1 : OUT STD_LOGIC_VECTOR (32 downto 0);
    grp_fu_342_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_342_p_ce : OUT STD_LOGIC );
end;


architecture behav of face_detect_cascadeClassifier is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_3FD999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111011001100110011001100110011001100110011001100110011010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv17_18 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000011000";
    constant ap_const_lv8_18 : STD_LOGIC_VECTOR (7 downto 0) := "00011000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stages_array_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_array_ce0 : STD_LOGIC;
    signal stages_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal stages_thresh_array_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_thresh_array_ce0 : STD_LOGIC;
    signal stages_thresh_array_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal add_ln180_fu_399_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln180_reg_773 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln176_fu_405_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln176_reg_779 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln177_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln177_reg_785 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln180_1_fu_417_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln180_1_reg_791 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln181_fu_421_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln181_reg_796 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln182_fu_447_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln182_reg_801 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln182_1_fu_463_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln182_1_reg_827 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln183_fu_467_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln183_reg_832 : STD_LOGIC_VECTOR (16 downto 0);
    signal SQSUM1_data_load_1_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_1_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln176_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln176_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln181_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln181_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln177_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln177_reg_877 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln182_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln182_reg_882 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_reg_887 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal mean_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stddev_1_fu_538_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal stddev_1_reg_904 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln186_reg_909 : STD_LOGIC_VECTOR (63 downto 0);
    signal stddev_2_fu_547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal stddev_2_reg_914 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln188_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln189_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln189_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln199_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln199_fu_589_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln199_reg_957 : STD_LOGIC_VECTOR (4 downto 0);
    signal stages_array_load_reg_972 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal stages_thresh_array_load_reg_979 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln200_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln200_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal select_ln256_fu_633_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln256_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln256_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_reg_1008 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln256_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln256_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln256_1_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln256_1_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln256_2_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln256_2_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln256_3_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln256_3_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_done : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_a_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_a_out_ap_vld : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_idle : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_ready : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce0 : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce1 : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce2 : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce3 : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address4 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce4 : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address5 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce5 : STD_LOGIC;
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out_ap_vld : STD_LOGIC;
    signal stddev_0_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sub_ln257_fu_742_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_retval_0_phi_fu_274_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal retval_0_reg_270 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal and_ln256_1_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln180_2_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln181_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln182_2_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln183_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln199_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal haar_counter_fu_126 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal stage_sum_fu_130 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal i_2_fu_134 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_375_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_387_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln180_fu_383_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln180_1_fu_395_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_436_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln182_fu_432_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln182_1_fu_443_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_516_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal shl_ln185_1_fu_527_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln185_fu_523_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln185_1_fu_534_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal sext_ln159_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln200_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln200_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal haar_counter_2_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln256_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln256_1_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_653_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln256_fu_663_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_3_fu_670_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln256_1_fu_680_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln256_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln256_1_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln256_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln257_fu_739_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_352_ce : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_cascadeClassifier_Pipeline_VITIS_LOOP_379_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        a_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_out_ap_vld : OUT STD_LOGIC );
    end component;


    component face_detect_cascadeClassifier_Pipeline_Filters IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln200 : IN STD_LOGIC_VECTOR (31 downto 0);
        stage_sum : IN STD_LOGIC_VECTOR (63 downto 0);
        add_ln200 : IN STD_LOGIC_VECTOR (7 downto 0);
        stddev_0 : IN STD_LOGIC_VECTOR (31 downto 0);
        pt_y_val : IN STD_LOGIC_VECTOR (7 downto 0);
        pt_x_val : IN STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce0 : OUT STD_LOGIC;
        SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce1 : OUT STD_LOGIC;
        SUM1_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce2 : OUT STD_LOGIC;
        SUM1_data_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce3 : OUT STD_LOGIC;
        SUM1_data_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce4 : OUT STD_LOGIC;
        SUM1_data_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
        SUM1_data_address5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        SUM1_data_ce5 : OUT STD_LOGIC;
        SUM1_data_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
        stage_sum_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        stage_sum_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component face_detect_dmul_64ns_64ns_64_14_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_dcmp_64ns_64ns_1_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_sitodp_64s_64_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_mul_32s_32s_64_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_cascadeClassifier_stages_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component face_detect_cascadeClassifier_stages_thresh_array_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    stages_array_U : component face_detect_cascadeClassifier_stages_array_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stages_array_address0,
        ce0 => stages_array_ce0,
        q0 => stages_array_q0);

    stages_thresh_array_U : component face_detect_cascadeClassifier_stages_thresh_array_ROM_AUTO_1R
    generic map (
        DataWidth => 12,
        AddressRange => 25,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stages_thresh_array_address0,
        ce0 => stages_thresh_array_ce0,
        q0 => stages_thresh_array_q0);

    grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281 : component face_detect_cascadeClassifier_Pipeline_VITIS_LOOP_379_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start,
        ap_done => grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_done,
        ap_idle => grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_idle,
        ap_ready => grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_ready,
        empty => trunc_ln189_reg_924,
        a_out => grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_a_out,
        a_out_ap_vld => grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_a_out_ap_vld);

    grp_cascadeClassifier_Pipeline_Filters_fu_287 : component face_detect_cascadeClassifier_Pipeline_Filters
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start,
        ap_done => grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done,
        ap_idle => grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_idle,
        ap_ready => grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_ready,
        sext_ln200 => haar_counter_fu_126,
        stage_sum => stage_sum_fu_130,
        add_ln200 => add_ln200_reg_990,
        stddev_0 => stddev_0_reg_258,
        pt_y_val => pt_y_val,
        pt_x_val => pt_x_val,
        SUM1_data_address0 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address0,
        SUM1_data_ce0 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce0,
        SUM1_data_q0 => SUM1_data_q0,
        SUM1_data_address1 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address1,
        SUM1_data_ce1 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce1,
        SUM1_data_q1 => SUM1_data_q1,
        SUM1_data_address2 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address2,
        SUM1_data_ce2 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce2,
        SUM1_data_q2 => SUM1_data_q2,
        SUM1_data_address3 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address3,
        SUM1_data_ce3 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce3,
        SUM1_data_q3 => SUM1_data_q3,
        SUM1_data_address4 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address4,
        SUM1_data_ce4 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce4,
        SUM1_data_q4 => SUM1_data_q4,
        SUM1_data_address5 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address5,
        SUM1_data_ce5 => grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce5,
        SUM1_data_q5 => SUM1_data_q5,
        stage_sum_1_out => grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out,
        stage_sum_1_out_ap_vld => grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out_ap_vld);

    dmul_64ns_64ns_64_14_full_dsp_1_U50 : component face_detect_dmul_64ns_64ns_64_14_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 14,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_369,
        din1 => ap_const_lv64_3FD999999999999A,
        ce => ap_const_logic_1,
        dout => grp_fu_343_p2);

    dcmp_64ns_64ns_1_4_no_dsp_1_U51 : component face_detect_dcmp_64ns_64ns_1_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_369,
        din1 => mul_reg_1008,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_348_p2);

    sitodp_64s_64_7_no_dsp_1_U52 : component face_detect_sitodp_64s_64_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_352_p0,
        ce => grp_fu_352_ce,
        dout => grp_fu_352_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv6_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and ((ap_const_lv1_1 = and_ln256_1_fu_722_p2) or (icmp_ln199_reg_953 = ap_const_lv1_0)))) then 
                    ap_return_preg <= ap_phi_mux_retval_0_phi_fu_274_p4;
                end if; 
            end if;
        end if;
    end process;


    grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln188_reg_920 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    haar_counter_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                haar_counter_fu_126 <= ap_const_lv32_0;
            elsif (((ap_const_lv1_0 = and_ln256_1_fu_722_p2) and (icmp_ln199_reg_953 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                haar_counter_fu_126 <= select_ln256_reg_995;
            end if; 
        end if;
    end process;

    i_2_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_2_fu_134 <= ap_const_lv5_0;
            elsif (((ap_const_lv1_0 = and_ln256_1_fu_722_p2) and (icmp_ln199_reg_953 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                i_2_fu_134 <= add_ln199_reg_957;
            end if; 
        end if;
    end process;

    reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_359 <= SQSUM1_data_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_359 <= SQSUM1_data_q1;
            end if; 
        end if;
    end process;

    reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                reg_364 <= SUM1_data_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_364 <= SUM1_data_q1;
            end if; 
        end if;
    end process;

    retval_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln199_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                retval_0_reg_270 <= ap_const_lv6_1;
            elsif (((ap_const_lv1_1 = and_ln256_1_fu_722_p2) and (icmp_ln199_reg_953 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                retval_0_reg_270 <= sub_ln257_fu_742_p2;
            end if; 
        end if;
    end process;

    stage_sum_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                stage_sum_fu_130 <= ap_const_lv64_0;
            elsif (((ap_const_lv1_0 = and_ln256_1_fu_722_p2) and (icmp_ln199_reg_953 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                stage_sum_fu_130 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out;
            end if; 
        end if;
    end process;

    stddev_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_reg_920 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                stddev_0_reg_258 <= ap_const_lv32_1;
            elsif (((icmp_ln188_reg_920 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                stddev_0_reg_258 <= grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_a_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                SQSUM1_data_load_1_reg_837 <= SQSUM1_data_q0;
                SUM1_data_load_1_reg_852 <= SUM1_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln176_reg_779 <= add_ln176_fu_405_p2;
                add_ln177_reg_785 <= add_ln177_fu_411_p2;
                    add_ln180_reg_773(16 downto 6) <= add_ln180_fu_399_p2(16 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln180_1_reg_791 <= add_ln180_1_fu_417_p2;
                add_ln181_reg_796 <= add_ln181_fu_421_p2;
                    add_ln182_reg_801(16 downto 6) <= add_ln182_fu_447_p2(16 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln182_1_reg_827 <= add_ln182_1_fu_463_p2;
                add_ln183_reg_832 <= add_ln183_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln199_reg_957 <= add_ln199_fu_589_p2;
                icmp_ln199_reg_953 <= icmp_ln199_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln200_reg_990 <= add_ln200_fu_621_p2;
                select_ln256_reg_995 <= select_ln256_fu_633_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                icmp_ln188_reg_920 <= icmp_ln188_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                icmp_ln256_1_reg_1019 <= icmp_ln256_1_fu_690_p2;
                icmp_ln256_2_reg_1024 <= icmp_ln256_2_fu_696_p2;
                icmp_ln256_3_reg_1029 <= icmp_ln256_3_fu_702_p2;
                icmp_ln256_reg_1014 <= icmp_ln256_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mean_reg_893 <= mean_fu_506_p2;
                stddev_reg_887 <= stddev_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln186_reg_909 <= grp_fu_342_p_dout0;
                    stddev_1_reg_904(41 downto 6) <= stddev_1_fu_538_p2(41 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                mul_reg_1008 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state26))) then
                reg_369 <= grp_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                stages_array_load_reg_972 <= stages_array_q0;
                stages_thresh_array_load_reg_979 <= stages_thresh_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                stddev_2_reg_914 <= stddev_2_fu_547_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sub_ln176_reg_857 <= sub_ln176_fu_476_p2;
                sub_ln181_reg_872 <= sub_ln181_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sub_ln177_reg_877 <= sub_ln177_fu_491_p2;
                sub_ln182_reg_882 <= sub_ln182_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_4_reg_1034 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln189_reg_924 <= trunc_ln189_fu_557_p1;
            end if;
        end if;
    end process;
    add_ln180_reg_773(5 downto 0) <= "000000";
    add_ln182_reg_801(5 downto 0) <= "000000";
    stddev_1_reg_904(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln188_reg_920, ap_CS_fsm_state15, icmp_ln199_fu_583_p2, icmp_ln199_reg_953, ap_CS_fsm_state18, grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_done, grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done, ap_CS_fsm_state45, and_ln256_1_fu_722_p2, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln188_reg_920 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln199_fu_583_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and ((ap_const_lv1_1 = and_ln256_1_fu_722_p2) or (icmp_ln199_reg_953 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    SQSUM1_data_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, zext_ln181_fu_458_p1, zext_ln182_2_fu_471_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SQSUM1_data_address0 <= zext_ln182_2_fu_471_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SQSUM1_data_address0 <= zext_ln181_fu_458_p1(17 - 1 downto 0);
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3, zext_ln180_2_fu_453_p1, zext_ln183_fu_481_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SQSUM1_data_address1 <= zext_ln183_fu_481_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SQSUM1_data_address1 <= zext_ln180_2_fu_453_p1(17 - 1 downto 0);
        else 
            SQSUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            SQSUM1_data_ce0 <= ap_const_logic_1;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            SQSUM1_data_ce1 <= ap_const_logic_1;
        else 
            SQSUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address0, ap_CS_fsm_state21, zext_ln181_fu_458_p1, zext_ln182_2_fu_471_p1, zext_ln183_fu_481_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            SUM1_data_address0 <= zext_ln183_fu_481_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SUM1_data_address0 <= zext_ln182_2_fu_471_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SUM1_data_address0 <= zext_ln181_fu_458_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_address0 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address0;
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_address1_assign_proc : process(ap_CS_fsm_state3, grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address1, ap_CS_fsm_state21, zext_ln180_2_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SUM1_data_address1 <= zext_ln180_2_fu_453_p1(17 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_address1 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address1;
        else 
            SUM1_data_address1 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    SUM1_data_address2 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address2;
    SUM1_data_address3 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address3;
    SUM1_data_address4 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address4;
    SUM1_data_address5 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_address5;

    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce0, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            SUM1_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce0 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce0;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce1_assign_proc : process(ap_CS_fsm_state3, grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce1, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SUM1_data_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce1 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce1;
        else 
            SUM1_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce2_assign_proc : process(grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce2, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce2 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce2;
        else 
            SUM1_data_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce3_assign_proc : process(grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce3, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce3 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce3;
        else 
            SUM1_data_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce4_assign_proc : process(grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce4, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce4 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce4;
        else 
            SUM1_data_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_ce5_assign_proc : process(grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce5, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            SUM1_data_ce5 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_SUM1_data_ce5;
        else 
            SUM1_data_ce5 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln176_fu_405_p2 <= std_logic_vector(unsigned(pt_x_val) + unsigned(ap_const_lv17_18));
    add_ln177_fu_411_p2 <= std_logic_vector(unsigned(pt_y_val) + unsigned(ap_const_lv8_18));
    add_ln180_1_fu_417_p2 <= std_logic_vector(unsigned(add_ln180_reg_773) + unsigned(pt_x_val));
    add_ln180_fu_399_p2 <= std_logic_vector(unsigned(zext_ln180_fu_383_p1) + unsigned(zext_ln180_1_fu_395_p1));
    add_ln181_fu_421_p2 <= std_logic_vector(unsigned(add_ln180_reg_773) + unsigned(add_ln176_reg_779));
    add_ln182_1_fu_463_p2 <= std_logic_vector(unsigned(add_ln182_reg_801) + unsigned(pt_x_val));
    add_ln182_fu_447_p2 <= std_logic_vector(unsigned(zext_ln182_fu_432_p1) + unsigned(zext_ln182_1_fu_443_p1));
    add_ln183_fu_467_p2 <= std_logic_vector(unsigned(add_ln182_reg_801) + unsigned(add_ln176_reg_779));
    add_ln199_fu_589_p2 <= std_logic_vector(unsigned(i_2_fu_134) + unsigned(ap_const_lv5_1));
    add_ln200_fu_621_p2 <= std_logic_vector(unsigned(stages_array_load_reg_972) + unsigned(empty_fu_617_p1));
    and_ln256_1_fu_722_p2 <= (tmp_4_reg_1034 and and_ln256_fu_716_p2);
    and_ln256_fu_716_p2 <= (or_ln256_fu_708_p2 and or_ln256_1_fu_712_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;

    ap_ST_fsm_state16_blk_assign_proc : process(grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_done)
    begin
        if ((grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done)
    begin
        if ((grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln199_reg_953, ap_CS_fsm_state45, and_ln256_1_fu_722_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state45) and ((ap_const_lv1_1 = and_ln256_1_fu_722_p2) or (icmp_ln199_reg_953 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_retval_0_phi_fu_274_p4_assign_proc : process(icmp_ln199_reg_953, sub_ln257_fu_742_p2, retval_0_reg_270, ap_CS_fsm_state45, and_ln256_1_fu_722_p2)
    begin
        if (((ap_const_lv1_1 = and_ln256_1_fu_722_p2) and (icmp_ln199_reg_953 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            ap_phi_mux_retval_0_phi_fu_274_p4 <= sub_ln257_fu_742_p2;
        else 
            ap_phi_mux_retval_0_phi_fu_274_p4 <= retval_0_reg_270;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln199_reg_953, ap_CS_fsm_state45, and_ln256_1_fu_722_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and ((ap_const_lv1_1 = and_ln256_1_fu_722_p2) or (icmp_ln199_reg_953 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(icmp_ln199_reg_953, ap_phi_mux_retval_0_phi_fu_274_p4, ap_CS_fsm_state45, and_ln256_1_fu_722_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and ((ap_const_lv1_1 = and_ln256_1_fu_722_p2) or (icmp_ln199_reg_953 = ap_const_lv1_0)))) then 
            ap_return <= ap_phi_mux_retval_0_phi_fu_274_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln256_1_fu_667_p1 <= mul_reg_1008;
    bitcast_ln256_fu_649_p1 <= reg_369;
    empty_fu_617_p1 <= haar_counter_fu_126(8 - 1 downto 0);
    grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start <= grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_start_reg;
    grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start <= grp_cascadeClassifier_Pipeline_VITIS_LOOP_379_1_fu_281_ap_start_reg;
    grp_fu_342_p_ce <= ap_const_logic_1;
    grp_fu_342_p_din0 <= sext_ln180_fu_511_p1(33 - 1 downto 0);
    grp_fu_342_p_din1 <= sext_ln180_fu_511_p1(33 - 1 downto 0);

    grp_fu_352_ce_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state40, ap_CS_fsm_state20, grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done, ap_CS_fsm_state21, ap_CS_fsm_state34, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state26) or ((grp_cascadeClassifier_Pipeline_Filters_fu_287_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            grp_fu_352_ce <= ap_const_logic_1;
        else 
            grp_fu_352_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_352_p0_assign_proc : process(ap_CS_fsm_state20, sext_ln256_fu_641_p1, grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_352_p0 <= grp_cascadeClassifier_Pipeline_Filters_fu_287_stage_sum_1_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_352_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln256_fu_641_p1),64));
        else 
            grp_fu_352_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    haar_counter_2_fu_627_p2 <= std_logic_vector(unsigned(zext_ln200_fu_609_p1) + unsigned(haar_counter_fu_126));
    icmp_ln188_fu_552_p2 <= "1" when (signed(stddev_2_reg_914) > signed(ap_const_lv64_0)) else "0";
    icmp_ln199_fu_583_p2 <= "1" when (unsigned(i_2_fu_134) < unsigned(ap_const_lv5_19)) else "0";
    icmp_ln200_fu_612_p2 <= "0" when (stages_array_load_reg_972 = ap_const_lv8_0) else "1";
    icmp_ln256_1_fu_690_p2 <= "1" when (trunc_ln256_fu_663_p1 = ap_const_lv52_0) else "0";
    icmp_ln256_2_fu_696_p2 <= "0" when (tmp_3_fu_670_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln256_3_fu_702_p2 <= "1" when (trunc_ln256_1_fu_680_p1 = ap_const_lv52_0) else "0";
    icmp_ln256_fu_684_p2 <= "0" when (tmp_s_fu_653_p4 = ap_const_lv11_7FF) else "1";
    mean_fu_506_p2 <= std_logic_vector(unsigned(reg_364) + unsigned(sub_ln182_reg_882));
    or_ln256_1_fu_712_p2 <= (icmp_ln256_3_reg_1029 or icmp_ln256_2_reg_1024);
    or_ln256_fu_708_p2 <= (icmp_ln256_reg_1014 or icmp_ln256_1_reg_1019);
    select_ln256_fu_633_p3 <= 
        haar_counter_2_fu_627_p2 when (icmp_ln200_fu_612_p2(0) = '1') else 
        haar_counter_fu_126;
        sext_ln159_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stddev_1_reg_904),64));

        sext_ln180_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_reg_893),64));

        sext_ln185_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln185_1_fu_527_p3),42));

        sext_ln185_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_516_p3),42));

        sext_ln256_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(stages_thresh_array_load_reg_979),32));

    shl_ln185_1_fu_527_p3 <= (stddev_reg_887 & ap_const_lv6_0);
    shl_ln_fu_516_p3 <= (stddev_reg_887 & ap_const_lv9_0);
    stages_array_address0 <= zext_ln199_fu_595_p1(5 - 1 downto 0);

    stages_array_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stages_array_ce0 <= ap_const_logic_1;
        else 
            stages_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stages_thresh_array_address0 <= zext_ln199_fu_595_p1(5 - 1 downto 0);

    stages_thresh_array_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            stages_thresh_array_ce0 <= ap_const_logic_1;
        else 
            stages_thresh_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stddev_1_fu_538_p2 <= std_logic_vector(signed(sext_ln185_fu_523_p1) + signed(sext_ln185_1_fu_534_p1));
    stddev_2_fu_547_p2 <= std_logic_vector(signed(sext_ln159_fu_544_p1) - signed(mul_ln186_reg_909));
    stddev_fu_501_p2 <= std_logic_vector(unsigned(reg_359) + unsigned(sub_ln177_reg_877));
    sub_ln176_fu_476_p2 <= std_logic_vector(unsigned(reg_359) - unsigned(SQSUM1_data_load_1_reg_837));
    sub_ln177_fu_491_p2 <= std_logic_vector(unsigned(sub_ln176_reg_857) - unsigned(reg_359));
    sub_ln181_fu_486_p2 <= std_logic_vector(unsigned(reg_364) - unsigned(SUM1_data_load_1_reg_852));
    sub_ln182_fu_496_p2 <= std_logic_vector(unsigned(sub_ln181_reg_872) - unsigned(reg_364));
    sub_ln257_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln257_fu_739_p1));
    tmp_26_fu_375_p3 <= (pt_y_val & ap_const_lv8_0);
    tmp_27_fu_387_p3 <= (pt_y_val & ap_const_lv6_0);
    tmp_28_fu_425_p3 <= (add_ln177_reg_785 & ap_const_lv8_0);
    tmp_29_fu_436_p3 <= (add_ln177_reg_785 & ap_const_lv6_0);
    tmp_3_fu_670_p4 <= bitcast_ln256_1_fu_667_p1(62 downto 52);
    tmp_s_fu_653_p4 <= bitcast_ln256_fu_649_p1(62 downto 52);
    trunc_ln189_fu_557_p1 <= stddev_2_reg_914(32 - 1 downto 0);
    trunc_ln256_1_fu_680_p1 <= bitcast_ln256_1_fu_667_p1(52 - 1 downto 0);
    trunc_ln256_fu_663_p1 <= bitcast_ln256_fu_649_p1(52 - 1 downto 0);
    zext_ln180_1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_387_p3),17));
    zext_ln180_2_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_1_reg_791),64));
    zext_ln180_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_375_p3),17));
    zext_ln181_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln181_reg_796),64));
    zext_ln182_1_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_436_p3),17));
    zext_ln182_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln182_1_reg_827),64));
    zext_ln182_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_425_p3),17));
    zext_ln183_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln183_reg_832),64));
    zext_ln199_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_134),64));
    zext_ln200_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stages_array_load_reg_972),32));
    zext_ln257_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_fu_134),6));
end behav;
