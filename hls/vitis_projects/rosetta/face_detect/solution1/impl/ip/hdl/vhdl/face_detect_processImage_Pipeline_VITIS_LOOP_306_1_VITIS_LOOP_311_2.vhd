-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
    bound : IN STD_LOGIC_VECTOR (63 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    SUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SUM1_data_ce0 : OUT STD_LOGIC;
    SUM1_data_we0 : OUT STD_LOGIC;
    SUM1_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    SUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    SQSUM1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    SQSUM1_data_ce0 : OUT STD_LOGIC;
    SQSUM1_data_we0 : OUT STD_LOGIC;
    SQSUM1_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    SQSUM1_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of face_detect_processImage_Pipeline_VITIS_LOOP_306_1_VITIS_LOOP_311_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln306_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_1_reg_552 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln311_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_reg_557_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_reg_557_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln311_reg_557_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln306_reg_565 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln306_1_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln306_1_reg_569 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_load_reg_574 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln306_fu_233_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln306_reg_579 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln306_fu_239_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln306_reg_584 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln306_3_fu_245_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln306_3_reg_590 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln306_3_reg_590_pp0_iter2_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln306_3_reg_590_pp0_iter3_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln313_fu_274_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln313_reg_595 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_284_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_600 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln311_fu_290_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln311_reg_606 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln322_fu_327_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln322_reg_611 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln313_1_fu_333_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln313_1_reg_616 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln313_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln313_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln313_reg_621_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln313_reg_621_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln313_reg_621_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln322_1_fu_345_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln322_1_reg_634 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln322_2_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln322_2_reg_639 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln322_2_reg_639_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal it_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln315_1_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal SUM1_data_load_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_cmp16_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp16_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i_reg_680 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp9_i_reg_680_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_2_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_2_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal addr_cmp_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_cmp_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tq_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal SQSUM1_data_load_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal tq_2_fu_457_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tq_2_reg_718 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal reuse_addr_reg13_fu_56 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_loop_init : STD_LOGIC;
    signal reuse_reg12_fu_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reuse_addr_reg_fu_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal reuse_reg_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal s_fu_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sq_fu_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_sq_load : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_80 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_sig_allocacmp_x_1 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_fu_84 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal zext_ln311_fu_210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln313_1_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln313_fu_250_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_258_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_266_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln306_fu_280_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_305_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_316_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln322_fu_312_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln322_1_fu_323_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln315_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln306_2_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select17_fu_395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_select_fu_446_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tq_1_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tq_1_fu_452_p2 : signal is "no";
    signal grp_fu_471_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_471_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_done_pending_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_mac_muladd_8ns_8ns_32ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8ns_8ns_32ns_32_4_1_U11 : component face_detect_mac_muladd_8ns_8ns_32ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_471_p0,
        din1 => grp_fu_471_p1,
        din2 => grp_fu_471_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p3);

    flow_control_loop_pipe_sequential_init_U : component face_detect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln306_reg_565 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_88 <= add_ln306_1_reg_569;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg13_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg13_fu_56 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    reuse_addr_reg13_fu_56 <= zext_ln313_reg_621;
                end if;
            end if; 
        end if;
    end process;

    reuse_addr_reg_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_64 <= ap_const_lv64_FFFFFFFFFFFFFFFF;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    reuse_addr_reg_fu_64 <= zext_ln313_reg_621_pp0_iter3_reg;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg12_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    reuse_reg12_fu_60 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    reuse_reg12_fu_60 <= t_2_reg_685;
                end if;
            end if; 
        end if;
    end process;

    reuse_reg_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reuse_reg_fu_68 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reuse_reg_fu_68 <= tq_2_reg_718;
            end if; 
        end if;
    end process;

    s_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                s_fu_72 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                s_fu_72 <= t_reg_663;
            end if; 
        end if;
    end process;

    sq_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    sq_fu_76 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    sq_fu_76 <= tq_reg_706;
                end if;
            end if; 
        end if;
    end process;

    x_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_fu_80 <= ap_const_lv17_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                x_fu_80 <= add_ln311_reg_606;
            end if; 
        end if;
    end process;

    y_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_84 <= ap_const_lv31_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln306_reg_565 = ap_const_lv1_0))) then 
                    y_fu_84 <= select_ln306_3_fu_245_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                SQSUM1_data_load_reg_713 <= SQSUM1_data_q0;
                tq_reg_706 <= grp_fu_471_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                SUM1_data_load_reg_670 <= SUM1_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln306_1_reg_569 <= add_ln306_1_fu_224_p2;
                add_ln306_reg_579 <= add_ln306_fu_233_p2;
                add_ln313_1_reg_616 <= add_ln313_1_fu_333_p2;
                    add_ln322_reg_611(16 downto 6) <= add_ln322_fu_327_p2(16 downto 6);
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                cmp9_i_reg_680 <= cmp9_i_fu_387_p2;
                cmp9_i_reg_680_pp0_iter4_reg <= cmp9_i_reg_680;
                icmp_ln306_reg_565 <= icmp_ln306_fu_219_p2;
                icmp_ln311_reg_557 <= icmp_ln311_fu_214_p2;
                icmp_ln311_reg_557_pp0_iter1_reg <= icmp_ln311_reg_557;
                icmp_ln311_reg_557_pp0_iter2_reg <= icmp_ln311_reg_557_pp0_iter1_reg;
                icmp_ln311_reg_557_pp0_iter3_reg <= icmp_ln311_reg_557_pp0_iter2_reg;
                it_reg_651 <= IMG1_data_q0;
                t_2_reg_685 <= t_2_fu_406_p3;
                x_1_reg_552 <= ap_sig_allocacmp_x_1;
                y_load_reg_574 <= y_fu_84;
                    zext_ln322_2_reg_639(16 downto 0) <= zext_ln322_2_fu_349_p1(16 downto 0);
                    zext_ln322_2_reg_639_pp0_iter3_reg(16 downto 0) <= zext_ln322_2_reg_639(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln311_reg_606 <= add_ln311_fu_290_p2;
                    add_ln313_reg_595(16 downto 6) <= add_ln313_fu_274_p2(16 downto 6);
                add_ln322_1_reg_634 <= add_ln322_1_fu_345_p2;
                addr_cmp16_reg_675 <= addr_cmp16_fu_378_p2;
                addr_cmp_reg_701 <= addr_cmp_fu_430_p2;
                empty_reg_600 <= empty_fu_284_p2;
                select_ln306_3_reg_590 <= select_ln306_3_fu_245_p3;
                select_ln306_3_reg_590_pp0_iter2_reg <= select_ln306_3_reg_590;
                select_ln306_3_reg_590_pp0_iter3_reg <= select_ln306_3_reg_590_pp0_iter2_reg;
                select_ln306_reg_584 <= select_ln306_fu_239_p3;
                t_reg_663 <= t_fu_369_p2;
                tq_2_reg_718 <= tq_2_fu_457_p3;
                    zext_ln313_reg_621(16 downto 0) <= zext_ln313_fu_341_p1(16 downto 0);
                    zext_ln313_reg_621_pp0_iter3_reg(16 downto 0) <= zext_ln313_reg_621(16 downto 0);
                    zext_ln313_reg_621_pp0_iter4_reg(16 downto 0) <= zext_ln313_reg_621_pp0_iter3_reg(16 downto 0);
                    zext_ln313_reg_621_pp0_iter5_reg(16 downto 0) <= zext_ln313_reg_621_pp0_iter4_reg(16 downto 0);
            end if;
        end if;
    end process;
    add_ln313_reg_595(5 downto 0) <= "000000";
    add_ln322_reg_611(5 downto 0) <= "000000";
    zext_ln313_reg_621(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    zext_ln313_reg_621_pp0_iter3_reg(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    zext_ln313_reg_621_pp0_iter4_reg(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    zext_ln313_reg_621_pp0_iter5_reg(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    zext_ln322_2_reg_639(63 downto 17) <= "00000000000000000000000000000000000000000000000";
    zext_ln322_2_reg_639_pp0_iter3_reg(63 downto 17) <= "00000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to5, ap_done_pending_pp0, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_done_pending_pp0 = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    IMG1_data_address0 <= zext_ln313_fu_341_p1(17 - 1 downto 0);

    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            IMG1_data_ce0 <= ap_const_logic_1;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SQSUM1_data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, zext_ln313_reg_621_pp0_iter5_reg, zext_ln322_2_reg_639_pp0_iter3_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            SQSUM1_data_address0 <= zext_ln313_reg_621_pp0_iter5_reg(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SQSUM1_data_address0 <= zext_ln322_2_reg_639_pp0_iter3_reg(17 - 1 downto 0);
        else 
            SQSUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SQSUM1_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            SQSUM1_data_ce0 <= ap_const_logic_1;
        else 
            SQSUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SQSUM1_data_d0 <= tq_2_reg_718;

    SQSUM1_data_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            SQSUM1_data_we0 <= ap_const_logic_1;
        else 
            SQSUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SUM1_data_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, zext_ln313_reg_621_pp0_iter3_reg, zext_ln322_2_fu_349_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SUM1_data_address0 <= zext_ln313_reg_621_pp0_iter3_reg(17 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            SUM1_data_address0 <= zext_ln322_2_fu_349_p1(17 - 1 downto 0);
        else 
            SUM1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    SUM1_data_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            SUM1_data_ce0 <= ap_const_logic_1;
        else 
            SUM1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SUM1_data_d0 <= t_2_reg_685;

    SUM1_data_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SUM1_data_we0 <= ap_const_logic_1;
        else 
            SUM1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln306_1_fu_224_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_88) + unsigned(ap_const_lv64_1));
    add_ln306_fu_233_p2 <= std_logic_vector(unsigned(y_fu_84) + unsigned(ap_const_lv31_1));
    add_ln311_fu_290_p2 <= std_logic_vector(unsigned(select_ln306_fu_239_p3) + unsigned(ap_const_lv17_1));
    add_ln313_1_fu_333_p2 <= std_logic_vector(unsigned(add_ln313_reg_595) + unsigned(select_ln306_reg_584));
    add_ln313_fu_274_p2 <= std_logic_vector(unsigned(tmp_6_fu_258_p3) + unsigned(tmp_7_fu_266_p3));
    add_ln322_1_fu_345_p2 <= std_logic_vector(unsigned(add_ln322_reg_611) + unsigned(select_ln306_reg_584));
    add_ln322_fu_327_p2 <= std_logic_vector(unsigned(zext_ln322_fu_312_p1) + unsigned(zext_ln322_1_fu_323_p1));
    addr_cmp16_fu_378_p2 <= "1" when (reuse_addr_reg13_fu_56 = zext_ln322_2_reg_639) else "0";
    addr_cmp_fu_430_p2 <= "1" when (reuse_addr_reg_fu_64 = zext_ln322_2_reg_639_pp0_iter3_reg) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln306_fu_219_p2)
    begin
        if (((icmp_ln306_fu_219_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_done_pending_pp0_assign_proc : process(ap_loop_exit_ready, ap_loop_exit_ready_pp0_iter1_reg, ap_loop_exit_ready_pp0_iter2_reg, ap_loop_exit_ready_pp0_iter3_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (not(((ap_loop_exit_ready = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0)))) then 
            ap_done_pending_pp0 <= ap_const_logic_1;
        else 
            ap_done_pending_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_sq_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, tq_reg_706, ap_block_pp0_stage0, sq_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_sq_load <= tq_reg_706;
        else 
            ap_sig_allocacmp_sq_load <= sq_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_x_1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, add_ln311_reg_606, ap_block_pp0_stage1, x_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_x_1 <= add_ln311_reg_606;
        else 
            ap_sig_allocacmp_x_1 <= x_fu_80;
        end if; 
    end process;

    cmp9_i_fu_387_p2 <= "1" when (select_ln306_3_reg_590_pp0_iter3_reg = ap_const_lv31_0) else "0";
    empty_fu_284_p2 <= std_logic_vector(unsigned(trunc_ln306_fu_280_p1) + unsigned(ap_const_lv8_FF));
    grp_fu_471_p0 <= zext_ln315_1_fu_366_p1(8 - 1 downto 0);
    grp_fu_471_p1 <= zext_ln315_1_fu_366_p1(8 - 1 downto 0);
    grp_fu_471_p2 <= 
        ap_sig_allocacmp_sq_load when (icmp_ln311_reg_557_pp0_iter3_reg(0) = '1') else 
        ap_const_lv32_0;
    icmp_ln306_fu_219_p2 <= "1" when (indvar_flatten_fu_88 = bound) else "0";
    icmp_ln311_fu_214_p2 <= "1" when (signed(zext_ln311_fu_210_p1) < signed(sum_col)) else "0";
    reuse_select17_fu_395_p3 <= 
        reuse_reg12_fu_60 when (addr_cmp16_reg_675(0) = '1') else 
        SUM1_data_load_reg_670;
    reuse_select_fu_446_p3 <= 
        reuse_reg_fu_68 when (addr_cmp_reg_701(0) = '1') else 
        SQSUM1_data_load_reg_713;
    select_ln306_2_fu_356_p3 <= 
        s_fu_72 when (icmp_ln311_reg_557_pp0_iter2_reg(0) = '1') else 
        ap_const_lv32_0;
    select_ln306_3_fu_245_p3 <= 
        y_load_reg_574 when (icmp_ln311_reg_557(0) = '1') else 
        add_ln306_reg_579;
    select_ln306_fu_239_p3 <= 
        x_1_reg_552 when (icmp_ln311_reg_557(0) = '1') else 
        ap_const_lv17_0;
    t_1_fu_401_p2 <= std_logic_vector(unsigned(reuse_select17_fu_395_p3) + unsigned(t_reg_663));
    t_2_fu_406_p3 <= 
        t_reg_663 when (cmp9_i_fu_387_p2(0) = '1') else 
        t_1_fu_401_p2;
    t_fu_369_p2 <= std_logic_vector(unsigned(zext_ln315_fu_363_p1) + unsigned(select_ln306_2_fu_356_p3));
    tmp_6_fu_258_p3 <= (trunc_ln313_1_fu_254_p1 & ap_const_lv8_0);
    tmp_7_fu_266_p3 <= (trunc_ln313_fu_250_p1 & ap_const_lv6_0);
    tmp_8_fu_305_p3 <= (empty_reg_600 & ap_const_lv8_0);
    tmp_9_fu_316_p3 <= (empty_reg_600 & ap_const_lv6_0);
    tq_1_fu_452_p2 <= std_logic_vector(unsigned(reuse_select_fu_446_p3) + unsigned(tq_reg_706));
    tq_2_fu_457_p3 <= 
        tq_reg_706 when (cmp9_i_reg_680_pp0_iter4_reg(0) = '1') else 
        tq_1_fu_452_p2;
    trunc_ln306_fu_280_p1 <= select_ln306_3_fu_245_p3(8 - 1 downto 0);
    trunc_ln313_1_fu_254_p1 <= select_ln306_3_fu_245_p3(9 - 1 downto 0);
    trunc_ln313_fu_250_p1 <= select_ln306_3_fu_245_p3(11 - 1 downto 0);
    zext_ln311_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_1),32));
    zext_ln313_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln313_1_reg_616),64));
    zext_ln315_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_reg_651),16));
    zext_ln315_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_reg_651),32));
    zext_ln322_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_316_p3),17));
    zext_ln322_2_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln322_1_reg_634),64));
    zext_ln322_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_305_p3),17));
end behav;
