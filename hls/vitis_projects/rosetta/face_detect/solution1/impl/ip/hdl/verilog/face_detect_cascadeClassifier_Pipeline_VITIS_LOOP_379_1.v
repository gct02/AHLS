// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module face_detect_cascadeClassifier_Pipeline_VITIS_LOOP_379_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        empty,
        a_out,
        a_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] empty;
output  [31:0] a_out;
output   a_out_ap_vld;

reg ap_idle;
reg a_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln379_fu_104_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] a_load_reg_289;
wire    ap_block_pp0_stage1_11001;
wire   [29:0] or_ln_fu_147_p3;
reg   [29:0] or_ln_reg_294;
wire   [0:0] icmp_ln388_fu_191_p2;
reg   [0:0] icmp_ln388_reg_299;
wire   [29:0] c_2_fu_197_p2;
reg   [29:0] c_2_reg_304;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [29:0] c_fu_52;
wire   [29:0] c_3_fu_229_p3;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [31:0] a_fu_56;
wire   [31:0] a_3_fu_235_p3;
reg   [4:0] i_fu_60;
wire   [4:0] i_2_fu_110_p2;
reg   [31:0] value_assign_2_fu_64;
wire   [31:0] shl_ln385_fu_155_p2;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0;
wire   [1:0] lshr_ln_fu_125_p4;
wire   [27:0] trunc_ln383_fu_135_p1;
wire   [27:0] trunc_ln387_fu_167_p1;
wire   [31:0] shl_ln387_fu_161_p2;
wire   [29:0] trunc_ln_fu_171_p3;
wire   [31:0] c_1_fu_139_p3;
wire   [31:0] b_fu_179_p2;
wire   [29:0] or_ln377_fu_185_p2;
wire   [31:0] a_1_fu_213_p2;
wire   [0:0] xor_ln388_fu_218_p2;
wire   [31:0] a_2_fu_223_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 c_fu_52 = 30'd0;
#0 a_fu_56 = 32'd0;
#0 i_fu_60 = 5'd0;
#0 value_assign_2_fu_64 = 32'd0;
#0 ap_done_reg = 1'b0;
end

face_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            a_fu_56 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            a_fu_56 <= a_3_fu_235_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_fu_52 <= 30'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            c_fu_52 <= c_3_fu_229_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_60 <= 5'd0;
    end else if (((icmp_ln379_fu_104_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_60 <= i_2_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        value_assign_2_fu_64 <= empty;
    end else if (((icmp_ln379_fu_104_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        value_assign_2_fu_64 <= shl_ln385_fu_155_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_load_reg_289 <= a_fu_56;
        c_2_reg_304 <= c_2_fu_197_p2;
        icmp_ln388_reg_299 <= icmp_ln388_fu_191_p2;
        or_ln_reg_294 <= or_ln_fu_147_p3;
    end
end

always @ (*) begin
    if (((icmp_ln379_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_out_ap_vld = 1'b1;
    end else begin
        a_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln379_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_213_p2 = a_load_reg_289 << 32'd1;

assign a_2_fu_223_p2 = (32'd1 | a_1_fu_213_p2);

assign a_3_fu_235_p3 = ((xor_ln388_fu_218_p2[0:0] == 1'b1) ? a_2_fu_223_p2 : a_1_fu_213_p2);

assign a_out = a_fu_56;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign b_fu_179_p2 = (shl_ln387_fu_161_p2 | 32'd1);

assign c_1_fu_139_p3 = {{c_fu_52}, {lshr_ln_fu_125_p4}};

assign c_2_fu_197_p2 = (or_ln_fu_147_p3 - or_ln377_fu_185_p2);

assign c_3_fu_229_p3 = ((xor_ln388_fu_218_p2[0:0] == 1'b1) ? c_2_reg_304 : or_ln_reg_294);

assign i_2_fu_110_p2 = (i_fu_60 + 5'd1);

assign icmp_ln379_fu_104_p2 = ((i_fu_60 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln388_fu_191_p2 = ((c_1_fu_139_p3 < b_fu_179_p2) ? 1'b1 : 1'b0);

assign lshr_ln_fu_125_p4 = {{value_assign_2_fu_64[31:30]}};

assign or_ln377_fu_185_p2 = (trunc_ln_fu_171_p3 | 30'd1);

assign or_ln_fu_147_p3 = {{trunc_ln383_fu_135_p1}, {lshr_ln_fu_125_p4}};

assign shl_ln385_fu_155_p2 = value_assign_2_fu_64 << 32'd2;

assign shl_ln387_fu_161_p2 = a_fu_56 << 32'd2;

assign trunc_ln383_fu_135_p1 = c_fu_52[27:0];

assign trunc_ln387_fu_167_p1 = a_fu_56[27:0];

assign trunc_ln_fu_171_p3 = {{trunc_ln387_fu_167_p1}, {2'd0}};

assign xor_ln388_fu_218_p2 = (icmp_ln388_reg_299 ^ 1'd1);

endmodule //face_detect_cascadeClassifier_Pipeline_VITIS_LOOP_379_1
