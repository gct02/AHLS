-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_ratio : IN STD_LOGIC_VECTOR (23 downto 0);
    result_19 : IN STD_LOGIC_VECTOR (31 downto 0);
    IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    IMG1_data_ce0 : OUT STD_LOGIC;
    IMG1_data_we0 : OUT STD_LOGIC;
    IMG1_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    result_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln357_1 : IN STD_LOGIC_VECTOR (27 downto 0);
    Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Data_ce0 : OUT STD_LOGIC;
    Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_12C00 : STD_LOGIC_VECTOR (16 downto 0) := "10010110000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln361_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln357_1_cast_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln357_1_cast_reg_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln361_reg_411 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln361_1_fu_169_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln361_1_reg_415 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln347_fu_193_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln347_reg_420 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln361_fu_201_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln361_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln368_fu_231_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln368_reg_436 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln364_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln366_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_reg_451_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_reg_451_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_reg_451_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln366_reg_451_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln368_2_fu_301_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln368_2_reg_455 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln368_2_reg_455_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln7_reg_460 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln7_reg_460_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_465 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln368_1_fu_348_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln368_1_reg_471 : STD_LOGIC_VECTOR (16 downto 0);
    signal IMG1_data_addr_reg_476 : STD_LOGIC_VECTOR (16 downto 0);
    signal IMG1_data_addr_reg_476_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln368_3_fu_361_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln368_3_reg_481 : STD_LOGIC_VECTOR (16 downto 0);
    signal Data_load_reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln368_5_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln368_6_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_76 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln364_fu_280_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_80 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_137_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_137_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln364_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln361_fu_181_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_209_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_220_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln368_fu_216_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln368_1_fu_227_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_243_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln361_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln366_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln366_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln368_4_fu_298_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_243_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_326_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_337_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln368_2_fu_333_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln368_3_fu_344_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln368_fu_358_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_243_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_mul_9ns_28s_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_mul_8ns_24s_24_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component face_detect_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_9ns_28s_32_4_1_U1 : component face_detect_mul_9ns_28s_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 28,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_137_p0,
        din1 => grp_fu_137_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_137_p2);

    mul_8ns_24s_24_5_1_U2 : component face_detect_mul_8ns_24s_24_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_243_p0,
        din1 => y_ratio,
        ce => ap_const_logic_1,
        dout => grp_fu_243_p2);

    flow_control_loop_pipe_sequential_init_U : component face_detect_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv8_0;
                elsif (((icmp_ln361_reg_411 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_80 <= select_ln361_reg_427;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv17_0;
                elsif (((icmp_ln361_reg_411 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_84 <= add_ln361_1_reg_415;
                end if;
            end if; 
        end if;
    end process;

    j_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_76 <= ap_const_lv9_0;
                elsif (((icmp_ln361_reg_411 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_76 <= add_ln364_fu_280_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Data_load_reg_491 <= Data_q0;
                add_ln368_3_reg_481 <= add_ln368_3_fu_361_p2;
                    add_ln368_reg_436(16 downto 6) <= add_ln368_fu_231_p2(16 downto 6);
                or_ln366_reg_451 <= or_ln366_fu_274_p2;
                or_ln366_reg_451_pp0_iter2_reg <= or_ln366_reg_451;
                or_ln366_reg_451_pp0_iter3_reg <= or_ln366_reg_451_pp0_iter2_reg;
                or_ln366_reg_451_pp0_iter4_reg <= or_ln366_reg_451_pp0_iter3_reg;
                or_ln366_reg_451_pp0_iter5_reg <= or_ln366_reg_451_pp0_iter4_reg;
                sext_ln357_1_cast_reg_406 <= sext_ln357_1_cast_fu_141_p1;
                tmp_10_reg_465 <= grp_fu_243_p2(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                IMG1_data_addr_reg_476 <= zext_ln368_5_fu_354_p1(17 - 1 downto 0);
                IMG1_data_addr_reg_476_pp0_iter4_reg <= IMG1_data_addr_reg_476;
                add_ln361_1_reg_415 <= add_ln361_1_fu_169_p2;
                    add_ln368_1_reg_471(16 downto 6) <= add_ln368_1_fu_348_p2(16 downto 6);
                add_ln368_2_reg_455 <= add_ln368_2_fu_301_p2;
                add_ln368_2_reg_455_pp0_iter2_reg <= add_ln368_2_reg_455;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln361_reg_411 <= icmp_ln361_fu_163_p2;
                select_ln347_reg_420 <= select_ln347_fu_193_p3;
                select_ln361_reg_427 <= select_ln361_fu_201_p3;
                trunc_ln7_reg_460 <= grp_fu_137_p2(31 downto 16);
                trunc_ln7_reg_460_pp0_iter3_reg <= trunc_ln7_reg_460;
            end if;
        end if;
    end process;
    add_ln368_reg_436(5 downto 0) <= "000000";
    add_ln368_1_reg_471(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to5, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    Data_address0 <= zext_ln368_6_fu_366_p1(17 - 1 downto 0);

    Data_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Data_ce0 <= ap_const_logic_1;
        else 
            Data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG1_data_address0 <= IMG1_data_addr_reg_476_pp0_iter4_reg;

    IMG1_data_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            IMG1_data_ce0 <= ap_const_logic_1;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG1_data_d0 <= Data_load_reg_491;

    IMG1_data_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, or_ln366_reg_451_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln366_reg_451_pp0_iter5_reg = ap_const_lv1_0))) then 
            IMG1_data_we0 <= ap_const_logic_1;
        else 
            IMG1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln361_1_fu_169_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_84) + unsigned(ap_const_lv17_1));
    add_ln361_fu_181_p2 <= std_logic_vector(unsigned(i_fu_80) + unsigned(ap_const_lv8_1));
    add_ln364_fu_280_p2 <= std_logic_vector(unsigned(select_ln347_reg_420) + unsigned(ap_const_lv9_1));
    add_ln368_1_fu_348_p2 <= std_logic_vector(unsigned(zext_ln368_2_fu_333_p1) + unsigned(zext_ln368_3_fu_344_p1));
    add_ln368_2_fu_301_p2 <= std_logic_vector(unsigned(add_ln368_reg_436) + unsigned(zext_ln368_4_fu_298_p1));
    add_ln368_3_fu_361_p2 <= std_logic_vector(unsigned(add_ln368_1_reg_471) + unsigned(sext_ln368_fu_358_p1));
    add_ln368_fu_231_p2 <= std_logic_vector(unsigned(zext_ln368_fu_216_p1) + unsigned(zext_ln368_1_fu_227_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln361_fu_163_p2)
    begin
        if (((icmp_ln361_fu_163_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_137_p0 <= zext_ln364_fu_259_p1(9 - 1 downto 0);
    grp_fu_137_p1 <= sext_ln357_1_cast_reg_406(28 - 1 downto 0);
    grp_fu_243_p0 <= grp_fu_243_p00(8 - 1 downto 0);
    grp_fu_243_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln361_reg_427),24));
    icmp_ln361_fu_163_p2 <= "1" when (indvar_flatten_fu_84 = ap_const_lv17_12C00) else "0";
    icmp_ln364_fu_187_p2 <= "1" when (j_fu_76 = ap_const_lv9_140) else "0";
    icmp_ln366_fu_263_p2 <= "1" when (signed(zext_ln364_fu_259_p1) < signed(result_18)) else "0";
    or_ln366_fu_274_p2 <= (xor_ln366_fu_268_p2 or rev_fu_253_p2);
    rev_fu_253_p2 <= (slt_fu_248_p2 xor ap_const_lv1_1);
    select_ln347_fu_193_p3 <= 
        ap_const_lv9_0 when (icmp_ln364_fu_187_p2(0) = '1') else 
        j_fu_76;
    select_ln361_fu_201_p3 <= 
        add_ln361_fu_181_p2 when (icmp_ln364_fu_187_p2(0) = '1') else 
        i_fu_80;
        sext_ln357_1_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln357_1),32));

        sext_ln368_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_reg_460_pp0_iter3_reg),17));

    slt_fu_248_p2 <= "1" when (signed(zext_ln361_fu_237_p1) < signed(result_19)) else "0";
    tmp_11_fu_326_p3 <= (tmp_10_reg_465 & ap_const_lv8_0);
    tmp_12_fu_337_p3 <= (tmp_10_reg_465 & ap_const_lv6_0);
    tmp_9_fu_220_p3 <= (select_ln361_reg_427 & ap_const_lv6_0);
    tmp_s_fu_209_p3 <= (select_ln361_reg_427 & ap_const_lv8_0);
    xor_ln366_fu_268_p2 <= (icmp_ln366_fu_263_p2 xor ap_const_lv1_1);
    zext_ln361_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln361_reg_427),32));
    zext_ln364_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln347_reg_420),32));
    zext_ln368_1_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_220_p3),17));
    zext_ln368_2_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_326_p3),17));
    zext_ln368_3_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_337_p3),17));
    zext_ln368_4_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln347_reg_420),17));
    zext_ln368_5_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln368_2_reg_455_pp0_iter2_reg),64));
    zext_ln368_6_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln368_3_reg_481),64));
    zext_ln368_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_209_p3),17));
end behav;
