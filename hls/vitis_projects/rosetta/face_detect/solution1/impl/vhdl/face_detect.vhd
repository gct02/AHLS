-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_detect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Data_ce0 : OUT STD_LOGIC;
    Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_x_ce0 : OUT STD_LOGIC;
    result_x_we0 : OUT STD_LOGIC;
    result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_y_ce0 : OUT STD_LOGIC;
    result_y_we0 : OUT STD_LOGIC;
    result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_w_ce0 : OUT STD_LOGIC;
    result_w_we0 : OUT STD_LOGIC;
    result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    result_h_ce0 : OUT STD_LOGIC;
    result_h_we0 : OUT STD_LOGIC;
    result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_size_ap_vld : OUT STD_LOGIC );
end;


architecture behav of face_detect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "face_detect_face_detect,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.442000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1646,HLS_SYN_DSP=0,HLS_SYN_FF=18010,HLS_SYN_LUT=17224,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (75 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (75 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (75 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (75 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (75 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (75 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (75 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (75 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (75 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (75 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (75 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_3F99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111111100110011001100110011010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_41C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110000000000000000000000";
    constant ap_const_lv32_43A00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011101000000000000000000000";
    constant ap_const_lv32_43700000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011100000000000000000000";
    constant ap_const_lv32_41C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001110010000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1400000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001010000000000000000000000";
    constant ap_const_lv32_F00000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000111100000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_3FE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFE0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (75 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal factor_2_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_2_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_3_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln92_fu_344_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln92_reg_926 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal xs_exp_3_fu_374_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_exp_3_reg_931 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln92_1_fu_384_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln92_1_reg_937 : STD_LOGIC_VECTOR (22 downto 0);
    signal xs_sign_2_reg_945 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_435_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_4_fu_453_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_4_reg_956 : STD_LOGIC_VECTOR (8 downto 0);
    signal xs_sign_3_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln15_2_fu_478_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal zext_ln18_2_fu_485_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_14_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_6_fu_527_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_6_reg_984 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_13_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_3_fu_564_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_3_fu_571_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal val_2_fu_587_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_2_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_15_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_3_fu_612_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_3_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal value_assign_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal factor_1_reg_1042 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln61_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1047 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal icmp_ln61_2_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_2_reg_1052 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1057 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_1062 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal select_ln61_fu_669_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln61_reg_1067 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal dc_reg_1072 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal trunc_ln505_fu_690_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln505_reg_1077 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal tmp_fu_704_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_722_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_reg_1087 : STD_LOGIC_VECTOR (11 downto 0);
    signal xs_sign_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln15_fu_747_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal zext_ln18_fu_754_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sdiv_ln357_reg_1109 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_622_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sdiv_ln358_reg_1114 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln357_fu_770_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln357_reg_1119 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal sub_ln357_fu_773_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln357_reg_1124 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln358_fu_779_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln358_reg_1129 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln358_fu_782_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln358_reg_1134 : STD_LOGIC_VECTOR (23 downto 0);
    signal result_18_fu_793_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_18_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal result_19_fu_805_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_19_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_ratio_fu_821_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal x_ratio_reg_1151 : STD_LOGIC_VECTOR (27 downto 0);
    signal y_ratio_fu_833_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_ratio_reg_1156 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_860_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal result_17_fu_870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_17_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal IMG1_data_ce0 : STD_LOGIC;
    signal IMG1_data_we0 : STD_LOGIC;
    signal IMG1_data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_idle : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_ready : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0 : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0 : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_ap_start : STD_LOGIC;
    signal grp_processImage_fu_213_ap_done : STD_LOGIC;
    signal grp_processImage_fu_213_ap_idle : STD_LOGIC;
    signal grp_processImage_fu_213_ap_ready : STD_LOGIC;
    signal grp_processImage_fu_213_result_x_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_x_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_x_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_x_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_result_y_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_y_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_y_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_y_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_result_w_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_w_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_w_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_w_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_result_h_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_processImage_fu_213_result_h_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_h_we0 : STD_LOGIC;
    signal grp_processImage_fu_213_result_h_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_IMG1_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_processImage_fu_213_IMG1_data_ce0 : STD_LOGIC;
    signal grp_processImage_fu_213_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_278_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_278_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_278_p_ce : STD_LOGIC;
    signal grp_processImage_fu_213_grp_fu_298_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_298_p_ce : STD_LOGIC;
    signal grp_processImage_fu_213_grp_fu_301_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_301_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_processImage_fu_213_grp_fu_301_p_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_processImage_fu_213_grp_fu_301_p_ce : STD_LOGIC;
    signal grp_processImage_fu_213_grp_fu_312_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_processImage_fu_213_grp_fu_312_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_processImage_fu_213_grp_fu_312_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_processImage_fu_213_grp_fu_312_p_ce : STD_LOGIC;
    signal grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal grp_processImage_fu_213_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal factor_fu_182 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal result_size1_fu_186 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal data_2_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_2_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln92_1_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_3_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln92_3_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_2_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln92_1_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_2_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln317_fu_425_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_2_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln18_5_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_2_fu_469_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln18_6_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln317_1_fu_501_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_1_fu_504_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_3_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln18_7_fu_523_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_489_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal grp_fu_495_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal mantissa_3_fu_555_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln18_8_fu_568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal grp_fu_581_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal grp_fu_617_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_622_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal bitcast_ln61_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_634_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln61_fu_644_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln61_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln61_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_fu_680_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_694_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_698_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_712_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln18_fu_718_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mantissa_fu_738_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln18_4_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_12_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_15_fu_800_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln357_fu_812_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal sext_ln357_fu_817_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal select_ln358_fu_828_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal grp_fu_764_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal result_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_ce : STD_LOGIC;
    signal grp_fu_298_ce : STD_LOGIC;
    signal grp_fu_301_ce : STD_LOGIC;
    signal grp_fu_301_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_312_ce : STD_LOGIC;
    signal and_ln92_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (75 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_ratio : IN STD_LOGIC_VECTOR (23 downto 0);
        result_19 : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_we0 : OUT STD_LOGIC;
        IMG1_data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        result_18 : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln357_1 : IN STD_LOGIC_VECTOR (27 downto 0);
        Data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        Data_ce0 : OUT STD_LOGIC;
        Data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component face_detect_processImage IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        factor : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_row : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_col : IN STD_LOGIC_VECTOR (31 downto 0);
        result_x_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_x_ce0 : OUT STD_LOGIC;
        result_x_we0 : OUT STD_LOGIC;
        result_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_y_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_y_ce0 : OUT STD_LOGIC;
        result_y_we0 : OUT STD_LOGIC;
        result_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_w_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_w_ce0 : OUT STD_LOGIC;
        result_w_we0 : OUT STD_LOGIC;
        result_w_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_h_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        result_h_ce0 : OUT STD_LOGIC;
        result_h_we0 : OUT STD_LOGIC;
        result_h_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        IMG1_data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        IMG1_data_ce0 : OUT STD_LOGIC;
        IMG1_data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        winSize_width_val : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_278_p_ce : OUT STD_LOGIC;
        grp_fu_298_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_298_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_298_p_ce : OUT STD_LOGIC;
        grp_fu_301_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_301_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_301_p_opcode : OUT STD_LOGIC_VECTOR (4 downto 0);
        grp_fu_301_p_dout0 : IN STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_301_p_ce : OUT STD_LOGIC;
        grp_fu_312_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_312_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_312_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_312_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_312_p_ce : OUT STD_LOGIC );
    end component;


    component face_detect_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_fdiv_32ns_32ns_32_30_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_detect_fpext_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_fcmp_32ns_32ns_1_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_detect_dadd_64ns_64ns_64_16_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_detect_lshr_79ns_32ns_79_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (78 downto 0);
        din1 : IN STD_LOGIC_VECTOR (78 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (78 downto 0) );
    end component;


    component face_detect_shl_79ns_32ns_79_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (78 downto 0);
        din1 : IN STD_LOGIC_VECTOR (78 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (78 downto 0) );
    end component;


    component face_detect_sdiv_27ns_32ns_27_31_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (26 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component face_detect_sdiv_26ns_32ns_24_30_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component face_detect_lshr_137ns_32ns_137_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (136 downto 0);
        din1 : IN STD_LOGIC_VECTOR (136 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (136 downto 0) );
    end component;


    component face_detect_shl_137ns_32ns_137_7_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (136 downto 0);
        din1 : IN STD_LOGIC_VECTOR (136 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (136 downto 0) );
    end component;


    component face_detect_IMG1_data_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    IMG1_data_U : component face_detect_IMG1_data_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 76800,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => IMG1_data_address0,
        ce0 => IMG1_data_ce0,
        we0 => IMG1_data_we0,
        d0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_d0,
        q0 => IMG1_data_q0);

    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202 : component face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start,
        ap_done => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done,
        ap_idle => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_idle,
        ap_ready => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_ready,
        y_ratio => y_ratio_reg_1156,
        result_19 => result_19_reg_1145,
        IMG1_data_address0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0,
        IMG1_data_ce0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0,
        IMG1_data_we0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0,
        IMG1_data_d0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_d0,
        result_18 => result_18_reg_1139,
        sext_ln357_1 => x_ratio_reg_1151,
        Data_address0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_address0,
        Data_ce0 => grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_ce0,
        Data_q0 => Data_q0);

    grp_processImage_fu_213 : component face_detect_processImage
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_processImage_fu_213_ap_start,
        ap_done => grp_processImage_fu_213_ap_done,
        ap_idle => grp_processImage_fu_213_ap_idle,
        ap_ready => grp_processImage_fu_213_ap_ready,
        factor => factor_2_reg_899,
        sum_row => result_19_reg_1145,
        sum_col => result_18_reg_1139,
        result_x_address0 => grp_processImage_fu_213_result_x_address0,
        result_x_ce0 => grp_processImage_fu_213_result_x_ce0,
        result_x_we0 => grp_processImage_fu_213_result_x_we0,
        result_x_d0 => grp_processImage_fu_213_result_x_d0,
        result_y_address0 => grp_processImage_fu_213_result_y_address0,
        result_y_ce0 => grp_processImage_fu_213_result_y_ce0,
        result_y_we0 => grp_processImage_fu_213_result_y_we0,
        result_y_d0 => grp_processImage_fu_213_result_y_d0,
        result_w_address0 => grp_processImage_fu_213_result_w_address0,
        result_w_ce0 => grp_processImage_fu_213_result_w_ce0,
        result_w_we0 => grp_processImage_fu_213_result_w_we0,
        result_w_d0 => grp_processImage_fu_213_result_w_d0,
        result_h_address0 => grp_processImage_fu_213_result_h_address0,
        result_h_ce0 => grp_processImage_fu_213_result_h_ce0,
        result_h_we0 => grp_processImage_fu_213_result_h_we0,
        result_h_d0 => grp_processImage_fu_213_result_h_d0,
        p_read => result_size1_fu_186,
        IMG1_data_address0 => grp_processImage_fu_213_IMG1_data_address0,
        IMG1_data_ce0 => grp_processImage_fu_213_IMG1_data_ce0,
        IMG1_data_q0 => IMG1_data_q0,
        winSize_width_val => result_17_reg_1177,
        ap_return => grp_processImage_fu_213_ap_return,
        grp_fu_278_p_din0 => grp_processImage_fu_213_grp_fu_278_p_din0,
        grp_fu_278_p_din1 => grp_processImage_fu_213_grp_fu_278_p_din1,
        grp_fu_278_p_dout0 => grp_fu_278_p2,
        grp_fu_278_p_ce => grp_processImage_fu_213_grp_fu_278_p_ce,
        grp_fu_298_p_din0 => grp_processImage_fu_213_grp_fu_298_p_din0,
        grp_fu_298_p_dout0 => grp_fu_298_p1,
        grp_fu_298_p_ce => grp_processImage_fu_213_grp_fu_298_p_ce,
        grp_fu_301_p_din0 => grp_processImage_fu_213_grp_fu_301_p_din0,
        grp_fu_301_p_din1 => grp_processImage_fu_213_grp_fu_301_p_din1,
        grp_fu_301_p_opcode => grp_processImage_fu_213_grp_fu_301_p_opcode,
        grp_fu_301_p_dout0 => grp_fu_301_p2,
        grp_fu_301_p_ce => grp_processImage_fu_213_grp_fu_301_p_ce,
        grp_fu_312_p_din0 => grp_processImage_fu_213_grp_fu_312_p_din0,
        grp_fu_312_p_din1 => grp_processImage_fu_213_grp_fu_312_p_din1,
        grp_fu_312_p_opcode => grp_processImage_fu_213_grp_fu_312_p_opcode,
        grp_fu_312_p_dout0 => grp_fu_312_p2,
        grp_fu_312_p_ce => grp_processImage_fu_213_grp_fu_312_p_ce);

    fmul_32ns_32ns_32_8_max_dsp_1_U89 : component face_detect_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => grp_fu_278_ce,
        dout => grp_fu_278_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U90 : component face_detect_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => factor_fu_182,
        din1 => ap_const_lv32_3F99999A,
        ce => ap_const_logic_1,
        dout => grp_fu_283_p2);

    fdiv_32ns_32ns_32_30_no_dsp_1_U91 : component face_detect_fdiv_32ns_32ns_32_30_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43A00000,
        din1 => factor_fu_182,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);

    fdiv_32ns_32ns_32_30_no_dsp_1_U92 : component face_detect_fdiv_32ns_32ns_32_30_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_43700000,
        din1 => factor_fu_182,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    fpext_32ns_64_4_no_dsp_1_U93 : component face_detect_fpext_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p1);

    fcmp_32ns_32ns_1_4_no_dsp_1_U94 : component face_detect_fcmp_32ns_32ns_1_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => grp_fu_301_p1,
        ce => grp_fu_301_ce,
        opcode => grp_fu_301_opcode,
        dout => grp_fu_301_p2);

    fcmp_32ns_32ns_1_4_no_dsp_1_U95 : component face_detect_fcmp_32ns_32ns_1_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dc_3_reg_910,
        din1 => ap_const_lv32_41C80000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_306_p2);

    dadd_64ns_64ns_64_16_full_dsp_1_U96 : component face_detect_dadd_64ns_64ns_64_16_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_312_p0,
        din1 => grp_fu_312_p1,
        ce => grp_fu_312_ce,
        dout => grp_fu_312_p2);

    lshr_79ns_32ns_79_2_1_U97 : component face_detect_lshr_79ns_32ns_79_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 79,
        din1_WIDTH => 32,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_2_fu_478_p1,
        din1 => zext_ln18_2_fu_485_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_489_p2);

    shl_79ns_32ns_79_2_1_U98 : component face_detect_shl_79ns_32ns_79_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 79,
        din1_WIDTH => 32,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_2_fu_478_p1,
        din1 => zext_ln18_2_fu_485_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_495_p2);

    lshr_79ns_32ns_79_2_1_U99 : component face_detect_lshr_79ns_32ns_79_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 79,
        din1_WIDTH => 32,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_3_fu_564_p1,
        din1 => zext_ln18_3_fu_571_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);

    shl_79ns_32ns_79_2_1_U100 : component face_detect_shl_79ns_32ns_79_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 79,
        din1_WIDTH => 32,
        dout_WIDTH => 79)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_3_fu_564_p1,
        din1 => zext_ln18_3_fu_571_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_581_p2);

    sdiv_27ns_32ns_27_31_1_U101 : component face_detect_sdiv_27ns_32ns_27_31_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 27,
        din1_WIDTH => 32,
        dout_WIDTH => 27)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_617_p0,
        din1 => val_2_reg_1011,
        ce => ap_const_logic_1,
        dout => grp_fu_617_p2);

    sdiv_26ns_32ns_24_30_1_U102 : component face_detect_sdiv_26ns_32ns_24_30_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 26,
        din1_WIDTH => 32,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_622_p0,
        din1 => val_3_reg_1028,
        ce => ap_const_logic_1,
        dout => grp_fu_622_p2);

    lshr_137ns_32ns_137_7_1_U103 : component face_detect_lshr_137ns_32ns_137_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 1,
        din0_WIDTH => 137,
        din1_WIDTH => 32,
        dout_WIDTH => 137)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_fu_747_p1,
        din1 => zext_ln18_fu_754_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p2);

    shl_137ns_32ns_137_7_1_U104 : component face_detect_shl_137ns_32ns_137_7_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        OP => 0,
        din0_WIDTH => 137,
        din1_WIDTH => 32,
        dout_WIDTH => 137)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln15_fu_747_p1,
        din1 => zext_ln18_fu_754_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_764_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_processImage_fu_213_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_processImage_fu_213_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_processImage_fu_213_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_processImage_fu_213_ap_ready = ap_const_logic_1)) then 
                    grp_processImage_fu_213_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    factor_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                factor_fu_182 <= ap_const_lv32_3F99999A;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                factor_fu_182 <= factor_1_reg_1042;
            end if; 
        end if;
    end process;

    result_size1_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                result_size1_fu_186 <= ap_const_lv32_0;
            elsif (((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
                result_size1_fu_186 <= grp_processImage_fu_213_ap_return;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                conv_i_reg_1062 <= grp_fu_298_p1;
                    select_ln61_reg_1067(63) <= select_ln61_fu_669_p3(63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                dc_2_reg_904 <= grp_fu_288_p2;
                dc_3_reg_910 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                dc_reg_1072 <= grp_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                factor_1_reg_1042 <= grp_fu_283_p2;
                value_assign_reg_1035 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                factor_2_reg_899 <= factor_fu_182;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then
                icmp_ln61_2_reg_1052 <= icmp_ln61_2_fu_654_p2;
                icmp_ln61_reg_1047 <= icmp_ln61_fu_648_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                result_17_reg_1177 <= result_17_fu_870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                result_18_reg_1139 <= result_18_fu_793_p3;
                result_19_reg_1145 <= result_19_fu_805_p3;
                tmp_17_reg_1161 <= grp_fu_758_p2(84 downto 53);
                tmp_18_reg_1166 <= grp_fu_764_p2(84 downto 53);
                x_ratio_reg_1151 <= x_ratio_fu_821_p2;
                y_ratio_reg_1156 <= y_ratio_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                sdiv_ln357_reg_1109 <= grp_fu_617_p2;
                sdiv_ln358_reg_1114 <= grp_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                select_ln18_4_reg_956 <= select_ln18_4_fu_453_p3;
                tmp_11_reg_951 <= add_ln317_fu_429_p2(8 downto 8);
                trunc_ln92_1_reg_937 <= trunc_ln92_1_fu_384_p1;
                trunc_ln92_reg_926 <= trunc_ln92_fu_344_p1;
                xs_exp_3_reg_931 <= data_3_fu_371_p1(30 downto 23);
                xs_sign_2_reg_945 <= data_2_fu_331_p1(31 downto 31);
                xs_sign_3_reg_961 <= data_3_fu_371_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                select_ln18_6_reg_984 <= select_ln18_6_fu_527_p3;
                tmp_14_reg_979 <= add_ln317_1_fu_504_p2(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                select_ln18_reg_1087 <= select_ln18_fu_722_p3;
                tmp_reg_1082 <= add_ln486_fu_698_p2(11 downto 11);
                trunc_ln505_reg_1077 <= trunc_ln505_fu_690_p1;
                xs_sign_reg_1092 <= data_fu_677_p1(63 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                sub_ln357_reg_1124 <= sub_ln357_fu_773_p2;
                sub_ln358_reg_1134 <= sub_ln358_fu_782_p2;
                trunc_ln357_reg_1119 <= trunc_ln357_fu_770_p1;
                trunc_ln358_reg_1129 <= trunc_ln358_fu_779_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_13_reg_994 <= grp_fu_495_p2(55 downto 24);
                tmp_s_reg_989 <= grp_fu_489_p2(55 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                tmp_15_reg_1018 <= grp_fu_575_p2(55 downto 24);
                tmp_16_reg_1023 <= grp_fu_581_p2(55 downto 24);
                val_2_reg_1011 <= val_2_fu_587_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                tmp_2_reg_1057 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_6_reg_916 <= grp_fu_301_p2;
                tmp_8_reg_921 <= grp_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                val_3_reg_1028 <= val_3_fu_612_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                val_reg_1171 <= val_fu_860_p3;
            end if;
        end if;
    end process;
    select_ln61_reg_1067(62 downto 0) <= "011111111100000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state36, ap_CS_fsm_state73, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done, grp_processImage_fu_213_ap_done, ap_CS_fsm_state76, and_ln92_fu_411_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_lv1_0 = and_ln92_fu_411_p2) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Data_address0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_address0;
    Data_ce0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_Data_ce0;

    IMG1_data_address0_assign_proc : process(ap_CS_fsm_state73, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0, grp_processImage_fu_213_IMG1_data_address0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            IMG1_data_address0 <= grp_processImage_fu_213_IMG1_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            IMG1_data_address0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_address0;
        else 
            IMG1_data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    IMG1_data_ce0_assign_proc : process(ap_CS_fsm_state73, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0, grp_processImage_fu_213_IMG1_data_ce0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            IMG1_data_ce0 <= grp_processImage_fu_213_IMG1_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            IMG1_data_ce0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_ce0;
        else 
            IMG1_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    IMG1_data_we0_assign_proc : process(ap_CS_fsm_state73, grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            IMG1_data_we0 <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_IMG1_data_we0;
        else 
            IMG1_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln317_1_fu_504_p2 <= std_logic_vector(unsigned(zext_ln317_1_fu_501_p1) + unsigned(ap_const_lv9_181));
    add_ln317_fu_429_p2 <= std_logic_vector(unsigned(zext_ln317_fu_425_p1) + unsigned(ap_const_lv9_181));
    add_ln486_fu_698_p2 <= std_logic_vector(unsigned(zext_ln486_fu_694_p1) + unsigned(ap_const_lv12_C01));
    and_ln61_fu_664_p2 <= (tmp_2_reg_1057 and or_ln61_fu_660_p2);
    and_ln92_1_fu_366_p2 <= (tmp_6_reg_916 and or_ln92_fu_360_p2);
    and_ln92_2_fu_406_p2 <= (tmp_8_reg_921 and or_ln92_1_fu_400_p2);
    and_ln92_fu_411_p2 <= (and_ln92_2_fu_406_p2 and and_ln92_1_fu_366_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done)
    begin
        if ((grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(grp_processImage_fu_213_ap_done)
    begin
        if ((grp_processImage_fu_213_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state36, and_ln92_fu_411_p2)
    begin
        if (((ap_const_lv1_0 = and_ln92_fu_411_p2) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state36, and_ln92_fu_411_p2)
    begin
        if (((ap_const_lv1_0 = and_ln92_fu_411_p2) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln61_fu_631_p1 <= value_assign_reg_1035;
    data_2_fu_331_p1 <= dc_2_reg_904;
    data_3_fu_371_p1 <= dc_3_reg_910;
    data_fu_677_p1 <= dc_reg_1072;
    grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start <= grp_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1_fu_202_ap_start_reg;

    grp_fu_278_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_278_p_ce, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_278_ce <= grp_processImage_fu_213_grp_fu_278_p_ce;
        else 
            grp_fu_278_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_278_p0_assign_proc : process(ap_CS_fsm_state36, grp_processImage_fu_213_grp_fu_278_p_din0, ap_CS_fsm_state76, factor_fu_182)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_278_p0 <= grp_processImage_fu_213_grp_fu_278_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_278_p0 <= factor_fu_182;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(ap_CS_fsm_state36, grp_processImage_fu_213_grp_fu_278_p_din1, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_278_p1 <= grp_processImage_fu_213_grp_fu_278_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_278_p1 <= ap_const_lv32_41C00000;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_298_p_ce, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_298_ce <= grp_processImage_fu_213_grp_fu_298_p_ce;
        else 
            grp_fu_298_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_298_p0_assign_proc : process(value_assign_reg_1035, ap_CS_fsm_state45, grp_processImage_fu_213_grp_fu_298_p_din0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_298_p0 <= grp_processImage_fu_213_grp_fu_298_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_298_p0 <= value_assign_reg_1035;
        else 
            grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_301_p_ce, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_301_ce <= grp_processImage_fu_213_grp_fu_301_p_ce;
        else 
            grp_fu_301_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_301_opcode_assign_proc : process(grp_processImage_fu_213_grp_fu_301_p_opcode, ap_CS_fsm_state76, ap_CS_fsm_state44, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_301_opcode <= grp_processImage_fu_213_grp_fu_301_p_opcode;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_301_opcode <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_301_opcode <= ap_const_lv5_2;
        else 
            grp_fu_301_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_301_p0_assign_proc : process(dc_2_reg_904, value_assign_reg_1035, grp_processImage_fu_213_grp_fu_301_p_din0, ap_CS_fsm_state76, ap_CS_fsm_state44, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_301_p0 <= grp_processImage_fu_213_grp_fu_301_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_301_p0 <= value_assign_reg_1035;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_301_p0 <= dc_2_reg_904;
        else 
            grp_fu_301_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_p1_assign_proc : process(grp_processImage_fu_213_grp_fu_301_p_din1, ap_CS_fsm_state76, ap_CS_fsm_state44, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_301_p1 <= grp_processImage_fu_213_grp_fu_301_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_301_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fu_301_p1 <= ap_const_lv32_41C80000;
        else 
            grp_fu_301_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_312_ce_assign_proc : process(grp_processImage_fu_213_grp_fu_312_p_ce, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_312_ce <= grp_processImage_fu_213_grp_fu_312_p_ce;
        else 
            grp_fu_312_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_312_p0_assign_proc : process(conv_i_reg_1062, grp_processImage_fu_213_grp_fu_312_p_din0, ap_CS_fsm_state76, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_312_p0 <= grp_processImage_fu_213_grp_fu_312_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_312_p0 <= conv_i_reg_1062;
        else 
            grp_fu_312_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_312_p1_assign_proc : process(select_ln61_reg_1067, grp_processImage_fu_213_grp_fu_312_p_din1, ap_CS_fsm_state76, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            grp_fu_312_p1 <= grp_processImage_fu_213_grp_fu_312_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_312_p1 <= select_ln61_reg_1067;
        else 
            grp_fu_312_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_617_p0 <= ap_const_lv32_1400000(27 - 1 downto 0);
    grp_fu_622_p0 <= ap_const_lv32_F00000(26 - 1 downto 0);
    grp_processImage_fu_213_ap_start <= grp_processImage_fu_213_ap_start_reg;
    icmp_ln61_2_fu_654_p2 <= "1" when (trunc_ln61_fu_644_p1 = ap_const_lv23_0) else "0";
    icmp_ln61_fu_648_p2 <= "0" when (tmp_9_fu_634_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_1_fu_354_p2 <= "1" when (trunc_ln92_fu_344_p1 = ap_const_lv23_0) else "0";
    icmp_ln92_2_fu_388_p2 <= "0" when (xs_exp_3_fu_374_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_3_fu_394_p2 <= "1" when (trunc_ln92_1_fu_384_p1 = ap_const_lv23_0) else "0";
    icmp_ln92_fu_348_p2 <= "0" when (xs_exp_2_fu_334_p4 = ap_const_lv8_FF) else "1";
    mantissa_2_fu_469_p4 <= ((ap_const_lv1_1 & trunc_ln92_reg_926) & ap_const_lv1_0);
    mantissa_3_fu_555_p4 <= ((ap_const_lv1_1 & trunc_ln92_1_reg_937) & ap_const_lv1_0);
    mantissa_fu_738_p4 <= ((ap_const_lv1_1 & trunc_ln505_reg_1077) & ap_const_lv1_0);
    or_ln61_fu_660_p2 <= (icmp_ln61_reg_1047 or icmp_ln61_2_reg_1052);
    or_ln92_1_fu_400_p2 <= (icmp_ln92_3_fu_394_p2 or icmp_ln92_2_fu_388_p2);
    or_ln92_fu_360_p2 <= (icmp_ln92_fu_348_p2 or icmp_ln92_1_fu_354_p2);
    result_12_fu_788_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_2_reg_1011));
    result_15_fu_800_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_3_reg_1028));
    result_17_fu_870_p3 <= 
        result_fu_865_p2 when (xs_sign_reg_1092(0) = '1') else 
        val_reg_1171;
    result_18_fu_793_p3 <= 
        result_12_fu_788_p2 when (xs_sign_2_reg_945(0) = '1') else 
        val_2_reg_1011;
    result_19_fu_805_p3 <= 
        result_15_fu_800_p2 when (xs_sign_3_reg_961(0) = '1') else 
        val_3_reg_1028;
    result_fu_865_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_reg_1171));
    result_h_address0 <= grp_processImage_fu_213_result_h_address0;
    result_h_ce0 <= grp_processImage_fu_213_result_h_ce0;
    result_h_d0 <= grp_processImage_fu_213_result_h_d0;
    result_h_we0 <= grp_processImage_fu_213_result_h_we0;

    result_size_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_processImage_fu_213_ap_done, grp_processImage_fu_213_ap_return, ap_CS_fsm_state76)
    begin
        if (((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then 
            result_size <= grp_processImage_fu_213_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            result_size <= ap_const_lv32_0;
        else 
            result_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_size_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_processImage_fu_213_ap_done, ap_CS_fsm_state76)
    begin
        if ((((grp_processImage_fu_213_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            result_size_ap_vld <= ap_const_logic_1;
        else 
            result_size_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    result_w_address0 <= grp_processImage_fu_213_result_w_address0;
    result_w_ce0 <= grp_processImage_fu_213_result_w_ce0;
    result_w_d0 <= grp_processImage_fu_213_result_w_d0;
    result_w_we0 <= grp_processImage_fu_213_result_w_we0;
    result_x_address0 <= grp_processImage_fu_213_result_x_address0;
    result_x_ce0 <= grp_processImage_fu_213_result_x_ce0;
    result_x_d0 <= grp_processImage_fu_213_result_x_d0;
    result_x_we0 <= grp_processImage_fu_213_result_x_we0;
    result_y_address0 <= grp_processImage_fu_213_result_y_address0;
    result_y_ce0 <= grp_processImage_fu_213_result_y_ce0;
    result_y_d0 <= grp_processImage_fu_213_result_y_d0;
    result_y_we0 <= grp_processImage_fu_213_result_y_we0;
    select_ln18_4_fu_453_p3 <= 
        sext_ln18_5_fu_449_p1 when (tmp_11_fu_435_p3(0) = '1') else 
        add_ln317_fu_429_p2;
    select_ln18_6_fu_527_p3 <= 
        sext_ln18_7_fu_523_p1 when (tmp_14_fu_510_p3(0) = '1') else 
        add_ln317_1_fu_504_p2;
    select_ln18_fu_722_p3 <= 
        sext_ln18_fu_718_p1 when (tmp_fu_704_p3(0) = '1') else 
        add_ln486_fu_698_p2;
    select_ln357_fu_812_p3 <= 
        sub_ln357_reg_1124 when (xs_sign_2_reg_945(0) = '1') else 
        trunc_ln357_reg_1119;
    select_ln358_fu_828_p3 <= 
        sub_ln358_reg_1134 when (xs_sign_3_reg_961(0) = '1') else 
        trunc_ln358_reg_1129;
    select_ln61_fu_669_p3 <= 
        ap_const_lv64_3FE0000000000000 when (and_ln61_fu_664_p2(0) = '1') else 
        ap_const_lv64_BFE0000000000000;
        sext_ln18_4_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_reg_1087),32));

        sext_ln18_5_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_2_fu_443_p2),9));

        sext_ln18_6_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_4_reg_956),32));

        sext_ln18_7_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_3_fu_518_p2),9));

        sext_ln18_8_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_6_reg_984),32));

        sext_ln18_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_712_p2),12));

        sext_ln357_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln357_fu_812_p3),28));

    sub_ln18_2_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_2_fu_334_p4));
    sub_ln18_3_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_3_reg_931));
    sub_ln18_fu_712_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_680_p4));
    sub_ln357_fu_773_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(trunc_ln357_fu_770_p1));
    sub_ln358_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(trunc_ln358_fu_779_p1));
    tmp_11_fu_435_p3 <= add_ln317_fu_429_p2(8 downto 8);
    tmp_14_fu_510_p3 <= add_ln317_1_fu_504_p2(8 downto 8);
    tmp_9_fu_634_p4 <= bitcast_ln61_fu_631_p1(30 downto 23);
    tmp_fu_704_p3 <= add_ln486_fu_698_p2(11 downto 11);
    trunc_ln357_fu_770_p1 <= sdiv_ln357_reg_1109(27 - 1 downto 0);
    trunc_ln358_fu_779_p1 <= sdiv_ln358_reg_1114(24 - 1 downto 0);
    trunc_ln505_fu_690_p1 <= data_fu_677_p1(52 - 1 downto 0);
    trunc_ln61_fu_644_p1 <= bitcast_ln61_fu_631_p1(23 - 1 downto 0);
    trunc_ln92_1_fu_384_p1 <= data_3_fu_371_p1(23 - 1 downto 0);
    trunc_ln92_fu_344_p1 <= data_2_fu_331_p1(23 - 1 downto 0);
    val_2_fu_587_p3 <= 
        tmp_s_reg_989 when (tmp_11_reg_951(0) = '1') else 
        tmp_13_reg_994;
    val_3_fu_612_p3 <= 
        tmp_15_reg_1018 when (tmp_14_reg_979(0) = '1') else 
        tmp_16_reg_1023;
    val_fu_860_p3 <= 
        tmp_17_reg_1161 when (tmp_reg_1082(0) = '1') else 
        tmp_18_reg_1166;
    x_ratio_fu_821_p2 <= std_logic_vector(signed(sext_ln357_fu_817_p1) + signed(ap_const_lv28_1));
    xs_exp_2_fu_334_p4 <= data_2_fu_331_p1(30 downto 23);
    xs_exp_3_fu_374_p4 <= data_3_fu_371_p1(30 downto 23);
    xs_exp_fu_680_p4 <= data_fu_677_p1(62 downto 52);
    y_ratio_fu_833_p2 <= std_logic_vector(unsigned(select_ln358_fu_828_p3) + unsigned(ap_const_lv24_1));
    zext_ln15_2_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_2_fu_469_p4),79));
    zext_ln15_3_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_3_fu_555_p4),79));
    zext_ln15_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_738_p4),137));
    zext_ln18_2_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_6_fu_482_p1),79));
    zext_ln18_3_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_8_fu_568_p1),79));
    zext_ln18_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_4_fu_751_p1),137));
    zext_ln317_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_3_reg_931),9));
    zext_ln317_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_2_fu_334_p4),9));
    zext_ln486_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_680_p4),12));
end behav;
