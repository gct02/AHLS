// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_ratio,
        result_19,
        IMG1_data_address0,
        IMG1_data_ce0,
        IMG1_data_we0,
        IMG1_data_d0,
        result_18,
        sext_ln357_1,
        Data_address0,
        Data_ce0,
        Data_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] y_ratio;
input  [31:0] result_19;
output  [16:0] IMG1_data_address0;
output   IMG1_data_ce0;
output   IMG1_data_we0;
output  [7:0] IMG1_data_d0;
input  [31:0] result_18;
input  [27:0] sext_ln357_1;
output  [16:0] Data_address0;
output   Data_ce0;
input  [7:0] Data_q0;

reg ap_idle;
reg IMG1_data_ce0;
reg IMG1_data_we0;
reg Data_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln361_fu_163_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln357_1_cast_fu_141_p1;
reg  signed [31:0] sext_ln357_1_cast_reg_406;
reg   [0:0] icmp_ln361_reg_411;
wire    ap_block_pp0_stage1_11001;
wire   [16:0] add_ln361_1_fu_169_p2;
reg   [16:0] add_ln361_1_reg_415;
wire   [8:0] select_ln347_fu_193_p3;
reg   [8:0] select_ln347_reg_420;
wire   [7:0] select_ln361_fu_201_p3;
reg   [7:0] select_ln361_reg_427;
wire   [16:0] add_ln368_fu_231_p2;
reg   [16:0] add_ln368_reg_436;
wire   [31:0] zext_ln364_fu_259_p1;
wire   [0:0] or_ln366_fu_274_p2;
reg   [0:0] or_ln366_reg_451;
reg   [0:0] or_ln366_reg_451_pp0_iter2_reg;
reg   [0:0] or_ln366_reg_451_pp0_iter3_reg;
reg   [0:0] or_ln366_reg_451_pp0_iter4_reg;
reg   [0:0] or_ln366_reg_451_pp0_iter5_reg;
wire   [16:0] add_ln368_2_fu_301_p2;
reg   [16:0] add_ln368_2_reg_455;
reg   [16:0] add_ln368_2_reg_455_pp0_iter2_reg;
reg   [15:0] trunc_ln7_reg_460;
reg   [15:0] trunc_ln7_reg_460_pp0_iter3_reg;
reg   [7:0] tmp_10_reg_465;
wire   [16:0] add_ln368_1_fu_348_p2;
reg   [16:0] add_ln368_1_reg_471;
reg   [16:0] IMG1_data_addr_reg_476;
reg   [16:0] IMG1_data_addr_reg_476_pp0_iter4_reg;
wire   [16:0] add_ln368_3_fu_361_p2;
reg   [16:0] add_ln368_3_reg_481;
reg   [7:0] Data_load_reg_491;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln368_5_fu_354_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln368_6_fu_366_p1;
reg   [8:0] j_fu_76;
wire   [8:0] add_ln364_fu_280_p2;
wire    ap_loop_init;
reg   [7:0] i_fu_80;
reg   [16:0] indvar_flatten_fu_84;
wire    ap_block_pp0_stage0;
wire   [8:0] grp_fu_137_p0;
wire  signed [27:0] grp_fu_137_p1;
wire   [0:0] icmp_ln364_fu_187_p2;
wire   [7:0] add_ln361_fu_181_p2;
wire   [15:0] tmp_s_fu_209_p3;
wire   [13:0] tmp_9_fu_220_p3;
wire   [16:0] zext_ln368_fu_216_p1;
wire   [16:0] zext_ln368_1_fu_227_p1;
wire   [7:0] grp_fu_243_p0;
wire   [31:0] zext_ln361_fu_237_p1;
wire   [0:0] slt_fu_248_p2;
wire   [0:0] icmp_ln366_fu_263_p2;
wire   [0:0] xor_ln366_fu_268_p2;
wire   [0:0] rev_fu_253_p2;
wire   [16:0] zext_ln368_4_fu_298_p1;
wire   [31:0] grp_fu_137_p2;
wire   [23:0] grp_fu_243_p2;
wire   [15:0] tmp_11_fu_326_p3;
wire   [13:0] tmp_12_fu_337_p3;
wire   [16:0] zext_ln368_2_fu_333_p1;
wire   [16:0] zext_ln368_3_fu_344_p1;
wire  signed [16:0] sext_ln368_fu_358_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] grp_fu_243_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 j_fu_76 = 9'd0;
#0 i_fu_80 = 8'd0;
#0 indvar_flatten_fu_84 = 17'd0;
#0 ap_done_reg = 1'b0;
end

face_detect_mul_9ns_28s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_9ns_28s_32_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .din1(grp_fu_137_p1),
    .ce(1'b1),
    .dout(grp_fu_137_p2)
);

face_detect_mul_8ns_24s_24_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mul_8ns_24s_24_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_243_p0),
    .din1(y_ratio),
    .ce(1'b1),
    .dout(grp_fu_243_p2)
);

face_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_80 <= 8'd0;
        end else if (((icmp_ln361_reg_411 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_80 <= select_ln361_reg_427;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 17'd0;
        end else if (((icmp_ln361_reg_411 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_84 <= add_ln361_1_reg_415;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_76 <= 9'd0;
        end else if (((icmp_ln361_reg_411 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_76 <= add_ln364_fu_280_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Data_load_reg_491 <= Data_q0;
        add_ln368_3_reg_481 <= add_ln368_3_fu_361_p2;
        add_ln368_reg_436[16 : 6] <= add_ln368_fu_231_p2[16 : 6];
        or_ln366_reg_451 <= or_ln366_fu_274_p2;
        or_ln366_reg_451_pp0_iter2_reg <= or_ln366_reg_451;
        or_ln366_reg_451_pp0_iter3_reg <= or_ln366_reg_451_pp0_iter2_reg;
        or_ln366_reg_451_pp0_iter4_reg <= or_ln366_reg_451_pp0_iter3_reg;
        or_ln366_reg_451_pp0_iter5_reg <= or_ln366_reg_451_pp0_iter4_reg;
        sext_ln357_1_cast_reg_406 <= sext_ln357_1_cast_fu_141_p1;
        tmp_10_reg_465 <= {{grp_fu_243_p2[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IMG1_data_addr_reg_476 <= zext_ln368_5_fu_354_p1;
        IMG1_data_addr_reg_476_pp0_iter4_reg <= IMG1_data_addr_reg_476;
        add_ln361_1_reg_415 <= add_ln361_1_fu_169_p2;
        add_ln368_1_reg_471[16 : 6] <= add_ln368_1_fu_348_p2[16 : 6];
        add_ln368_2_reg_455 <= add_ln368_2_fu_301_p2;
        add_ln368_2_reg_455_pp0_iter2_reg <= add_ln368_2_reg_455;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        icmp_ln361_reg_411 <= icmp_ln361_fu_163_p2;
        select_ln347_reg_420 <= select_ln347_fu_193_p3;
        select_ln361_reg_427 <= select_ln361_fu_201_p3;
        trunc_ln7_reg_460 <= {{grp_fu_137_p2[31:16]}};
        trunc_ln7_reg_460_pp0_iter3_reg <= trunc_ln7_reg_460;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        IMG1_data_ce0 = 1'b1;
    end else begin
        IMG1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln366_reg_451_pp0_iter5_reg == 1'd0))) begin
        IMG1_data_we0 = 1'b1;
    end else begin
        IMG1_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln361_fu_163_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_address0 = zext_ln368_6_fu_366_p1;

assign IMG1_data_address0 = IMG1_data_addr_reg_476_pp0_iter4_reg;

assign IMG1_data_d0 = Data_load_reg_491;

assign add_ln361_1_fu_169_p2 = (indvar_flatten_fu_84 + 17'd1);

assign add_ln361_fu_181_p2 = (i_fu_80 + 8'd1);

assign add_ln364_fu_280_p2 = (select_ln347_reg_420 + 9'd1);

assign add_ln368_1_fu_348_p2 = (zext_ln368_2_fu_333_p1 + zext_ln368_3_fu_344_p1);

assign add_ln368_2_fu_301_p2 = (add_ln368_reg_436 + zext_ln368_4_fu_298_p1);

assign add_ln368_3_fu_361_p2 = ($signed(add_ln368_1_reg_471) + $signed(sext_ln368_fu_358_p1));

assign add_ln368_fu_231_p2 = (zext_ln368_fu_216_p1 + zext_ln368_1_fu_227_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_137_p0 = zext_ln364_fu_259_p1;

assign grp_fu_137_p1 = sext_ln357_1_cast_reg_406;

assign grp_fu_243_p0 = grp_fu_243_p00;

assign grp_fu_243_p00 = select_ln361_reg_427;

assign icmp_ln361_fu_163_p2 = ((indvar_flatten_fu_84 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp_ln364_fu_187_p2 = ((j_fu_76 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln366_fu_263_p2 = (($signed(zext_ln364_fu_259_p1) < $signed(result_18)) ? 1'b1 : 1'b0);

assign or_ln366_fu_274_p2 = (xor_ln366_fu_268_p2 | rev_fu_253_p2);

assign rev_fu_253_p2 = (slt_fu_248_p2 ^ 1'd1);

assign select_ln347_fu_193_p3 = ((icmp_ln364_fu_187_p2[0:0] == 1'b1) ? 9'd0 : j_fu_76);

assign select_ln361_fu_201_p3 = ((icmp_ln364_fu_187_p2[0:0] == 1'b1) ? add_ln361_fu_181_p2 : i_fu_80);

assign sext_ln357_1_cast_fu_141_p1 = $signed(sext_ln357_1);

assign sext_ln368_fu_358_p1 = $signed(trunc_ln7_reg_460_pp0_iter3_reg);

assign slt_fu_248_p2 = (($signed(zext_ln361_fu_237_p1) < $signed(result_19)) ? 1'b1 : 1'b0);

assign tmp_11_fu_326_p3 = {{tmp_10_reg_465}, {8'd0}};

assign tmp_12_fu_337_p3 = {{tmp_10_reg_465}, {6'd0}};

assign tmp_9_fu_220_p3 = {{select_ln361_reg_427}, {6'd0}};

assign tmp_s_fu_209_p3 = {{select_ln361_reg_427}, {8'd0}};

assign xor_ln366_fu_268_p2 = (icmp_ln366_fu_263_p2 ^ 1'd1);

assign zext_ln361_fu_237_p1 = select_ln361_reg_427;

assign zext_ln364_fu_259_p1 = select_ln347_reg_420;

assign zext_ln368_1_fu_227_p1 = tmp_9_fu_220_p3;

assign zext_ln368_2_fu_333_p1 = tmp_11_fu_326_p3;

assign zext_ln368_3_fu_344_p1 = tmp_12_fu_337_p3;

assign zext_ln368_4_fu_298_p1 = select_ln347_reg_420;

assign zext_ln368_5_fu_354_p1 = add_ln368_2_reg_455_pp0_iter2_reg;

assign zext_ln368_6_fu_366_p1 = add_ln368_3_reg_481;

assign zext_ln368_fu_216_p1 = tmp_s_fu_209_p3;

always @ (posedge ap_clk) begin
    add_ln368_reg_436[5:0] <= 6'b000000;
    add_ln368_1_reg_471[5:0] <= 6'b000000;
end

endmodule //face_detect_face_detect_Pipeline_nearestNeighborL1_nearestNeighborL1_1
