// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module rendering_rendering_Pipeline_ZCULLING (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size_fragment,
        fragment_z_address0,
        fragment_z_ce0,
        fragment_z_q0,
        fragment_y_address0,
        fragment_y_ce0,
        fragment_y_q0,
        fragment_x_address0,
        fragment_x_ce0,
        fragment_x_q0,
        pixels_x_address0,
        pixels_x_ce0,
        pixels_x_we0,
        pixels_x_d0,
        pixels_y_address0,
        pixels_y_ce0,
        pixels_y_we0,
        pixels_y_d0,
        fragment_color_address0,
        fragment_color_ce0,
        fragment_color_q0,
        pixels_color_address0,
        pixels_color_ce0,
        pixels_color_we0,
        pixels_color_d0,
        pixel_cntr_out,
        pixel_cntr_out_ap_vld,
        z_buffer_address0,
        z_buffer_ce0,
        z_buffer_we0,
        z_buffer_d0,
        z_buffer_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size_fragment;
output  [8:0] fragment_z_address0;
output   fragment_z_ce0;
input  [7:0] fragment_z_q0;
output  [8:0] fragment_y_address0;
output   fragment_y_ce0;
input  [7:0] fragment_y_q0;
output  [8:0] fragment_x_address0;
output   fragment_x_ce0;
input  [7:0] fragment_x_q0;
output  [8:0] pixels_x_address0;
output   pixels_x_ce0;
output   pixels_x_we0;
output  [7:0] pixels_x_d0;
output  [8:0] pixels_y_address0;
output   pixels_y_ce0;
output   pixels_y_we0;
output  [7:0] pixels_y_d0;
output  [8:0] fragment_color_address0;
output   fragment_color_ce0;
input  [5:0] fragment_color_q0;
output  [8:0] pixels_color_address0;
output   pixels_color_ce0;
output   pixels_color_we0;
output  [5:0] pixels_color_d0;
output  [31:0] pixel_cntr_out;
output   pixel_cntr_out_ap_vld;
output  [15:0] z_buffer_address0;
output   z_buffer_ce0;
output   z_buffer_we0;
output  [7:0] z_buffer_d0;
input  [7:0] z_buffer_q0;

reg ap_idle;
reg fragment_z_ce0;
reg fragment_y_ce0;
reg fragment_x_ce0;
reg pixels_x_ce0;
reg pixels_x_we0;
reg pixels_y_ce0;
reg pixels_y_we0;
reg fragment_color_ce0;
reg pixels_color_ce0;
reg pixels_color_we0;
reg pixel_cntr_out_ap_vld;
reg[15:0] z_buffer_address0;
reg z_buffer_ce0;
reg z_buffer_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln212_reg_264;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln212_fu_188_p2;
wire   [30:0] add_ln212_fu_194_p2;
reg   [30:0] add_ln212_reg_268;
wire   [63:0] zext_ln212_fu_200_p1;
reg   [63:0] zext_ln212_reg_273;
reg   [7:0] fragment_z_load_reg_293;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] fragment_y_load_reg_299;
reg   [7:0] fragment_x_load_reg_305;
reg   [15:0] z_buffer_addr_reg_311;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] z_buffer_load_reg_316;
wire    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln214_fu_222_p2;
reg   [0:0] icmp_ln214_reg_321;
wire   [63:0] zext_ln216_fu_229_p1;
reg   [63:0] zext_ln216_reg_330;
reg   [5:0] fragment_color_load_reg_335;
wire   [31:0] pixel_cntr_1_fu_235_p2;
reg   [31:0] pixel_cntr_1_reg_340;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln214_fu_217_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage1;
reg   [30:0] n_fu_46;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_n_1;
reg   [31:0] pixel_cntr_fu_50;
wire    ap_block_pp0_stage2_01001;
wire   [31:0] zext_ln212_1_fu_184_p1;
wire   [15:0] tmp_1_fu_211_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 n_fu_46 = 31'd0;
#0 pixel_cntr_fu_50 = 32'd0;
#0 ap_done_reg = 1'b0;
end

rendering_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_fu_46 <= 31'd0;
    end else if (((icmp_ln212_reg_264 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        n_fu_46 <= add_ln212_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixel_cntr_fu_50 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln214_reg_321 == 1'd1))) begin
        pixel_cntr_fu_50 <= pixel_cntr_1_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln212_reg_268 <= add_ln212_fu_194_p2;
        icmp_ln212_reg_264 <= icmp_ln212_fu_188_p2;
        icmp_ln214_reg_321 <= icmp_ln214_fu_222_p2;
        zext_ln212_reg_273[30 : 0] <= zext_ln212_fu_200_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fragment_color_load_reg_335 <= fragment_color_q0;
        fragment_x_load_reg_305 <= fragment_x_q0;
        fragment_y_load_reg_299 <= fragment_y_q0;
        fragment_z_load_reg_293 <= fragment_z_q0;
        pixel_cntr_1_reg_340 <= pixel_cntr_1_fu_235_p2;
        zext_ln216_reg_330[31 : 0] <= zext_ln216_fu_229_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        z_buffer_addr_reg_311 <= zext_ln214_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        z_buffer_load_reg_316 <= z_buffer_q0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_46;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragment_color_ce0 = 1'b1;
    end else begin
        fragment_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragment_x_ce0 = 1'b1;
    end else begin
        fragment_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragment_y_ce0 = 1'b1;
    end else begin
        fragment_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragment_z_ce0 = 1'b1;
    end else begin
        fragment_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln212_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pixel_cntr_out_ap_vld = 1'b1;
    end else begin
        pixel_cntr_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        pixels_color_ce0 = 1'b1;
    end else begin
        pixels_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln214_reg_321 == 1'd1))) begin
        pixels_color_we0 = 1'b1;
    end else begin
        pixels_color_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixels_x_ce0 = 1'b1;
    end else begin
        pixels_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln214_reg_321 == 1'd1))) begin
        pixels_x_we0 = 1'b1;
    end else begin
        pixels_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixels_y_ce0 = 1'b1;
    end else begin
        pixels_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln214_reg_321 == 1'd1))) begin
        pixels_y_we0 = 1'b1;
    end else begin
        pixels_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_buffer_address0 = z_buffer_addr_reg_311;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        z_buffer_address0 = zext_ln214_fu_217_p1;
    end else begin
        z_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        z_buffer_ce0 = 1'b1;
    end else begin
        z_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln214_reg_321 == 1'd1))) begin
        z_buffer_we0 = 1'b1;
    end else begin
        z_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln212_fu_194_p2 = (ap_sig_allocacmp_n_1 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign fragment_color_address0 = zext_ln212_reg_273;

assign fragment_x_address0 = zext_ln212_fu_200_p1;

assign fragment_y_address0 = zext_ln212_fu_200_p1;

assign fragment_z_address0 = zext_ln212_fu_200_p1;

assign icmp_ln212_fu_188_p2 = (($signed(zext_ln212_1_fu_184_p1) < $signed(size_fragment)) ? 1'b1 : 1'b0);

assign icmp_ln214_fu_222_p2 = ((fragment_z_load_reg_293 < z_buffer_load_reg_316) ? 1'b1 : 1'b0);

assign pixel_cntr_1_fu_235_p2 = (pixel_cntr_fu_50 + 32'd1);

assign pixel_cntr_out = pixel_cntr_fu_50;

assign pixels_color_address0 = zext_ln216_reg_330;

assign pixels_color_d0 = fragment_color_load_reg_335;

assign pixels_x_address0 = zext_ln216_fu_229_p1;

assign pixels_x_d0 = fragment_x_load_reg_305;

assign pixels_y_address0 = zext_ln216_fu_229_p1;

assign pixels_y_d0 = fragment_y_load_reg_299;

assign tmp_1_fu_211_p3 = {{fragment_y_load_reg_299}, {fragment_x_load_reg_305}};

assign z_buffer_d0 = fragment_z_load_reg_293;

assign zext_ln212_1_fu_184_p1 = ap_sig_allocacmp_n_1;

assign zext_ln212_fu_200_p1 = ap_sig_allocacmp_n_1;

assign zext_ln214_fu_217_p1 = tmp_1_fu_211_p3;

assign zext_ln216_fu_229_p1 = pixel_cntr_fu_50;

always @ (posedge ap_clk) begin
    zext_ln212_reg_273[63:31] <= 33'b000000000000000000000000000000000;
    zext_ln216_reg_330[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //rendering_rendering_Pipeline_ZCULLING
