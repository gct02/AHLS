-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rendering_rendering_Pipeline_RAST2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_index_0 : IN STD_LOGIC_VECTOR (30 downto 0);
    fragment_x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment_x_ce0 : OUT STD_LOGIC;
    fragment_x_we0 : OUT STD_LOGIC;
    fragment_x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment_y_ce0 : OUT STD_LOGIC;
    fragment_y_we0 : OUT STD_LOGIC;
    fragment_y_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment_z_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment_z_ce0 : OUT STD_LOGIC;
    fragment_z_we0 : OUT STD_LOGIC;
    fragment_z_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    triangle_2ds_z : IN STD_LOGIC_VECTOR (7 downto 0);
    fragment_color_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment_color_ce0 : OUT STD_LOGIC;
    fragment_color_we0 : OUT STD_LOGIC;
    fragment_color_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    zext_ln174 : IN STD_LOGIC_VECTOR (7 downto 0);
    max_min_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    max_min_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    zext_ln22_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln22_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln22_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln23_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln23_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    sub22_i_i_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln22_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    sub31_i_i_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln22 : IN STD_LOGIC_VECTOR (7 downto 0);
    sub42_i_i_cast : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln23 : IN STD_LOGIC_VECTOR (7 downto 0);
    sext_ln146 : IN STD_LOGIC_VECTOR (8 downto 0);
    i_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    i_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of rendering_rendering_Pipeline_RAST2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln174_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln146_cast_fu_254_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln146_cast_reg_527 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln23_cast_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_cast_reg_532 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub42_i_i_cast_cast_fu_262_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub42_i_i_cast_cast_reg_537 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln22_cast_fu_266_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_cast_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub31_i_i_cast_cast_fu_270_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub31_i_i_cast_cast_reg_547 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln22_2_cast_fu_274_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_2_cast_reg_552 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub22_i_i_cast_cast_fu_278_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub22_i_i_cast_cast_reg_557 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln23_1_cast_fu_282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_1_cast_reg_562 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln23_1_cast_fu_286_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln23_1_cast_reg_567 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln22_3_cast_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_3_cast_reg_572 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln22_1_cast_fu_294_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln22_1_cast_reg_577 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln22_1_cast_fu_298_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln22_1_cast_reg_582 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln174_cast_fu_302_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln174_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln174_reg_599_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_325_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_2_reg_603 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rem_urem_i_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal div_udiv_i_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_350_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618_pp0_iter36_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618_pp0_iter37_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618_pp0_iter38_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618_pp0_iter39_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618_pp0_iter40_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_618_pp0_iter41_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624_pp0_iter36_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624_pp0_iter37_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624_pp0_iter38_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624_pp0_iter39_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624_pp0_iter40_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_reg_624_pp0_iter41_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln52_fu_366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln52_reg_630 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln53_fu_371_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln53_reg_635 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_fu_376_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_reg_640 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_384_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln52_reg_675 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln53_reg_680 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln54_reg_685 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_load_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln181_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal k_fu_84 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_1_fu_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_i_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln176_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln177_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln52_fu_363_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln52_1_fu_405_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln52_1_fu_408_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln53_1_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln54_1_fu_426_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_483_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_476_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln56_fu_435_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_490_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln56_1_fu_439_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_483_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_490_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rendering_urem_31ns_8ns_8_35_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_udiv_31ns_8ns_8_35_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_mul_9s_9s_18_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component rendering_mac_mulsub_9s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component rendering_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_31ns_8ns_8_35_1_U1 : component rendering_urem_31ns_8ns_8_35_1
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 31,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_k_1,
        din1 => grp_fu_331_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_331_p2);

    udiv_31ns_8ns_8_35_1_U2 : component rendering_udiv_31ns_8ns_8_35_1
    generic map (
        ID => 1,
        NUM_STAGE => 35,
        din0_WIDTH => 31,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_k_1,
        din1 => grp_fu_337_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);

    mul_9s_9s_18_3_1_U3 : component rendering_mul_9s_9s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln52_reg_630,
        din1 => grp_fu_384_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_384_p2);

    mul_9s_9s_18_3_1_U4 : component rendering_mul_9s_9s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln53_reg_635,
        din1 => grp_fu_392_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    mul_9s_9s_18_3_1_U5 : component rendering_mul_9s_9s_18_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln54_reg_640,
        din1 => grp_fu_400_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_400_p2);

    mac_mulsub_9s_9s_18s_18_4_1_U6 : component rendering_mac_mulsub_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln52_1_fu_408_p2,
        din1 => grp_fu_476_p1,
        din2 => mul_ln52_reg_675,
        ce => ap_const_logic_1,
        dout => grp_fu_476_p3);

    mac_mulsub_9s_9s_18s_18_4_1_U7 : component rendering_mac_mulsub_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln53_1_fu_417_p2,
        din1 => grp_fu_483_p1,
        din2 => mul_ln53_reg_680,
        ce => ap_const_logic_1,
        dout => grp_fu_483_p3);

    mac_mulsub_9s_9s_18s_18_4_1_U8 : component rendering_mac_mulsub_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln54_1_fu_426_p2,
        din1 => grp_fu_490_p1,
        din2 => mul_ln54_reg_685,
        ce => ap_const_logic_1,
        dout => grp_fu_490_p3);

    flow_control_loop_pipe_sequential_init_U : component rendering_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter41_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    i_1_fu_88 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (tmp_reg_690 = ap_const_lv1_0))) then 
                    i_1_fu_88 <= i_reg_699;
                end if;
            end if; 
        end if;
    end process;

    k_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_84 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_84 <= k_2_reg_603;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                div_udiv_i_reg_613 <= grp_fu_337_p2;
                i_1_load_reg_694 <= ap_sig_allocacmp_i_1_load;
                i_reg_699 <= i_fu_455_p2;
                icmp_ln174_reg_599_pp0_iter10_reg <= icmp_ln174_reg_599_pp0_iter9_reg;
                icmp_ln174_reg_599_pp0_iter11_reg <= icmp_ln174_reg_599_pp0_iter10_reg;
                icmp_ln174_reg_599_pp0_iter12_reg <= icmp_ln174_reg_599_pp0_iter11_reg;
                icmp_ln174_reg_599_pp0_iter13_reg <= icmp_ln174_reg_599_pp0_iter12_reg;
                icmp_ln174_reg_599_pp0_iter14_reg <= icmp_ln174_reg_599_pp0_iter13_reg;
                icmp_ln174_reg_599_pp0_iter15_reg <= icmp_ln174_reg_599_pp0_iter14_reg;
                icmp_ln174_reg_599_pp0_iter16_reg <= icmp_ln174_reg_599_pp0_iter15_reg;
                icmp_ln174_reg_599_pp0_iter17_reg <= icmp_ln174_reg_599_pp0_iter16_reg;
                icmp_ln174_reg_599_pp0_iter18_reg <= icmp_ln174_reg_599_pp0_iter17_reg;
                icmp_ln174_reg_599_pp0_iter19_reg <= icmp_ln174_reg_599_pp0_iter18_reg;
                icmp_ln174_reg_599_pp0_iter20_reg <= icmp_ln174_reg_599_pp0_iter19_reg;
                icmp_ln174_reg_599_pp0_iter21_reg <= icmp_ln174_reg_599_pp0_iter20_reg;
                icmp_ln174_reg_599_pp0_iter22_reg <= icmp_ln174_reg_599_pp0_iter21_reg;
                icmp_ln174_reg_599_pp0_iter23_reg <= icmp_ln174_reg_599_pp0_iter22_reg;
                icmp_ln174_reg_599_pp0_iter24_reg <= icmp_ln174_reg_599_pp0_iter23_reg;
                icmp_ln174_reg_599_pp0_iter25_reg <= icmp_ln174_reg_599_pp0_iter24_reg;
                icmp_ln174_reg_599_pp0_iter26_reg <= icmp_ln174_reg_599_pp0_iter25_reg;
                icmp_ln174_reg_599_pp0_iter27_reg <= icmp_ln174_reg_599_pp0_iter26_reg;
                icmp_ln174_reg_599_pp0_iter28_reg <= icmp_ln174_reg_599_pp0_iter27_reg;
                icmp_ln174_reg_599_pp0_iter29_reg <= icmp_ln174_reg_599_pp0_iter28_reg;
                icmp_ln174_reg_599_pp0_iter2_reg <= icmp_ln174_reg_599_pp0_iter1_reg;
                icmp_ln174_reg_599_pp0_iter30_reg <= icmp_ln174_reg_599_pp0_iter29_reg;
                icmp_ln174_reg_599_pp0_iter31_reg <= icmp_ln174_reg_599_pp0_iter30_reg;
                icmp_ln174_reg_599_pp0_iter32_reg <= icmp_ln174_reg_599_pp0_iter31_reg;
                icmp_ln174_reg_599_pp0_iter33_reg <= icmp_ln174_reg_599_pp0_iter32_reg;
                icmp_ln174_reg_599_pp0_iter34_reg <= icmp_ln174_reg_599_pp0_iter33_reg;
                icmp_ln174_reg_599_pp0_iter35_reg <= icmp_ln174_reg_599_pp0_iter34_reg;
                icmp_ln174_reg_599_pp0_iter36_reg <= icmp_ln174_reg_599_pp0_iter35_reg;
                icmp_ln174_reg_599_pp0_iter37_reg <= icmp_ln174_reg_599_pp0_iter36_reg;
                icmp_ln174_reg_599_pp0_iter38_reg <= icmp_ln174_reg_599_pp0_iter37_reg;
                icmp_ln174_reg_599_pp0_iter39_reg <= icmp_ln174_reg_599_pp0_iter38_reg;
                icmp_ln174_reg_599_pp0_iter3_reg <= icmp_ln174_reg_599_pp0_iter2_reg;
                icmp_ln174_reg_599_pp0_iter40_reg <= icmp_ln174_reg_599_pp0_iter39_reg;
                icmp_ln174_reg_599_pp0_iter4_reg <= icmp_ln174_reg_599_pp0_iter3_reg;
                icmp_ln174_reg_599_pp0_iter5_reg <= icmp_ln174_reg_599_pp0_iter4_reg;
                icmp_ln174_reg_599_pp0_iter6_reg <= icmp_ln174_reg_599_pp0_iter5_reg;
                icmp_ln174_reg_599_pp0_iter7_reg <= icmp_ln174_reg_599_pp0_iter6_reg;
                icmp_ln174_reg_599_pp0_iter8_reg <= icmp_ln174_reg_599_pp0_iter7_reg;
                icmp_ln174_reg_599_pp0_iter9_reg <= icmp_ln174_reg_599_pp0_iter8_reg;
                mul_ln52_reg_675 <= grp_fu_384_p2;
                mul_ln53_reg_680 <= grp_fu_392_p2;
                mul_ln54_reg_685 <= grp_fu_400_p2;
                rem_urem_i_reg_608 <= grp_fu_331_p2;
                sub_ln52_reg_630 <= sub_ln52_fu_366_p2;
                sub_ln53_reg_635 <= sub_ln53_fu_371_p2;
                sub_ln54_reg_640 <= sub_ln54_fu_376_p2;
                tmp_reg_690 <= or_ln56_1_fu_439_p2(17 downto 17);
                x_reg_618 <= x_fu_350_p2;
                x_reg_618_pp0_iter36_reg <= x_reg_618;
                x_reg_618_pp0_iter37_reg <= x_reg_618_pp0_iter36_reg;
                x_reg_618_pp0_iter38_reg <= x_reg_618_pp0_iter37_reg;
                x_reg_618_pp0_iter39_reg <= x_reg_618_pp0_iter38_reg;
                x_reg_618_pp0_iter40_reg <= x_reg_618_pp0_iter39_reg;
                x_reg_618_pp0_iter41_reg <= x_reg_618_pp0_iter40_reg;
                y_reg_624 <= y_fu_358_p2;
                y_reg_624_pp0_iter36_reg <= y_reg_624;
                y_reg_624_pp0_iter37_reg <= y_reg_624_pp0_iter36_reg;
                y_reg_624_pp0_iter38_reg <= y_reg_624_pp0_iter37_reg;
                y_reg_624_pp0_iter39_reg <= y_reg_624_pp0_iter38_reg;
                y_reg_624_pp0_iter40_reg <= y_reg_624_pp0_iter39_reg;
                y_reg_624_pp0_iter41_reg <= y_reg_624_pp0_iter40_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln174_reg_599 <= icmp_ln174_fu_319_p2;
                icmp_ln174_reg_599_pp0_iter1_reg <= icmp_ln174_reg_599;
                k_2_reg_603 <= k_2_fu_325_p2;
                sext_ln146_cast_reg_527 <= sext_ln146_cast_fu_254_p1;
                sext_ln22_1_cast_reg_577 <= sext_ln22_1_cast_fu_294_p1;
                sext_ln23_1_cast_reg_567 <= sext_ln23_1_cast_fu_286_p1;
                sub22_i_i_cast_cast_reg_557 <= sub22_i_i_cast_cast_fu_278_p1;
                sub31_i_i_cast_cast_reg_547 <= sub31_i_i_cast_cast_fu_270_p1;
                sub42_i_i_cast_cast_reg_537 <= sub42_i_i_cast_cast_fu_262_p1;
                    zext_ln22_1_cast_reg_582(7 downto 0) <= zext_ln22_1_cast_fu_298_p1(7 downto 0);
                    zext_ln22_2_cast_reg_552(7 downto 0) <= zext_ln22_2_cast_fu_274_p1(7 downto 0);
                    zext_ln22_3_cast_reg_572(7 downto 0) <= zext_ln22_3_cast_fu_290_p1(7 downto 0);
                    zext_ln22_cast_reg_542(7 downto 0) <= zext_ln22_cast_fu_266_p1(7 downto 0);
                    zext_ln23_1_cast_reg_562(7 downto 0) <= zext_ln23_1_cast_fu_282_p1(7 downto 0);
                    zext_ln23_cast_reg_532(7 downto 0) <= zext_ln23_cast_fu_258_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln23_cast_reg_532(8) <= '0';
    zext_ln22_cast_reg_542(8) <= '0';
    zext_ln22_2_cast_reg_552(8) <= '0';
    zext_ln23_1_cast_reg_562(8) <= '0';
    zext_ln22_3_cast_reg_572(8) <= '0';
    zext_ln22_1_cast_reg_582(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln174_fu_319_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln174_fu_319_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter41_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter41_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_load_assign_proc : process(ap_enable_reg_pp0_iter42, tmp_reg_690, i_reg_699, ap_block_pp0_stage0, i_1_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (tmp_reg_690 = ap_const_lv1_0))) then 
            ap_sig_allocacmp_i_1_load <= i_reg_699;
        else 
            ap_sig_allocacmp_i_1_load <= i_1_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, k_2_reg_603, ap_block_pp0_stage0, k_fu_84, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_k_1 <= ap_const_lv31_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_k_1 <= k_2_reg_603;
            else 
                ap_sig_allocacmp_k_1 <= k_fu_84;
            end if;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_84;
        end if; 
    end process;

    fragment_color_address0 <= zext_ln181_fu_461_p1(9 - 1 downto 0);

    fragment_color_ce0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then 
            fragment_color_ce0 <= ap_const_logic_1;
        else 
            fragment_color_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_color_d0 <= ap_const_lv6_24;

    fragment_color_we0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001, tmp_reg_690)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (tmp_reg_690 = ap_const_lv1_0))) then 
            fragment_color_we0 <= ap_const_logic_1;
        else 
            fragment_color_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_x_address0 <= zext_ln181_fu_461_p1(9 - 1 downto 0);

    fragment_x_ce0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then 
            fragment_x_ce0 <= ap_const_logic_1;
        else 
            fragment_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_x_d0 <= x_reg_618_pp0_iter41_reg;

    fragment_x_we0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001, tmp_reg_690)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (tmp_reg_690 = ap_const_lv1_0))) then 
            fragment_x_we0 <= ap_const_logic_1;
        else 
            fragment_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_y_address0 <= zext_ln181_fu_461_p1(9 - 1 downto 0);

    fragment_y_ce0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then 
            fragment_y_ce0 <= ap_const_logic_1;
        else 
            fragment_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_y_d0 <= y_reg_624_pp0_iter41_reg;

    fragment_y_we0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001, tmp_reg_690)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (tmp_reg_690 = ap_const_lv1_0))) then 
            fragment_y_we0 <= ap_const_logic_1;
        else 
            fragment_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_z_address0 <= zext_ln181_fu_461_p1(9 - 1 downto 0);

    fragment_z_ce0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1))) then 
            fragment_z_ce0 <= ap_const_logic_1;
        else 
            fragment_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment_z_d0 <= triangle_2ds_z;

    fragment_z_we0_assign_proc : process(ap_enable_reg_pp0_iter42, ap_block_pp0_stage0_11001, tmp_reg_690)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter42 = ap_const_logic_1) and (tmp_reg_690 = ap_const_lv1_0))) then 
            fragment_z_we0 <= ap_const_logic_1;
        else 
            fragment_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_331_p1 <= zext_ln174_cast_fu_302_p1(8 - 1 downto 0);
    grp_fu_337_p1 <= zext_ln174_cast_fu_302_p1(8 - 1 downto 0);
    grp_fu_384_p1 <= sext_ln22_1_cast_reg_577(9 - 1 downto 0);
    grp_fu_392_p1 <= sub22_i_i_cast_cast_reg_557(9 - 1 downto 0);
    grp_fu_400_p1 <= sub42_i_i_cast_cast_reg_537(9 - 1 downto 0);
    grp_fu_476_p1 <= sext_ln23_1_cast_reg_567(9 - 1 downto 0);
    grp_fu_483_p1 <= sub31_i_i_cast_cast_reg_547(9 - 1 downto 0);
    grp_fu_490_p1 <= sext_ln146_cast_reg_527(9 - 1 downto 0);
    i_1_out <= i_1_fu_88;

    i_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln174_reg_599_pp0_iter40_reg)
    begin
        if (((icmp_ln174_reg_599_pp0_iter40_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            i_1_out_ap_vld <= ap_const_logic_1;
        else 
            i_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_455_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1_load) + unsigned(ap_const_lv32_1));
    icmp_ln174_fu_319_p2 <= "1" when (ap_sig_allocacmp_k_1 = max_index_0) else "0";
    k_2_fu_325_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv31_1));
    or_ln56_1_fu_439_p2 <= (or_ln56_fu_435_p2 or grp_fu_490_p3);
    or_ln56_fu_435_p2 <= (grp_fu_483_p3 or grp_fu_476_p3);
        sext_ln146_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln146),18));

        sext_ln22_1_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln22_1),18));

        sext_ln23_1_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_1),18));

        sub22_i_i_cast_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub22_i_i_cast),18));

        sub31_i_i_cast_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub31_i_i_cast),18));

        sub42_i_i_cast_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub42_i_i_cast),18));

    sub_ln52_1_fu_408_p2 <= std_logic_vector(unsigned(zext_ln52_1_fu_405_p1) - unsigned(zext_ln22_3_cast_reg_572));
    sub_ln52_fu_366_p2 <= std_logic_vector(unsigned(zext_ln52_fu_363_p1) - unsigned(zext_ln22_1_cast_reg_582));
    sub_ln53_1_fu_417_p2 <= std_logic_vector(unsigned(zext_ln52_1_fu_405_p1) - unsigned(zext_ln22_2_cast_reg_552));
    sub_ln53_fu_371_p2 <= std_logic_vector(unsigned(zext_ln52_fu_363_p1) - unsigned(zext_ln23_1_cast_reg_562));
    sub_ln54_1_fu_426_p2 <= std_logic_vector(unsigned(zext_ln52_1_fu_405_p1) - unsigned(zext_ln23_cast_reg_532));
    sub_ln54_fu_376_p2 <= std_logic_vector(unsigned(zext_ln52_fu_363_p1) - unsigned(zext_ln22_cast_reg_542));
    trunc_ln176_fu_347_p1 <= rem_urem_i_reg_608(8 - 1 downto 0);
    trunc_ln177_fu_355_p1 <= div_udiv_i_reg_613(8 - 1 downto 0);
    x_fu_350_p2 <= std_logic_vector(unsigned(trunc_ln176_fu_347_p1) + unsigned(max_min_0));
    y_fu_358_p2 <= std_logic_vector(unsigned(trunc_ln177_fu_355_p1) + unsigned(max_min_2));
    zext_ln174_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln174),31));
    zext_ln181_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_load_reg_694),64));
    zext_ln22_1_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln22_1),9));
    zext_ln22_2_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln22_2),9));
    zext_ln22_3_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln22_3),9));
    zext_ln22_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln22),9));
    zext_ln23_1_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_1),9));
    zext_ln23_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23),9));
    zext_ln52_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_reg_624_pp0_iter37_reg),9));
    zext_ln52_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_618),9));
end behav;
