-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SgdLR is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    label_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    label_r_ce0 : OUT STD_LOGIC;
    label_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    theta_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    theta_ce0 : OUT STD_LOGIC;
    theta_we0 : OUT STD_LOGIC;
    theta_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    theta_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    theta_ce1 : OUT STD_LOGIC;
    theta_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of SgdLR is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SgdLR_SgdLR,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.312000,HLS_SYN_LAT=4969201,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2321,HLS_SYN_LUT=3214,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (89 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (89 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (89 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (89 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (89 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (89 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (89 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (89 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (89 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (89 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (89 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (89 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal select_ln60_fu_177_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln60_reg_256 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln_fu_190_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_reg_263 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal xor_ln26_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln26_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_132_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_279 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal label_r_load_reg_289 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal grp_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal prob_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_fu_129_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal gradient_ce0 : STD_LOGIC;
    signal gradient_we0 : STD_LOGIC;
    signal gradient_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_ap_start : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_ap_done : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_ap_idle : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_ap_ready : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_theta_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_theta_ce0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_data_ce0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_result_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_result_out_ap_vld : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_ce : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_ce : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_ap_start : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_ap_done : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_ap_idle : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_ap_ready : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_data_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_SgdLR_Pipeline_GRAD_fu_103_data_ce0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_gradient_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SgdLR_Pipeline_GRAD_fu_103_gradient_ce0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_gradient_we0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_GRAD_fu_103_gradient_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_ce : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_ap_done : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_ap_idle : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_ap_ready : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_ce0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_theta_we0 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_theta_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce1 : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_opcode : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_ce : STD_LOGIC;
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_ce : STD_LOGIC;
    signal grp_SgdLR_Pipeline_DOT_fu_93_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_SgdLR_Pipeline_GRAD_fu_103_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal zext_ln63_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal training_id_fu_64 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln63_fu_198_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln60_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_fu_68 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln60_fu_162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln63_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln26_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_119_ce : STD_LOGIC;
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (89 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ST_fsm_state89_blk : STD_LOGIC;
    signal ap_ST_fsm_state90_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SgdLR_SgdLR_Pipeline_DOT IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        theta_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        theta_ce0 : OUT STD_LOGIC;
        theta_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        shl_ln : IN STD_LOGIC_VECTOR (16 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        result_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_out_ap_vld : OUT STD_LOGIC;
        grp_fu_119_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_119_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_ce : OUT STD_LOGIC;
        grp_fu_309_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_ce : OUT STD_LOGIC );
    end component;


    component SgdLR_SgdLR_Pipeline_GRAD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        shl_ln : IN STD_LOGIC_VECTOR (16 downto 0);
        data_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        scale_assign : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gradient_ce0 : OUT STD_LOGIC;
        gradient_we0 : OUT STD_LOGIC;
        gradient_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_ce : OUT STD_LOGIC );
    end component;


    component SgdLR_SgdLR_Pipeline_UPDATE IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gradient_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gradient_ce0 : OUT STD_LOGIC;
        gradient_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        theta_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        theta_ce0 : OUT STD_LOGIC;
        theta_we0 : OUT STD_LOGIC;
        theta_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        theta_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        theta_ce1 : OUT STD_LOGIC;
        theta_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_opcode : OUT STD_LOGIC_VECTOR (0 downto 0);
        grp_fu_119_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_119_p_ce : OUT STD_LOGIC;
        grp_fu_309_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_309_p_ce : OUT STD_LOGIC );
    end component;


    component SgdLR_faddfsub_32ns_32ns_32_10_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_fdiv_32ns_32ns_32_30_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_sitofp_32ns_32_7_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_fexp_32ns_32ns_32_31_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_fmul_32ns_32ns_32_8_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_gradient_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    gradient_U : component SgdLR_gradient_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradient_address0,
        ce0 => gradient_ce0,
        we0 => gradient_we0,
        d0 => grp_SgdLR_Pipeline_GRAD_fu_103_gradient_d0,
        q0 => gradient_q0);

    grp_SgdLR_Pipeline_DOT_fu_93 : component SgdLR_SgdLR_Pipeline_DOT
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SgdLR_Pipeline_DOT_fu_93_ap_start,
        ap_done => grp_SgdLR_Pipeline_DOT_fu_93_ap_done,
        ap_idle => grp_SgdLR_Pipeline_DOT_fu_93_ap_idle,
        ap_ready => grp_SgdLR_Pipeline_DOT_fu_93_ap_ready,
        theta_address0 => grp_SgdLR_Pipeline_DOT_fu_93_theta_address0,
        theta_ce0 => grp_SgdLR_Pipeline_DOT_fu_93_theta_ce0,
        theta_q0 => theta_q0,
        shl_ln => shl_ln_reg_263,
        data_address0 => grp_SgdLR_Pipeline_DOT_fu_93_data_address0,
        data_ce0 => grp_SgdLR_Pipeline_DOT_fu_93_data_ce0,
        data_q0 => data_q0,
        result_out => grp_SgdLR_Pipeline_DOT_fu_93_result_out,
        result_out_ap_vld => grp_SgdLR_Pipeline_DOT_fu_93_result_out_ap_vld,
        grp_fu_119_p_din0 => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din0,
        grp_fu_119_p_din1 => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din1,
        grp_fu_119_p_opcode => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_opcode,
        grp_fu_119_p_dout0 => grp_fu_119_p2,
        grp_fu_119_p_ce => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_ce,
        grp_fu_309_p_din0 => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din0,
        grp_fu_309_p_din1 => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din1,
        grp_fu_309_p_dout0 => grp_fu_309_p2,
        grp_fu_309_p_ce => grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_ce);

    grp_SgdLR_Pipeline_GRAD_fu_103 : component SgdLR_SgdLR_Pipeline_GRAD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SgdLR_Pipeline_GRAD_fu_103_ap_start,
        ap_done => grp_SgdLR_Pipeline_GRAD_fu_103_ap_done,
        ap_idle => grp_SgdLR_Pipeline_GRAD_fu_103_ap_idle,
        ap_ready => grp_SgdLR_Pipeline_GRAD_fu_103_ap_ready,
        shl_ln => shl_ln_reg_263,
        data_address0 => grp_SgdLR_Pipeline_GRAD_fu_103_data_address0,
        data_ce0 => grp_SgdLR_Pipeline_GRAD_fu_103_data_ce0,
        data_q0 => data_q0,
        scale_assign => reg_137,
        gradient_address0 => grp_SgdLR_Pipeline_GRAD_fu_103_gradient_address0,
        gradient_ce0 => grp_SgdLR_Pipeline_GRAD_fu_103_gradient_ce0,
        gradient_we0 => grp_SgdLR_Pipeline_GRAD_fu_103_gradient_we0,
        gradient_d0 => grp_SgdLR_Pipeline_GRAD_fu_103_gradient_d0,
        grp_fu_309_p_din0 => grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din0,
        grp_fu_309_p_din1 => grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din1,
        grp_fu_309_p_dout0 => grp_fu_309_p2,
        grp_fu_309_p_ce => grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_ce);

    grp_SgdLR_Pipeline_UPDATE_fu_112 : component SgdLR_SgdLR_Pipeline_UPDATE
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start,
        ap_done => grp_SgdLR_Pipeline_UPDATE_fu_112_ap_done,
        ap_idle => grp_SgdLR_Pipeline_UPDATE_fu_112_ap_idle,
        ap_ready => grp_SgdLR_Pipeline_UPDATE_fu_112_ap_ready,
        gradient_address0 => grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_address0,
        gradient_ce0 => grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_ce0,
        gradient_q0 => gradient_q0,
        theta_address0 => grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address0,
        theta_ce0 => grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce0,
        theta_we0 => grp_SgdLR_Pipeline_UPDATE_fu_112_theta_we0,
        theta_d0 => grp_SgdLR_Pipeline_UPDATE_fu_112_theta_d0,
        theta_address1 => grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address1,
        theta_ce1 => grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce1,
        theta_q1 => theta_q1,
        grp_fu_119_p_din0 => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din0,
        grp_fu_119_p_din1 => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din1,
        grp_fu_119_p_opcode => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_opcode,
        grp_fu_119_p_dout0 => grp_fu_119_p2,
        grp_fu_119_p_ce => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_ce,
        grp_fu_309_p_din0 => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din0,
        grp_fu_309_p_din1 => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din1,
        grp_fu_309_p_dout0 => grp_fu_309_p2,
        grp_fu_309_p_ce => grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_ce);

    faddfsub_32ns_32ns_32_10_full_dsp_1_U16 : component SgdLR_faddfsub_32ns_32ns_32_10_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_119_p0,
        din1 => grp_fu_119_p1,
        opcode => grp_fu_119_opcode,
        ce => grp_fu_119_ce,
        dout => grp_fu_119_p2);

    fdiv_32ns_32ns_32_30_no_dsp_1_U17 : component SgdLR_fdiv_32ns_32ns_32_30_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_137,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p2);

    sitofp_32ns_32_7_no_dsp_1_U18 : component SgdLR_sitofp_32ns_32_7_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_129_p1);

    fexp_32ns_32ns_32_31_full_dsp_1_U19 : component SgdLR_fexp_32ns_32ns_32_31_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => grp_fu_132_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_132_p2);

    fmul_32ns_32ns_32_8_max_dsp_1_U20 : component SgdLR_fmul_32ns_32ns_32_8_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        ce => grp_fu_309_ce,
        dout => grp_fu_309_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_SgdLR_Pipeline_DOT_fu_93_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SgdLR_Pipeline_DOT_fu_93_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_SgdLR_Pipeline_DOT_fu_93_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SgdLR_Pipeline_DOT_fu_93_ap_ready = ap_const_logic_1)) then 
                    grp_SgdLR_Pipeline_DOT_fu_93_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SgdLR_Pipeline_GRAD_fu_103_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SgdLR_Pipeline_GRAD_fu_103_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
                    grp_SgdLR_Pipeline_GRAD_fu_103_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SgdLR_Pipeline_GRAD_fu_103_ap_ready = ap_const_logic_1)) then 
                    grp_SgdLR_Pipeline_GRAD_fu_103_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                    grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SgdLR_Pipeline_UPDATE_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_68 <= ap_const_lv9_0;
            elsif (((icmp_ln60_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_68 <= add_ln60_fu_162_p2;
            end if; 
        end if;
    end process;

    training_id_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                training_id_fu_64 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                training_id_fu_64 <= add_ln63_fu_198_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                conv_reg_304 <= grp_fu_129_p1;
                prob_reg_299 <= grp_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                label_r_load_reg_289 <= label_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state46))) then
                reg_137 <= grp_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln60_reg_256 <= select_ln60_fu_177_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    shl_ln_reg_263(16 downto 10) <= shl_ln_fu_190_p3(16 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_reg_279 <= grp_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                xor_ln26_reg_269 <= xor_ln26_fu_215_p2;
            end if;
        end if;
    end process;
    shl_ln_reg_263(9 downto 0) <= "0000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_SgdLR_Pipeline_DOT_fu_93_ap_done, grp_SgdLR_Pipeline_GRAD_fu_103_ap_done, grp_SgdLR_Pipeline_UPDATE_fu_112_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state88, ap_CS_fsm_state90, icmp_ln60_fu_156_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln60_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_SgdLR_Pipeline_DOT_fu_93_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((grp_SgdLR_Pipeline_GRAD_fu_103_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((grp_SgdLR_Pipeline_UPDATE_fu_112_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state90;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln60_fu_162_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_68) + unsigned(ap_const_lv9_1));
    add_ln63_fu_198_p2 <= std_logic_vector(unsigned(select_ln60_reg_256) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_ap_done)
    begin
        if ((grp_SgdLR_Pipeline_DOT_fu_93_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;
    ap_ST_fsm_state82_blk <= ap_const_logic_0;
    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state87_blk <= ap_const_logic_0;

    ap_ST_fsm_state88_blk_assign_proc : process(grp_SgdLR_Pipeline_GRAD_fu_103_ap_done)
    begin
        if ((grp_SgdLR_Pipeline_GRAD_fu_103_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state89_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state90_blk_assign_proc : process(grp_SgdLR_Pipeline_UPDATE_fu_112_ap_done)
    begin
        if ((grp_SgdLR_Pipeline_UPDATE_fu_112_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state90_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state90_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln60_fu_156_p2)
    begin
        if (((icmp_ln60_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln60_fu_156_p2)
    begin
        if (((icmp_ln60_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln26_fu_211_p1 <= grp_SgdLR_Pipeline_DOT_fu_93_result_out;

    data_address0_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_data_address0, grp_SgdLR_Pipeline_GRAD_fu_103_data_address0, ap_CS_fsm_state4, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            data_address0 <= grp_SgdLR_Pipeline_GRAD_fu_103_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_address0 <= grp_SgdLR_Pipeline_DOT_fu_93_data_address0;
        else 
            data_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_data_ce0, grp_SgdLR_Pipeline_GRAD_fu_103_data_ce0, ap_CS_fsm_state4, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            data_ce0 <= grp_SgdLR_Pipeline_GRAD_fu_103_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            data_ce0 <= grp_SgdLR_Pipeline_DOT_fu_93_data_ce0;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_address0_assign_proc : process(grp_SgdLR_Pipeline_GRAD_fu_103_gradient_address0, grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_address0, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            gradient_address0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            gradient_address0 <= grp_SgdLR_Pipeline_GRAD_fu_103_gradient_address0;
        else 
            gradient_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    gradient_ce0_assign_proc : process(grp_SgdLR_Pipeline_GRAD_fu_103_gradient_ce0, grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_ce0, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            gradient_ce0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_gradient_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            gradient_ce0 <= grp_SgdLR_Pipeline_GRAD_fu_103_gradient_ce0;
        else 
            gradient_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_we0_assign_proc : process(grp_SgdLR_Pipeline_GRAD_fu_103_gradient_we0, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            gradient_we0 <= grp_SgdLR_Pipeline_GRAD_fu_103_gradient_we0;
        else 
            gradient_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_SgdLR_Pipeline_DOT_fu_93_ap_start <= grp_SgdLR_Pipeline_DOT_fu_93_ap_start_reg;
    grp_SgdLR_Pipeline_GRAD_fu_103_ap_start <= grp_SgdLR_Pipeline_GRAD_fu_103_ap_start_reg;
    grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start <= grp_SgdLR_Pipeline_UPDATE_fu_112_ap_start_reg;

    grp_fu_119_ce_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_ce, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_ce, ap_CS_fsm_state4, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_119_ce <= grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_119_ce <= grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_ce;
        else 
            grp_fu_119_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_119_opcode_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_opcode, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_opcode, ap_CS_fsm_state4, ap_CS_fsm_state90, ap_CS_fsm_state37, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_119_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_opcode),2));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_119_opcode <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_opcode),2));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_119_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_119_opcode <= ap_const_lv2_0;
        else 
            grp_fu_119_opcode <= "XX";
        end if; 
    end process;


    grp_fu_119_p0_assign_proc : process(tmp_reg_279, prob_reg_299, grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din0, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din0, ap_CS_fsm_state4, ap_CS_fsm_state90, ap_CS_fsm_state37, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_119_p0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_119_p0 <= grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_119_p0 <= prob_reg_299;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_119_p0 <= tmp_reg_279;
        else 
            grp_fu_119_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_119_p1_assign_proc : process(conv_reg_304, grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din1, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din1, ap_CS_fsm_state4, ap_CS_fsm_state90, ap_CS_fsm_state37, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_119_p1 <= grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_119_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_119_p1 <= grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_119_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_119_p1 <= conv_reg_304;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_119_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_119_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_129_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(label_r_load_reg_289),32));
    grp_fu_132_p1 <= xor_ln26_reg_269;

    grp_fu_309_ce_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_ce, grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_ce, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_ce, ap_CS_fsm_state4, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_309_ce <= grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_309_ce <= grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_309_ce <= grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_ce;
        else 
            grp_fu_309_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_309_p0_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din0, grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din0, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din0, ap_CS_fsm_state4, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_309_p0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_309_p0 <= grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_309_p0 <= grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din0;
        else 
            grp_fu_309_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_309_p1_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din1, grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din1, grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din1, ap_CS_fsm_state4, ap_CS_fsm_state88, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_309_p1 <= grp_SgdLR_Pipeline_UPDATE_fu_112_grp_fu_309_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_309_p1 <= grp_SgdLR_Pipeline_GRAD_fu_103_grp_fu_309_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_309_p1 <= grp_SgdLR_Pipeline_DOT_fu_93_grp_fu_309_p_din1;
        else 
            grp_fu_309_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln60_fu_156_p2 <= "1" when (indvar_flatten_fu_68 = ap_const_lv9_190) else "0";
    icmp_ln63_fu_171_p2 <= "1" when (training_id_fu_64 = ap_const_lv7_50) else "0";
    label_r_address0 <= zext_ln63_fu_225_p1(7 - 1 downto 0);

    label_r_ce0_assign_proc : process(ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            label_r_ce0 <= ap_const_logic_1;
        else 
            label_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln60_fu_177_p3 <= 
        ap_const_lv7_0 when (icmp_ln63_fu_171_p2(0) = '1') else 
        training_id_fu_64;
    shl_ln_fu_190_p3 <= (select_ln60_reg_256 & ap_const_lv10_0);

    theta_address0_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_theta_address0, grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address0, ap_CS_fsm_state4, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            theta_address0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            theta_address0 <= grp_SgdLR_Pipeline_DOT_fu_93_theta_address0;
        else 
            theta_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    theta_address1 <= grp_SgdLR_Pipeline_UPDATE_fu_112_theta_address1;

    theta_ce0_assign_proc : process(grp_SgdLR_Pipeline_DOT_fu_93_theta_ce0, grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce0, ap_CS_fsm_state4, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            theta_ce0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            theta_ce0 <= grp_SgdLR_Pipeline_DOT_fu_93_theta_ce0;
        else 
            theta_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_ce1_assign_proc : process(grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce1, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            theta_ce1 <= grp_SgdLR_Pipeline_UPDATE_fu_112_theta_ce1;
        else 
            theta_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    theta_d0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_theta_d0;

    theta_we0_assign_proc : process(grp_SgdLR_Pipeline_UPDATE_fu_112_theta_we0, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            theta_we0 <= grp_SgdLR_Pipeline_UPDATE_fu_112_theta_we0;
        else 
            theta_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln26_fu_215_p2 <= (bitcast_ln26_fu_211_p1 xor ap_const_lv32_80000000);
    zext_ln63_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln60_reg_256),64));
end behav;
