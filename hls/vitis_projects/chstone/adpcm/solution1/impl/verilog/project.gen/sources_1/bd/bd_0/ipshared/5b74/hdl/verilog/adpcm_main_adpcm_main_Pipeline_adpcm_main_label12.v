// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module adpcm_main_adpcm_main_Pipeline_adpcm_main_label12 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_samples_address0,
        input_samples_ce0,
        input_samples_q0,
        input_samples_address1,
        input_samples_ce1,
        input_samples_q1,
        compressed_address0,
        compressed_ce0,
        compressed_we0,
        compressed_d0,
        rlt1_i,
        rlt1_o,
        rlt1_o_ap_vld,
        al1_i,
        al1_o,
        al1_o_ap_vld,
        rlt2_i,
        rlt2_o,
        rlt2_o_ap_vld,
        al2_i,
        al2_o,
        al2_o_ap_vld,
        detl_i,
        detl_o,
        detl_o_ap_vld,
        il,
        il_ap_vld,
        nbl_i,
        nbl_o,
        nbl_o_ap_vld,
        plt1_i,
        plt1_o,
        plt1_o_ap_vld,
        plt2_i,
        plt2_o,
        plt2_o_ap_vld,
        rh1_i,
        rh1_o,
        rh1_o_ap_vld,
        ah1_i,
        ah1_o,
        ah1_o_ap_vld,
        rh2_i,
        rh2_o,
        rh2_o_ap_vld,
        ah2_i,
        ah2_o,
        ah2_o_ap_vld,
        deth_i,
        deth_o,
        deth_o_ap_vld,
        nbh_i,
        nbh_o,
        nbh_o_ap_vld,
        ph1_i,
        ph1_o,
        ph1_o_ap_vld,
        ph2_i,
        ph2_o,
        ph2_o_ap_vld,
        tqmf_address0,
        tqmf_ce0,
        tqmf_we0,
        tqmf_d0,
        tqmf_q0,
        tqmf_address1,
        tqmf_ce1,
        tqmf_we1,
        tqmf_d1,
        tqmf_q1,
        delay_bpl_address0,
        delay_bpl_ce0,
        delay_bpl_we0,
        delay_bpl_d0,
        delay_bpl_q0,
        delay_bpl_address1,
        delay_bpl_ce1,
        delay_bpl_we1,
        delay_bpl_d1,
        delay_bpl_q1,
        delay_dltx_address0,
        delay_dltx_ce0,
        delay_dltx_we0,
        delay_dltx_d0,
        delay_dltx_q0,
        delay_dltx_address1,
        delay_dltx_ce1,
        delay_dltx_we1,
        delay_dltx_d1,
        delay_dltx_q1,
        delay_bph_address0,
        delay_bph_ce0,
        delay_bph_we0,
        delay_bph_d0,
        delay_bph_q0,
        delay_bph_address1,
        delay_bph_ce1,
        delay_bph_we1,
        delay_bph_d1,
        delay_bph_q1,
        delay_dhx_address0,
        delay_dhx_ce0,
        delay_dhx_we0,
        delay_dhx_d0,
        delay_dhx_q0,
        delay_dhx_address1,
        delay_dhx_ce1,
        delay_dhx_we1,
        delay_dhx_d1,
        delay_dhx_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 85'd1;
parameter    ap_ST_fsm_pp0_stage1 = 85'd2;
parameter    ap_ST_fsm_pp0_stage2 = 85'd4;
parameter    ap_ST_fsm_pp0_stage3 = 85'd8;
parameter    ap_ST_fsm_pp0_stage4 = 85'd16;
parameter    ap_ST_fsm_pp0_stage5 = 85'd32;
parameter    ap_ST_fsm_pp0_stage6 = 85'd64;
parameter    ap_ST_fsm_pp0_stage7 = 85'd128;
parameter    ap_ST_fsm_pp0_stage8 = 85'd256;
parameter    ap_ST_fsm_pp0_stage9 = 85'd512;
parameter    ap_ST_fsm_pp0_stage10 = 85'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 85'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 85'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 85'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 85'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 85'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 85'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 85'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 85'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 85'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 85'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 85'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 85'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 85'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 85'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 85'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 85'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 85'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 85'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 85'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 85'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 85'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 85'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 85'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 85'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 85'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 85'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 85'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 85'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 85'd549755813888;
parameter    ap_ST_fsm_pp0_stage40 = 85'd1099511627776;
parameter    ap_ST_fsm_pp0_stage41 = 85'd2199023255552;
parameter    ap_ST_fsm_pp0_stage42 = 85'd4398046511104;
parameter    ap_ST_fsm_pp0_stage43 = 85'd8796093022208;
parameter    ap_ST_fsm_pp0_stage44 = 85'd17592186044416;
parameter    ap_ST_fsm_pp0_stage45 = 85'd35184372088832;
parameter    ap_ST_fsm_pp0_stage46 = 85'd70368744177664;
parameter    ap_ST_fsm_pp0_stage47 = 85'd140737488355328;
parameter    ap_ST_fsm_pp0_stage48 = 85'd281474976710656;
parameter    ap_ST_fsm_pp0_stage49 = 85'd562949953421312;
parameter    ap_ST_fsm_pp0_stage50 = 85'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage51 = 85'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage52 = 85'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage53 = 85'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage54 = 85'd18014398509481984;
parameter    ap_ST_fsm_pp0_stage55 = 85'd36028797018963968;
parameter    ap_ST_fsm_pp0_stage56 = 85'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage57 = 85'd144115188075855872;
parameter    ap_ST_fsm_pp0_stage58 = 85'd288230376151711744;
parameter    ap_ST_fsm_pp0_stage59 = 85'd576460752303423488;
parameter    ap_ST_fsm_pp0_stage60 = 85'd1152921504606846976;
parameter    ap_ST_fsm_pp0_stage61 = 85'd2305843009213693952;
parameter    ap_ST_fsm_pp0_stage62 = 85'd4611686018427387904;
parameter    ap_ST_fsm_pp0_stage63 = 85'd9223372036854775808;
parameter    ap_ST_fsm_pp0_stage64 = 85'd18446744073709551616;
parameter    ap_ST_fsm_pp0_stage65 = 85'd36893488147419103232;
parameter    ap_ST_fsm_pp0_stage66 = 85'd73786976294838206464;
parameter    ap_ST_fsm_pp0_stage67 = 85'd147573952589676412928;
parameter    ap_ST_fsm_pp0_stage68 = 85'd295147905179352825856;
parameter    ap_ST_fsm_pp0_stage69 = 85'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage70 = 85'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage71 = 85'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage72 = 85'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage73 = 85'd9444732965739290427392;
parameter    ap_ST_fsm_pp0_stage74 = 85'd18889465931478580854784;
parameter    ap_ST_fsm_pp0_stage75 = 85'd37778931862957161709568;
parameter    ap_ST_fsm_pp0_stage76 = 85'd75557863725914323419136;
parameter    ap_ST_fsm_pp0_stage77 = 85'd151115727451828646838272;
parameter    ap_ST_fsm_pp0_stage78 = 85'd302231454903657293676544;
parameter    ap_ST_fsm_pp0_stage79 = 85'd604462909807314587353088;
parameter    ap_ST_fsm_pp0_stage80 = 85'd1208925819614629174706176;
parameter    ap_ST_fsm_pp0_stage81 = 85'd2417851639229258349412352;
parameter    ap_ST_fsm_pp0_stage82 = 85'd4835703278458516698824704;
parameter    ap_ST_fsm_pp0_stage83 = 85'd9671406556917033397649408;
parameter    ap_ST_fsm_pp0_stage84 = 85'd19342813113834066795298816;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_samples_address0;
output   input_samples_ce0;
input  [31:0] input_samples_q0;
output  [12:0] input_samples_address1;
output   input_samples_ce1;
input  [31:0] input_samples_q1;
output  [11:0] compressed_address0;
output   compressed_ce0;
output   compressed_we0;
output  [31:0] compressed_d0;
input  [30:0] rlt1_i;
output  [30:0] rlt1_o;
output   rlt1_o_ap_vld;
input  [15:0] al1_i;
output  [15:0] al1_o;
output   al1_o_ap_vld;
input  [30:0] rlt2_i;
output  [30:0] rlt2_o;
output   rlt2_o_ap_vld;
input  [14:0] al2_i;
output  [14:0] al2_o;
output   al2_o_ap_vld;
input  [14:0] detl_i;
output  [14:0] detl_o;
output   detl_o_ap_vld;
output  [5:0] il;
output   il_ap_vld;
input  [14:0] nbl_i;
output  [14:0] nbl_o;
output   nbl_o_ap_vld;
input  [31:0] plt1_i;
output  [31:0] plt1_o;
output   plt1_o_ap_vld;
input  [31:0] plt2_i;
output  [31:0] plt2_o;
output   plt2_o_ap_vld;
input  [30:0] rh1_i;
output  [30:0] rh1_o;
output   rh1_o_ap_vld;
input  [15:0] ah1_i;
output  [15:0] ah1_o;
output   ah1_o_ap_vld;
input  [30:0] rh2_i;
output  [30:0] rh2_o;
output   rh2_o_ap_vld;
input  [14:0] ah2_i;
output  [14:0] ah2_o;
output   ah2_o_ap_vld;
input  [14:0] deth_i;
output  [14:0] deth_o;
output   deth_o_ap_vld;
input  [14:0] nbh_i;
output  [14:0] nbh_o;
output   nbh_o_ap_vld;
input  [31:0] ph1_i;
output  [31:0] ph1_o;
output   ph1_o_ap_vld;
input  [31:0] ph2_i;
output  [31:0] ph2_o;
output   ph2_o_ap_vld;
output  [4:0] tqmf_address0;
output   tqmf_ce0;
output   tqmf_we0;
output  [31:0] tqmf_d0;
input  [31:0] tqmf_q0;
output  [4:0] tqmf_address1;
output   tqmf_ce1;
output   tqmf_we1;
output  [31:0] tqmf_d1;
input  [31:0] tqmf_q1;
output  [2:0] delay_bpl_address0;
output   delay_bpl_ce0;
output   delay_bpl_we0;
output  [31:0] delay_bpl_d0;
input  [31:0] delay_bpl_q0;
output  [2:0] delay_bpl_address1;
output   delay_bpl_ce1;
output   delay_bpl_we1;
output  [31:0] delay_bpl_d1;
input  [31:0] delay_bpl_q1;
output  [2:0] delay_dltx_address0;
output   delay_dltx_ce0;
output   delay_dltx_we0;
output  [15:0] delay_dltx_d0;
input  [15:0] delay_dltx_q0;
output  [2:0] delay_dltx_address1;
output   delay_dltx_ce1;
output   delay_dltx_we1;
output  [15:0] delay_dltx_d1;
input  [15:0] delay_dltx_q1;
output  [2:0] delay_bph_address0;
output   delay_bph_ce0;
output   delay_bph_we0;
output  [31:0] delay_bph_d0;
input  [31:0] delay_bph_q0;
output  [2:0] delay_bph_address1;
output   delay_bph_ce1;
output   delay_bph_we1;
output  [31:0] delay_bph_d1;
input  [31:0] delay_bph_q1;
output  [2:0] delay_dhx_address0;
output   delay_dhx_ce0;
output   delay_dhx_we0;
output  [13:0] delay_dhx_d0;
input  [13:0] delay_dhx_q0;
output  [2:0] delay_dhx_address1;
output   delay_dhx_ce1;
output   delay_dhx_we1;
output  [13:0] delay_dhx_d1;
input  [13:0] delay_dhx_q1;

reg ap_idle;
reg input_samples_ce0;
reg input_samples_ce1;
reg compressed_ce0;
reg compressed_we0;
reg[30:0] rlt1_o;
reg[15:0] al1_o;
reg[30:0] rlt2_o;
reg[14:0] al2_o;
reg[14:0] detl_o;
reg[14:0] nbl_o;
reg[31:0] plt1_o;
reg[31:0] plt2_o;
reg[30:0] rh1_o;
reg[15:0] ah1_o;
reg[30:0] rh2_o;
reg[14:0] ah2_o;
reg[14:0] deth_o;
reg[14:0] nbh_o;
reg[31:0] ph1_o;
reg[31:0] ph2_o;

(* fsm_encoding = "none" *) reg   [84:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14_subdone;
reg   [0:0] icmp_ln778_reg_269;
reg    ap_condition_exit_pp0_iter0_stage14;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage84;
wire    ap_block_pp0_stage84_subdone;
reg   [12:0] i_reg_263;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln778_fu_206_p2;
reg   [31:0] input_samples_load_reg_283;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] input_samples_load_1_reg_288;
reg   [11:0] tmp_s_reg_293;
wire    ap_block_pp0_stage84_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    grp_encode_fu_138_ap_start;
wire    grp_encode_fu_138_ap_done;
wire    grp_encode_fu_138_ap_idle;
wire    grp_encode_fu_138_ap_ready;
wire   [30:0] grp_encode_fu_138_rlt1_o;
wire    grp_encode_fu_138_rlt1_o_ap_vld;
wire   [15:0] grp_encode_fu_138_al1_o;
wire    grp_encode_fu_138_al1_o_ap_vld;
wire   [30:0] grp_encode_fu_138_rlt2_o;
wire    grp_encode_fu_138_rlt2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_al2_o;
wire    grp_encode_fu_138_al2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_detl_o;
wire    grp_encode_fu_138_detl_o_ap_vld;
wire   [5:0] grp_encode_fu_138_il;
wire    grp_encode_fu_138_il_ap_vld;
wire   [14:0] grp_encode_fu_138_nbl_o;
wire    grp_encode_fu_138_nbl_o_ap_vld;
wire   [31:0] grp_encode_fu_138_plt1_o;
wire    grp_encode_fu_138_plt1_o_ap_vld;
wire   [31:0] grp_encode_fu_138_plt2_o;
wire    grp_encode_fu_138_plt2_o_ap_vld;
wire   [30:0] grp_encode_fu_138_rh1_o;
wire    grp_encode_fu_138_rh1_o_ap_vld;
wire   [15:0] grp_encode_fu_138_ah1_o;
wire    grp_encode_fu_138_ah1_o_ap_vld;
wire   [30:0] grp_encode_fu_138_rh2_o;
wire    grp_encode_fu_138_rh2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_ah2_o;
wire    grp_encode_fu_138_ah2_o_ap_vld;
wire   [14:0] grp_encode_fu_138_deth_o;
wire    grp_encode_fu_138_deth_o_ap_vld;
wire   [14:0] grp_encode_fu_138_nbh_o;
wire    grp_encode_fu_138_nbh_o_ap_vld;
wire   [31:0] grp_encode_fu_138_ph1_o;
wire    grp_encode_fu_138_ph1_o_ap_vld;
wire   [31:0] grp_encode_fu_138_ph2_o;
wire    grp_encode_fu_138_ph2_o_ap_vld;
wire   [4:0] grp_encode_fu_138_tqmf_address0;
wire    grp_encode_fu_138_tqmf_ce0;
wire    grp_encode_fu_138_tqmf_we0;
wire   [31:0] grp_encode_fu_138_tqmf_d0;
wire   [4:0] grp_encode_fu_138_tqmf_address1;
wire    grp_encode_fu_138_tqmf_ce1;
wire    grp_encode_fu_138_tqmf_we1;
wire   [31:0] grp_encode_fu_138_tqmf_d1;
wire   [2:0] grp_encode_fu_138_delay_bpl_address0;
wire    grp_encode_fu_138_delay_bpl_ce0;
wire    grp_encode_fu_138_delay_bpl_we0;
wire   [31:0] grp_encode_fu_138_delay_bpl_d0;
wire   [2:0] grp_encode_fu_138_delay_bpl_address1;
wire    grp_encode_fu_138_delay_bpl_ce1;
wire    grp_encode_fu_138_delay_bpl_we1;
wire   [31:0] grp_encode_fu_138_delay_bpl_d1;
wire   [2:0] grp_encode_fu_138_delay_dltx_address0;
wire    grp_encode_fu_138_delay_dltx_ce0;
wire    grp_encode_fu_138_delay_dltx_we0;
wire   [15:0] grp_encode_fu_138_delay_dltx_d0;
wire   [2:0] grp_encode_fu_138_delay_dltx_address1;
wire    grp_encode_fu_138_delay_dltx_ce1;
wire    grp_encode_fu_138_delay_dltx_we1;
wire   [15:0] grp_encode_fu_138_delay_dltx_d1;
wire   [2:0] grp_encode_fu_138_delay_bph_address0;
wire    grp_encode_fu_138_delay_bph_ce0;
wire    grp_encode_fu_138_delay_bph_we0;
wire   [31:0] grp_encode_fu_138_delay_bph_d0;
wire   [2:0] grp_encode_fu_138_delay_bph_address1;
wire    grp_encode_fu_138_delay_bph_ce1;
wire    grp_encode_fu_138_delay_bph_we1;
wire   [31:0] grp_encode_fu_138_delay_bph_d1;
wire   [2:0] grp_encode_fu_138_delay_dhx_address0;
wire    grp_encode_fu_138_delay_dhx_ce0;
wire    grp_encode_fu_138_delay_dhx_we0;
wire   [13:0] grp_encode_fu_138_delay_dhx_d0;
wire   [2:0] grp_encode_fu_138_delay_dhx_address1;
wire    grp_encode_fu_138_delay_dhx_ce1;
wire    grp_encode_fu_138_delay_dhx_we1;
wire   [13:0] grp_encode_fu_138_delay_dhx_d1;
wire   [7:0] grp_encode_fu_138_ap_return;
reg    grp_encode_fu_138_ap_start_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage80;
wire    ap_block_pp0_stage81;
wire    ap_CS_fsm_pp0_stage83;
wire    ap_block_pp0_stage83;
wire    ap_block_pp0_stage84;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage26;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_pp0_stage27;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_pp0_stage39;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_pp0_stage36;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_pp0_stage28;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_pp0_stage25;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_pp0_stage18;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21;
wire    ap_CS_fsm_pp0_stage29;
wire    ap_block_pp0_stage29;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_pp0_stage30;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_pp0_stage32;
wire   [63:0] zext_ln778_fu_212_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln780_fu_223_p1;
wire   [63:0] zext_ln780_1_fu_252_p1;
reg   [12:0] i_4_fu_96;
wire   [12:0] add_ln778_fu_237_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage14_11001;
wire   [12:0] or_ln780_fu_217_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [84:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_pp0_stage48_subdone;
wire    ap_block_pp0_stage49_subdone;
wire    ap_block_pp0_stage50_subdone;
wire    ap_block_pp0_stage51_subdone;
wire    ap_block_pp0_stage52_subdone;
wire    ap_block_pp0_stage53_subdone;
wire    ap_block_pp0_stage54_subdone;
wire    ap_block_pp0_stage55_subdone;
wire    ap_block_pp0_stage56_subdone;
wire    ap_block_pp0_stage57_subdone;
wire    ap_block_pp0_stage58_subdone;
wire    ap_block_pp0_stage59_subdone;
wire    ap_block_pp0_stage60_subdone;
wire    ap_block_pp0_stage61_subdone;
wire    ap_block_pp0_stage62_subdone;
wire    ap_block_pp0_stage63_subdone;
wire    ap_block_pp0_stage64_subdone;
wire    ap_block_pp0_stage65_subdone;
wire    ap_block_pp0_stage66_subdone;
wire    ap_block_pp0_stage67_subdone;
wire    ap_block_pp0_stage68_subdone;
wire    ap_block_pp0_stage69_subdone;
wire    ap_block_pp0_stage70_subdone;
wire    ap_block_pp0_stage71_subdone;
wire    ap_block_pp0_stage72_subdone;
wire    ap_block_pp0_stage73_subdone;
wire    ap_block_pp0_stage74_subdone;
wire    ap_block_pp0_stage75_subdone;
wire    ap_block_pp0_stage76_subdone;
wire    ap_block_pp0_stage77_subdone;
wire    ap_block_pp0_stage78_subdone;
wire    ap_block_pp0_stage79_subdone;
wire    ap_block_pp0_stage80_subdone;
wire    ap_block_pp0_stage81_subdone;
wire    ap_block_pp0_stage82_subdone;
wire    ap_block_pp0_stage83_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 85'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_encode_fu_138_ap_start_reg = 1'b0;
#0 i_4_fu_96 = 13'd0;
#0 ap_done_reg = 1'b0;
end

adpcm_main_encode grp_encode_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_encode_fu_138_ap_start),
    .ap_done(grp_encode_fu_138_ap_done),
    .ap_idle(grp_encode_fu_138_ap_idle),
    .ap_ready(grp_encode_fu_138_ap_ready),
    .xin1(input_samples_load_reg_283),
    .xin2(input_samples_load_1_reg_288),
    .rlt1_i(rlt1_i),
    .rlt1_o(grp_encode_fu_138_rlt1_o),
    .rlt1_o_ap_vld(grp_encode_fu_138_rlt1_o_ap_vld),
    .al1_i(al1_i),
    .al1_o(grp_encode_fu_138_al1_o),
    .al1_o_ap_vld(grp_encode_fu_138_al1_o_ap_vld),
    .rlt2_i(rlt2_i),
    .rlt2_o(grp_encode_fu_138_rlt2_o),
    .rlt2_o_ap_vld(grp_encode_fu_138_rlt2_o_ap_vld),
    .al2_i(al2_i),
    .al2_o(grp_encode_fu_138_al2_o),
    .al2_o_ap_vld(grp_encode_fu_138_al2_o_ap_vld),
    .detl_i(detl_i),
    .detl_o(grp_encode_fu_138_detl_o),
    .detl_o_ap_vld(grp_encode_fu_138_detl_o_ap_vld),
    .il(grp_encode_fu_138_il),
    .il_ap_vld(grp_encode_fu_138_il_ap_vld),
    .nbl_i(nbl_i),
    .nbl_o(grp_encode_fu_138_nbl_o),
    .nbl_o_ap_vld(grp_encode_fu_138_nbl_o_ap_vld),
    .plt1_i(plt1_i),
    .plt1_o(grp_encode_fu_138_plt1_o),
    .plt1_o_ap_vld(grp_encode_fu_138_plt1_o_ap_vld),
    .plt2_i(plt2_i),
    .plt2_o(grp_encode_fu_138_plt2_o),
    .plt2_o_ap_vld(grp_encode_fu_138_plt2_o_ap_vld),
    .rh1_i(rh1_i),
    .rh1_o(grp_encode_fu_138_rh1_o),
    .rh1_o_ap_vld(grp_encode_fu_138_rh1_o_ap_vld),
    .ah1_i(ah1_i),
    .ah1_o(grp_encode_fu_138_ah1_o),
    .ah1_o_ap_vld(grp_encode_fu_138_ah1_o_ap_vld),
    .rh2_i(rh2_i),
    .rh2_o(grp_encode_fu_138_rh2_o),
    .rh2_o_ap_vld(grp_encode_fu_138_rh2_o_ap_vld),
    .ah2_i(ah2_i),
    .ah2_o(grp_encode_fu_138_ah2_o),
    .ah2_o_ap_vld(grp_encode_fu_138_ah2_o_ap_vld),
    .deth_i(deth_i),
    .deth_o(grp_encode_fu_138_deth_o),
    .deth_o_ap_vld(grp_encode_fu_138_deth_o_ap_vld),
    .nbh_i(nbh_i),
    .nbh_o(grp_encode_fu_138_nbh_o),
    .nbh_o_ap_vld(grp_encode_fu_138_nbh_o_ap_vld),
    .ph1_i(ph1_i),
    .ph1_o(grp_encode_fu_138_ph1_o),
    .ph1_o_ap_vld(grp_encode_fu_138_ph1_o_ap_vld),
    .ph2_i(ph2_i),
    .ph2_o(grp_encode_fu_138_ph2_o),
    .ph2_o_ap_vld(grp_encode_fu_138_ph2_o_ap_vld),
    .tqmf_address0(grp_encode_fu_138_tqmf_address0),
    .tqmf_ce0(grp_encode_fu_138_tqmf_ce0),
    .tqmf_we0(grp_encode_fu_138_tqmf_we0),
    .tqmf_d0(grp_encode_fu_138_tqmf_d0),
    .tqmf_q0(tqmf_q0),
    .tqmf_address1(grp_encode_fu_138_tqmf_address1),
    .tqmf_ce1(grp_encode_fu_138_tqmf_ce1),
    .tqmf_we1(grp_encode_fu_138_tqmf_we1),
    .tqmf_d1(grp_encode_fu_138_tqmf_d1),
    .tqmf_q1(tqmf_q1),
    .delay_bpl_address0(grp_encode_fu_138_delay_bpl_address0),
    .delay_bpl_ce0(grp_encode_fu_138_delay_bpl_ce0),
    .delay_bpl_we0(grp_encode_fu_138_delay_bpl_we0),
    .delay_bpl_d0(grp_encode_fu_138_delay_bpl_d0),
    .delay_bpl_q0(delay_bpl_q0),
    .delay_bpl_address1(grp_encode_fu_138_delay_bpl_address1),
    .delay_bpl_ce1(grp_encode_fu_138_delay_bpl_ce1),
    .delay_bpl_we1(grp_encode_fu_138_delay_bpl_we1),
    .delay_bpl_d1(grp_encode_fu_138_delay_bpl_d1),
    .delay_bpl_q1(delay_bpl_q1),
    .delay_dltx_address0(grp_encode_fu_138_delay_dltx_address0),
    .delay_dltx_ce0(grp_encode_fu_138_delay_dltx_ce0),
    .delay_dltx_we0(grp_encode_fu_138_delay_dltx_we0),
    .delay_dltx_d0(grp_encode_fu_138_delay_dltx_d0),
    .delay_dltx_q0(delay_dltx_q0),
    .delay_dltx_address1(grp_encode_fu_138_delay_dltx_address1),
    .delay_dltx_ce1(grp_encode_fu_138_delay_dltx_ce1),
    .delay_dltx_we1(grp_encode_fu_138_delay_dltx_we1),
    .delay_dltx_d1(grp_encode_fu_138_delay_dltx_d1),
    .delay_dltx_q1(delay_dltx_q1),
    .delay_bph_address0(grp_encode_fu_138_delay_bph_address0),
    .delay_bph_ce0(grp_encode_fu_138_delay_bph_ce0),
    .delay_bph_we0(grp_encode_fu_138_delay_bph_we0),
    .delay_bph_d0(grp_encode_fu_138_delay_bph_d0),
    .delay_bph_q0(delay_bph_q0),
    .delay_bph_address1(grp_encode_fu_138_delay_bph_address1),
    .delay_bph_ce1(grp_encode_fu_138_delay_bph_ce1),
    .delay_bph_we1(grp_encode_fu_138_delay_bph_we1),
    .delay_bph_d1(grp_encode_fu_138_delay_bph_d1),
    .delay_bph_q1(delay_bph_q1),
    .delay_dhx_address0(grp_encode_fu_138_delay_dhx_address0),
    .delay_dhx_ce0(grp_encode_fu_138_delay_dhx_ce0),
    .delay_dhx_we0(grp_encode_fu_138_delay_dhx_we0),
    .delay_dhx_d0(grp_encode_fu_138_delay_dhx_d0),
    .delay_dhx_q0(delay_dhx_q0),
    .delay_dhx_address1(grp_encode_fu_138_delay_dhx_address1),
    .delay_dhx_ce1(grp_encode_fu_138_delay_dhx_ce1),
    .delay_dhx_we1(grp_encode_fu_138_delay_dhx_we1),
    .delay_dhx_d1(grp_encode_fu_138_delay_dhx_d1),
    .delay_dhx_q1(delay_dhx_q1),
    .ap_return(grp_encode_fu_138_ap_return)
);

adpcm_main_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage14),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage14_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage14)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage84) & (1'b0 == ap_block_pp0_stage84_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_encode_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            grp_encode_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_encode_fu_138_ap_ready == 1'b1)) begin
            grp_encode_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_4_fu_96 <= 13'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage84) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage84_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_4_fu_96 <= add_ln778_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_263 <= ap_sig_allocacmp_i;
        icmp_ln778_reg_269 <= icmp_ln778_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_samples_load_1_reg_288 <= input_samples_q0;
        input_samples_load_reg_283 <= input_samples_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage84) & (1'b0 == ap_block_pp0_stage84_11001))) begin
        tmp_s_reg_293 <= {{i_reg_263[12:1]}};
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_ah1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage39) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ah1_o = grp_encode_fu_138_ah1_o;
    end else begin
        ah1_o = ah1_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_ah2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage36) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ah2_o = grp_encode_fu_138_ah2_o;
    end else begin
        ah2_o = ah2_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_al1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        al1_o = grp_encode_fu_138_al1_o;
    end else begin
        al1_o = al1_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_al2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        al2_o = grp_encode_fu_138_al2_o;
    end else begin
        al2_o = al2_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln778_reg_269 == 1'd0) & (1'b0 == ap_block_pp0_stage14_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage14 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage14_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage84) & (1'b0 == ap_block_pp0_stage84_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i = 13'd0;
    end else begin
        ap_sig_allocacmp_i = i_4_fu_96;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        compressed_ce0 = 1'b1;
    end else begin
        compressed_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        compressed_we0 = 1'b1;
    end else begin
        compressed_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_deth_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage28) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        deth_o = grp_encode_fu_138_deth_o;
    end else begin
        deth_o = deth_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_detl_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        detl_o = grp_encode_fu_138_detl_o;
    end else begin
        detl_o = detl_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_samples_ce0 = 1'b1;
    end else begin
        input_samples_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_samples_ce1 = 1'b1;
    end else begin
        input_samples_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_nbh_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage25) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        nbh_o = grp_encode_fu_138_nbh_o;
    end else begin
        nbh_o = nbh_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_nbl_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        nbl_o = grp_encode_fu_138_nbl_o;
    end else begin
        nbl_o = nbl_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_ph1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage28) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ph1_o = grp_encode_fu_138_ph1_o;
    end else begin
        ph1_o = ph1_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_ph2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage28) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ph2_o = grp_encode_fu_138_ph2_o;
    end else begin
        ph2_o = ph2_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_plt1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        plt1_o = grp_encode_fu_138_plt1_o;
    end else begin
        plt1_o = plt1_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_plt2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        plt2_o = grp_encode_fu_138_plt2_o;
    end else begin
        plt2_o = plt2_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_rh1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rh1_o = grp_encode_fu_138_rh1_o;
    end else begin
        rh1_o = rh1_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_rh2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rh2_o = grp_encode_fu_138_rh2_o;
    end else begin
        rh2_o = rh2_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_rlt1_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        rlt1_o = grp_encode_fu_138_rlt1_o;
    end else begin
        rlt1_o = rlt1_i;
    end
end

always @ (*) begin
    if (((grp_encode_fu_138_rlt2_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln778_reg_269 == 1'd1) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        rlt2_o = grp_encode_fu_138_rlt2_o;
    end else begin
        rlt2_o = rlt2_i;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start_int == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage14)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((1'b0 == ap_block_pp0_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((1'b0 == ap_block_pp0_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        ap_ST_fsm_pp0_stage52 : begin
            if ((1'b0 == ap_block_pp0_stage52_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end
        end
        ap_ST_fsm_pp0_stage53 : begin
            if ((1'b0 == ap_block_pp0_stage53_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end
        end
        ap_ST_fsm_pp0_stage54 : begin
            if ((1'b0 == ap_block_pp0_stage54_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end
        end
        ap_ST_fsm_pp0_stage55 : begin
            if ((1'b0 == ap_block_pp0_stage55_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end
        end
        ap_ST_fsm_pp0_stage56 : begin
            if ((1'b0 == ap_block_pp0_stage56_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end
        end
        ap_ST_fsm_pp0_stage57 : begin
            if ((1'b0 == ap_block_pp0_stage57_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end
        end
        ap_ST_fsm_pp0_stage58 : begin
            if ((1'b0 == ap_block_pp0_stage58_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end
        end
        ap_ST_fsm_pp0_stage59 : begin
            if ((1'b0 == ap_block_pp0_stage59_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end
        end
        ap_ST_fsm_pp0_stage60 : begin
            if ((1'b0 == ap_block_pp0_stage60_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end
        end
        ap_ST_fsm_pp0_stage61 : begin
            if ((1'b0 == ap_block_pp0_stage61_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end
        end
        ap_ST_fsm_pp0_stage62 : begin
            if ((1'b0 == ap_block_pp0_stage62_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end
        end
        ap_ST_fsm_pp0_stage63 : begin
            if ((1'b0 == ap_block_pp0_stage63_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end
        end
        ap_ST_fsm_pp0_stage64 : begin
            if ((1'b0 == ap_block_pp0_stage64_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end
        end
        ap_ST_fsm_pp0_stage65 : begin
            if ((1'b0 == ap_block_pp0_stage65_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end
        end
        ap_ST_fsm_pp0_stage66 : begin
            if ((1'b0 == ap_block_pp0_stage66_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end
        end
        ap_ST_fsm_pp0_stage67 : begin
            if ((1'b0 == ap_block_pp0_stage67_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end
        end
        ap_ST_fsm_pp0_stage68 : begin
            if ((1'b0 == ap_block_pp0_stage68_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end
        end
        ap_ST_fsm_pp0_stage69 : begin
            if ((1'b0 == ap_block_pp0_stage69_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end
        end
        ap_ST_fsm_pp0_stage70 : begin
            if ((1'b0 == ap_block_pp0_stage70_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end
        end
        ap_ST_fsm_pp0_stage71 : begin
            if ((1'b0 == ap_block_pp0_stage71_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end
        end
        ap_ST_fsm_pp0_stage72 : begin
            if ((1'b0 == ap_block_pp0_stage72_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end
        end
        ap_ST_fsm_pp0_stage73 : begin
            if ((1'b0 == ap_block_pp0_stage73_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end
        end
        ap_ST_fsm_pp0_stage74 : begin
            if ((1'b0 == ap_block_pp0_stage74_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end
        end
        ap_ST_fsm_pp0_stage75 : begin
            if ((1'b0 == ap_block_pp0_stage75_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage75;
            end
        end
        ap_ST_fsm_pp0_stage76 : begin
            if ((1'b0 == ap_block_pp0_stage76_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage76;
            end
        end
        ap_ST_fsm_pp0_stage77 : begin
            if ((1'b0 == ap_block_pp0_stage77_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage77;
            end
        end
        ap_ST_fsm_pp0_stage78 : begin
            if ((1'b0 == ap_block_pp0_stage78_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage79;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage78;
            end
        end
        ap_ST_fsm_pp0_stage79 : begin
            if ((1'b0 == ap_block_pp0_stage79_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage79;
            end
        end
        ap_ST_fsm_pp0_stage80 : begin
            if ((1'b0 == ap_block_pp0_stage80_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage80;
            end
        end
        ap_ST_fsm_pp0_stage81 : begin
            if ((1'b0 == ap_block_pp0_stage81_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage81;
            end
        end
        ap_ST_fsm_pp0_stage82 : begin
            if ((1'b0 == ap_block_pp0_stage82_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage82;
            end
        end
        ap_ST_fsm_pp0_stage83 : begin
            if ((1'b0 == ap_block_pp0_stage83_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage83;
            end
        end
        ap_ST_fsm_pp0_stage84 : begin
            if ((1'b0 == ap_block_pp0_stage84_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage84;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln778_fu_237_p2 = (i_reg_263 + 13'd2);

assign ah1_o_ap_vld = grp_encode_fu_138_ah1_o_ap_vld;

assign ah2_o_ap_vld = grp_encode_fu_138_ah2_o_ap_vld;

assign al1_o_ap_vld = grp_encode_fu_138_al1_o_ap_vld;

assign al2_o_ap_vld = grp_encode_fu_138_al2_o_ap_vld;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage83 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_pp0_stage84 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage77_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage78_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage79_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage80 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage80_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage81 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage81_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage82_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage83 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage83_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage84 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage84_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage84_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage14;

assign compressed_address0 = zext_ln780_1_fu_252_p1;

assign compressed_d0 = grp_encode_fu_138_ap_return;

assign delay_bph_address0 = grp_encode_fu_138_delay_bph_address0;

assign delay_bph_address1 = grp_encode_fu_138_delay_bph_address1;

assign delay_bph_ce0 = grp_encode_fu_138_delay_bph_ce0;

assign delay_bph_ce1 = grp_encode_fu_138_delay_bph_ce1;

assign delay_bph_d0 = grp_encode_fu_138_delay_bph_d0;

assign delay_bph_d1 = grp_encode_fu_138_delay_bph_d1;

assign delay_bph_we0 = grp_encode_fu_138_delay_bph_we0;

assign delay_bph_we1 = grp_encode_fu_138_delay_bph_we1;

assign delay_bpl_address0 = grp_encode_fu_138_delay_bpl_address0;

assign delay_bpl_address1 = grp_encode_fu_138_delay_bpl_address1;

assign delay_bpl_ce0 = grp_encode_fu_138_delay_bpl_ce0;

assign delay_bpl_ce1 = grp_encode_fu_138_delay_bpl_ce1;

assign delay_bpl_d0 = grp_encode_fu_138_delay_bpl_d0;

assign delay_bpl_d1 = grp_encode_fu_138_delay_bpl_d1;

assign delay_bpl_we0 = grp_encode_fu_138_delay_bpl_we0;

assign delay_bpl_we1 = grp_encode_fu_138_delay_bpl_we1;

assign delay_dhx_address0 = grp_encode_fu_138_delay_dhx_address0;

assign delay_dhx_address1 = grp_encode_fu_138_delay_dhx_address1;

assign delay_dhx_ce0 = grp_encode_fu_138_delay_dhx_ce0;

assign delay_dhx_ce1 = grp_encode_fu_138_delay_dhx_ce1;

assign delay_dhx_d0 = grp_encode_fu_138_delay_dhx_d0;

assign delay_dhx_d1 = grp_encode_fu_138_delay_dhx_d1;

assign delay_dhx_we0 = grp_encode_fu_138_delay_dhx_we0;

assign delay_dhx_we1 = grp_encode_fu_138_delay_dhx_we1;

assign delay_dltx_address0 = grp_encode_fu_138_delay_dltx_address0;

assign delay_dltx_address1 = grp_encode_fu_138_delay_dltx_address1;

assign delay_dltx_ce0 = grp_encode_fu_138_delay_dltx_ce0;

assign delay_dltx_ce1 = grp_encode_fu_138_delay_dltx_ce1;

assign delay_dltx_d0 = grp_encode_fu_138_delay_dltx_d0;

assign delay_dltx_d1 = grp_encode_fu_138_delay_dltx_d1;

assign delay_dltx_we0 = grp_encode_fu_138_delay_dltx_we0;

assign delay_dltx_we1 = grp_encode_fu_138_delay_dltx_we1;

assign deth_o_ap_vld = grp_encode_fu_138_deth_o_ap_vld;

assign detl_o_ap_vld = grp_encode_fu_138_detl_o_ap_vld;

assign grp_encode_fu_138_ap_start = grp_encode_fu_138_ap_start_reg;

assign icmp_ln778_fu_206_p2 = ((ap_sig_allocacmp_i < 13'd8000) ? 1'b1 : 1'b0);

assign il = grp_encode_fu_138_il;

assign il_ap_vld = grp_encode_fu_138_il_ap_vld;

assign input_samples_address0 = zext_ln780_fu_223_p1;

assign input_samples_address1 = zext_ln778_fu_212_p1;

assign nbh_o_ap_vld = grp_encode_fu_138_nbh_o_ap_vld;

assign nbl_o_ap_vld = grp_encode_fu_138_nbl_o_ap_vld;

assign or_ln780_fu_217_p2 = (ap_sig_allocacmp_i | 13'd1);

assign ph1_o_ap_vld = grp_encode_fu_138_ph1_o_ap_vld;

assign ph2_o_ap_vld = grp_encode_fu_138_ph2_o_ap_vld;

assign plt1_o_ap_vld = grp_encode_fu_138_plt1_o_ap_vld;

assign plt2_o_ap_vld = grp_encode_fu_138_plt2_o_ap_vld;

assign rh1_o_ap_vld = grp_encode_fu_138_rh1_o_ap_vld;

assign rh2_o_ap_vld = grp_encode_fu_138_rh2_o_ap_vld;

assign rlt1_o_ap_vld = grp_encode_fu_138_rlt1_o_ap_vld;

assign rlt2_o_ap_vld = grp_encode_fu_138_rlt2_o_ap_vld;

assign tqmf_address0 = grp_encode_fu_138_tqmf_address0;

assign tqmf_address1 = grp_encode_fu_138_tqmf_address1;

assign tqmf_ce0 = grp_encode_fu_138_tqmf_ce0;

assign tqmf_ce1 = grp_encode_fu_138_tqmf_ce1;

assign tqmf_d0 = grp_encode_fu_138_tqmf_d0;

assign tqmf_d1 = grp_encode_fu_138_tqmf_d1;

assign tqmf_we0 = grp_encode_fu_138_tqmf_we0;

assign tqmf_we1 = grp_encode_fu_138_tqmf_we1;

assign zext_ln778_fu_212_p1 = ap_sig_allocacmp_i;

assign zext_ln780_1_fu_252_p1 = tmp_s_reg_293;

assign zext_ln780_fu_223_p1 = or_ln780_fu_217_p2;

endmodule //adpcm_main_adpcm_main_Pipeline_adpcm_main_label12
