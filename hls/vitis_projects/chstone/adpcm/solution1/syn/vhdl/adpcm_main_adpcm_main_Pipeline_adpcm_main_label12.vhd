-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity adpcm_main_adpcm_main_Pipeline_adpcm_main_label12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_samples_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_samples_ce0 : OUT STD_LOGIC;
    input_samples_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_samples_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_samples_ce1 : OUT STD_LOGIC;
    input_samples_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    compressed_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    compressed_ce0 : OUT STD_LOGIC;
    compressed_we0 : OUT STD_LOGIC;
    compressed_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rlt1_o_ap_vld : OUT STD_LOGIC;
    al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    al1_o_ap_vld : OUT STD_LOGIC;
    rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rlt2_o_ap_vld : OUT STD_LOGIC;
    al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    al2_o_ap_vld : OUT STD_LOGIC;
    detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    detl_o_ap_vld : OUT STD_LOGIC;
    il : OUT STD_LOGIC_VECTOR (5 downto 0);
    il_ap_vld : OUT STD_LOGIC;
    nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
    nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    nbl_o_ap_vld : OUT STD_LOGIC;
    plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt1_o_ap_vld : OUT STD_LOGIC;
    plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    plt2_o_ap_vld : OUT STD_LOGIC;
    rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rh1_o_ap_vld : OUT STD_LOGIC;
    ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    ah1_o_ap_vld : OUT STD_LOGIC;
    rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
    rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
    rh2_o_ap_vld : OUT STD_LOGIC;
    ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
    ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    ah2_o_ap_vld : OUT STD_LOGIC;
    deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
    deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    deth_o_ap_vld : OUT STD_LOGIC;
    nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
    nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
    nbh_o_ap_vld : OUT STD_LOGIC;
    ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph1_o_ap_vld : OUT STD_LOGIC;
    ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
    ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    ph2_o_ap_vld : OUT STD_LOGIC;
    tqmf_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce0 : OUT STD_LOGIC;
    tqmf_we0 : OUT STD_LOGIC;
    tqmf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    tqmf_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    tqmf_ce1 : OUT STD_LOGIC;
    tqmf_we1 : OUT STD_LOGIC;
    tqmf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    tqmf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bpl_ce0 : OUT STD_LOGIC;
    delay_bpl_we0 : OUT STD_LOGIC;
    delay_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bpl_ce1 : OUT STD_LOGIC;
    delay_bpl_we1 : OUT STD_LOGIC;
    delay_bpl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bpl_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce0 : OUT STD_LOGIC;
    delay_dltx_we0 : OUT STD_LOGIC;
    delay_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dltx_ce1 : OUT STD_LOGIC;
    delay_dltx_we1 : OUT STD_LOGIC;
    delay_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    delay_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    delay_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bph_ce0 : OUT STD_LOGIC;
    delay_bph_we0 : OUT STD_LOGIC;
    delay_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_bph_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_bph_ce1 : OUT STD_LOGIC;
    delay_bph_we1 : OUT STD_LOGIC;
    delay_bph_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    delay_bph_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    delay_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce0 : OUT STD_LOGIC;
    delay_dhx_we0 : OUT STD_LOGIC;
    delay_dhx_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    delay_dhx_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    delay_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    delay_dhx_ce1 : OUT STD_LOGIC;
    delay_dhx_we1 : OUT STD_LOGIC;
    delay_dhx_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    delay_dhx_q1 : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of adpcm_main_adpcm_main_Pipeline_adpcm_main_label12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage37 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage38 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage39 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage40 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage41 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage42 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage43 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage44 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage45 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage46 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage47 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage48 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage49 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage50 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage51 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage52 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage53 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage54 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage55 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage56 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage57 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage58 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage59 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage60 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage61 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage62 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage63 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage64 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage65 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage66 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage67 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage68 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage69 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage70 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage71 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage72 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage73 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage74 : STD_LOGIC_VECTOR (84 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage75 : STD_LOGIC_VECTOR (84 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage76 : STD_LOGIC_VECTOR (84 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage77 : STD_LOGIC_VECTOR (84 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage78 : STD_LOGIC_VECTOR (84 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage79 : STD_LOGIC_VECTOR (84 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage80 : STD_LOGIC_VECTOR (84 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage81 : STD_LOGIC_VECTOR (84 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage82 : STD_LOGIC_VECTOR (84 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage83 : STD_LOGIC_VECTOR (84 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage84 : STD_LOGIC_VECTOR (84 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1F40 : STD_LOGIC_VECTOR (12 downto 0) := "1111101000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (84 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal icmp_ln778_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage14 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage84 : signal is "none";
    signal ap_block_pp0_stage84_subdone : BOOLEAN;
    signal i_reg_263 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln778_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_samples_load_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal input_samples_load_1_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_293 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage84_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_encode_fu_138_ap_start : STD_LOGIC;
    signal grp_encode_fu_138_ap_done : STD_LOGIC;
    signal grp_encode_fu_138_ap_idle : STD_LOGIC;
    signal grp_encode_fu_138_ap_ready : STD_LOGIC;
    signal grp_encode_fu_138_rlt1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_138_rlt1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_al1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_138_al1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_rlt2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_138_rlt2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_al2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_138_al2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_detl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_138_detl_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_il : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_encode_fu_138_il_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_nbl_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_138_nbl_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_plt1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_plt1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_plt2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_plt2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_rh1_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_138_rh1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_ah1_o : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_138_ah1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_rh2_o : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_encode_fu_138_rh2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_ah2_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_138_ah2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_deth_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_138_deth_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_nbh_o : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_encode_fu_138_nbh_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_ph1_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_ph1_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_ph2_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_ph2_o_ap_vld : STD_LOGIC;
    signal grp_encode_fu_138_tqmf_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_138_tqmf_ce0 : STD_LOGIC;
    signal grp_encode_fu_138_tqmf_we0 : STD_LOGIC;
    signal grp_encode_fu_138_tqmf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_tqmf_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_encode_fu_138_tqmf_ce1 : STD_LOGIC;
    signal grp_encode_fu_138_tqmf_we1 : STD_LOGIC;
    signal grp_encode_fu_138_tqmf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_delay_bpl_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_bpl_ce0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bpl_we0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bpl_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_delay_bpl_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_bpl_ce1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bpl_we1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bpl_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_delay_dltx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_dltx_ce0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dltx_we0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dltx_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_138_delay_dltx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_dltx_ce1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dltx_we1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dltx_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_138_delay_bph_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_bph_ce0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bph_we0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bph_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_delay_bph_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_bph_ce1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bph_we1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_bph_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encode_fu_138_delay_dhx_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_dhx_ce0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dhx_we0 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dhx_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_encode_fu_138_delay_dhx_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encode_fu_138_delay_dhx_ce1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dhx_we1 : STD_LOGIC;
    signal grp_encode_fu_138_delay_dhx_d1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_encode_fu_138_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_encode_fu_138_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage80 : BOOLEAN;
    signal ap_block_pp0_stage81 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage83 : signal is "none";
    signal ap_block_pp0_stage83 : BOOLEAN;
    signal ap_block_pp0_stage84 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage26 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage27 : signal is "none";
    signal ap_block_pp0_stage27 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage39 : signal is "none";
    signal ap_block_pp0_stage39 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage36 : signal is "none";
    signal ap_block_pp0_stage36 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage28 : signal is "none";
    signal ap_block_pp0_stage28 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage25 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage29 : signal is "none";
    signal ap_block_pp0_stage29 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage30 : signal is "none";
    signal ap_block_pp0_stage30 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_block_pp0_stage31 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage32 : signal is "none";
    signal ap_block_pp0_stage32 : BOOLEAN;
    signal zext_ln778_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln780_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln780_1_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_96 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln778_fu_237_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal or_ln780_fu_217_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (84 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_block_pp0_stage37_subdone : BOOLEAN;
    signal ap_block_pp0_stage38_subdone : BOOLEAN;
    signal ap_block_pp0_stage39_subdone : BOOLEAN;
    signal ap_block_pp0_stage40_subdone : BOOLEAN;
    signal ap_block_pp0_stage41_subdone : BOOLEAN;
    signal ap_block_pp0_stage42_subdone : BOOLEAN;
    signal ap_block_pp0_stage43_subdone : BOOLEAN;
    signal ap_block_pp0_stage44_subdone : BOOLEAN;
    signal ap_block_pp0_stage45_subdone : BOOLEAN;
    signal ap_block_pp0_stage46_subdone : BOOLEAN;
    signal ap_block_pp0_stage47_subdone : BOOLEAN;
    signal ap_block_pp0_stage48_subdone : BOOLEAN;
    signal ap_block_pp0_stage49_subdone : BOOLEAN;
    signal ap_block_pp0_stage50_subdone : BOOLEAN;
    signal ap_block_pp0_stage51_subdone : BOOLEAN;
    signal ap_block_pp0_stage52_subdone : BOOLEAN;
    signal ap_block_pp0_stage53_subdone : BOOLEAN;
    signal ap_block_pp0_stage54_subdone : BOOLEAN;
    signal ap_block_pp0_stage55_subdone : BOOLEAN;
    signal ap_block_pp0_stage56_subdone : BOOLEAN;
    signal ap_block_pp0_stage57_subdone : BOOLEAN;
    signal ap_block_pp0_stage58_subdone : BOOLEAN;
    signal ap_block_pp0_stage59_subdone : BOOLEAN;
    signal ap_block_pp0_stage60_subdone : BOOLEAN;
    signal ap_block_pp0_stage61_subdone : BOOLEAN;
    signal ap_block_pp0_stage62_subdone : BOOLEAN;
    signal ap_block_pp0_stage63_subdone : BOOLEAN;
    signal ap_block_pp0_stage64_subdone : BOOLEAN;
    signal ap_block_pp0_stage65_subdone : BOOLEAN;
    signal ap_block_pp0_stage66_subdone : BOOLEAN;
    signal ap_block_pp0_stage67_subdone : BOOLEAN;
    signal ap_block_pp0_stage68_subdone : BOOLEAN;
    signal ap_block_pp0_stage69_subdone : BOOLEAN;
    signal ap_block_pp0_stage70_subdone : BOOLEAN;
    signal ap_block_pp0_stage71_subdone : BOOLEAN;
    signal ap_block_pp0_stage72_subdone : BOOLEAN;
    signal ap_block_pp0_stage73_subdone : BOOLEAN;
    signal ap_block_pp0_stage74_subdone : BOOLEAN;
    signal ap_block_pp0_stage75_subdone : BOOLEAN;
    signal ap_block_pp0_stage76_subdone : BOOLEAN;
    signal ap_block_pp0_stage77_subdone : BOOLEAN;
    signal ap_block_pp0_stage78_subdone : BOOLEAN;
    signal ap_block_pp0_stage79_subdone : BOOLEAN;
    signal ap_block_pp0_stage80_subdone : BOOLEAN;
    signal ap_block_pp0_stage81_subdone : BOOLEAN;
    signal ap_block_pp0_stage82_subdone : BOOLEAN;
    signal ap_block_pp0_stage83_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component adpcm_main_encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xin1 : IN STD_LOGIC_VECTOR (31 downto 0);
        xin2 : IN STD_LOGIC_VECTOR (31 downto 0);
        rlt1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rlt1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rlt1_o_ap_vld : OUT STD_LOGIC;
        al1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        al1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        al1_o_ap_vld : OUT STD_LOGIC;
        rlt2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rlt2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rlt2_o_ap_vld : OUT STD_LOGIC;
        al2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        al2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        al2_o_ap_vld : OUT STD_LOGIC;
        detl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        detl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        detl_o_ap_vld : OUT STD_LOGIC;
        il : OUT STD_LOGIC_VECTOR (5 downto 0);
        il_ap_vld : OUT STD_LOGIC;
        nbl_i : IN STD_LOGIC_VECTOR (14 downto 0);
        nbl_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        nbl_o_ap_vld : OUT STD_LOGIC;
        plt1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        plt1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        plt1_o_ap_vld : OUT STD_LOGIC;
        plt2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        plt2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        plt2_o_ap_vld : OUT STD_LOGIC;
        rh1_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rh1_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rh1_o_ap_vld : OUT STD_LOGIC;
        ah1_i : IN STD_LOGIC_VECTOR (15 downto 0);
        ah1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
        ah1_o_ap_vld : OUT STD_LOGIC;
        rh2_i : IN STD_LOGIC_VECTOR (30 downto 0);
        rh2_o : OUT STD_LOGIC_VECTOR (30 downto 0);
        rh2_o_ap_vld : OUT STD_LOGIC;
        ah2_i : IN STD_LOGIC_VECTOR (14 downto 0);
        ah2_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        ah2_o_ap_vld : OUT STD_LOGIC;
        deth_i : IN STD_LOGIC_VECTOR (14 downto 0);
        deth_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        deth_o_ap_vld : OUT STD_LOGIC;
        nbh_i : IN STD_LOGIC_VECTOR (14 downto 0);
        nbh_o : OUT STD_LOGIC_VECTOR (14 downto 0);
        nbh_o_ap_vld : OUT STD_LOGIC;
        ph1_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ph1_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ph1_o_ap_vld : OUT STD_LOGIC;
        ph2_i : IN STD_LOGIC_VECTOR (31 downto 0);
        ph2_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        ph2_o_ap_vld : OUT STD_LOGIC;
        tqmf_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tqmf_ce0 : OUT STD_LOGIC;
        tqmf_we0 : OUT STD_LOGIC;
        tqmf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tqmf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        tqmf_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        tqmf_ce1 : OUT STD_LOGIC;
        tqmf_we1 : OUT STD_LOGIC;
        tqmf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        tqmf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_bpl_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bpl_ce0 : OUT STD_LOGIC;
        delay_bpl_we0 : OUT STD_LOGIC;
        delay_bpl_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bpl_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_bpl_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bpl_ce1 : OUT STD_LOGIC;
        delay_bpl_we1 : OUT STD_LOGIC;
        delay_bpl_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bpl_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_dltx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dltx_ce0 : OUT STD_LOGIC;
        delay_dltx_we0 : OUT STD_LOGIC;
        delay_dltx_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dltx_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        delay_dltx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dltx_ce1 : OUT STD_LOGIC;
        delay_dltx_we1 : OUT STD_LOGIC;
        delay_dltx_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        delay_dltx_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        delay_bph_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bph_ce0 : OUT STD_LOGIC;
        delay_bph_we0 : OUT STD_LOGIC;
        delay_bph_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bph_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_bph_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_bph_ce1 : OUT STD_LOGIC;
        delay_bph_we1 : OUT STD_LOGIC;
        delay_bph_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        delay_bph_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        delay_dhx_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dhx_ce0 : OUT STD_LOGIC;
        delay_dhx_we0 : OUT STD_LOGIC;
        delay_dhx_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        delay_dhx_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        delay_dhx_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        delay_dhx_ce1 : OUT STD_LOGIC;
        delay_dhx_we1 : OUT STD_LOGIC;
        delay_dhx_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        delay_dhx_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component adpcm_main_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_encode_fu_138 : component adpcm_main_encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_encode_fu_138_ap_start,
        ap_done => grp_encode_fu_138_ap_done,
        ap_idle => grp_encode_fu_138_ap_idle,
        ap_ready => grp_encode_fu_138_ap_ready,
        xin1 => input_samples_load_reg_283,
        xin2 => input_samples_load_1_reg_288,
        rlt1_i => rlt1_i,
        rlt1_o => grp_encode_fu_138_rlt1_o,
        rlt1_o_ap_vld => grp_encode_fu_138_rlt1_o_ap_vld,
        al1_i => al1_i,
        al1_o => grp_encode_fu_138_al1_o,
        al1_o_ap_vld => grp_encode_fu_138_al1_o_ap_vld,
        rlt2_i => rlt2_i,
        rlt2_o => grp_encode_fu_138_rlt2_o,
        rlt2_o_ap_vld => grp_encode_fu_138_rlt2_o_ap_vld,
        al2_i => al2_i,
        al2_o => grp_encode_fu_138_al2_o,
        al2_o_ap_vld => grp_encode_fu_138_al2_o_ap_vld,
        detl_i => detl_i,
        detl_o => grp_encode_fu_138_detl_o,
        detl_o_ap_vld => grp_encode_fu_138_detl_o_ap_vld,
        il => grp_encode_fu_138_il,
        il_ap_vld => grp_encode_fu_138_il_ap_vld,
        nbl_i => nbl_i,
        nbl_o => grp_encode_fu_138_nbl_o,
        nbl_o_ap_vld => grp_encode_fu_138_nbl_o_ap_vld,
        plt1_i => plt1_i,
        plt1_o => grp_encode_fu_138_plt1_o,
        plt1_o_ap_vld => grp_encode_fu_138_plt1_o_ap_vld,
        plt2_i => plt2_i,
        plt2_o => grp_encode_fu_138_plt2_o,
        plt2_o_ap_vld => grp_encode_fu_138_plt2_o_ap_vld,
        rh1_i => rh1_i,
        rh1_o => grp_encode_fu_138_rh1_o,
        rh1_o_ap_vld => grp_encode_fu_138_rh1_o_ap_vld,
        ah1_i => ah1_i,
        ah1_o => grp_encode_fu_138_ah1_o,
        ah1_o_ap_vld => grp_encode_fu_138_ah1_o_ap_vld,
        rh2_i => rh2_i,
        rh2_o => grp_encode_fu_138_rh2_o,
        rh2_o_ap_vld => grp_encode_fu_138_rh2_o_ap_vld,
        ah2_i => ah2_i,
        ah2_o => grp_encode_fu_138_ah2_o,
        ah2_o_ap_vld => grp_encode_fu_138_ah2_o_ap_vld,
        deth_i => deth_i,
        deth_o => grp_encode_fu_138_deth_o,
        deth_o_ap_vld => grp_encode_fu_138_deth_o_ap_vld,
        nbh_i => nbh_i,
        nbh_o => grp_encode_fu_138_nbh_o,
        nbh_o_ap_vld => grp_encode_fu_138_nbh_o_ap_vld,
        ph1_i => ph1_i,
        ph1_o => grp_encode_fu_138_ph1_o,
        ph1_o_ap_vld => grp_encode_fu_138_ph1_o_ap_vld,
        ph2_i => ph2_i,
        ph2_o => grp_encode_fu_138_ph2_o,
        ph2_o_ap_vld => grp_encode_fu_138_ph2_o_ap_vld,
        tqmf_address0 => grp_encode_fu_138_tqmf_address0,
        tqmf_ce0 => grp_encode_fu_138_tqmf_ce0,
        tqmf_we0 => grp_encode_fu_138_tqmf_we0,
        tqmf_d0 => grp_encode_fu_138_tqmf_d0,
        tqmf_q0 => tqmf_q0,
        tqmf_address1 => grp_encode_fu_138_tqmf_address1,
        tqmf_ce1 => grp_encode_fu_138_tqmf_ce1,
        tqmf_we1 => grp_encode_fu_138_tqmf_we1,
        tqmf_d1 => grp_encode_fu_138_tqmf_d1,
        tqmf_q1 => tqmf_q1,
        delay_bpl_address0 => grp_encode_fu_138_delay_bpl_address0,
        delay_bpl_ce0 => grp_encode_fu_138_delay_bpl_ce0,
        delay_bpl_we0 => grp_encode_fu_138_delay_bpl_we0,
        delay_bpl_d0 => grp_encode_fu_138_delay_bpl_d0,
        delay_bpl_q0 => delay_bpl_q0,
        delay_bpl_address1 => grp_encode_fu_138_delay_bpl_address1,
        delay_bpl_ce1 => grp_encode_fu_138_delay_bpl_ce1,
        delay_bpl_we1 => grp_encode_fu_138_delay_bpl_we1,
        delay_bpl_d1 => grp_encode_fu_138_delay_bpl_d1,
        delay_bpl_q1 => delay_bpl_q1,
        delay_dltx_address0 => grp_encode_fu_138_delay_dltx_address0,
        delay_dltx_ce0 => grp_encode_fu_138_delay_dltx_ce0,
        delay_dltx_we0 => grp_encode_fu_138_delay_dltx_we0,
        delay_dltx_d0 => grp_encode_fu_138_delay_dltx_d0,
        delay_dltx_q0 => delay_dltx_q0,
        delay_dltx_address1 => grp_encode_fu_138_delay_dltx_address1,
        delay_dltx_ce1 => grp_encode_fu_138_delay_dltx_ce1,
        delay_dltx_we1 => grp_encode_fu_138_delay_dltx_we1,
        delay_dltx_d1 => grp_encode_fu_138_delay_dltx_d1,
        delay_dltx_q1 => delay_dltx_q1,
        delay_bph_address0 => grp_encode_fu_138_delay_bph_address0,
        delay_bph_ce0 => grp_encode_fu_138_delay_bph_ce0,
        delay_bph_we0 => grp_encode_fu_138_delay_bph_we0,
        delay_bph_d0 => grp_encode_fu_138_delay_bph_d0,
        delay_bph_q0 => delay_bph_q0,
        delay_bph_address1 => grp_encode_fu_138_delay_bph_address1,
        delay_bph_ce1 => grp_encode_fu_138_delay_bph_ce1,
        delay_bph_we1 => grp_encode_fu_138_delay_bph_we1,
        delay_bph_d1 => grp_encode_fu_138_delay_bph_d1,
        delay_bph_q1 => delay_bph_q1,
        delay_dhx_address0 => grp_encode_fu_138_delay_dhx_address0,
        delay_dhx_ce0 => grp_encode_fu_138_delay_dhx_ce0,
        delay_dhx_we0 => grp_encode_fu_138_delay_dhx_we0,
        delay_dhx_d0 => grp_encode_fu_138_delay_dhx_d0,
        delay_dhx_q0 => delay_dhx_q0,
        delay_dhx_address1 => grp_encode_fu_138_delay_dhx_address1,
        delay_dhx_ce1 => grp_encode_fu_138_delay_dhx_ce1,
        delay_dhx_we1 => grp_encode_fu_138_delay_dhx_we1,
        delay_dhx_d1 => grp_encode_fu_138_delay_dhx_d1,
        delay_dhx_q1 => delay_dhx_q1,
        ap_return => grp_encode_fu_138_ap_return);

    flow_control_loop_pipe_sequential_init_U : component adpcm_main_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage14,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage14)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage84) and (ap_const_boolean_0 = ap_block_pp0_stage84_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_encode_fu_138_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_encode_fu_138_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    grp_encode_fu_138_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encode_fu_138_ap_ready = ap_const_logic_1)) then 
                    grp_encode_fu_138_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_4_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_4_fu_96 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage84) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage84_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_4_fu_96 <= add_ln778_fu_237_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_263 <= ap_sig_allocacmp_i;
                icmp_ln778_reg_269 <= icmp_ln778_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                input_samples_load_1_reg_288 <= input_samples_q0;
                input_samples_load_reg_283 <= input_samples_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage84) and (ap_const_boolean_0 = ap_block_pp0_stage84_11001))) then
                tmp_s_reg_293 <= i_reg_263(12 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage14_subdone, ap_condition_exit_pp0_iter0_stage14, ap_block_pp0_stage84_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone, ap_block_pp0_stage36_subdone, ap_block_pp0_stage37_subdone, ap_block_pp0_stage38_subdone, ap_block_pp0_stage39_subdone, ap_block_pp0_stage40_subdone, ap_block_pp0_stage41_subdone, ap_block_pp0_stage42_subdone, ap_block_pp0_stage43_subdone, ap_block_pp0_stage44_subdone, ap_block_pp0_stage45_subdone, ap_block_pp0_stage46_subdone, ap_block_pp0_stage47_subdone, ap_block_pp0_stage48_subdone, ap_block_pp0_stage49_subdone, ap_block_pp0_stage50_subdone, ap_block_pp0_stage51_subdone, ap_block_pp0_stage52_subdone, ap_block_pp0_stage53_subdone, ap_block_pp0_stage54_subdone, ap_block_pp0_stage55_subdone, ap_block_pp0_stage56_subdone, ap_block_pp0_stage57_subdone, ap_block_pp0_stage58_subdone, ap_block_pp0_stage59_subdone, ap_block_pp0_stage60_subdone, ap_block_pp0_stage61_subdone, ap_block_pp0_stage62_subdone, ap_block_pp0_stage63_subdone, ap_block_pp0_stage64_subdone, ap_block_pp0_stage65_subdone, ap_block_pp0_stage66_subdone, ap_block_pp0_stage67_subdone, ap_block_pp0_stage68_subdone, ap_block_pp0_stage69_subdone, ap_block_pp0_stage70_subdone, ap_block_pp0_stage71_subdone, ap_block_pp0_stage72_subdone, ap_block_pp0_stage73_subdone, ap_block_pp0_stage74_subdone, ap_block_pp0_stage75_subdone, ap_block_pp0_stage76_subdone, ap_block_pp0_stage77_subdone, ap_block_pp0_stage78_subdone, ap_block_pp0_stage79_subdone, ap_block_pp0_stage80_subdone, ap_block_pp0_stage81_subdone, ap_block_pp0_stage82_subdone, ap_block_pp0_stage83_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to1 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage14)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage37 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage37_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                end if;
            when ap_ST_fsm_pp0_stage38 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage38_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                end if;
            when ap_ST_fsm_pp0_stage39 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage39_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage40;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                end if;
            when ap_ST_fsm_pp0_stage40 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage40_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage40;
                end if;
            when ap_ST_fsm_pp0_stage41 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage41_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage41;
                end if;
            when ap_ST_fsm_pp0_stage42 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage42_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage42;
                end if;
            when ap_ST_fsm_pp0_stage43 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage43_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage44;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage43;
                end if;
            when ap_ST_fsm_pp0_stage44 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage44_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage44;
                end if;
            when ap_ST_fsm_pp0_stage45 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage45_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage45;
                end if;
            when ap_ST_fsm_pp0_stage46 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage46_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage46;
                end if;
            when ap_ST_fsm_pp0_stage47 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage47_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage48;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage47;
                end if;
            when ap_ST_fsm_pp0_stage48 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage48_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage49;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage48;
                end if;
            when ap_ST_fsm_pp0_stage49 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage49_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage49;
                end if;
            when ap_ST_fsm_pp0_stage50 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage50_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage51;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage50;
                end if;
            when ap_ST_fsm_pp0_stage51 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage51_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage51;
                end if;
            when ap_ST_fsm_pp0_stage52 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage52_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage52;
                end if;
            when ap_ST_fsm_pp0_stage53 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage53_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage54;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage53;
                end if;
            when ap_ST_fsm_pp0_stage54 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage54_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage54;
                end if;
            when ap_ST_fsm_pp0_stage55 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage55_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage56;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage55;
                end if;
            when ap_ST_fsm_pp0_stage56 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage56_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage57;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage56;
                end if;
            when ap_ST_fsm_pp0_stage57 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage57_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage58;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage57;
                end if;
            when ap_ST_fsm_pp0_stage58 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage58_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage59;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage58;
                end if;
            when ap_ST_fsm_pp0_stage59 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage59_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage59;
                end if;
            when ap_ST_fsm_pp0_stage60 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage60_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage60;
                end if;
            when ap_ST_fsm_pp0_stage61 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage61_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage61;
                end if;
            when ap_ST_fsm_pp0_stage62 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage62_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage63;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage62;
                end if;
            when ap_ST_fsm_pp0_stage63 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage63_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage64;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage63;
                end if;
            when ap_ST_fsm_pp0_stage64 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage64_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage65;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage64;
                end if;
            when ap_ST_fsm_pp0_stage65 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage65_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage66;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage65;
                end if;
            when ap_ST_fsm_pp0_stage66 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage66_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage67;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage66;
                end if;
            when ap_ST_fsm_pp0_stage67 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage67_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage68;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage67;
                end if;
            when ap_ST_fsm_pp0_stage68 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage68_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage69;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage68;
                end if;
            when ap_ST_fsm_pp0_stage69 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage69_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage70;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage69;
                end if;
            when ap_ST_fsm_pp0_stage70 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage70_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage71;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage70;
                end if;
            when ap_ST_fsm_pp0_stage71 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage71_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage72;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage71;
                end if;
            when ap_ST_fsm_pp0_stage72 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage72_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage73;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage72;
                end if;
            when ap_ST_fsm_pp0_stage73 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage73_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage73;
                end if;
            when ap_ST_fsm_pp0_stage74 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage74_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage75;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage74;
                end if;
            when ap_ST_fsm_pp0_stage75 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage75_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage76;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage75;
                end if;
            when ap_ST_fsm_pp0_stage76 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage76_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage77;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage76;
                end if;
            when ap_ST_fsm_pp0_stage77 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage77_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage78;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage77;
                end if;
            when ap_ST_fsm_pp0_stage78 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage78_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage79;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage78;
                end if;
            when ap_ST_fsm_pp0_stage79 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage79_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage80;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage79;
                end if;
            when ap_ST_fsm_pp0_stage80 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage80_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage81;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage80;
                end if;
            when ap_ST_fsm_pp0_stage81 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage81_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage81;
                end if;
            when ap_ST_fsm_pp0_stage82 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage82_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage83;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage82;
                end if;
            when ap_ST_fsm_pp0_stage83 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage83_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage84;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage83;
                end if;
            when ap_ST_fsm_pp0_stage84 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage84_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage84;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln778_fu_237_p2 <= std_logic_vector(unsigned(i_reg_263) + unsigned(ap_const_lv13_2));

    ah1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, ah1_i, grp_encode_fu_138_ah1_o, grp_encode_fu_138_ah1_o_ap_vld, ap_CS_fsm_pp0_stage39, ap_block_pp0_stage39)
    begin
        if (((grp_encode_fu_138_ah1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage39) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ah1_o <= grp_encode_fu_138_ah1_o;
        else 
            ah1_o <= ah1_i;
        end if; 
    end process;

    ah1_o_ap_vld <= grp_encode_fu_138_ah1_o_ap_vld;

    ah2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, ah2_i, grp_encode_fu_138_ah2_o, grp_encode_fu_138_ah2_o_ap_vld, ap_CS_fsm_pp0_stage36, ap_block_pp0_stage36)
    begin
        if (((grp_encode_fu_138_ah2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage36) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage36) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ah2_o <= grp_encode_fu_138_ah2_o;
        else 
            ah2_o <= ah2_i;
        end if; 
    end process;

    ah2_o_ap_vld <= grp_encode_fu_138_ah2_o_ap_vld;

    al1_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage14, al1_i, grp_encode_fu_138_al1_o, grp_encode_fu_138_al1_o_ap_vld, ap_block_pp0_stage14)
    begin
        if (((grp_encode_fu_138_al1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            al1_o <= grp_encode_fu_138_al1_o;
        else 
            al1_o <= al1_i;
        end if; 
    end process;

    al1_o_ap_vld <= grp_encode_fu_138_al1_o_ap_vld;

    al2_o_assign_proc : process(ap_enable_reg_pp0_iter1, al2_i, grp_encode_fu_138_al2_o, grp_encode_fu_138_al2_o_ap_vld, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if (((grp_encode_fu_138_al2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            al2_o <= grp_encode_fu_138_al2_o;
        else 
            al2_o <= al2_i;
        end if; 
    end process;

    al2_o_ap_vld <= grp_encode_fu_138_al2_o_ap_vld;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage27 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage28 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage29 <= ap_CS_fsm(29);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage30 <= ap_CS_fsm(30);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(31);
    ap_CS_fsm_pp0_stage32 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage36 <= ap_CS_fsm(36);
    ap_CS_fsm_pp0_stage39 <= ap_CS_fsm(39);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage83 <= ap_CS_fsm(83);
    ap_CS_fsm_pp0_stage84 <= ap_CS_fsm(84);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage38_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage40_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage41_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage42_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage43_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage44_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage45_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage46_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage47_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage48_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage49_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage50_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage51_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage52_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage53_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage54_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage55_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage56_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage57_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage58_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage59_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage60_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage61_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage62_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage63_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage64_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage65_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage66_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage67_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage68_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage69_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage70_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage71_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage72_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage73_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage74_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage75_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage76_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage77_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage78_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage79_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage80 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage80_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage81 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage81_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage82_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage83 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage83_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage84 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage84_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage84_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_subdone, icmp_ln778_reg_269)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln778_reg_269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage14 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage14;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage84, ap_block_pp0_stage84_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage84) and (ap_const_boolean_0 = ap_block_pp0_stage84_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_4_fu_96, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_i <= i_4_fu_96;
        end if; 
    end process;

    compressed_address0 <= zext_ln780_1_fu_252_p1(12 - 1 downto 0);

    compressed_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            compressed_ce0 <= ap_const_logic_1;
        else 
            compressed_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    compressed_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_encode_fu_138_ap_return),32));

    compressed_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            compressed_we0 <= ap_const_logic_1;
        else 
            compressed_we0 <= ap_const_logic_0;
        end if; 
    end process;

    delay_bph_address0 <= grp_encode_fu_138_delay_bph_address0;
    delay_bph_address1 <= grp_encode_fu_138_delay_bph_address1;
    delay_bph_ce0 <= grp_encode_fu_138_delay_bph_ce0;
    delay_bph_ce1 <= grp_encode_fu_138_delay_bph_ce1;
    delay_bph_d0 <= grp_encode_fu_138_delay_bph_d0;
    delay_bph_d1 <= grp_encode_fu_138_delay_bph_d1;
    delay_bph_we0 <= grp_encode_fu_138_delay_bph_we0;
    delay_bph_we1 <= grp_encode_fu_138_delay_bph_we1;
    delay_bpl_address0 <= grp_encode_fu_138_delay_bpl_address0;
    delay_bpl_address1 <= grp_encode_fu_138_delay_bpl_address1;
    delay_bpl_ce0 <= grp_encode_fu_138_delay_bpl_ce0;
    delay_bpl_ce1 <= grp_encode_fu_138_delay_bpl_ce1;
    delay_bpl_d0 <= grp_encode_fu_138_delay_bpl_d0;
    delay_bpl_d1 <= grp_encode_fu_138_delay_bpl_d1;
    delay_bpl_we0 <= grp_encode_fu_138_delay_bpl_we0;
    delay_bpl_we1 <= grp_encode_fu_138_delay_bpl_we1;
    delay_dhx_address0 <= grp_encode_fu_138_delay_dhx_address0;
    delay_dhx_address1 <= grp_encode_fu_138_delay_dhx_address1;
    delay_dhx_ce0 <= grp_encode_fu_138_delay_dhx_ce0;
    delay_dhx_ce1 <= grp_encode_fu_138_delay_dhx_ce1;
    delay_dhx_d0 <= grp_encode_fu_138_delay_dhx_d0;
    delay_dhx_d1 <= grp_encode_fu_138_delay_dhx_d1;
    delay_dhx_we0 <= grp_encode_fu_138_delay_dhx_we0;
    delay_dhx_we1 <= grp_encode_fu_138_delay_dhx_we1;
    delay_dltx_address0 <= grp_encode_fu_138_delay_dltx_address0;
    delay_dltx_address1 <= grp_encode_fu_138_delay_dltx_address1;
    delay_dltx_ce0 <= grp_encode_fu_138_delay_dltx_ce0;
    delay_dltx_ce1 <= grp_encode_fu_138_delay_dltx_ce1;
    delay_dltx_d0 <= grp_encode_fu_138_delay_dltx_d0;
    delay_dltx_d1 <= grp_encode_fu_138_delay_dltx_d1;
    delay_dltx_we0 <= grp_encode_fu_138_delay_dltx_we0;
    delay_dltx_we1 <= grp_encode_fu_138_delay_dltx_we1;

    deth_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, deth_i, grp_encode_fu_138_deth_o, grp_encode_fu_138_deth_o_ap_vld, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28)
    begin
        if (((grp_encode_fu_138_deth_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage28) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            deth_o <= grp_encode_fu_138_deth_o;
        else 
            deth_o <= deth_i;
        end if; 
    end process;

    deth_o_ap_vld <= grp_encode_fu_138_deth_o_ap_vld;

    detl_o_assign_proc : process(ap_enable_reg_pp0_iter1, detl_i, grp_encode_fu_138_detl_o, grp_encode_fu_138_detl_o_ap_vld, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
        if (((grp_encode_fu_138_detl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            detl_o <= grp_encode_fu_138_detl_o;
        else 
            detl_o <= detl_i;
        end if; 
    end process;

    detl_o_ap_vld <= grp_encode_fu_138_detl_o_ap_vld;
    grp_encode_fu_138_ap_start <= grp_encode_fu_138_ap_start_reg;
    icmp_ln778_fu_206_p2 <= "1" when (unsigned(ap_sig_allocacmp_i) < unsigned(ap_const_lv13_1F40)) else "0";
    il <= grp_encode_fu_138_il;
    il_ap_vld <= grp_encode_fu_138_il_ap_vld;
    input_samples_address0 <= zext_ln780_fu_223_p1(13 - 1 downto 0);
    input_samples_address1 <= zext_ln778_fu_212_p1(13 - 1 downto 0);

    input_samples_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_samples_ce0 <= ap_const_logic_1;
        else 
            input_samples_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_samples_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_samples_ce1 <= ap_const_logic_1;
        else 
            input_samples_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    nbh_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, nbh_i, grp_encode_fu_138_nbh_o, grp_encode_fu_138_nbh_o_ap_vld, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25)
    begin
        if (((grp_encode_fu_138_nbh_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            nbh_o <= grp_encode_fu_138_nbh_o;
        else 
            nbh_o <= nbh_i;
        end if; 
    end process;

    nbh_o_ap_vld <= grp_encode_fu_138_nbh_o_ap_vld;

    nbl_o_assign_proc : process(ap_enable_reg_pp0_iter1, nbl_i, ap_CS_fsm_pp0_stage1, grp_encode_fu_138_nbl_o, grp_encode_fu_138_nbl_o_ap_vld, ap_block_pp0_stage1)
    begin
        if (((grp_encode_fu_138_nbl_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            nbl_o <= grp_encode_fu_138_nbl_o;
        else 
            nbl_o <= nbl_i;
        end if; 
    end process;

    nbl_o_ap_vld <= grp_encode_fu_138_nbl_o_ap_vld;
    or_ln780_fu_217_p2 <= (ap_sig_allocacmp_i or ap_const_lv13_1);

    ph1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, ph1_i, grp_encode_fu_138_ph1_o, grp_encode_fu_138_ph1_o_ap_vld, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28)
    begin
        if (((grp_encode_fu_138_ph1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage28) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ph1_o <= grp_encode_fu_138_ph1_o;
        else 
            ph1_o <= ph1_i;
        end if; 
    end process;

    ph1_o_ap_vld <= grp_encode_fu_138_ph1_o_ap_vld;

    ph2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, ph2_i, grp_encode_fu_138_ph2_o, grp_encode_fu_138_ph2_o_ap_vld, ap_CS_fsm_pp0_stage28, ap_block_pp0_stage28)
    begin
        if (((grp_encode_fu_138_ph2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage28) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage28) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ph2_o <= grp_encode_fu_138_ph2_o;
        else 
            ph2_o <= ph2_i;
        end if; 
    end process;

    ph2_o_ap_vld <= grp_encode_fu_138_ph2_o_ap_vld;

    plt1_o_assign_proc : process(ap_enable_reg_pp0_iter1, plt1_i, grp_encode_fu_138_plt1_o, grp_encode_fu_138_plt1_o_ap_vld, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if (((grp_encode_fu_138_plt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            plt1_o <= grp_encode_fu_138_plt1_o;
        else 
            plt1_o <= plt1_i;
        end if; 
    end process;

    plt1_o_ap_vld <= grp_encode_fu_138_plt1_o_ap_vld;

    plt2_o_assign_proc : process(ap_enable_reg_pp0_iter1, plt2_i, grp_encode_fu_138_plt2_o, grp_encode_fu_138_plt2_o_ap_vld, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if (((grp_encode_fu_138_plt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            plt2_o <= grp_encode_fu_138_plt2_o;
        else 
            plt2_o <= plt2_i;
        end if; 
    end process;

    plt2_o_ap_vld <= grp_encode_fu_138_plt2_o_ap_vld;

    rh1_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, rh1_i, grp_encode_fu_138_rh1_o, grp_encode_fu_138_rh1_o_ap_vld, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27)
    begin
        if (((grp_encode_fu_138_rh1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage27) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rh1_o <= grp_encode_fu_138_rh1_o;
        else 
            rh1_o <= rh1_i;
        end if; 
    end process;

    rh1_o_ap_vld <= grp_encode_fu_138_rh1_o_ap_vld;

    rh2_o_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln778_reg_269, rh2_i, grp_encode_fu_138_rh2_o, grp_encode_fu_138_rh2_o_ap_vld, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((grp_encode_fu_138_rh2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rh2_o <= grp_encode_fu_138_rh2_o;
        else 
            rh2_o <= rh2_i;
        end if; 
    end process;

    rh2_o_ap_vld <= grp_encode_fu_138_rh2_o_ap_vld;

    rlt1_o_assign_proc : process(ap_enable_reg_pp0_iter1, rlt1_i, grp_encode_fu_138_rlt1_o, grp_encode_fu_138_rlt1_o_ap_vld, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if (((grp_encode_fu_138_rlt1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            rlt1_o <= grp_encode_fu_138_rlt1_o;
        else 
            rlt1_o <= rlt1_i;
        end if; 
    end process;

    rlt1_o_ap_vld <= grp_encode_fu_138_rlt1_o_ap_vld;

    rlt2_o_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage14, icmp_ln778_reg_269, rlt2_i, grp_encode_fu_138_rlt2_o, grp_encode_fu_138_rlt2_o_ap_vld, ap_block_pp0_stage14)
    begin
        if (((grp_encode_fu_138_rlt2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (icmp_ln778_reg_269 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            rlt2_o <= grp_encode_fu_138_rlt2_o;
        else 
            rlt2_o <= rlt2_i;
        end if; 
    end process;

    rlt2_o_ap_vld <= grp_encode_fu_138_rlt2_o_ap_vld;
    tqmf_address0 <= grp_encode_fu_138_tqmf_address0;
    tqmf_address1 <= grp_encode_fu_138_tqmf_address1;
    tqmf_ce0 <= grp_encode_fu_138_tqmf_ce0;
    tqmf_ce1 <= grp_encode_fu_138_tqmf_ce1;
    tqmf_d0 <= grp_encode_fu_138_tqmf_d0;
    tqmf_d1 <= grp_encode_fu_138_tqmf_d1;
    tqmf_we0 <= grp_encode_fu_138_tqmf_we0;
    tqmf_we1 <= grp_encode_fu_138_tqmf_we1;
    zext_ln778_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln780_1_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_293),64));
    zext_ln780_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln780_fu_217_p2),64));
end behav;
