// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
// 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689
`timescale 1ns / 1ps

module fn1_icmp_71ns_71ns_1_2_1
#(parameter
    ID                           = 0,
    NUM_STAGE                    = 0,
    din0_WIDTH                   = 71,
    din1_WIDTH                   = 71,
    dout_WIDTH                   = 1,
    OP_CODE                      = 4'd2
)(
    input  wire                  clk,
    input  wire                  reset,
    input  wire                  ce,
 
    input  wire [din0_WIDTH-1:0] din0,
    input  wire [din1_WIDTH-1:0] din1,
    output wire [dout_WIDTH-1:0] dout
);
//------------------------Parameter----------------------
   
    localparam [4:0]
        // ICMP opcode
        OP_EQ  = 4'd0,
        OP_NE  = 4'd1,
        OP_UGT = 4'd2,
        OP_UGE = 4'd3,
        OP_ULT = 4'd4,
        OP_ULE = 4'd5,
        OP_SGT = 4'd6,
        OP_SGE = 4'd7,
        OP_SLT = 4'd8,
        OP_SLE = 4'd9;
    localparam 
        S_WIDTH = max(din0_WIDTH, din1_WIDTH) + 1;

//------------------------Task and function--------------
    function integer max;
        input integer x;
        input integer y;
    begin
        max = (x > y) ? x : y;
    end
    endfunction
//---------------Local signal-------------------
    wire [S_WIDTH-1 : 0] a_tmp;
    wire [S_WIDTH-1 : 0] b_tmp;
    wire [S_WIDTH-1 : 0] a;
    wire [S_WIDTH-1 : 0] b;
    wire [S_WIDTH-1 : 0] s;


    generate 
        if (OP_CODE == OP_SGT || OP_CODE == OP_SGE || OP_CODE == OP_SLT || OP_CODE == OP_SLE) begin
            assign a_tmp = $signed(din0);
            assign b_tmp = $signed(din1);
        end else begin
            assign a_tmp = $unsigned(din0);
            assign b_tmp = $unsigned(din1);
        end
    endgenerate

    generate 
        if (OP_CODE == OP_ULE || OP_CODE == OP_SLE || OP_CODE == OP_UGT || OP_CODE == OP_SGT) begin
            assign a = b_tmp;
            assign b = a_tmp;
        end else begin
            assign a = a_tmp;
            assign b = b_tmp;
        end
    endgenerate

    generate
        if (OP_CODE == OP_EQ) begin
            assign dout = (s == 0) ? 1'b1 : 1'b0;
        end
        else if (OP_CODE == OP_NE) begin
            assign dout = (s == 0) ? 1'b0 : 1'b1;
        end
        else if (OP_CODE == OP_UGT || OP_CODE == OP_SGT) begin
            assign dout = (s[S_WIDTH-1] == 1'b1) ? 1'b1 : 1'b0;
        end
        else if (OP_CODE == OP_UGE || OP_CODE == OP_SGE) begin
            assign dout = (s[S_WIDTH-1] == 1'b0) ? 1'b1 : 1'b0;
        end
        else if (OP_CODE == OP_ULT || OP_CODE == OP_SLT) begin
            assign dout = (s[S_WIDTH-1] == 1'b1) ? 1'b1 : 1'b0;
        end
        else if (OP_CODE == OP_ULE || OP_CODE == OP_SLE) begin
            assign dout = (s[S_WIDTH-1] == 1'b0) ? 1'b1 : 1'b0;
        end
    endgenerate

//---------------Instantiation------------------
    fn1_icmp_71ns_71ns_1_2_1_sub base(
        .clk        (clk),
        .reset      (reset),
        .ce         (ce),
        .din0       (a),
        .din1       (b),
        .dout       (s)
    );

endmodule