-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
-- 67d7842dbbe25473c3c32b93c0da8047785f30d78e8a024de1b57352245f9689

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.NUMERIC_STD.all;

entity fn1_icmp_71ns_71ns_1_2_1 is
    generic (
        ID         : INTEGER := 0;
        NUM_STAGE  : INTEGER := 0;
        din0_WIDTH : INTEGER := 71;
        din1_WIDTH : INTEGER := 71;
        dout_WIDTH : INTEGER := 1;
        OP_CODE    : INTEGER := 2);
    port (
        clk        : IN  STD_LOGIC;
        reset      : IN  STD_LOGIC;
        ce         : IN  STD_LOGIC;
        din0       : IN  STD_LOGIC_VECTOR(din0_WIDTH - 1 downto 0);
        din1       : IN  STD_LOGIC_VECTOR(din1_WIDTH - 1 downto 0);
        dout       : OUT STD_LOGIC_VECTOR(dout_WIDTH - 1 downto 0));
end entity fn1_icmp_71ns_71ns_1_2_1;

architecture behav of fn1_icmp_71ns_71ns_1_2_1 is
    ------------------------Task and function--------------
    function max (x : INTEGER; 
                  y : INTEGER) return INTEGER is
        variable r  : INTEGER;
    begin
        r := y;
        if (x > y) then
            r := x;
        end if;
        return r;
    end function max;

    ------------------------Parameter----------------------
    -- ICMP OPCODE
    constant OP_EQ   : INTEGER := 0;
    constant OP_NE   : INTEGER := 1;
    constant OP_UGT  : INTEGER := 2;
    constant OP_UGE  : INTEGER := 3;
    constant OP_ULT  : INTEGER := 4;
    constant OP_ULE  : INTEGER := 5;
    constant OP_SGT  : INTEGER := 6;
    constant OP_SGE  : INTEGER := 7;
    constant OP_SLT  : INTEGER := 8;
    constant OP_SLE  : INTEGER := 9;

    constant S_WIDTH : INTEGER := max(din0_WIDTH, din1_WIDTH) + 1;
    constant CONST_1 : STD_LOGIC_VECTOR(dout_WIDTH-1 downto 0) := STD_LOGIC_VECTOR(TO_UNSIGNED(1, dout_WIDTH));
    constant CONST_0 : STD_LOGIC_VECTOR(dout_WIDTH-1 downto 0) := STD_LOGIC_VECTOR(TO_UNSIGNED(0, dout_WIDTH));
    ------------------------Local signal-------------------
    signal a_tmp     : STD_LOGIC_VECTOR(S_WIDTH-1 downto 0);
    signal b_tmp     : STD_LOGIC_VECTOR(S_WIDTH-1 downto 0);
    signal a         : STD_LOGIC_VECTOR(S_WIDTH-1 downto 0);
    signal b         : STD_LOGIC_VECTOR(S_WIDTH-1 downto 0);
    signal s         : STD_LOGIC_VECTOR(S_WIDTH-1 downto 0);

    component fn1_icmp_71ns_71ns_1_2_1_sub is 
    port (
        clk        : IN  STD_LOGIC;
        reset      : IN  STD_LOGIC;
        ce         : IN  STD_LOGIC;
        din0       : IN  STD_LOGIC_VECTOR;
        din1       : IN  STD_LOGIC_VECTOR;
        dout       : OUT STD_LOGIC_VECTOR);
    end component;

begin

    signed_ext_gen:if ((OP_CODE = OP_SGT) or (OP_CODE = OP_SGE) or (OP_CODE = OP_SLT) or (OP_CODE = OP_SLE)) generate
    begin
        a_tmp <= STD_LOGIC_VECTOR(RESIZE(SIGNED(din0), S_WIDTH));
        b_tmp <= STD_LOGIC_VECTOR(RESIZE(SIGNED(din1), S_WIDTH));
    end generate signed_ext_gen;

    unsigned_ext_gen:if ((OP_CODE /= OP_SGT) and (OP_CODE /= OP_SGE) and (OP_CODE /= OP_SLT) and (OP_CODE /= OP_SLE)) generate
    begin
        a_tmp <= STD_LOGIC_VECTOR(RESIZE(UNSIGNED(din0), S_WIDTH));
        b_tmp <= STD_LOGIC_VECTOR(RESIZE(UNSIGNED(din1), S_WIDTH));
    end generate unsigned_ext_gen;

    swap_order_gen : if ((OP_CODE = OP_ULE) or (OP_CODE = OP_SLE) or (OP_CODE = OP_UGT) or (OP_CODE = OP_SGT)) generate
    begin
        a <= b_tmp;
        b <= a_tmp;
    end generate swap_order_gen;
    
    keep_order_gen : if ((OP_CODE /= OP_ULE) and (OP_CODE /= OP_SLE) and (OP_CODE /= OP_UGT) and (OP_CODE /= OP_SGT)) generate
    begin
        a <= a_tmp;
        b <= b_tmp;
    end generate keep_order_gen;

    EQ_gen : if (OP_CODE = OP_EQ) generate
    begin
        dout <= CONST_1 when (UNSIGNED(s) = 0) else CONST_0;
    end generate EQ_gen;

    NE_gen : if (OP_CODE = OP_NE) generate
    begin
        dout <= CONST_0 when (UNSIGNED(s) = 0) else CONST_1;
    end generate NE_gen;

    GT_gen : if ((OP_CODE = OP_UGT) or (OP_CODE = OP_SGT)) generate
    begin
        dout <= CONST_1 when (s(S_WIDTH-1) = '1') else CONST_0;
    end generate GT_gen;

    GE_gen : if ((OP_CODE = OP_UGE) or (OP_CODE = OP_SGE)) generate
    begin
        dout <= CONST_1 when (s(S_WIDTH-1) = '0') else CONST_0;
    end generate GE_gen;

    LT_gen : if ((OP_CODE = OP_ULT) or (OP_CODE = OP_SLT)) generate
    begin
        dout <= CONST_1 when (s(S_WIDTH-1) = '1') else CONST_0;
    end generate LT_gen;

    LE_gen : if ((OP_CODE = OP_ULE) or (OP_CODE = OP_SLE)) generate
    begin
        dout <= CONST_1 when (s(S_WIDTH-1) = '0') else CONST_0;
    end generate LE_gen;

  ---------------Instantiation------------------    
  base : component fn1_icmp_71ns_71ns_1_2_1_sub
    port map (
        clk     => clk,
        reset   => reset,
        ce      => ce,
        din0    => a,
        din1    => b,
        dout    => s);
end architecture;