// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_fn_top_fn,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.480000,HLS_SYN_LAT=20403,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=83,HLS_SYN_LUT=272,HLS_VERSION=2023_2}" *)

module top_fn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_arr_address0,
        in_arr_ce0,
        in_arr_q0,
        out_arr_address0,
        out_arr_ce0,
        out_arr_we0,
        out_arr_d0,
        out_arr_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] in_arr_address0;
output   in_arr_ce0;
input  [31:0] in_arr_q0;
output  [6:0] out_arr_address0;
output   out_arr_ce0;
output   out_arr_we0;
output  [31:0] out_arr_d0;
input  [31:0] out_arr_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_arr_ce0;
reg[6:0] out_arr_address0;
reg out_arr_ce0;
reg out_arr_we0;
reg[31:0] out_arr_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] add_ln20_fu_116_p2;
reg   [6:0] add_ln20_reg_164;
wire    ap_CS_fsm_state3;
reg   [6:0] out_arr_addr_reg_169;
wire    ap_CS_fsm_state4;
wire   [6:0] add_ln24_fu_133_p2;
reg   [6:0] add_ln24_reg_182;
wire    ap_CS_fsm_state5;
wire   [31:0] add_ln26_fu_148_p2;
wire    ap_CS_fsm_state6;
wire    grp_init_arr_fu_96_ap_start;
wire    grp_init_arr_fu_96_ap_done;
wire    grp_init_arr_fu_96_ap_idle;
wire    grp_init_arr_fu_96_ap_ready;
wire   [6:0] grp_init_arr_fu_96_out_arr_address0;
wire    grp_init_arr_fu_96_out_arr_ce0;
wire    grp_init_arr_fu_96_out_arr_we0;
wire   [31:0] grp_init_arr_fu_96_out_arr_d0;
reg   [6:0] j_reg_74;
reg   [31:0] empty_reg_85;
reg    grp_init_arr_fu_96_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln20_fu_122_p1;
wire   [0:0] icmp_ln20_fu_110_p2;
wire   [63:0] zext_ln24_fu_139_p1;
wire   [0:0] icmp_ln24_fu_127_p2;
reg   [6:0] i_fu_44;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_init_arr_fu_96_ap_start_reg = 1'b0;
#0 i_fu_44 = 7'd0;
end

top_fn_init_arr grp_init_arr_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_init_arr_fu_96_ap_start),
    .ap_done(grp_init_arr_fu_96_ap_done),
    .ap_idle(grp_init_arr_fu_96_ap_idle),
    .ap_ready(grp_init_arr_fu_96_ap_ready),
    .out_arr_address0(grp_init_arr_fu_96_out_arr_address0),
    .out_arr_ce0(grp_init_arr_fu_96_out_arr_ce0),
    .out_arr_we0(grp_init_arr_fu_96_out_arr_we0),
    .out_arr_d0(grp_init_arr_fu_96_out_arr_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_init_arr_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_init_arr_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_init_arr_fu_96_ap_ready == 1'b1)) begin
            grp_init_arr_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_reg_85 <= out_arr_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        empty_reg_85 <= add_ln26_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_44 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln24_fu_127_p2 == 1'd1))) begin
        i_fu_44 <= add_ln20_reg_164;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_74 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_74 <= add_ln24_reg_182;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln20_reg_164 <= add_ln20_fu_116_p2;
        out_arr_addr_reg_169 <= zext_ln20_fu_122_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln24_reg_182 <= add_ln24_fu_133_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_init_arr_fu_96_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln20_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_arr_ce0 = 1'b1;
    end else begin
        in_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_arr_address0 = out_arr_addr_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_arr_address0 = zext_ln20_fu_122_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_arr_address0 = grp_init_arr_fu_96_out_arr_address0;
    end else begin
        out_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        out_arr_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_arr_ce0 = grp_init_arr_fu_96_out_arr_ce0;
    end else begin
        out_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_arr_d0 = empty_reg_85;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_arr_d0 = grp_init_arr_fu_96_out_arr_d0;
    end else begin
        out_arr_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln24_fu_127_p2 == 1'd1))) begin
        out_arr_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_arr_we0 = grp_init_arr_fu_96_out_arr_we0;
    end else begin
        out_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_init_arr_fu_96_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln20_fu_110_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln24_fu_127_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_116_p2 = (i_fu_44 + 7'd1);

assign add_ln24_fu_133_p2 = (j_reg_74 + 7'd1);

assign add_ln26_fu_148_p2 = (in_arr_q0 + empty_reg_85);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_init_arr_fu_96_ap_start = grp_init_arr_fu_96_ap_start_reg;

assign icmp_ln20_fu_110_p2 = ((i_fu_44 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_127_p2 = ((j_reg_74 == 7'd100) ? 1'b1 : 1'b0);

assign in_arr_address0 = zext_ln24_fu_139_p1;

assign zext_ln20_fu_122_p1 = i_fu_44;

assign zext_ln24_fu_139_p1 = j_reg_74;

endmodule //top_fn
