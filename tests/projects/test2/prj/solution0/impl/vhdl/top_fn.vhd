-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_fn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_arr_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    in_arr_ce0 : OUT STD_LOGIC;
    in_arr_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_arr_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    out_arr_ce0 : OUT STD_LOGIC;
    out_arr_we0 : OUT STD_LOGIC;
    out_arr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_arr_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_fn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_fn_top_fn,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu50-fsvh2104-2-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.480000,HLS_SYN_LAT=20403,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=83,HLS_SYN_LUT=272,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln20_fu_116_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_reg_164 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal out_arr_addr_reg_169 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln24_fu_133_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_reg_182 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln26_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_init_arr_fu_96_ap_start : STD_LOGIC;
    signal grp_init_arr_fu_96_ap_done : STD_LOGIC;
    signal grp_init_arr_fu_96_ap_idle : STD_LOGIC;
    signal grp_init_arr_fu_96_ap_ready : STD_LOGIC;
    signal grp_init_arr_fu_96_out_arr_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_init_arr_fu_96_out_arr_ce0 : STD_LOGIC;
    signal grp_init_arr_fu_96_out_arr_we0 : STD_LOGIC;
    signal grp_init_arr_fu_96_out_arr_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_74 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_reg_85 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_init_arr_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln20_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln20_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_44 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_fn_init_arr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_arr_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        out_arr_ce0 : OUT STD_LOGIC;
        out_arr_we0 : OUT STD_LOGIC;
        out_arr_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_init_arr_fu_96 : component top_fn_init_arr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_init_arr_fu_96_ap_start,
        ap_done => grp_init_arr_fu_96_ap_done,
        ap_idle => grp_init_arr_fu_96_ap_idle,
        ap_ready => grp_init_arr_fu_96_ap_ready,
        out_arr_address0 => grp_init_arr_fu_96_out_arr_address0,
        out_arr_ce0 => grp_init_arr_fu_96_out_arr_ce0,
        out_arr_we0 => grp_init_arr_fu_96_out_arr_we0,
        out_arr_d0 => grp_init_arr_fu_96_out_arr_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_init_arr_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_init_arr_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_init_arr_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_init_arr_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_init_arr_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    empty_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                empty_reg_85 <= out_arr_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                empty_reg_85 <= add_ln26_fu_148_p2;
            end if; 
        end if;
    end process;

    i_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_44 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_127_p2 = ap_const_lv1_1))) then 
                i_fu_44 <= add_ln20_reg_164;
            end if; 
        end if;
    end process;

    j_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_74 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_74 <= add_ln24_reg_182;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln20_reg_164 <= add_ln20_fu_116_p2;
                out_arr_addr_reg_169 <= zext_ln20_fu_122_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln24_reg_182 <= add_ln24_fu_133_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, grp_init_arr_fu_96_ap_done, ap_CS_fsm_state2, icmp_ln20_fu_110_p2, icmp_ln24_fu_127_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_init_arr_fu_96_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln20_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_127_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln20_fu_116_p2 <= std_logic_vector(unsigned(i_fu_44) + unsigned(ap_const_lv7_1));
    add_ln24_fu_133_p2 <= std_logic_vector(unsigned(j_reg_74) + unsigned(ap_const_lv7_1));
    add_ln26_fu_148_p2 <= std_logic_vector(unsigned(in_arr_q0) + unsigned(empty_reg_85));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_init_arr_fu_96_ap_done)
    begin
        if ((grp_init_arr_fu_96_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln20_fu_110_p2)
    begin
        if (((icmp_ln20_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln20_fu_110_p2)
    begin
        if (((icmp_ln20_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_init_arr_fu_96_ap_start <= grp_init_arr_fu_96_ap_start_reg;
    icmp_ln20_fu_110_p2 <= "1" when (i_fu_44 = ap_const_lv7_64) else "0";
    icmp_ln24_fu_127_p2 <= "1" when (j_reg_74 = ap_const_lv7_64) else "0";
    in_arr_address0 <= zext_ln24_fu_139_p1(7 - 1 downto 0);

    in_arr_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            in_arr_ce0 <= ap_const_logic_1;
        else 
            in_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_arr_address0_assign_proc : process(ap_CS_fsm_state3, out_arr_addr_reg_169, ap_CS_fsm_state5, grp_init_arr_fu_96_out_arr_address0, ap_CS_fsm_state2, zext_ln20_fu_122_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_arr_address0 <= out_arr_addr_reg_169;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_arr_address0 <= zext_ln20_fu_122_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_arr_address0 <= grp_init_arr_fu_96_out_arr_address0;
        else 
            out_arr_address0 <= "XXXXXXX";
        end if; 
    end process;


    out_arr_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, grp_init_arr_fu_96_out_arr_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_arr_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_arr_ce0 <= grp_init_arr_fu_96_out_arr_ce0;
        else 
            out_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_arr_d0_assign_proc : process(ap_CS_fsm_state5, grp_init_arr_fu_96_out_arr_d0, empty_reg_85, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            out_arr_d0 <= empty_reg_85;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_arr_d0 <= grp_init_arr_fu_96_out_arr_d0;
        else 
            out_arr_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_arr_we0_assign_proc : process(ap_CS_fsm_state5, grp_init_arr_fu_96_out_arr_we0, ap_CS_fsm_state2, icmp_ln24_fu_127_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_127_p2 = ap_const_lv1_1))) then 
            out_arr_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_arr_we0 <= grp_init_arr_fu_96_out_arr_we0;
        else 
            out_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln20_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_44),64));
    zext_ln24_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_74),64));
end behav;
